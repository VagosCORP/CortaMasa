

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Nov 06 17:30:14 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   136                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   137                           	psect	text117,global,reloc=2,class=CODE,delta=1
   138                           	psect	text118,global,reloc=2,class=CODE,delta=1
   139                           	psect	text119,global,reloc=2,class=CODE,delta=1
   140                           	psect	text120,global,reloc=2,class=CODE,delta=1
   141                           	psect	text121,global,reloc=2,class=CODE,delta=1
   142                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   143                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   144                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   145  0000                     
   146                           	psect	idataCOMRAM
   147  006C53                     __pidataCOMRAM:
   148                           	opt stack 0
   149                           
   150                           ;initializer for _timeDOWN
   151  006C53  03E8               	dw	1000
   152  006C55  0000               	dw	0
   153                           
   154                           ;initializer for _pi
   155  006C57  10                 	db	16
   156  006C58  49                 	db	73
   157  006C59  40                 	db	64
   158                           
   159                           ;initializer for _tempkgXcorte
   160  006C5A  CD                 	db	205
   161  006C5B  CC                 	db	204
   162  006C5C  3D                 	db	61
   163                           
   164                           ;initializer for _timsXcorte
   165  006C5D  40                 	db	64
   166  006C5E  1C                 	db	28
   167  006C5F  46                 	db	70
   168                           
   169                           ;initializer for _bladeIsUP
   170  006C60  02                 	db	2
   171                           
   172                           	psect	idataBANK0
   173  006C3E                     __pidataBANK0:
   174                           	opt stack 0
   175                           
   176                           ;initializer for lcd_init@F7567
   177  006C3E  28                 	db	40
   178  006C3F  0C                 	db	12
   179  006C40  01                 	db	1
   180  006C41  06                 	db	6
   181                           
   182                           ;initializer for _diamTubo
   183  006C42  00                 	db	0
   184  006C43  A0                 	db	160
   185  006C44  41                 	db	65
   186                           
   187                           ;initializer for _kgXcorte
   188  006C45  00                 	db	0
   189  006C46  80                 	db	128
   190  006C47  3F                 	db	63
   191                           
   192                           ;initializer for _temptiXcorte
   193  006C48  00                 	db	0
   194  006C49  20                 	db	32
   195  006C4A  41                 	db	65
   196                           
   197                           ;initializer for _tiXcorte
   198  006C4B  00                 	db	0
   199  006C4C  20                 	db	32
   200  006C4D  41                 	db	65
   201                           
   202                           ;initializer for _velocidadMasa
   203  006C4E  CD                 	db	205
   204  006C4F  4C                 	db	76
   205  006C50  3E                 	db	62
   206                           
   207                           ;initializer for _numCortes
   208  006C51  0005               	dw	5
   209                           
   210                           	psect	idataBANK1
   211  006B1C                     __pidataBANK1:
   212                           	opt stack 0
   213                           
   214                           ;initializer for _exp10
   215  006B1C  86A0               	dw	34464
   216  006B1E  0001               	dw	1
   217  006B20  2710               	dw	10000
   218  006B22  0000               	dw	0
   219  006B24  03E8               	dw	1000
   220  006B26  0000               	dw	0
   221  006B28  0064               	dw	100
   222  006B2A  0000               	dw	0
   223  006B2C  000A               	dw	10
   224  006B2E  0000               	dw	0
   225  006B30  0001               	dw	1
   226  006B32  0000               	dw	0
   227                           
   228                           ;initializer for _tempVelocidadMasa3
   229  006B34  CD                 	db	205
   230  006B35  4C                 	db	76
   231  006B36  3E                 	db	62
   232                           
   233                           ;initializer for _tempNumCortes
   234  006B37  0001               	dw	1
   235                           
   236                           ;initializer for _chanValSection
   237  006B39  05                 	db	5
   238                           
   239                           ;initializer for _flech
   240  006B3A  7E                 	db	126
   241                           
   242                           ;initializer for _lastSttDOWN
   243  006B3B  01                 	db	1
   244                           
   245                           ;initializer for _lastSttENTER
   246  006B3C  01                 	db	1
   247                           
   248                           ;initializer for _lastSttRETRO
   249  006B3D  01                 	db	1
   250                           
   251                           ;initializer for _lastSttUP
   252  006B3E  01                 	db	1
   253                           
   254                           ;initializer for _tempVelocidadMasa1
   255  006B3F  CD                 	db	205
   256  006B40  4C                 	db	76
   257  006B41  3E                 	db	62
   258                           
   259                           ;initializer for _tempVelocidadMasa2
   260  006B42  CD                 	db	205
   261  006B43  4C                 	db	76
   262  006B44  3E                 	db	62
   263                           
   264                           	psect	mediumconst
   265  007D34                     __pmediumconst:
   266                           	opt stack 0
   267  007D34  00                 	db	0
   268  007D35                     _dpowers:
   269                           	opt stack 0
   270  007D35  0001               	dw	1
   271  007D37  0000               	dw	0
   272  007D39  000A               	dw	10
   273  007D3B  0000               	dw	0
   274  007D3D  0064               	dw	100
   275  007D3F  0000               	dw	0
   276  007D41  03E8               	dw	1000
   277  007D43  0000               	dw	0
   278  007D45  2710               	dw	10000
   279  007D47  0000               	dw	0
   280  007D49  86A0               	dw	34464
   281  007D4B  0001               	dw	1
   282  007D4D  4240               	dw	16960
   283  007D4F  000F               	dw	15
   284  007D51  9680               	dw	38528
   285  007D53  0098               	dw	152
   286  007D55  E100               	dw	57600
   287  007D57  05F5               	dw	1525
   288  007D59  CA00               	dw	51712
   289  007D5B  3B9A               	dw	15258
   290  007D5D                     __end_of_dpowers:
   291                           	opt stack 0
   292  007D5D                     __npowers_:
   293                           	opt stack 0
   294  007D5D  00                 	db	0
   295  007D5E  80                 	db	128
   296  007D5F  3F                 	db	63
   297  007D60  CD                 	db	205
   298  007D61  CC                 	db	204
   299  007D62  3D                 	db	61
   300  007D63  D7                 	db	215
   301  007D64  23                 	db	35
   302  007D65  3C                 	db	60
   303  007D66  12                 	db	18
   304  007D67  83                 	db	131
   305  007D68  3A                 	db	58
   306  007D69  B7                 	db	183
   307  007D6A  D1                 	db	209
   308  007D6B  38                 	db	56
   309  007D6C  C6                 	db	198
   310  007D6D  27                 	db	39
   311  007D6E  37                 	db	55
   312  007D6F  38                 	db	56
   313  007D70  86                 	db	134
   314  007D71  35                 	db	53
   315  007D72  C0                 	db	192
   316  007D73  D6                 	db	214
   317  007D74  33                 	db	51
   318  007D75  CC                 	db	204
   319  007D76  2B                 	db	43
   320  007D77  32                 	db	50
   321  007D78  70                 	db	112
   322  007D79  89                 	db	137
   323  007D7A  30                 	db	48
   324  007D7B  E7                 	db	231
   325  007D7C  DB                 	db	219
   326  007D7D  2E                 	db	46
   327  007D7E  E5                 	db	229
   328  007D7F  3C                 	db	60
   329  007D80  1E                 	db	30
   330  007D81  42                 	db	66
   331  007D82  A2                 	db	162
   332  007D83  0D                 	db	13
   333  007D84                     __end_of__npowers_:
   334                           	opt stack 0
   335  007D84                     __powers_:
   336                           	opt stack 0
   337  007D84  00                 	db	0
   338  007D85  80                 	db	128
   339  007D86  3F                 	db	63
   340  007D87  00                 	db	0
   341  007D88  20                 	db	32
   342  007D89  41                 	db	65
   343  007D8A  00                 	db	0
   344  007D8B  C8                 	db	200
   345  007D8C  42                 	db	66
   346  007D8D  00                 	db	0
   347  007D8E  7A                 	db	122
   348  007D8F  44                 	db	68
   349  007D90  40                 	db	64
   350  007D91  1C                 	db	28
   351  007D92  46                 	db	70
   352  007D93  50                 	db	80
   353  007D94  C3                 	db	195
   354  007D95  47                 	db	71
   355  007D96  24                 	db	36
   356  007D97  74                 	db	116
   357  007D98  49                 	db	73
   358  007D99  97                 	db	151
   359  007D9A  18                 	db	24
   360  007D9B  4B                 	db	75
   361  007D9C  BC                 	db	188
   362  007D9D  BE                 	db	190
   363  007D9E  4C                 	db	76
   364  007D9F  6B                 	db	107
   365  007DA0  6E                 	db	110
   366  007DA1  4E                 	db	78
   367  007DA2  03                 	db	3
   368  007DA3  15                 	db	21
   369  007DA4  50                 	db	80
   370  007DA5  79                 	db	121
   371  007DA6  AD                 	db	173
   372  007DA7  60                 	db	96
   373  007DA8  F3                 	db	243
   374  007DA9  49                 	db	73
   375  007DAA  71                 	db	113
   376  007DAB                     __end_of__powers_:
   377                           	opt stack 0
   378  0000                     _ANSELAbits	set	3896
   379  0000                     _ANSELCbits	set	3898
   380  0000                     _CCPTMRS0bits	set	3913
   381  0000                     _PR4	set	3922
   382  0000                     _T4CONbits	set	3921
   383  0000                     _BAUDCON1bits	set	4024
   384  0000                     _CCP2CONbits	set	3942
   385  0000                     _CCPR2L	set	3943
   386  0000                     _ECCP2ASbits	set	3940
   387  0000                     _EEADR	set	4009
   388  0000                     _EECON1bits	set	4006
   389  0000                     _EECON2	set	4007
   390  0000                     _EEDATA	set	4008
   391  0000                     _INTCONbits	set	4082
   392  0000                     _IPR1bits	set	3999
   393  0000                     _IPR5bits	set	3967
   394  0000                     _LATBbits	set	3978
   395  0000                     _LATCbits	set	3979
   396  0000                     _OSCCON2bits	set	4050
   397  0000                     _OSCCONbits	set	4051
   398  0000                     _OSCTUNEbits	set	3995
   399  0000                     _PIE1bits	set	3997
   400  0000                     _PIE5bits	set	3965
   401  0000                     _PIR1bits	set	3998
   402  0000                     _PIR5bits	set	3966
   403  0000                     _PORTAbits	set	3968
   404  0000                     _PORTBbits	set	3969
   405  0000                     _PR2	set	4027
   406  0000                     _PSTR2CONbits	set	3939
   407  0000                     _PWM2CONbits	set	3941
   408  0000                     _RCONbits	set	4048
   409  0000                     _RCREG1	set	4014
   410  0000                     _RCSTA1bits	set	4011
   411  0000                     _SPBRG1	set	4015
   412  0000                     _SPBRGH1	set	4016
   413  0000                     _T2CONbits	set	4026
   414  0000                     _TRISAbits	set	3986
   415  0000                     _TRISBbits	set	3987
   416  0000                     _TRISCbits	set	3988
   417  0000                     _TXREG1	set	4013
   418  0000                     _TXSTA1bits	set	4012
   419  0000                     _WDTCONbits	set	4049
   420  007DAB                     STR_25:
   421  007DAB  20                 	db	32
   422  007DAC  20                 	db	32
   423  007DAD  20                 	db	32
   424  007DAE  20                 	db	32
   425  007DAF  25                 	db	37
   426  007DB0  63                 	db	99	;'c'
   427  007DB1  25                 	db	37
   428  007DB2  75                 	db	117	;'u'
   429  007DB3  25                 	db	37
   430  007DB4  63                 	db	99	;'c'
   431  007DB5  25                 	db	37
   432  007DB6  75                 	db	117	;'u'
   433  007DB7  25                 	db	37
   434  007DB8  63                 	db	99	;'c'
   435  007DB9  25                 	db	37
   436  007DBA  75                 	db	117	;'u'
   437  007DBB  25                 	db	37
   438  007DBC  63                 	db	99	;'c'
   439  007DBD  25                 	db	37
   440  007DBE  75                 	db	117	;'u'
   441  007DBF  20                 	db	32
   442  007DC0  20                 	db	32
   443  007DC1  20                 	db	32
   444  007DC2  20                 	db	32
   445  007DC3  00                 	db	0
   446  007DC4                     STR_34:
   447  007DC4  20                 	db	32
   448  007DC5  20                 	db	32
   449  007DC6  20                 	db	32
   450  007DC7  25                 	db	37
   451  007DC8  63                 	db	99	;'c'
   452  007DC9  53                 	db	83	;'S'
   453  007DCA  49                 	db	73	;'I'
   454  007DCB  20                 	db	32
   455  007DCC  20                 	db	32
   456  007DCD  20                 	db	32
   457  007DCE  20                 	db	32
   458  007DCF  25                 	db	37
   459  007DD0  63                 	db	99	;'c'
   460  007DD1  4E                 	db	78	;'N'
   461  007DD2  4F                 	db	79	;'O'
   462  007DD3  20                 	db	32
   463  007DD4  20                 	db	32
   464  007DD5  20                 	db	32
   465  007DD6  00                 	db	0
   466  007DD7                     STR_35:
   467  007DD7  50                 	db	80	;'P'
   468  007DD8  65                 	db	101	;'e'
   469  007DD9  73                 	db	115	;'s'
   470  007DDA  6F                 	db	111	;'o'
   471  007DDB  20                 	db	32
   472  007DDC  52                 	db	82	;'R'
   473  007DDD  65                 	db	101	;'e'
   474  007DDE  61                 	db	97	;'a'
   475  007DDF  6C                 	db	108	;'l'
   476  007DE0  3A                 	db	58	;':'
   477  007DE1  20                 	db	32
   478  007DE2  20                 	db	32
   479  007DE3  20                 	db	32
   480  007DE4  20                 	db	32
   481  007DE5  20                 	db	32
   482  007DE6  20                 	db	32
   483  007DE7  0A                 	db	10
   484  007DE8  00                 	db	0
   485  007DE9                     STR_24:
   486  007DE9  43                 	db	67	;'C'
   487  007DEA  6F                 	db	111	;'o'
   488  007DEB  6E                 	db	110	;'n'
   489  007DEC  74                 	db	116	;'t'
   490  007DED  72                 	db	114	;'r'
   491  007DEE  61                 	db	97	;'a'
   492  007DEF  73                 	db	115	;'s'
   493  007DF0  65                 	db	101	;'e'
   494  007DF1  6E                 	db	110	;'n'
   495  007DF2  61                 	db	97	;'a'
   496  007DF3  3A                 	db	58	;':'
   497  007DF4  20                 	db	32
   498  007DF5  20                 	db	32
   499  007DF6  20                 	db	32
   500  007DF7  20                 	db	32
   501  007DF8  20                 	db	32
   502  007DF9  0A                 	db	10
   503  007DFA  00                 	db	0
   504  007DFB                     STR_14:
   505  007DFB  44                 	db	68	;'D'
   506  007DFC  69                 	db	105	;'i'
   507  007DFD  61                 	db	97	;'a'
   508  007DFE  6D                 	db	109	;'m'
   509  007DFF  65                 	db	101	;'e'
   510  007E00  74                 	db	116	;'t'
   511  007E01  72                 	db	114	;'r'
   512  007E02  6F                 	db	111	;'o'
   513  007E03  20                 	db	32
   514  007E04  54                 	db	84	;'T'
   515  007E05  75                 	db	117	;'u'
   516  007E06  62                 	db	98	;'b'
   517  007E07  6F                 	db	111	;'o'
   518  007E08  3A                 	db	58	;':'
   519  007E09  20                 	db	32
   520  007E0A  20                 	db	32
   521  007E0B  0A                 	db	10
   522  007E0C  00                 	db	0
   523  007E0D                     STR_16:
   524  007E0D  56                 	db	86	;'V'
   525  007E0E  65                 	db	101	;'e'
   526  007E0F  6C                 	db	108	;'l'
   527  007E10  6F                 	db	111	;'o'
   528  007E11  63                 	db	99	;'c'
   529  007E12  69                 	db	105	;'i'
   530  007E13  64                 	db	100	;'d'
   531  007E14  61                 	db	97	;'a'
   532  007E15  64                 	db	100	;'d'
   533  007E16  20                 	db	32
   534  007E17  4D                 	db	77	;'M'
   535  007E18  61                 	db	97	;'a'
   536  007E19  73                 	db	115	;'s'
   537  007E1A  61                 	db	97	;'a'
   538  007E1B  3A                 	db	58	;':'
   539  007E1C  20                 	db	32
   540  007E1D  0A                 	db	10
   541  007E1E  00                 	db	0
   542  007E1F                     STR_7:
   543  007E1F  45                 	db	69	;'E'
   544  007E20  73                 	db	115	;'s'
   545  007E21  74                 	db	116	;'t'
   546  007E22  61                 	db	97	;'a'
   547  007E23  64                 	db	100	;'d'
   548  007E24  6F                 	db	111	;'o'
   549  007E25  20                 	db	32
   550  007E26  70                 	db	112	;'p'
   551  007E27  72                 	db	114	;'r'
   552  007E28  6F                 	db	111	;'o'
   553  007E29  63                 	db	99	;'c'
   554  007E2A  65                 	db	101	;'e'
   555  007E2B  73                 	db	115	;'s'
   556  007E2C  6F                 	db	111	;'o'
   557  007E2D  3A                 	db	58	;':'
   558  007E2E  20                 	db	32
   559  007E2F  0A                 	db	10
   560  007E30  00                 	db	0
   561  007E31                     STR_33:
   562  007E31  49                 	db	73	;'I'
   563  007E32  6E                 	db	110	;'n'
   564  007E33  69                 	db	105	;'i'
   565  007E34  74                 	db	116	;'t'
   566  007E35  20                 	db	32
   567  007E36  41                 	db	65	;'A'
   568  007E37  75                 	db	117	;'u'
   569  007E38  74                 	db	116	;'t'
   570  007E39  6F                 	db	111	;'o'
   571  007E3A  43                 	db	67	;'C'
   572  007E3B  61                 	db	97	;'a'
   573  007E3C  6C                 	db	108	;'l'
   574  007E3D  69                 	db	105	;'i'
   575  007E3E  62                 	db	98	;'b'
   576  007E3F  3F                 	db	63	;'?'
   577  007E40  20                 	db	32
   578  007E41  0A                 	db	10
   579  007E42  00                 	db	0
   580  007E43                     STR_32:
   581  007E43  47                 	db	71	;'G'
   582  007E44  75                 	db	117	;'u'
   583  007E45  61                 	db	97	;'a'
   584  007E46  72                 	db	114	;'r'
   585  007E47  64                 	db	100	;'d'
   586  007E48  61                 	db	97	;'a'
   587  007E49  72                 	db	114	;'r'
   588  007E4A  20                 	db	32
   589  007E4B  43                 	db	67	;'C'
   590  007E4C  61                 	db	97	;'a'
   591  007E4D  6D                 	db	109	;'m'
   592  007E4E  62                 	db	98	;'b'
   593  007E4F  69                 	db	105	;'i'
   594  007E50  6F                 	db	111	;'o'
   595  007E51  3F                 	db	63	;'?'
   596  007E52  20                 	db	32
   597  007E53  0A                 	db	10
   598  007E54  00                 	db	0
   599  007E55                     STR_10:
   600  007E55  56                 	db	86	;'V'
   601  007E56  61                 	db	97	;'a'
   602  007E57  6C                 	db	108	;'l'
   603  007E58  6F                 	db	111	;'o'
   604  007E59  72                 	db	114	;'r'
   605  007E5A  20                 	db	32
   606  007E5B  70                 	db	112	;'p'
   607  007E5C  6F                 	db	111	;'o'
   608  007E5D  72                 	db	114	;'r'
   609  007E5E  20                 	db	32
   610  007E5F  43                 	db	67	;'C'
   611  007E60  6F                 	db	111	;'o'
   612  007E61  72                 	db	114	;'r'
   613  007E62  74                 	db	116	;'t'
   614  007E63  65                 	db	101	;'e'
   615  007E64  3A                 	db	58	;':'
   616  007E65  0A                 	db	10
   617  007E66  00                 	db	0
   618  007E67                     STR_27:
   619  007E67  4D                 	db	77	;'M'
   620  007E68  6F                 	db	111	;'o'
   621  007E69  64                 	db	100	;'d'
   622  007E6A  6F                 	db	111	;'o'
   623  007E6B  20                 	db	32
   624  007E6C  43                 	db	67	;'C'
   625  007E6D  6F                 	db	111	;'o'
   626  007E6E  6E                 	db	110	;'n'
   627  007E6F  66                 	db	102	;'f'
   628  007E70  69                 	db	105	;'i'
   629  007E71  67                 	db	103	;'g'
   630  007E72  75                 	db	117	;'u'
   631  007E73  72                 	db	114	;'r'
   632  007E74  61                 	db	97	;'a'
   633  007E75  72                 	db	114	;'r'
   634  007E76  3A                 	db	58	;':'
   635  007E77  0A                 	db	10
   636  007E78  00                 	db	0
   637  007E79                     STR_12:
   638  007E79  43                 	db	67	;'C'
   639  007E7A  61                 	db	97	;'a'
   640  007E7B  6E                 	db	110	;'n'
   641  007E7C  74                 	db	116	;'t'
   642  007E7D  69                 	db	105	;'i'
   643  007E7E  64                 	db	100	;'d'
   644  007E7F  61                 	db	97	;'a'
   645  007E80  64                 	db	100	;'d'
   646  007E81  20                 	db	32
   647  007E82  43                 	db	67	;'C'
   648  007E83  6F                 	db	111	;'o'
   649  007E84  72                 	db	114	;'r'
   650  007E85  74                 	db	116	;'t'
   651  007E86  65                 	db	101	;'e'
   652  007E87  73                 	db	115	;'s'
   653  007E88  3A                 	db	58	;':'
   654  007E89  0A                 	db	10
   655  007E8A  00                 	db	0
   656  007E8B                     STR_30:
   657  007E8B  49                 	db	73	;'I'
   658  007E8C  6E                 	db	110	;'n'
   659  007E8D  69                 	db	105	;'i'
   660  007E8E  63                 	db	99	;'c'
   661  007E8F  69                 	db	105	;'i'
   662  007E90  61                 	db	97	;'a'
   663  007E91  72                 	db	114	;'r'
   664  007E92  20                 	db	32
   665  007E93  50                 	db	80	;'P'
   666  007E94  72                 	db	114	;'r'
   667  007E95  6F                 	db	111	;'o'
   668  007E96  63                 	db	99	;'c'
   669  007E97  65                 	db	101	;'e'
   670  007E98  73                 	db	115	;'s'
   671  007E99  6F                 	db	111	;'o'
   672  007E9A  3F                 	db	63	;'?'
   673  007E9B  0A                 	db	10
   674  007E9C  00                 	db	0
   675  007E9D                     STR_31:
   676  007E9D  44                 	db	68	;'D'
   677  007E9E  65                 	db	101	;'e'
   678  007E9F  74                 	db	116	;'t'
   679  007EA0  65                 	db	101	;'e'
   680  007EA1  6E                 	db	110	;'n'
   681  007EA2  65                 	db	101	;'e'
   682  007EA3  72                 	db	114	;'r'
   683  007EA4  20                 	db	32
   684  007EA5  50                 	db	80	;'P'
   685  007EA6  72                 	db	114	;'r'
   686  007EA7  6F                 	db	111	;'o'
   687  007EA8  63                 	db	99	;'c'
   688  007EA9  65                 	db	101	;'e'
   689  007EAA  73                 	db	115	;'s'
   690  007EAB  6F                 	db	111	;'o'
   691  007EAC  3F                 	db	63	;'?'
   692  007EAD  0A                 	db	10
   693  007EAE  00                 	db	0
   694  007EAF                     STR_37:
   695  007EAF  41                 	db	65	;'A'
   696  007EB0  75                 	db	117	;'u'
   697  007EB1  74                 	db	116	;'t'
   698  007EB2  6F                 	db	111	;'o'
   699  007EB3  63                 	db	99	;'c'
   700  007EB4  61                 	db	97	;'a'
   701  007EB5  6C                 	db	108	;'l'
   702  007EB6  69                 	db	105	;'i'
   703  007EB7  62                 	db	98	;'b'
   704  007EB8  20                 	db	32
   705  007EB9  75                 	db	117	;'u'
   706  007EBA  73                 	db	115	;'s'
   707  007EBB  61                 	db	97	;'a'
   708  007EBC  6E                 	db	110	;'n'
   709  007EBD  64                 	db	100	;'d'
   710  007EBE  6F                 	db	111	;'o'
   711  007EBF  0A                 	db	10
   712  007EC0  00                 	db	0
   713  007EC1                     STR_1:
   714  007EC1  20                 	db	32
   715  007EC2  25                 	db	37
   716  007EC3  75                 	db	117	;'u'
   717  007EC4  25                 	db	37
   718  007EC5  75                 	db	117	;'u'
   719  007EC6  25                 	db	37
   720  007EC7  75                 	db	117	;'u'
   721  007EC8  2E                 	db	46
   722  007EC9  25                 	db	37
   723  007ECA  75                 	db	117	;'u'
   724  007ECB  25                 	db	37
   725  007ECC  75                 	db	117	;'u'
   726  007ECD  25                 	db	37
   727  007ECE  63                 	db	99	;'c'
   728  007ECF  25                 	db	37
   729  007ED0  75                 	db	117	;'u'
   730  007ED1  20                 	db	32
   731  007ED2  00                 	db	0
   732  007ED3                     STR_2:
   733  007ED3  20                 	db	32
   734  007ED4  25                 	db	37
   735  007ED5  75                 	db	117	;'u'
   736  007ED6  25                 	db	37
   737  007ED7  75                 	db	117	;'u'
   738  007ED8  25                 	db	37
   739  007ED9  75                 	db	117	;'u'
   740  007EDA  2E                 	db	46
   741  007EDB  25                 	db	37
   742  007EDC  75                 	db	117	;'u'
   743  007EDD  25                 	db	37
   744  007EDE  63                 	db	99	;'c'
   745  007EDF  25                 	db	37
   746  007EE0  75                 	db	117	;'u'
   747  007EE1  25                 	db	37
   748  007EE2  75                 	db	117	;'u'
   749  007EE3  20                 	db	32
   750  007EE4  00                 	db	0
   751  007EE5                     STR_4:
   752  007EE5  20                 	db	32
   753  007EE6  25                 	db	37
   754  007EE7  75                 	db	117	;'u'
   755  007EE8  25                 	db	37
   756  007EE9  75                 	db	117	;'u'
   757  007EEA  25                 	db	37
   758  007EEB  63                 	db	99	;'c'
   759  007EEC  25                 	db	37
   760  007EED  75                 	db	117	;'u'
   761  007EEE  2E                 	db	46
   762  007EEF  25                 	db	37
   763  007EF0  75                 	db	117	;'u'
   764  007EF1  25                 	db	37
   765  007EF2  75                 	db	117	;'u'
   766  007EF3  25                 	db	37
   767  007EF4  75                 	db	117	;'u'
   768  007EF5  20                 	db	32
   769  007EF6  00                 	db	0
   770  007EF7                     STR_5:
   771  007EF7  20                 	db	32
   772  007EF8  25                 	db	37
   773  007EF9  75                 	db	117	;'u'
   774  007EFA  25                 	db	37
   775  007EFB  63                 	db	99	;'c'
   776  007EFC  25                 	db	37
   777  007EFD  75                 	db	117	;'u'
   778  007EFE  25                 	db	37
   779  007EFF  75                 	db	117	;'u'
   780  007F00  2E                 	db	46
   781  007F01  25                 	db	37
   782  007F02  75                 	db	117	;'u'
   783  007F03  25                 	db	37
   784  007F04  75                 	db	117	;'u'
   785  007F05  25                 	db	37
   786  007F06  75                 	db	117	;'u'
   787  007F07  20                 	db	32
   788  007F08  00                 	db	0
   789  007F09                     STR_6:
   790  007F09  20                 	db	32
   791  007F0A  25                 	db	37
   792  007F0B  63                 	db	99	;'c'
   793  007F0C  25                 	db	37
   794  007F0D  75                 	db	117	;'u'
   795  007F0E  25                 	db	37
   796  007F0F  75                 	db	117	;'u'
   797  007F10  25                 	db	37
   798  007F11  75                 	db	117	;'u'
   799  007F12  2E                 	db	46
   800  007F13  25                 	db	37
   801  007F14  75                 	db	117	;'u'
   802  007F15  25                 	db	37
   803  007F16  75                 	db	117	;'u'
   804  007F17  25                 	db	37
   805  007F18  75                 	db	117	;'u'
   806  007F19  20                 	db	32
   807  007F1A  00                 	db	0
   808  007F1B                     STR_3:
   809  007F1B  20                 	db	32
   810  007F1C  25                 	db	37
   811  007F1D  75                 	db	117	;'u'
   812  007F1E  25                 	db	37
   813  007F1F  75                 	db	117	;'u'
   814  007F20  25                 	db	37
   815  007F21  75                 	db	117	;'u'
   816  007F22  2E                 	db	46
   817  007F23  25                 	db	37
   818  007F24  63                 	db	99	;'c'
   819  007F25  25                 	db	37
   820  007F26  75                 	db	117	;'u'
   821  007F27  25                 	db	37
   822  007F28  75                 	db	117	;'u'
   823  007F29  25                 	db	37
   824  007F2A  75                 	db	117	;'u'
   825  007F2B  20                 	db	32
   826  007F2C  00                 	db	0
   827  007F2D                     STR_38:
   828  007F2D  20                 	db	32
   829  007F2E  20                 	db	32
   830  007F2F  20                 	db	32
   831  007F30  20                 	db	32
   832  007F31  20                 	db	32
   833  007F32  20                 	db	32
   834  007F33  20                 	db	32
   835  007F34  31                 	db	49	;'1'
   836  007F35  20                 	db	32
   837  007F36  6B                 	db	107	;'k'
   838  007F37  67                 	db	103	;'g'
   839  007F38  20                 	db	32
   840  007F39  20                 	db	32
   841  007F3A  20                 	db	32
   842  007F3B  20                 	db	32
   843  007F3C  20                 	db	32
   844  007F3D  00                 	db	0
   845  007F3E                     STR_40:
   846  007F3E  20                 	db	32
   847  007F3F  20                 	db	32
   848  007F40  20                 	db	32
   849  007F41  20                 	db	32
   850  007F42  20                 	db	32
   851  007F43  30                 	db	48	;'0'
   852  007F44  2E                 	db	46
   853  007F45  35                 	db	53	;'5'
   854  007F46  20                 	db	32
   855  007F47  6B                 	db	107	;'k'
   856  007F48  67                 	db	103	;'g'
   857  007F49  20                 	db	32
   858  007F4A  20                 	db	32
   859  007F4B  20                 	db	32
   860  007F4C  20                 	db	32
   861  007F4D  20                 	db	32
   862  007F4E  00                 	db	0
   863  007F4F                     STR_42:
   864  007F4F  20                 	db	32
   865  007F50  20                 	db	32
   866  007F51  20                 	db	32
   867  007F52  20                 	db	32
   868  007F53  30                 	db	48	;'0'
   869  007F54  2E                 	db	46
   870  007F55  32                 	db	50	;'2'
   871  007F56  35                 	db	53	;'5'
   872  007F57  20                 	db	32
   873  007F58  6B                 	db	107	;'k'
   874  007F59  67                 	db	103	;'g'
   875  007F5A  20                 	db	32
   876  007F5B  20                 	db	32
   877  007F5C  20                 	db	32
   878  007F5D  20                 	db	32
   879  007F5E  20                 	db	32
   880  007F5F  00                 	db	0
   881  007F60                     STR_26:
   882  007F60  20                 	db	32
   883  007F61  20                 	db	32
   884  007F62  20                 	db	32
   885  007F63  20                 	db	32
   886  007F64  20                 	db	32
   887  007F65  45                 	db	69	;'E'
   888  007F66  72                 	db	114	;'r'
   889  007F67  72                 	db	114	;'r'
   890  007F68  6F                 	db	111	;'o'
   891  007F69  6E                 	db	110	;'n'
   892  007F6A  65                 	db	101	;'e'
   893  007F6B  61                 	db	97	;'a'
   894  007F6C  20                 	db	32
   895  007F6D  20                 	db	32
   896  007F6E  20                 	db	32
   897  007F6F  20                 	db	32
   898  007F70  00                 	db	0
   899  007F71                     STR_28:
   900  007F71  20                 	db	32
   901  007F72  20                 	db	32
   902  007F73  20                 	db	32
   903  007F74  20                 	db	32
   904  007F75  49                 	db	73	;'I'
   905  007F76  6E                 	db	110	;'n'
   906  007F77  69                 	db	105	;'i'
   907  007F78  63                 	db	99	;'c'
   908  007F79  69                 	db	105	;'i'
   909  007F7A  61                 	db	97	;'a'
   910  007F7B  64                 	db	100	;'d'
   911  007F7C  6F                 	db	111	;'o'
   912  007F7D  20                 	db	32
   913  007F7E  20                 	db	32
   914  007F7F  20                 	db	32
   915  007F80  20                 	db	32
   916  007F81  00                 	db	0
   917  007F82                     STR_9:
   918  007F82  20                 	db	32
   919  007F83  20                 	db	32
   920  007F84  20                 	db	32
   921  007F85  20                 	db	32
   922  007F86  44                 	db	68	;'D'
   923  007F87  65                 	db	101	;'e'
   924  007F88  74                 	db	116	;'t'
   925  007F89  65                 	db	101	;'e'
   926  007F8A  6E                 	db	110	;'n'
   927  007F8B  69                 	db	105	;'i'
   928  007F8C  64                 	db	100	;'d'
   929  007F8D  6F                 	db	111	;'o'
   930  007F8E  20                 	db	32
   931  007F8F  20                 	db	32
   932  007F90  20                 	db	32
   933  007F91  20                 	db	32
   934  007F92  00                 	db	0
   935  007F93                     STR_29:
   936  007F93  20                 	db	32
   937  007F94  20                 	db	32
   938  007F95  20                 	db	32
   939  007F96  46                 	db	70	;'F'
   940  007F97  69                 	db	105	;'i'
   941  007F98  6E                 	db	110	;'n'
   942  007F99  61                 	db	97	;'a'
   943  007F9A  6C                 	db	108	;'l'
   944  007F9B  69                 	db	105	;'i'
   945  007F9C  7A                 	db	122	;'z'
   946  007F9D  61                 	db	97	;'a'
   947  007F9E  64                 	db	100	;'d'
   948  007F9F  6F                 	db	111	;'o'
   949  007FA0  20                 	db	32
   950  007FA1  20                 	db	32
   951  007FA2  20                 	db	32
   952  007FA3  00                 	db	0
   953  007FA4                     STR_13:
   954  007FA4  20                 	db	32
   955  007FA5  20                 	db	32
   956  007FA6  20                 	db	32
   957  007FA7  20                 	db	32
   958  007FA8  20                 	db	32
   959  007FA9  20                 	db	32
   960  007FAA  25                 	db	37
   961  007FAB  64                 	db	100	;'d'
   962  007FAC  20                 	db	32
   963  007FAD  20                 	db	32
   964  007FAE  20                 	db	32
   965  007FAF  20                 	db	32
   966  007FB0  20                 	db	32
   967  007FB1  20                 	db	32
   968  007FB2  20                 	db	32
   969  007FB3  00                 	db	0
   970  007FB4                     STR_8:
   971  007FB4  20                 	db	32
   972  007FB5  20                 	db	32
   973  007FB6  20                 	db	32
   974  007FB7  25                 	db	37
   975  007FB8  64                 	db	100	;'d'
   976  007FB9  20                 	db	32
   977  007FBA  2F                 	db	47
   978  007FBB  20                 	db	32
   979  007FBC  25                 	db	37
   980  007FBD  64                 	db	100	;'d'
   981  007FBE  20                 	db	32
   982  007FBF  20                 	db	32
   983  007FC0  20                 	db	32
   984  007FC1  20                 	db	32
   985  007FC2  00                 	db	0
   986  007FC3                     STR_11:
   987  007FC3  20                 	db	32
   988  007FC4  20                 	db	32
   989  007FC5  20                 	db	32
   990  007FC6  25                 	db	37
   991  007FC7  33                 	db	51	;'3'
   992  007FC8  2E                 	db	46
   993  007FC9  33                 	db	51	;'3'
   994  007FCA  66                 	db	102	;'f'
   995  007FCB  20                 	db	32
   996  007FCC  6B                 	db	107	;'k'
   997  007FCD  67                 	db	103	;'g'
   998  007FCE  20                 	db	32
   999  007FCF  20                 	db	32
  1000  007FD0  20                 	db	32
  1001  007FD1  00                 	db	0
  1002  007FD2                     STR_15:
  1003  007FD2  20                 	db	32
  1004  007FD3  20                 	db	32
  1005  007FD4  20                 	db	32
  1006  007FD5  25                 	db	37
  1007  007FD6  33                 	db	51	;'3'
  1008  007FD7  2E                 	db	46
  1009  007FD8  33                 	db	51	;'3'
  1010  007FD9  66                 	db	102	;'f'
  1011  007FDA  20                 	db	32
  1012  007FDB  6D                 	db	109	;'m'
  1013  007FDC  6D                 	db	109	;'m'
  1014  007FDD  20                 	db	32
  1015  007FDE  20                 	db	32
  1016  007FDF  20                 	db	32
  1017  007FE0  00                 	db	0
  1018  007FE1                     STR_17:
  1019  007FE1  20                 	db	32
  1020  007FE2  20                 	db	32
  1021  007FE3  25                 	db	37
  1022  007FE4  33                 	db	51	;'3'
  1023  007FE5  2E                 	db	46
  1024  007FE6  33                 	db	51	;'3'
  1025  007FE7  66                 	db	102	;'f'
  1026  007FE8  20                 	db	32
  1027  007FE9  6B                 	db	107	;'k'
  1028  007FEA  67                 	db	103	;'g'
  1029  007FEB  2F                 	db	47
  1030  007FEC  73                 	db	115	;'s'
  1031  007FED  20                 	db	32
  1032  007FEE  20                 	db	32
  1033  007FEF  00                 	db	0
  1034  007FF0                     STR_19:
  1035  007FF0  6B                 	db	107	;'k'
  1036  007FF1  67                 	db	103	;'g'
  1037  007FF2  20                 	db	32
  1038  007FF3  20                 	db	32
  1039  007FF4  20                 	db	32
  1040  007FF5  20                 	db	32
  1041  007FF6  00                 	db	0
  1042  007FF7                     STR_23:
  1043  007FF7  6D                 	db	109	;'m'
  1044  007FF8  6D                 	db	109	;'m'
  1045  007FF9  20                 	db	32
  1046  007FFA  20                 	db	32
  1047  007FFB  20                 	db	32
  1048  007FFC  20                 	db	32
  1049  007FFD  00                 	db	0
  1050  0000                     
  1051                           ; #config settings
  1052  007FFE  00                 	db	0	; dummy byte at the end
  1053  0000                     
  1054                           	psect	cinit
  1055  005C22                     __pcinit:
  1056                           	opt stack 0
  1057  005C22                     start_initialization:
  1058                           	opt stack 0
  1059  005C22                     __initialization:
  1060                           	opt stack 0
  1061                           
  1062                           ; Initialize objects allocated to BANK1 (41 bytes)
  1063                           ; load TBLPTR registers with __pidataBANK1
  1064  005C22  0E1C               	movlw	low __pidataBANK1
  1065  005C24  6EF6               	movwf	tblptrl,c
  1066  005C26  0E6B               	movlw	high __pidataBANK1
  1067  005C28  6EF7               	movwf	tblptrh,c
  1068  005C2A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1069  005C2C  6EF8               	movwf	tblptru,c
  1070  005C2E  EE01  F077         	lfsr	0,__pdataBANK1
  1071  005C32  EE10 F029          	lfsr	1,41
  1072  005C36                     copy_data0:
  1073  005C36  0009               	tblrd		*+
  1074  005C38  CFF5 FFEE          	movff	tablat,postinc0
  1075  005C3C  50E5               	movf	postdec1,w,c
  1076  005C3E  50E1               	movf	fsr1l,w,c
  1077  005C40  E1FA               	bnz	copy_data0
  1078                           
  1079                           ; Initialize objects allocated to BANK0 (21 bytes)
  1080                           ; load TBLPTR registers with __pidataBANK0
  1081  005C42  0E3E               	movlw	low __pidataBANK0
  1082  005C44  6EF6               	movwf	tblptrl,c
  1083  005C46  0E6C               	movlw	high __pidataBANK0
  1084  005C48  6EF7               	movwf	tblptrh,c
  1085  005C4A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1086  005C4C  6EF8               	movwf	tblptru,c
  1087  005C4E  EE00  F0A5         	lfsr	0,__pdataBANK0
  1088  005C52  EE10 F015          	lfsr	1,21
  1089  005C56                     copy_data1:
  1090  005C56  0009               	tblrd		*+
  1091  005C58  CFF5 FFEE          	movff	tablat,postinc0
  1092  005C5C  50E5               	movf	postdec1,w,c
  1093  005C5E  50E1               	movf	fsr1l,w,c
  1094  005C60  E1FA               	bnz	copy_data1
  1095                           
  1096                           ; Initialize objects allocated to COMRAM (14 bytes)
  1097                           ; load TBLPTR registers with __pidataCOMRAM
  1098  005C62  0E53               	movlw	low __pidataCOMRAM
  1099  005C64  6EF6               	movwf	tblptrl,c
  1100  005C66  0E6C               	movlw	high __pidataCOMRAM
  1101  005C68  6EF7               	movwf	tblptrh,c
  1102  005C6A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1103  005C6C  6EF8               	movwf	tblptru,c
  1104  005C6E  EE00  F043         	lfsr	0,__pdataCOMRAM
  1105  005C72  EE10 F00E          	lfsr	1,14
  1106  005C76                     copy_data2:
  1107  005C76  0009               	tblrd		*+
  1108  005C78  CFF5 FFEE          	movff	tablat,postinc0
  1109  005C7C  50E5               	movf	postdec1,w,c
  1110  005C7E  50E1               	movf	fsr1l,w,c
  1111  005C80  E1FA               	bnz	copy_data2
  1112                           
  1113                           ; Clear objects allocated to BANK1 (36 bytes)
  1114  005C82  EE01  F0A0         	lfsr	0,__pbssBANK1
  1115  005C86  0E24               	movlw	36
  1116  005C88                     clear_0:
  1117  005C88  6AEE               	clrf	postinc0,c
  1118  005C8A  06E8               	decf	wreg,f,c
  1119  005C8C  E1FD               	bnz	clear_0
  1120                           
  1121                           ; Clear objects allocated to BANK0 (17 bytes)
  1122  005C8E  EE00  F0BA         	lfsr	0,__pbssBANK0
  1123  005C92  0E11               	movlw	17
  1124  005C94                     clear_1:
  1125  005C94  6AEE               	clrf	postinc0,c
  1126  005C96  06E8               	decf	wreg,f,c
  1127  005C98  E1FD               	bnz	clear_1
  1128                           
  1129                           ; Clear objects allocated to COMRAM (24 bytes)
  1130  005C9A  EE00  F02B         	lfsr	0,__pbssCOMRAM
  1131  005C9E  0E18               	movlw	24
  1132  005CA0                     clear_2:
  1133  005CA0  6AEE               	clrf	postinc0,c
  1134  005CA2  06E8               	decf	wreg,f,c
  1135  005CA4  E1FD               	bnz	clear_2
  1136  005CA6                     end_of_initialization:
  1137                           	opt stack 0
  1138  005CA6                     __end_of__initialization:
  1139                           	opt stack 0
  1140  005CA6  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1141  005CA8  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1142  005CAA  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1143  005CAC  6EF8               	movwf	tblptru,c
  1144  005CAE  0100               	movlb	0
  1145  005CB0  EFD4  F033         	goto	_main	;jump to C main() function
  1146                           tblptru	equ	0xFF8
  1147                           tblptrh	equ	0xFF7
  1148                           tblptrl	equ	0xFF6
  1149                           tablat	equ	0xFF5
  1150                           postinc0	equ	0xFEE
  1151                           wreg	equ	0xFE8
  1152                           postdec1	equ	0xFE5
  1153                           fsr1l	equ	0xFE1
  1154                           
  1155                           	psect	bssCOMRAM
  1156  00002B                     __pbssCOMRAM:
  1157                           	opt stack 0
  1158  00002B                     _processTimer:
  1159                           	opt stack 0
  1160  00002B                     	ds	4
  1161  00002F                     _calFactor:
  1162                           	opt stack 0
  1163  00002F                     	ds	3
  1164  000032                     _questKMT:
  1165                           	opt stack 0
  1166  000032                     	ds	3
  1167  000035                     _processState:
  1168                           	opt stack 0
  1169  000035                     	ds	2
  1170  000037                     _DOWNisLP:
  1171                           	opt stack 0
  1172  000037                     	ds	1
  1173  000038                     _FC1securLock:
  1174                           	opt stack 0
  1175  000038                     	ds	1
  1176  000039                     _FC2securLock:
  1177                           	opt stack 0
  1178  000039                     	ds	1
  1179  00003A                     _ProcessStarted:
  1180                           	opt stack 0
  1181  00003A                     	ds	1
  1182  00003B                     _RETROisLP:
  1183                           	opt stack 0
  1184  00003B                     	ds	1
  1185  00003C                     _UPisLP:
  1186                           	opt stack 0
  1187  00003C                     	ds	1
  1188  00003D                     _holdFC1cont:
  1189                           	opt stack 0
  1190  00003D                     	ds	1
  1191  00003E                     _holdFC2cont:
  1192                           	opt stack 0
  1193  00003E                     	ds	1
  1194  00003F                     _lastSttFC1:
  1195                           	opt stack 0
  1196  00003F                     	ds	1
  1197  000040                     _lastSttFC2:
  1198                           	opt stack 0
  1199  000040                     	ds	1
  1200  000041                     _screen_calibVelRes:
  1201                           	opt stack 0
  1202  000041                     	ds	1
  1203  000042                     _selKMT:
  1204                           	opt stack 0
  1205  000042                     	ds	1
  1206                           tblptru	equ	0xFF8
  1207                           tblptrh	equ	0xFF7
  1208                           tblptrl	equ	0xFF6
  1209                           tablat	equ	0xFF5
  1210                           postinc0	equ	0xFEE
  1211                           wreg	equ	0xFE8
  1212                           postdec1	equ	0xFE5
  1213                           fsr1l	equ	0xFE1
  1214                           
  1215                           	psect	dataCOMRAM
  1216  000043                     __pdataCOMRAM:
  1217                           	opt stack 0
  1218  000043                     _timeDOWN:
  1219                           	opt stack 0
  1220  000043                     	ds	4
  1221  000047                     _pi:
  1222                           	opt stack 0
  1223  000047                     	ds	3
  1224  00004A                     _tempkgXcorte:
  1225                           	opt stack 0
  1226  00004A                     	ds	3
  1227  00004D                     _timsXcorte:
  1228                           	opt stack 0
  1229  00004D                     	ds	3
  1230  000050                     _bladeIsUP:
  1231                           	opt stack 0
  1232  000050                     	ds	1
  1233                           tblptru	equ	0xFF8
  1234                           tblptrh	equ	0xFF7
  1235                           tblptrl	equ	0xFF6
  1236                           tablat	equ	0xFF5
  1237                           postinc0	equ	0xFEE
  1238                           wreg	equ	0xFE8
  1239                           postdec1	equ	0xFE5
  1240                           fsr1l	equ	0xFE1
  1241                           
  1242                           	psect	bssBANK0
  1243  0000BA                     __pbssBANK0:
  1244                           	opt stack 0
  1245  0000BA                     _chanValChar:
  1246                           	opt stack 0
  1247  0000BA                     	ds	6
  1248  0000C0                     _contra:
  1249                           	opt stack 0
  1250  0000C0                     	ds	4
  1251  0000C4                     _fData:
  1252                           	opt stack 0
  1253  0000C4                     	ds	3
  1254  0000C7                     _i16Data:
  1255                           	opt stack 0
  1256  0000C7                     	ds	2
  1257  0000C9                     _ie:
  1258                           	opt stack 0
  1259  0000C9                     	ds	1
  1260  0000CA                     _tempLastScreen:
  1261                           	opt stack 0
  1262  0000CA                     	ds	1
  1263                           tblptru	equ	0xFF8
  1264                           tblptrh	equ	0xFF7
  1265                           tblptrl	equ	0xFF6
  1266                           tablat	equ	0xFF5
  1267                           postinc0	equ	0xFEE
  1268                           wreg	equ	0xFE8
  1269                           postdec1	equ	0xFE5
  1270                           fsr1l	equ	0xFE1
  1271                           
  1272                           	psect	dataBANK0
  1273  0000A5                     __pdataBANK0:
  1274                           	opt stack 0
  1275  0000A5                     lcd_init@F7567:
  1276                           	opt stack 0
  1277  0000A5                     	ds	4
  1278  0000A9                     _diamTubo:
  1279                           	opt stack 0
  1280  0000A9                     	ds	3
  1281  0000AC                     _kgXcorte:
  1282                           	opt stack 0
  1283  0000AC                     	ds	3
  1284  0000AF                     _temptiXcorte:
  1285                           	opt stack 0
  1286  0000AF                     	ds	3
  1287  0000B2                     _tiXcorte:
  1288                           	opt stack 0
  1289  0000B2                     	ds	3
  1290  0000B5                     _velocidadMasa:
  1291                           	opt stack 0
  1292  0000B5                     	ds	3
  1293  0000B8                     _numCortes:
  1294                           	opt stack 0
  1295  0000B8                     	ds	2
  1296                           tblptru	equ	0xFF8
  1297                           tblptrh	equ	0xFF7
  1298                           tblptrl	equ	0xFF6
  1299                           tablat	equ	0xFF5
  1300                           postinc0	equ	0xFEE
  1301                           wreg	equ	0xFE8
  1302                           postdec1	equ	0xFE5
  1303                           fsr1l	equ	0xFE1
  1304                           
  1305                           	psect	bssBANK1
  1306  0001A0                     __pbssBANK1:
  1307                           	opt stack 0
  1308  0001A0                     _chanValdig:
  1309                           	opt stack 0
  1310  0001A0                     	ds	6
  1311  0001A6                     _introducido:
  1312                           	opt stack 0
  1313  0001A6                     	ds	4
  1314  0001AA                     _passChar:
  1315                           	opt stack 0
  1316  0001AA                     	ds	4
  1317  0001AE                     _chanValf:
  1318                           	opt stack 0
  1319  0001AE                     	ds	3
  1320  0001B1                     _chanVals:
  1321                           	opt stack 0
  1322  0001B1                     	ds	2
  1323  0001B3                     _questSN:
  1324                           	opt stack 0
  1325  0001B3                     	ds	2
  1326  0001B5                     _DOWNsecurLock:
  1327                           	opt stack 0
  1328  0001B5                     	ds	1
  1329  0001B6                     _ENTERisLP:
  1330                           	opt stack 0
  1331  0001B6                     	ds	1
  1332  0001B7                     _ENTERsecurLock:
  1333                           	opt stack 0
  1334  0001B7                     	ds	1
  1335  0001B8                     _RETROsecurLock:
  1336                           	opt stack 0
  1337  0001B8                     	ds	1
  1338  0001B9                     _UPsecurLock:
  1339                           	opt stack 0
  1340  0001B9                     	ds	1
  1341  0001BA                     _actualScreen:
  1342                           	opt stack 0
  1343  0001BA                     	ds	1
  1344  0001BB                     _calibLevel:
  1345                           	opt stack 0
  1346  0001BB                     	ds	1
  1347  0001BC                     _fd:
  1348                           	opt stack 0
  1349  0001BC                     	ds	1
  1350  0001BD                     _holdDOWNcont:
  1351                           	opt stack 0
  1352  0001BD                     	ds	1
  1353  0001BE                     _holdENTERcont:
  1354                           	opt stack 0
  1355  0001BE                     	ds	1
  1356  0001BF                     _holdRETROcont:
  1357                           	opt stack 0
  1358  0001BF                     	ds	1
  1359  0001C0                     _holdUPcont:
  1360                           	opt stack 0
  1361  0001C0                     	ds	1
  1362  0001C1                     _menuSection:
  1363                           	opt stack 0
  1364  0001C1                     	ds	1
  1365  0001C2                     _passSection:
  1366                           	opt stack 0
  1367  0001C2                     	ds	1
  1368  0001C3                     _selSN:
  1369                           	opt stack 0
  1370  0001C3                     	ds	1
  1371                           tblptru	equ	0xFF8
  1372                           tblptrh	equ	0xFF7
  1373                           tblptrl	equ	0xFF6
  1374                           tablat	equ	0xFF5
  1375                           postinc0	equ	0xFEE
  1376                           wreg	equ	0xFE8
  1377                           postdec1	equ	0xFE5
  1378                           fsr1l	equ	0xFE1
  1379                           
  1380                           	psect	dataBANK1
  1381  000177                     __pdataBANK1:
  1382                           	opt stack 0
  1383  000177                     _exp10:
  1384                           	opt stack 0
  1385  000177                     	ds	24
  1386  00018F                     _tempVelocidadMasa3:
  1387                           	opt stack 0
  1388  00018F                     	ds	3
  1389  000192                     _tempNumCortes:
  1390                           	opt stack 0
  1391  000192                     	ds	2
  1392  000194                     _chanValSection:
  1393                           	opt stack 0
  1394  000194                     	ds	1
  1395  000195                     _flech:
  1396                           	opt stack 0
  1397  000195                     	ds	1
  1398  000196                     _lastSttDOWN:
  1399                           	opt stack 0
  1400  000196                     	ds	1
  1401  000197                     _lastSttENTER:
  1402                           	opt stack 0
  1403  000197                     	ds	1
  1404  000198                     _lastSttRETRO:
  1405                           	opt stack 0
  1406  000198                     	ds	1
  1407  000199                     _lastSttUP:
  1408                           	opt stack 0
  1409  000199                     	ds	1
  1410  00019A                     _tempVelocidadMasa1:
  1411                           	opt stack 0
  1412  00019A                     	ds	3
  1413  00019D                     _tempVelocidadMasa2:
  1414                           	opt stack 0
  1415  00019D                     	ds	3
  1416                           tblptru	equ	0xFF8
  1417                           tblptrh	equ	0xFF7
  1418                           tblptrl	equ	0xFF6
  1419                           tablat	equ	0xFF5
  1420                           postinc0	equ	0xFEE
  1421                           wreg	equ	0xFE8
  1422                           postdec1	equ	0xFE5
  1423                           fsr1l	equ	0xFE1
  1424                           
  1425                           	psect	cstackBANK1
  1426  000100                     __pcstackBANK1:
  1427                           	opt stack 0
  1428  000100                     ??_isdigit:
  1429  000100                     ??_lcd_read_4bits:
  1430  000100                     ??_checkPass:
  1431  000100                     ??_chanValDigUP:
  1432  000100                     ??_chanValDigDOWN:
  1433  000100                     ?___awmod:
  1434                           	opt stack 0
  1435  000100                     ?___ftpack:
  1436                           	opt stack 0
  1437  000100                     ?___ftneg:
  1438                           	opt stack 0
  1439  000100                     ?__tdiv_to_l_:
  1440                           	opt stack 0
  1441  000100                     ?__div_to_l_:
  1442                           	opt stack 0
  1443  000100                     ?___lmul:
  1444                           	opt stack 0
  1445  000100                     ?___aldiv:
  1446                           	opt stack 0
  1447  000100                     ?___lldiv:
  1448                           	opt stack 0
  1449  000100                     _lcd_send_4bits$1688:
  1450                           	opt stack 0
  1451  000100                     writeEEPROM@data:
  1452                           	opt stack 0
  1453  000100                     readEEPROM@adr:
  1454                           	opt stack 0
  1455  000100                     setPWM2on@on:
  1456                           	opt stack 0
  1457  000100                     delay_ms@del:
  1458                           	opt stack 0
  1459  000100                     setPWM2duty@actuator:
  1460                           	opt stack 0
  1461  000100                     ___awmod@dividend:
  1462                           	opt stack 0
  1463  000100                     __div_to_l_@f1:
  1464                           	opt stack 0
  1465  000100                     ___ftpack@arg:
  1466                           	opt stack 0
  1467  000100                     __tdiv_to_l_@f1:
  1468                           	opt stack 0
  1469  000100                     ___ftge@ff1:
  1470                           	opt stack 0
  1471  000100                     ___ftneg@f1:
  1472                           	opt stack 0
  1473  000100                     ___lmul@multiplier:
  1474                           	opt stack 0
  1475  000100                     ___aldiv@dividend:
  1476                           	opt stack 0
  1477  000100                     ___lldiv@dividend:
  1478                           	opt stack 0
  1479                           
  1480                           ; 4 bytes @ 0x0
  1481  000100                     	ds	1
  1482  000101                     lcd_read_4bits@n:
  1483                           	opt stack 0
  1484  000101                     _lcd_send_4bits$1689:
  1485                           	opt stack 0
  1486  000101                     writeEEPROM@adr:
  1487                           	opt stack 0
  1488  000101                     _isdigit$2496:
  1489                           	opt stack 0
  1490                           
  1491                           ; 1 bytes @ 0x1
  1492  000101                     	ds	1
  1493  000102                     ??_delay_ms:
  1494  000102                     ??_setPWM2duty:
  1495  000102                     lcd_read_byte@low:
  1496                           	opt stack 0
  1497  000102                     _lcd_send_4bits$1690:
  1498                           	opt stack 0
  1499  000102                     isdigit@c:
  1500                           	opt stack 0
  1501  000102                     ___awmod@divisor:
  1502                           	opt stack 0
  1503                           
  1504                           ; 2 bytes @ 0x2
  1505  000102                     	ds	1
  1506  000103                     lcd_read_byte@high:
  1507                           	opt stack 0
  1508  000103                     _lcd_send_4bits$1691:
  1509                           	opt stack 0
  1510  000103                     ___ftpack@exp:
  1511                           	opt stack 0
  1512  000103                     delay_ms@i:
  1513                           	opt stack 0
  1514  000103                     __div_to_l_@f2:
  1515                           	opt stack 0
  1516  000103                     __tdiv_to_l_@f2:
  1517                           	opt stack 0
  1518  000103                     ___ftge@ff2:
  1519                           	opt stack 0
  1520                           
  1521                           ; 3 bytes @ 0x3
  1522  000103                     	ds	1
  1523  000104                     lcd_send_4bits@n:
  1524                           	opt stack 0
  1525  000104                     checkPass@passOK:
  1526                           	opt stack 0
  1527  000104                     ___awmod@counter:
  1528                           	opt stack 0
  1529  000104                     ___ftpack@sign:
  1530                           	opt stack 0
  1531  000104                     setPWM2duty@act:
  1532                           	opt stack 0
  1533  000104                     ___lmul@multiplicand:
  1534                           	opt stack 0
  1535  000104                     ___aldiv@divisor:
  1536                           	opt stack 0
  1537  000104                     ___lldiv@divisor:
  1538                           	opt stack 0
  1539                           
  1540                           ; 4 bytes @ 0x4
  1541  000104                     	ds	1
  1542  000105                     ??___ftpack:
  1543  000105                     lcd_send_byte@n:
  1544                           	opt stack 0
  1545  000105                     ___awmod@sign:
  1546                           	opt stack 0
  1547  000105                     checkPass@i:
  1548                           	opt stack 0
  1549                           
  1550                           ; 2 bytes @ 0x5
  1551  000105                     	ds	1
  1552  000106                     ??__tdiv_to_l_:
  1553  000106                     ??_lcd_send_byte:
  1554  000106                     ??___ftge:
  1555  000106                     ?___awdiv:
  1556                           	opt stack 0
  1557  000106                     ___awdiv@dividend:
  1558                           	opt stack 0
  1559  000106                     __div_to_l_@quot:
  1560                           	opt stack 0
  1561                           
  1562                           ; 4 bytes @ 0x6
  1563  000106                     	ds	1
  1564  000107                     lcd_send_byte@address:
  1565                           	opt stack 0
  1566                           
  1567                           ; 1 bytes @ 0x7
  1568  000107                     	ds	1
  1569  000108                     ??_lcd_init:
  1570  000108                     ?___altoft:
  1571                           	opt stack 0
  1572  000108                     ?___lltoft:
  1573                           	opt stack 0
  1574  000108                     lcd_gotoxy@fila:
  1575                           	opt stack 0
  1576  000108                     ___aldiv@counter:
  1577                           	opt stack 0
  1578  000108                     ___awdiv@divisor:
  1579                           	opt stack 0
  1580  000108                     ___lmul@product:
  1581                           	opt stack 0
  1582  000108                     ___altoft@c:
  1583                           	opt stack 0
  1584  000108                     ___lldiv@quotient:
  1585                           	opt stack 0
  1586  000108                     ___lltoft@c:
  1587                           	opt stack 0
  1588                           
  1589                           ; 4 bytes @ 0x8
  1590  000108                     	ds	1
  1591  000109                     lcd_gotoxy@pos:
  1592                           	opt stack 0
  1593  000109                     ___aldiv@sign:
  1594                           	opt stack 0
  1595  000109                     lcd_init@LCD_INIT_STRING:
  1596                           	opt stack 0
  1597  000109                     __tdiv_to_l_@quot:
  1598                           	opt stack 0
  1599                           
  1600                           ; 4 bytes @ 0x9
  1601  000109                     	ds	1
  1602  00010A                     lcd_gotoxy@address:
  1603                           	opt stack 0
  1604  00010A                     ___awdiv@counter:
  1605                           	opt stack 0
  1606  00010A                     __div_to_l_@cntr:
  1607                           	opt stack 0
  1608  00010A                     ___aldiv@quotient:
  1609                           	opt stack 0
  1610                           
  1611                           ; 4 bytes @ 0xA
  1612  00010A                     	ds	1
  1613  00010B                     ??_lcd_putc:
  1614  00010B                     ___awdiv@sign:
  1615                           	opt stack 0
  1616  00010B                     __div_to_l_@exp1:
  1617                           	opt stack 0
  1618                           
  1619                           ; 1 bytes @ 0xB
  1620  00010B                     	ds	1
  1621  00010C                     ??___altoft:
  1622  00010C                     ??___lltoft:
  1623  00010C                     lcd_putc@cha:
  1624                           	opt stack 0
  1625  00010C                     ___lldiv@counter:
  1626                           	opt stack 0
  1627  00010C                     ___awdiv@quotient:
  1628                           	opt stack 0
  1629                           
  1630                           ; 2 bytes @ 0xC
  1631  00010C                     	ds	1
  1632  00010D                     ?___llmod:
  1633                           	opt stack 0
  1634  00010D                     lcd_init@i:
  1635                           	opt stack 0
  1636  00010D                     putch@val:
  1637                           	opt stack 0
  1638  00010D                     __tdiv_to_l_@cntr:
  1639                           	opt stack 0
  1640  00010D                     ___llmod@dividend:
  1641                           	opt stack 0
  1642                           
  1643                           ; 4 bytes @ 0xD
  1644  00010D                     	ds	1
  1645  00010E                     ?___wmul:
  1646                           	opt stack 0
  1647  00010E                     __tdiv_to_l_@exp1:
  1648                           	opt stack 0
  1649  00010E                     ___wmul@multiplier:
  1650                           	opt stack 0
  1651                           
  1652                           ; 2 bytes @ 0xE
  1653  00010E                     	ds	2
  1654  000110                     ___altoft@exp:
  1655                           	opt stack 0
  1656  000110                     ___lltoft@exp:
  1657                           	opt stack 0
  1658  000110                     ___wmul@multiplicand:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x10
  1662  000110                     	ds	1
  1663  000111                     ___altoft@sign:
  1664                           	opt stack 0
  1665  000111                     ___llmod@divisor:
  1666                           	opt stack 0
  1667                           
  1668                           ; 4 bytes @ 0x11
  1669  000111                     	ds	1
  1670  000112                     ?___ftdiv:
  1671                           	opt stack 0
  1672  000112                     ___wmul@product:
  1673                           	opt stack 0
  1674  000112                     ___ftdiv@f1:
  1675                           	opt stack 0
  1676                           
  1677                           ; 3 bytes @ 0x12
  1678  000112                     	ds	2
  1679  000114                     ?___ftmul:
  1680                           	opt stack 0
  1681  000114                     ___ftmul@f1:
  1682                           	opt stack 0
  1683                           
  1684                           ; 3 bytes @ 0x14
  1685  000114                     	ds	1
  1686  000115                     ___llmod@counter:
  1687                           	opt stack 0
  1688  000115                     ___ftdiv@f2:
  1689                           	opt stack 0
  1690                           
  1691                           ; 3 bytes @ 0x15
  1692  000115                     	ds	2
  1693  000117                     ___ftmul@f2:
  1694                           	opt stack 0
  1695                           
  1696                           ; 3 bytes @ 0x17
  1697  000117                     	ds	1
  1698  000118                     ??___ftdiv:
  1699                           
  1700                           ; 1 bytes @ 0x18
  1701  000118                     	ds	2
  1702  00011A                     ??___ftmul:
  1703                           
  1704                           ; 1 bytes @ 0x1A
  1705  00011A                     	ds	1
  1706  00011B                     ___ftdiv@cntr:
  1707                           	opt stack 0
  1708                           
  1709                           ; 1 bytes @ 0x1B
  1710  00011B                     	ds	1
  1711  00011C                     ___ftdiv@f3:
  1712                           	opt stack 0
  1713                           
  1714                           ; 3 bytes @ 0x1C
  1715  00011C                     	ds	1
  1716  00011D                     ___ftmul@exp:
  1717                           	opt stack 0
  1718                           
  1719                           ; 1 bytes @ 0x1D
  1720  00011D                     	ds	1
  1721  00011E                     ___ftmul@f3_as_product:
  1722                           	opt stack 0
  1723                           
  1724                           ; 3 bytes @ 0x1E
  1725  00011E                     	ds	1
  1726  00011F                     ___ftdiv@exp:
  1727                           	opt stack 0
  1728                           
  1729                           ; 1 bytes @ 0x1F
  1730  00011F                     	ds	1
  1731  000120                     ___ftdiv@sign:
  1732                           	opt stack 0
  1733                           
  1734                           ; 1 bytes @ 0x20
  1735  000120                     	ds	1
  1736  000121                     ??_integrator:
  1737  000121                     ___ftmul@cntr:
  1738                           	opt stack 0
  1739                           
  1740                           ; 1 bytes @ 0x21
  1741  000121                     	ds	1
  1742  000122                     ___ftmul@sign:
  1743                           	opt stack 0
  1744                           
  1745                           ; 1 bytes @ 0x22
  1746  000122                     	ds	1
  1747  000123                     ?_fround:
  1748                           	opt stack 0
  1749  000123                     ?_scale:
  1750                           	opt stack 0
  1751  000123                     confirmEdition@yes:
  1752                           	opt stack 0
  1753  000123                     calcSysVars@temp:
  1754                           	opt stack 0
  1755  000123                     integrator@acum:
  1756                           	opt stack 0
  1757                           
  1758                           ; 4 bytes @ 0x23
  1759  000123                     	ds	3
  1760  000126                     ??_sysParamInit:
  1761  000126                     _fround$2993:
  1762                           	opt stack 0
  1763  000126                     _scale$2994:
  1764                           	opt stack 0
  1765                           
  1766                           ; 3 bytes @ 0x26
  1767  000126                     	ds	1
  1768  000127                     integrator@temp:
  1769                           	opt stack 0
  1770                           
  1771                           ; 4 bytes @ 0x27
  1772  000127                     	ds	2
  1773  000129                     scale@scl:
  1774                           	opt stack 0
  1775  000129                     _fround$2992:
  1776                           	opt stack 0
  1777                           
  1778                           ; 3 bytes @ 0x29
  1779  000129                     	ds	1
  1780  00012A                     ?___fttol:
  1781                           	opt stack 0
  1782  00012A                     ___fttol@f1:
  1783                           	opt stack 0
  1784                           
  1785                           ; 3 bytes @ 0x2A
  1786  00012A                     	ds	1
  1787  00012B                     integrator@i:
  1788                           	opt stack 0
  1789                           
  1790                           ; 2 bytes @ 0x2B
  1791  00012B                     	ds	1
  1792  00012C                     fround@prec:
  1793                           	opt stack 0
  1794                           
  1795                           ; 1 bytes @ 0x2C
  1796  00012C                     	ds	1
  1797  00012D                     ?___ftadd:
  1798                           	opt stack 0
  1799  00012D                     ___ftadd@f1:
  1800                           	opt stack 0
  1801                           
  1802                           ; 3 bytes @ 0x2D
  1803  00012D                     	ds	1
  1804  00012E                     ??___fttol:
  1805                           
  1806                           ; 1 bytes @ 0x2E
  1807  00012E                     	ds	2
  1808  000130                     ___ftadd@f2:
  1809                           	opt stack 0
  1810                           
  1811                           ; 3 bytes @ 0x30
  1812  000130                     	ds	3
  1813  000133                     ??___ftadd:
  1814  000133                     ___fttol@sign1:
  1815                           	opt stack 0
  1816                           
  1817                           ; 1 bytes @ 0x33
  1818  000133                     	ds	1
  1819  000134                     ___fttol@lval:
  1820                           	opt stack 0
  1821                           
  1822                           ; 4 bytes @ 0x34
  1823  000134                     	ds	2
  1824  000136                     ___ftadd@sign:
  1825                           	opt stack 0
  1826                           
  1827                           ; 1 bytes @ 0x36
  1828  000136                     	ds	1
  1829  000137                     ___ftadd@exp2:
  1830                           	opt stack 0
  1831                           
  1832                           ; 1 bytes @ 0x37
  1833  000137                     	ds	1
  1834  000138                     ___ftadd@exp1:
  1835                           	opt stack 0
  1836  000138                     ___fttol@exp1:
  1837                           	opt stack 0
  1838                           
  1839                           ; 1 bytes @ 0x38
  1840  000138                     	ds	1
  1841  000139                     ??_desintegrator:
  1842  000139                     ?___ftsub:
  1843                           	opt stack 0
  1844  000139                     longPressENTER@temp:
  1845                           	opt stack 0
  1846  000139                     ___ftsub@f1:
  1847                           	opt stack 0
  1848                           
  1849                           ; 3 bytes @ 0x39
  1850  000139                     	ds	2
  1851  00013B                     desintegrator@temp:
  1852                           	opt stack 0
  1853                           
  1854                           ; 3 bytes @ 0x3B
  1855  00013B                     	ds	1
  1856  00013C                     ___ftsub@f2:
  1857                           	opt stack 0
  1858  00013C                     _longPressENTER$2991:
  1859                           	opt stack 0
  1860                           
  1861                           ; 3 bytes @ 0x3C
  1862  00013C                     	ds	2
  1863  00013E                     desintegrator@tempL:
  1864                           	opt stack 0
  1865                           
  1866                           ; 4 bytes @ 0x3E
  1867  00013E                     	ds	1
  1868  00013F                     ?_printf:
  1869                           	opt stack 0
  1870  00013F                     printf@f:
  1871                           	opt stack 0
  1872                           
  1873                           ; 2 bytes @ 0x3F
  1874  00013F                     	ds	3
  1875  000142                     desintegrator@temp3:
  1876                           	opt stack 0
  1877                           
  1878                           ; 4 bytes @ 0x42
  1879  000142                     	ds	4
  1880  000146                     desintegrator@temp2:
  1881                           	opt stack 0
  1882                           
  1883                           ; 4 bytes @ 0x46
  1884  000146                     	ds	4
  1885  00014A                     desintegrator@i:
  1886                           	opt stack 0
  1887                           
  1888                           ; 2 bytes @ 0x4A
  1889  00014A                     	ds	2
  1890  00014C                     
  1891                           ; 1 bytes @ 0x4C
  1892  00014C                     	ds	5
  1893  000151                     ??_printf:
  1894                           
  1895                           ; 1 bytes @ 0x51
  1896  000151                     	ds	6
  1897  000157                     _printf$2995:
  1898                           	opt stack 0
  1899                           
  1900                           ; 3 bytes @ 0x57
  1901  000157                     	ds	3
  1902  00015A                     printf@cp:
  1903                           	opt stack 0
  1904                           
  1905                           ; 2 bytes @ 0x5A
  1906  00015A                     	ds	2
  1907  00015C                     printf@len:
  1908                           	opt stack 0
  1909                           
  1910                           ; 2 bytes @ 0x5C
  1911  00015C                     	ds	2
  1912  00015E                     printf@ap:
  1913                           	opt stack 0
  1914                           
  1915                           ; 2 bytes @ 0x5E
  1916  00015E                     	ds	2
  1917  000160                     printf@flag:
  1918                           	opt stack 0
  1919                           
  1920                           ; 2 bytes @ 0x60
  1921  000160                     	ds	2
  1922  000162                     printf@tmpval:
  1923                           	opt stack 0
  1924                           
  1925                           ; 4 bytes @ 0x62
  1926  000162                     	ds	4
  1927  000166                     printf@val:
  1928                           	opt stack 0
  1929                           
  1930                           ; 4 bytes @ 0x66
  1931  000166                     	ds	4
  1932  00016A                     printf@exp:
  1933                           	opt stack 0
  1934                           
  1935                           ; 2 bytes @ 0x6A
  1936  00016A                     	ds	2
  1937  00016C                     printf@width:
  1938                           	opt stack 0
  1939                           
  1940                           ; 2 bytes @ 0x6C
  1941  00016C                     	ds	2
  1942  00016E                     printf@fval:
  1943                           	opt stack 0
  1944                           
  1945                           ; 3 bytes @ 0x6E
  1946  00016E                     	ds	3
  1947  000171                     printf@prec:
  1948                           	opt stack 0
  1949                           
  1950                           ; 2 bytes @ 0x71
  1951  000171                     	ds	2
  1952  000173                     printf@c:
  1953                           	opt stack 0
  1954                           
  1955                           ; 1 bytes @ 0x73
  1956  000173                     	ds	1
  1957  000174                     drawMenu@adv:
  1958                           	opt stack 0
  1959  000174                     drawAdvON@on:
  1960                           	opt stack 0
  1961  000174                     drawPassWord@i:
  1962                           	opt stack 0
  1963  000174                     drawSNquest@i:
  1964                           	opt stack 0
  1965                           
  1966                           ; 2 bytes @ 0x74
  1967  000174                     	ds	2
  1968  000176                     drawSNquest@tq:
  1969                           	opt stack 0
  1970                           
  1971                           ; 1 bytes @ 0x76
  1972  000176                     	ds	1
  1973  000177                     tblptru	equ	0xFF8
  1974                           tblptrh	equ	0xFF7
  1975                           tblptrl	equ	0xFF6
  1976                           tablat	equ	0xFF5
  1977                           postinc0	equ	0xFEE
  1978                           wreg	equ	0xFE8
  1979                           postdec1	equ	0xFE5
  1980                           fsr1l	equ	0xFE1
  1981                           
  1982                           ; 1 bytes @ 0x77
  1983                           
  1984                           	psect	cstackBANK0
  1985  000060                     __pcstackBANK0:
  1986                           	opt stack 0
  1987  000060                     ??i1_checkPass:
  1988  000060                     ??i1_chanValDigUP:
  1989  000060                     ??i1_chanValDigDOWN:
  1990  000060                     ?i1___ftpack:
  1991                           	opt stack 0
  1992  000060                     ?i1___lmul:
  1993                           	opt stack 0
  1994  000060                     ?i1___aldiv:
  1995                           	opt stack 0
  1996  000060                     ?i1___fttol:
  1997                           	opt stack 0
  1998  000060                     putchUART@val:
  1999                           	opt stack 0
  2000  000060                     i1writeEEPROM@data:
  2001                           	opt stack 0
  2002  000060                     i1readEEPROM@adr:
  2003                           	opt stack 0
  2004  000060                     i1delay_ms@del:
  2005                           	opt stack 0
  2006  000060                     i1setPWM2duty@actuator:
  2007                           	opt stack 0
  2008  000060                     i1___ftpack@arg:
  2009                           	opt stack 0
  2010  000060                     i1___fttol@f1:
  2011                           	opt stack 0
  2012  000060                     i1___lmul@multiplier:
  2013                           	opt stack 0
  2014  000060                     i1___aldiv@dividend:
  2015                           	opt stack 0
  2016                           
  2017                           ; 4 bytes @ 0x0
  2018  000060                     	ds	1
  2019  000061                     i1writeEEPROM@adr:
  2020                           	opt stack 0
  2021                           
  2022                           ; 1 bytes @ 0x1
  2023  000061                     	ds	1
  2024  000062                     ??i1_delay_ms:
  2025  000062                     ??i1_setPWM2duty:
  2026                           
  2027                           ; 1 bytes @ 0x2
  2028  000062                     	ds	1
  2029  000063                     i1___ftpack@exp:
  2030                           	opt stack 0
  2031  000063                     i1delay_ms@i:
  2032                           	opt stack 0
  2033                           
  2034                           ; 2 bytes @ 0x3
  2035  000063                     	ds	1
  2036  000064                     ??i1___fttol:
  2037  000064                     i1checkPass@passOK:
  2038                           	opt stack 0
  2039  000064                     i1___ftpack@sign:
  2040                           	opt stack 0
  2041  000064                     i1setPWM2duty@act:
  2042                           	opt stack 0
  2043  000064                     i1___lmul@multiplicand:
  2044                           	opt stack 0
  2045  000064                     i1___aldiv@divisor:
  2046                           	opt stack 0
  2047                           
  2048                           ; 4 bytes @ 0x4
  2049  000064                     	ds	1
  2050  000065                     ??i1___ftpack:
  2051  000065                     i1checkPass@i:
  2052                           	opt stack 0
  2053                           
  2054                           ; 2 bytes @ 0x5
  2055  000065                     	ds	1
  2056  000066                     ??_T2int:
  2057                           
  2058                           ; 1 bytes @ 0x6
  2059  000066                     	ds	2
  2060  000068                     ?i1___altoft:
  2061                           	opt stack 0
  2062  000068                     ?i1___ftadd:
  2063                           	opt stack 0
  2064  000068                     ?i1___ftmul:
  2065                           	opt stack 0
  2066  000068                     i1___aldiv@counter:
  2067                           	opt stack 0
  2068  000068                     i1___ftadd@f1:
  2069                           	opt stack 0
  2070  000068                     i1___ftmul@f1:
  2071                           	opt stack 0
  2072  000068                     i1___lmul@product:
  2073                           	opt stack 0
  2074  000068                     i1___altoft@c:
  2075                           	opt stack 0
  2076                           
  2077                           ; 4 bytes @ 0x8
  2078  000068                     	ds	1
  2079  000069                     i1___aldiv@sign:
  2080                           	opt stack 0
  2081  000069                     i1___fttol@sign1:
  2082                           	opt stack 0
  2083                           
  2084                           ; 1 bytes @ 0x9
  2085  000069                     	ds	1
  2086  00006A                     i1___aldiv@quotient:
  2087                           	opt stack 0
  2088  00006A                     i1___fttol@lval:
  2089                           	opt stack 0
  2090                           
  2091                           ; 4 bytes @ 0xA
  2092  00006A                     	ds	1
  2093  00006B                     i1___ftadd@f2:
  2094                           	opt stack 0
  2095  00006B                     i1___ftmul@f2:
  2096                           	opt stack 0
  2097                           
  2098                           ; 3 bytes @ 0xB
  2099  00006B                     	ds	1
  2100  00006C                     ??i1___altoft:
  2101                           
  2102                           ; 1 bytes @ 0xC
  2103  00006C                     	ds	2
  2104  00006E                     ??i1___ftadd:
  2105  00006E                     ??i1___ftmul:
  2106  00006E                     i1___fttol@exp1:
  2107                           	opt stack 0
  2108                           
  2109                           ; 1 bytes @ 0xE
  2110  00006E                     	ds	2
  2111  000070                     i1___altoft@exp:
  2112                           	opt stack 0
  2113                           
  2114                           ; 1 bytes @ 0x10
  2115  000070                     	ds	1
  2116  000071                     i1___altoft@sign:
  2117                           	opt stack 0
  2118  000071                     i1___ftadd@sign:
  2119                           	opt stack 0
  2120  000071                     i1___ftmul@exp:
  2121                           	opt stack 0
  2122                           
  2123                           ; 1 bytes @ 0x11
  2124  000071                     	ds	1
  2125  000072                     ?i1___ftdiv:
  2126                           	opt stack 0
  2127  000072                     i1___ftadd@exp2:
  2128                           	opt stack 0
  2129  000072                     i1___ftdiv@f1:
  2130                           	opt stack 0
  2131  000072                     i1___ftmul@f3_as_product:
  2132                           	opt stack 0
  2133                           
  2134                           ; 3 bytes @ 0x12
  2135  000072                     	ds	1
  2136  000073                     i1___ftadd@exp1:
  2137                           	opt stack 0
  2138                           
  2139                           ; 1 bytes @ 0x13
  2140  000073                     	ds	2
  2141  000075                     i1___ftmul@cntr:
  2142                           	opt stack 0
  2143  000075                     i1___ftdiv@f2:
  2144                           	opt stack 0
  2145                           
  2146                           ; 3 bytes @ 0x15
  2147  000075                     	ds	1
  2148  000076                     i1___ftmul@sign:
  2149                           	opt stack 0
  2150                           
  2151                           ; 1 bytes @ 0x16
  2152  000076                     	ds	1
  2153  000077                     ??i1_desintegrator:
  2154  000077                     i1calcSysVars@temp:
  2155                           	opt stack 0
  2156                           
  2157                           ; 3 bytes @ 0x17
  2158  000077                     	ds	1
  2159  000078                     ??i1___ftdiv:
  2160                           
  2161                           ; 1 bytes @ 0x18
  2162  000078                     	ds	1
  2163  000079                     i1desintegrator@temp:
  2164                           	opt stack 0
  2165                           
  2166                           ; 3 bytes @ 0x19
  2167  000079                     	ds	1
  2168  00007A                     ??i1_sysParamInit:
  2169                           
  2170                           ; 1 bytes @ 0x1A
  2171  00007A                     	ds	1
  2172  00007B                     i1___ftdiv@cntr:
  2173                           	opt stack 0
  2174                           
  2175                           ; 1 bytes @ 0x1B
  2176  00007B                     	ds	1
  2177  00007C                     i1___ftdiv@f3:
  2178                           	opt stack 0
  2179  00007C                     i1desintegrator@tempL:
  2180                           	opt stack 0
  2181                           
  2182                           ; 4 bytes @ 0x1C
  2183  00007C                     	ds	3
  2184  00007F                     i1___ftdiv@exp:
  2185                           	opt stack 0
  2186                           
  2187                           ; 1 bytes @ 0x1F
  2188  00007F                     	ds	1
  2189  000080                     i1___ftdiv@sign:
  2190                           	opt stack 0
  2191  000080                     i1desintegrator@temp3:
  2192                           	opt stack 0
  2193                           
  2194                           ; 4 bytes @ 0x20
  2195  000080                     	ds	1
  2196  000081                     ??i1_integrator:
  2197  000081                     i1confirmEdition@yes:
  2198                           	opt stack 0
  2199                           
  2200                           ; 1 bytes @ 0x21
  2201  000081                     	ds	2
  2202  000083                     i1integrator@acum:
  2203                           	opt stack 0
  2204                           
  2205                           ; 4 bytes @ 0x23
  2206  000083                     	ds	1
  2207  000084                     i1desintegrator@temp2:
  2208                           	opt stack 0
  2209                           
  2210                           ; 4 bytes @ 0x24
  2211  000084                     	ds	3
  2212  000087                     i1integrator@temp:
  2213                           	opt stack 0
  2214                           
  2215                           ; 4 bytes @ 0x27
  2216  000087                     	ds	1
  2217  000088                     i1desintegrator@i:
  2218                           	opt stack 0
  2219                           
  2220                           ; 2 bytes @ 0x28
  2221  000088                     	ds	2
  2222  00008A                     
  2223                           ; 1 bytes @ 0x2A
  2224  00008A                     	ds	1
  2225  00008B                     i1integrator@i:
  2226                           	opt stack 0
  2227                           
  2228                           ; 2 bytes @ 0x2B
  2229  00008B                     	ds	2
  2230  00008D                     i1longPressENTER@temp:
  2231                           	opt stack 0
  2232                           
  2233                           ; 3 bytes @ 0x2D
  2234  00008D                     	ds	3
  2235  000090                     i1_longPressENTER$3198:
  2236                           	opt stack 0
  2237                           
  2238                           ; 3 bytes @ 0x30
  2239  000090                     	ds	3
  2240  000093                     UARTint@sas:
  2241                           	opt stack 0
  2242                           
  2243                           ; 1 bytes @ 0x33
  2244  000093                     	ds	1
  2245  000094                     ??_isr:
  2246                           
  2247                           ; 1 bytes @ 0x34
  2248  000094                     	ds	17
  2249                           tblptru	equ	0xFF8
  2250                           tblptrh	equ	0xFF7
  2251                           tblptrl	equ	0xFF6
  2252                           tablat	equ	0xFF5
  2253                           postinc0	equ	0xFEE
  2254                           wreg	equ	0xFE8
  2255                           postdec1	equ	0xFE5
  2256                           fsr1l	equ	0xFE1
  2257                           
  2258                           	psect	cstackCOMRAM
  2259  000001                     __pcstackCOMRAM:
  2260                           	opt stack 0
  2261  000001                     ?i2___ftpack:
  2262                           	opt stack 0
  2263  000001                     i2setPWM2duty@actuator:
  2264                           	opt stack 0
  2265  000001                     i2___ftpack@arg:
  2266                           	opt stack 0
  2267                           
  2268                           ; 3 bytes @ 0x0
  2269  000001                     	ds	2
  2270  000003                     ??i2_setPWM2duty:
  2271                           
  2272                           ; 1 bytes @ 0x2
  2273  000003                     	ds	1
  2274  000004                     i2___ftpack@exp:
  2275                           	opt stack 0
  2276                           
  2277                           ; 1 bytes @ 0x3
  2278  000004                     	ds	1
  2279  000005                     i2___ftpack@sign:
  2280                           	opt stack 0
  2281  000005                     i2setPWM2duty@act:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x4
  2285  000005                     	ds	1
  2286  000006                     ??i2___ftpack:
  2287                           
  2288                           ; 1 bytes @ 0x5
  2289  000006                     	ds	3
  2290  000009                     ?i2___altoft:
  2291                           	opt stack 0
  2292  000009                     i2___altoft@c:
  2293                           	opt stack 0
  2294                           
  2295                           ; 4 bytes @ 0x8
  2296  000009                     	ds	4
  2297  00000D                     ??i2___altoft:
  2298                           
  2299                           ; 1 bytes @ 0xC
  2300  00000D                     	ds	4
  2301  000011                     i2___altoft@exp:
  2302                           	opt stack 0
  2303                           
  2304                           ; 1 bytes @ 0x10
  2305  000011                     	ds	1
  2306  000012                     i2___altoft@sign:
  2307                           	opt stack 0
  2308                           
  2309                           ; 1 bytes @ 0x11
  2310  000012                     	ds	1
  2311  000013                     i2___ftge@ff1:
  2312                           	opt stack 0
  2313                           
  2314                           ; 3 bytes @ 0x12
  2315  000013                     	ds	3
  2316  000016                     i2___ftge@ff2:
  2317                           	opt stack 0
  2318                           
  2319                           ; 3 bytes @ 0x15
  2320  000016                     	ds	3
  2321  000019                     ??i2___ftge:
  2322                           
  2323                           ; 1 bytes @ 0x18
  2324  000019                     	ds	3
  2325  00001C                     ??_T4int:
  2326                           
  2327                           ; 1 bytes @ 0x1B
  2328  00001C                     	ds	1
  2329  00001D                     ??_hp_isr:
  2330                           
  2331                           ; 1 bytes @ 0x1C
  2332  00001D                     	ds	14
  2333                           tblptru	equ	0xFF8
  2334                           tblptrh	equ	0xFF7
  2335                           tblptrl	equ	0xFF6
  2336                           tablat	equ	0xFF5
  2337                           postinc0	equ	0xFEE
  2338                           wreg	equ	0xFE8
  2339                           postdec1	equ	0xFE5
  2340                           fsr1l	equ	0xFE1
  2341                           
  2342 ;;
  2343 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2344 ;;
  2345 ;; *************** function _main *****************
  2346 ;; Defined at:
  2347 ;;		line 32 in file "source/main.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;		None
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;		None
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2361 ;;      Params:         0       0       0       0       0       0       0
  2362 ;;      Locals:         0       0       0       0       0       0       0
  2363 ;;      Temps:          0       0       0       0       0       0       0
  2364 ;;      Totals:         0       0       0       0       0       0       0
  2365 ;;Total ram usage:        0 bytes
  2366 ;; Hardware stack levels required when called:   22
  2367 ;; This function calls:
  2368 ;;		_EEPROMConfig
  2369 ;;		_PWM2Config
  2370 ;;		_UARTConfig
  2371 ;;		_buttonChecking
  2372 ;;		_clockConfig
  2373 ;;		_drawScreen
  2374 ;;		_interruptConfig
  2375 ;;		_ioConfig
  2376 ;;		_ioInitStt
  2377 ;;		_lcd_init
  2378 ;;		_setPWM2duty
  2379 ;;		_setPWM2on
  2380 ;;		_sysParamInit
  2381 ;;		_t4config
  2382 ;; This function is called by:
  2383 ;;		Startup code after reset
  2384 ;; This function uses a non-reentrant model
  2385 ;;
  2386                           
  2387                           	psect	text0
  2388  0067A8                     __ptext0:
  2389                           	opt stack 0
  2390  0067A8                     _main:
  2391                           	opt stack 9
  2392                           
  2393                           ;main.c: 34: clockConfig();
  2394                           
  2395                           ;incstack = 0
  2396  0067A8  ECA3  F035         	call	_clockConfig	;wreg free
  2397                           
  2398                           ;main.c: 35: t4config();
  2399  0067AC  EC3A  F035         	call	_t4config	;wreg free
  2400                           
  2401                           ;main.c: 36: ioInitStt();
  2402  0067B0  EC58  F036         	call	_ioInitStt	;wreg free
  2403                           
  2404                           ;main.c: 37: EEPROMConfig();
  2405  0067B4  EC60  F036         	call	_EEPROMConfig	;wreg free
  2406                           
  2407                           ;main.c: 39: sysParamInit();
  2408  0067B8  ECB4  F027         	call	_sysParamInit	;wreg free
  2409                           
  2410                           ;main.c: 40: ioConfig();
  2411  0067BC  ECD8  F034         	call	_ioConfig	;wreg free
  2412                           
  2413                           ;main.c: 41: lcd_init();
  2414  0067C0  EC54  F02B         	call	_lcd_init	;wreg free
  2415                           
  2416                           ;main.c: 42: PWM2Config();
  2417  0067C4  EC79  F032         	call	_PWM2Config	;wreg free
  2418                           
  2419                           ;main.c: 43: UARTConfig();
  2420  0067C8  ECA1  F034         	call	_UARTConfig	;wreg free
  2421                           
  2422                           ;main.c: 44: interruptConfig();
  2423  0067CC  EC5C  F036         	call	_interruptConfig	;wreg free
  2424  0067D0  0004               	clrwdt		;# 
  2425                           
  2426                           ;main.c: 46: WDTCONbits.SWDTEN = 1;
  2427  0067D2  80D1               	bsf	4049,0,c	;volatile
  2428                           
  2429                           ;main.c: 47: setPWM2duty(-400);
  2430  0067D4  0EFE               	movlw	254
  2431  0067D6  0101               	movlb	1	; () banked
  2432  0067D8  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
  2433  0067DA  0E70               	movlw	112
  2434  0067DC  6F00               	movwf	setPWM2duty@actuator& (0+255),b
  2435  0067DE  EC7D  F02D         	call	_setPWM2duty	;wreg free
  2436                           
  2437                           ;main.c: 48: setPWM2on(1);
  2438  0067E2  0E01               	movlw	1
  2439  0067E4  ECE5  F035         	call	_setPWM2on
  2440  0067E8                     l12631:
  2441                           
  2442                           ;main.c: 51: drawScreen();
  2443  0067E8  EC4D  F02A         	call	_drawScreen	;wreg free
  2444                           
  2445                           ;main.c: 52: buttonChecking();
  2446  0067EC  ECCD  F00F         	call	_buttonChecking	;wreg free
  2447  0067F0  D7FB               	goto	l12631
  2448  0067F2                     __end_of_main:
  2449                           	opt stack 0
  2450                           tblptru	equ	0xFF8
  2451                           tblptrh	equ	0xFF7
  2452                           tblptrl	equ	0xFF6
  2453                           tablat	equ	0xFF5
  2454                           postinc0	equ	0xFEE
  2455                           wreg	equ	0xFE8
  2456                           postdec1	equ	0xFE5
  2457                           fsr1l	equ	0xFE1
  2458                           
  2459 ;; *************** function _t4config *****************
  2460 ;; Defined at:
  2461 ;;		line 28 in file "source/T4Config.h"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;		None
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;		None
  2466 ;; Return value:  Size  Location     Type
  2467 ;;                  1    wreg      void 
  2468 ;; Registers used:
  2469 ;;		wreg, status,2
  2470 ;; Tracked objects:
  2471 ;;		On entry : 0/0
  2472 ;;		On exit  : 0/0
  2473 ;;		Unchanged: 0/0
  2474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2475 ;;      Params:         0       0       0       0       0       0       0
  2476 ;;      Locals:         0       0       0       0       0       0       0
  2477 ;;      Temps:          0       0       0       0       0       0       0
  2478 ;;      Totals:         0       0       0       0       0       0       0
  2479 ;;Total ram usage:        0 bytes
  2480 ;; Hardware stack levels used:    1
  2481 ;; Hardware stack levels required when called:   12
  2482 ;; This function calls:
  2483 ;;		Nothing
  2484 ;; This function is called by:
  2485 ;;		_main
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488                           
  2489                           	psect	text1
  2490  006A74                     __ptext1:
  2491                           	opt stack 0
  2492  006A74                     _t4config:
  2493                           	opt stack 18
  2494                           
  2495                           ;T4Config.h: 29: T4CONbits.TMR4ON = 0;
  2496                           
  2497                           ;incstack = 0
  2498  006A74  010F               	movlb	15	; () banked
  2499  006A76  9551               	bcf	81,2,b	;volatile
  2500                           
  2501                           ; BSR set to: 15
  2502                           ;T4Config.h: 30: T4CONbits.T4CKPS = 0b01;
  2503  006A78  010F               	movlb	15	; () banked
  2504  006A7A  5151               	movf	81,w,b	;volatile
  2505  006A7C  0BFC               	andlw	-4
  2506  006A7E  0901               	iorlw	1
  2507  006A80  6F51               	movwf	81,b	;volatile
  2508                           
  2509                           ;T4Config.h: 31: T4CONbits.T4OUTPS = 0b0100;
  2510  006A82  010F               	movlb	15	; () banked
  2511  006A84  5151               	movf	81,w,b	;volatile
  2512  006A86  0B87               	andlw	-121
  2513  006A88  0920               	iorlw	32
  2514  006A8A  6F51               	movwf	81,b	;volatile
  2515                           
  2516                           ;T4Config.h: 32: PR4 = 199;
  2517  006A8C  0EC7               	movlw	199
  2518  006A8E  010F               	movlb	15	; () banked
  2519  006A90  6F52               	movwf	82,b	;volatile
  2520                           
  2521                           ; BSR set to: 15
  2522                           ;T4Config.h: 33: PIR5bits.TMR4IF = 0;
  2523  006A92  907E               	bcf	3966,0,c	;volatile
  2524                           
  2525                           ; BSR set to: 15
  2526                           ;T4Config.h: 34: IPR5bits.TMR4IP = 1;
  2527  006A94  807F               	bsf	3967,0,c	;volatile
  2528                           
  2529                           ; BSR set to: 15
  2530                           ;T4Config.h: 35: PIE5bits.TMR4IE = 1;
  2531  006A96  807D               	bsf	3965,0,c	;volatile
  2532                           
  2533                           ; BSR set to: 15
  2534                           ;T4Config.h: 36: T4CONbits.TMR4ON = 1;
  2535  006A98  010F               	movlb	15	; () banked
  2536  006A9A  8551               	bsf	81,2,b	;volatile
  2537                           
  2538                           ; BSR set to: 15
  2539  006A9C  0012               	return		;funcret
  2540  006A9E                     __end_of_t4config:
  2541                           	opt stack 0
  2542                           tblptru	equ	0xFF8
  2543                           tblptrh	equ	0xFF7
  2544                           tblptrl	equ	0xFF6
  2545                           tablat	equ	0xFF5
  2546                           postinc0	equ	0xFEE
  2547                           wreg	equ	0xFE8
  2548                           postdec1	equ	0xFE5
  2549                           fsr1l	equ	0xFE1
  2550                           
  2551 ;; *************** function _sysParamInit *****************
  2552 ;; Defined at:
  2553 ;;		line 165 in file "source/sysParams.h"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;		None
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;		None
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      void 
  2560 ;; Registers used:
  2561 ;;		wreg, status,2, status,0, cstack
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 0/0
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2567 ;;      Params:         0       0       0       0       0       0       0
  2568 ;;      Locals:         0       0       0       0       0       0       0
  2569 ;;      Temps:          0       0       1       0       0       0       0
  2570 ;;      Totals:         0       0       1       0       0       0       0
  2571 ;;Total ram usage:        1 bytes
  2572 ;; Hardware stack levels used:    1
  2573 ;; Hardware stack levels required when called:   15
  2574 ;; This function calls:
  2575 ;;		_calcSysVars
  2576 ;;		_readEEPROM
  2577 ;; This function is called by:
  2578 ;;		_main
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           	psect	text2
  2583  004F68                     __ptext2:
  2584                           	opt stack 0
  2585  004F68                     _sysParamInit:
  2586                           	opt stack 15
  2587                           
  2588                           ;sysParams.h: 168: fData.floatUB = readEEPROM(3);
  2589                           
  2590                           ; BSR set to: 15
  2591                           ;incstack = 0
  2592  004F68  0E03               	movlw	3
  2593  004F6A  ECFE  F035         	call	_readEEPROM
  2594  004F6E  0100               	movlb	0	; () banked
  2595  004F70  6FC6               	movwf	(_fData+2)& (0+255),b
  2596                           
  2597                           ;sysParams.h: 169: fData.floatHB = readEEPROM(4);
  2598  004F72  0E04               	movlw	4
  2599  004F74  ECFE  F035         	call	_readEEPROM
  2600  004F78  0100               	movlb	0	; () banked
  2601  004F7A  6FC5               	movwf	(_fData+1)& (0+255),b
  2602                           
  2603                           ;sysParams.h: 170: fData.floatLB = readEEPROM(5);
  2604  004F7C  0E05               	movlw	5
  2605  004F7E  ECFE  F035         	call	_readEEPROM
  2606  004F82  0100               	movlb	0	; () banked
  2607  004F84  6FC4               	movwf	_fData& (0+255),b
  2608                           
  2609                           ; BSR set to: 0
  2610                           ;sysParams.h: 171: tiXcorte = fData.floatdat;
  2611  004F86  C0C4  F0B2         	movff	_fData,_tiXcorte
  2612  004F8A  C0C5  F0B3         	movff	_fData+1,_tiXcorte+1
  2613  004F8E  C0C6  F0B4         	movff	_fData+2,_tiXcorte+2
  2614                           
  2615                           ;sysParams.h: 172: i16Data.int16HB = readEEPROM(6);
  2616  004F92  0E06               	movlw	6
  2617  004F94  ECFE  F035         	call	_readEEPROM
  2618  004F98  0100               	movlb	0	; () banked
  2619  004F9A  6FC8               	movwf	(_i16Data+1)& (0+255),b
  2620                           
  2621                           ;sysParams.h: 173: i16Data.int16LB = readEEPROM(7);
  2622  004F9C  0E07               	movlw	7
  2623  004F9E  ECFE  F035         	call	_readEEPROM
  2624  004FA2  0100               	movlb	0	; () banked
  2625  004FA4  6FC7               	movwf	_i16Data& (0+255),b
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;sysParams.h: 174: numCortes = i16Data.int16dat;
  2629  004FA6  C0C7  F0B8         	movff	_i16Data,_numCortes
  2630  004FAA  C0C8  F0B9         	movff	_i16Data+1,_numCortes+1
  2631                           
  2632                           ;sysParams.h: 176: fData.floatUB = readEEPROM(9);
  2633  004FAE  0E09               	movlw	9
  2634  004FB0  ECFE  F035         	call	_readEEPROM
  2635  004FB4  0100               	movlb	0	; () banked
  2636  004FB6  6FC6               	movwf	(_fData+2)& (0+255),b
  2637                           
  2638                           ;sysParams.h: 177: fData.floatHB = readEEPROM(10);
  2639  004FB8  0E0A               	movlw	10
  2640  004FBA  ECFE  F035         	call	_readEEPROM
  2641  004FBE  0100               	movlb	0	; () banked
  2642  004FC0  6FC5               	movwf	(_fData+1)& (0+255),b
  2643                           
  2644                           ;sysParams.h: 178: fData.floatLB = readEEPROM(11);
  2645  004FC2  0E0B               	movlw	11
  2646  004FC4  ECFE  F035         	call	_readEEPROM
  2647  004FC8  0100               	movlb	0	; () banked
  2648  004FCA  6FC4               	movwf	_fData& (0+255),b
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;sysParams.h: 179: diamTubo = fData.floatdat;
  2652  004FCC  C0C4  F0A9         	movff	_fData,_diamTubo
  2653  004FD0  C0C5  F0AA         	movff	_fData+1,_diamTubo+1
  2654  004FD4  C0C6  F0AB         	movff	_fData+2,_diamTubo+2
  2655                           
  2656                           ;sysParams.h: 186: fData.floatUB = readEEPROM(17);
  2657  004FD8  0E11               	movlw	17
  2658  004FDA  ECFE  F035         	call	_readEEPROM
  2659  004FDE  0100               	movlb	0	; () banked
  2660  004FE0  6FC6               	movwf	(_fData+2)& (0+255),b
  2661                           
  2662                           ;sysParams.h: 187: fData.floatHB = readEEPROM(18);
  2663  004FE2  0E12               	movlw	18
  2664  004FE4  ECFE  F035         	call	_readEEPROM
  2665  004FE8  0100               	movlb	0	; () banked
  2666  004FEA  6FC5               	movwf	(_fData+1)& (0+255),b
  2667                           
  2668                           ;sysParams.h: 188: fData.floatLB = readEEPROM(19);
  2669  004FEC  0E13               	movlw	19
  2670  004FEE  ECFE  F035         	call	_readEEPROM
  2671  004FF2  0100               	movlb	0	; () banked
  2672  004FF4  6FC4               	movwf	_fData& (0+255),b
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;sysParams.h: 189: velocidadMasa = fData.floatdat;
  2676  004FF6  C0C4  F0B5         	movff	_fData,_velocidadMasa
  2677  004FFA  C0C5  F0B6         	movff	_fData+1,_velocidadMasa+1
  2678  004FFE  C0C6  F0B7         	movff	_fData+2,_velocidadMasa+2
  2679                           
  2680                           ; BSR set to: 0
  2681                           ;sysParams.h: 190: calcSysVars();
  2682  005002  EC0F  F032         	call	_calcSysVars	;wreg free
  2683                           
  2684                           ;sysParams.h: 191: processState = readEEPROM(31);
  2685  005006  0E1F               	movlw	31
  2686  005008  ECFE  F035         	call	_readEEPROM
  2687  00500C  0101               	movlb	1	; () banked
  2688  00500E  6F26               	movwf	??_sysParamInit& (0+255),b
  2689  005010  0101               	movlb	1	; () banked
  2690  005012  5126               	movf	??_sysParamInit& (0+255),w,b
  2691  005014  6E35               	movwf	_processState,c
  2692  005016  6A36               	clrf	_processState+1,c
  2693                           
  2694                           ;sysParams.h: 192: bladeIsUP = readEEPROM(32);
  2695  005018  0E20               	movlw	32
  2696  00501A  ECFE  F035         	call	_readEEPROM
  2697  00501E  6E50               	movwf	_bladeIsUP,c
  2698                           
  2699                           ;sysParams.h: 193: ProcessStarted = readEEPROM(30);
  2700  005020  0E1E               	movlw	30
  2701  005022  ECFE  F035         	call	_readEEPROM
  2702  005026  6E3A               	movwf	_ProcessStarted,c
  2703  005028  0012               	return		;funcret
  2704  00502A                     __end_of_sysParamInit:
  2705                           	opt stack 0
  2706                           tblptru	equ	0xFF8
  2707                           tblptrh	equ	0xFF7
  2708                           tblptrl	equ	0xFF6
  2709                           tablat	equ	0xFF5
  2710                           postinc0	equ	0xFEE
  2711                           wreg	equ	0xFE8
  2712                           postdec1	equ	0xFE5
  2713                           fsr1l	equ	0xFE1
  2714                           
  2715 ;; *************** function _readEEPROM *****************
  2716 ;; Defined at:
  2717 ;;		line 61 in file "source/sysParams.h"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;  adr             1    wreg     unsigned char 
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;  adr             1    0[BANK1 ] unsigned char 
  2722 ;; Return value:  Size  Location     Type
  2723 ;;                  1    wreg      unsigned char 
  2724 ;; Registers used:
  2725 ;;		wreg, status,2
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2731 ;;      Params:         0       0       0       0       0       0       0
  2732 ;;      Locals:         0       0       1       0       0       0       0
  2733 ;;      Temps:          0       0       0       0       0       0       0
  2734 ;;      Totals:         0       0       1       0       0       0       0
  2735 ;;Total ram usage:        1 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; Hardware stack levels required when called:   12
  2738 ;; This function calls:
  2739 ;;		Nothing
  2740 ;; This function is called by:
  2741 ;;		_sysParamInit
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text3
  2746  006BFC                     __ptext3:
  2747                           	opt stack 0
  2748  006BFC                     _readEEPROM:
  2749                           	opt stack 17
  2750                           
  2751                           ;incstack = 0
  2752                           ;readEEPROM@adr stored from wreg
  2753  006BFC  0101               	movlb	1	; () banked
  2754  006BFE  6F00               	movwf	readEEPROM@adr& (0+255),b
  2755                           
  2756                           ;sysParams.h: 62: EEADR = adr;
  2757  006C00  C100  FFA9         	movff	readEEPROM@adr,4009	;volatile
  2758                           
  2759                           ;sysParams.h: 63: EECON1bits.EEPGD = 0;
  2760  006C04  9EA6               	bcf	4006,7,c	;volatile
  2761                           
  2762                           ;sysParams.h: 64: EECON1bits.CFGS = 0;
  2763  006C06  9CA6               	bcf	4006,6,c	;volatile
  2764                           
  2765                           ;sysParams.h: 65: EECON1bits.RD = 1;
  2766  006C08  80A6               	bsf	4006,0,c	;volatile
  2767  006C0A                     l283:
  2768  006C0A  B0A6               	btfsc	4006,0,c	;volatile
  2769  006C0C  D7FE               	goto	l283
  2770                           
  2771                           ;sysParams.h: 67: return EEDATA;
  2772  006C0E  50A8               	movf	4008,w,c	;volatile
  2773  006C10  0012               	return		;funcret
  2774  006C12                     __end_of_readEEPROM:
  2775                           	opt stack 0
  2776                           tblptru	equ	0xFF8
  2777                           tblptrh	equ	0xFF7
  2778                           tblptrl	equ	0xFF6
  2779                           tablat	equ	0xFF5
  2780                           postinc0	equ	0xFEE
  2781                           wreg	equ	0xFE8
  2782                           postdec1	equ	0xFE5
  2783                           fsr1l	equ	0xFE1
  2784                           
  2785 ;; *************** function _calcSysVars *****************
  2786 ;; Defined at:
  2787 ;;		line 75 in file "source/sysParams.h"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;		None
  2790 ;; Auto vars:     Size  Location     Type
  2791 ;;  temp            3   35[BANK1 ] float 
  2792 ;; Return value:  Size  Location     Type
  2793 ;;                  1    wreg      void 
  2794 ;; Registers used:
  2795 ;;		wreg, status,2, status,0, cstack
  2796 ;; Tracked objects:
  2797 ;;		On entry : 0/0
  2798 ;;		On exit  : 0/0
  2799 ;;		Unchanged: 0/0
  2800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2801 ;;      Params:         0       0       0       0       0       0       0
  2802 ;;      Locals:         0       0       3       0       0       0       0
  2803 ;;      Temps:          0       0       0       0       0       0       0
  2804 ;;      Totals:         0       0       3       0       0       0       0
  2805 ;;Total ram usage:        3 bytes
  2806 ;; Hardware stack levels used:    1
  2807 ;; Hardware stack levels required when called:   14
  2808 ;; This function calls:
  2809 ;;		___ftmul
  2810 ;; This function is called by:
  2811 ;;		_sysParamInit
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815                           	psect	text4
  2816  00641E                     __ptext4:
  2817                           	opt stack 0
  2818  00641E                     _calcSysVars:
  2819                           	opt stack 15
  2820                           
  2821                           ;sysParams.h: 76: float temp = 0;
  2822                           
  2823                           ;incstack = 0
  2824  00641E  0E00               	movlw	0
  2825  006420  0101               	movlb	1	; () banked
  2826  006422  6F23               	movwf	calcSysVars@temp& (0+255),b
  2827  006424  0E00               	movlw	0
  2828  006426  0101               	movlb	1	; () banked
  2829  006428  6F24               	movwf	(calcSysVars@temp+1)& (0+255),b
  2830  00642A  0E00               	movlw	0
  2831  00642C  0101               	movlb	1	; () banked
  2832  00642E  6F25               	movwf	(calcSysVars@temp+2)& (0+255),b
  2833                           
  2834                           ; BSR set to: 1
  2835                           ;sysParams.h: 77: timsXcorte = (float)tiXcorte * 1000;
  2836  006430  C0B2  F114         	movff	_tiXcorte,___ftmul@f1
  2837  006434  C0B3  F115         	movff	_tiXcorte+1,___ftmul@f1+1
  2838  006438  C0B4  F116         	movff	_tiXcorte+2,___ftmul@f1+2
  2839  00643C  0E00               	movlw	0
  2840  00643E  0101               	movlb	1	; () banked
  2841  006440  6F17               	movwf	___ftmul@f2& (0+255),b
  2842  006442  0E7A               	movlw	122
  2843  006444  0101               	movlb	1	; () banked
  2844  006446  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  2845  006448  0E44               	movlw	68
  2846  00644A  0101               	movlb	1	; () banked
  2847  00644C  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  2848  00644E  ECF4  F019         	call	___ftmul	;wreg free
  2849  006452  C114  F04D         	movff	?___ftmul,_timsXcorte
  2850  006456  C115  F04E         	movff	?___ftmul+1,_timsXcorte+1
  2851  00645A  C116  F04F         	movff	?___ftmul+2,_timsXcorte+2
  2852                           
  2853                           ;sysParams.h: 83: kgXcorte = (float)velocidadMasa * tiXcorte;
  2854  00645E  C0B5  F114         	movff	_velocidadMasa,___ftmul@f1
  2855  006462  C0B6  F115         	movff	_velocidadMasa+1,___ftmul@f1+1
  2856  006466  C0B7  F116         	movff	_velocidadMasa+2,___ftmul@f1+2
  2857  00646A  C0B2  F117         	movff	_tiXcorte,___ftmul@f2
  2858  00646E  C0B3  F118         	movff	_tiXcorte+1,___ftmul@f2+1
  2859  006472  C0B4  F119         	movff	_tiXcorte+2,___ftmul@f2+2
  2860  006476  ECF4  F019         	call	___ftmul	;wreg free
  2861  00647A  C114  F0AC         	movff	?___ftmul,_kgXcorte
  2862  00647E  C115  F0AD         	movff	?___ftmul+1,_kgXcorte+1
  2863  006482  C116  F0AE         	movff	?___ftmul+2,_kgXcorte+2
  2864  006486  0012               	return		;funcret
  2865  006488                     __end_of_calcSysVars:
  2866                           	opt stack 0
  2867                           tblptru	equ	0xFF8
  2868                           tblptrh	equ	0xFF7
  2869                           tblptrl	equ	0xFF6
  2870                           tablat	equ	0xFF5
  2871                           postinc0	equ	0xFEE
  2872                           wreg	equ	0xFE8
  2873                           postdec1	equ	0xFE5
  2874                           fsr1l	equ	0xFE1
  2875                           
  2876 ;; *************** function _setPWM2on *****************
  2877 ;; Defined at:
  2878 ;;		line 139 in file "source/PWMConfig.h"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;  on              1    wreg     unsigned char 
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;  on              1    0[BANK1 ] unsigned char 
  2883 ;; Return value:  Size  Location     Type
  2884 ;;                  1    wreg      void 
  2885 ;; Registers used:
  2886 ;;		wreg, status,2
  2887 ;; Tracked objects:
  2888 ;;		On entry : 0/0
  2889 ;;		On exit  : 0/0
  2890 ;;		Unchanged: 0/0
  2891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2892 ;;      Params:         0       0       0       0       0       0       0
  2893 ;;      Locals:         0       0       1       0       0       0       0
  2894 ;;      Temps:          0       0       0       0       0       0       0
  2895 ;;      Totals:         0       0       1       0       0       0       0
  2896 ;;Total ram usage:        1 bytes
  2897 ;; Hardware stack levels used:    1
  2898 ;; Hardware stack levels required when called:   12
  2899 ;; This function calls:
  2900 ;;		Nothing
  2901 ;; This function is called by:
  2902 ;;		_main
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           	psect	text5
  2907  006BCA                     __ptext5:
  2908                           	opt stack 0
  2909  006BCA                     _setPWM2on:
  2910                           	opt stack 18
  2911                           
  2912                           ;incstack = 0
  2913                           ;setPWM2on@on stored from wreg
  2914  006BCA  0101               	movlb	1	; () banked
  2915  006BCC  6F00               	movwf	setPWM2on@on& (0+255),b
  2916                           
  2917                           ;PWMConfig.h: 140: if(on) {
  2918  006BCE  0101               	movlb	1	; () banked
  2919  006BD0  5100               	movf	setPWM2on@on& (0+255),w,b
  2920  006BD2  0101               	movlb	1	; () banked
  2921  006BD4  B4D8               	btfsc	status,2,c
  2922  006BD6  D003               	goto	l513
  2923                           
  2924                           ; BSR set to: 1
  2925                           ;PWMConfig.h: 141: TRISCbits.TRISC0 = 0;
  2926  006BD8  9094               	bcf	3988,0,c	;volatile
  2927                           
  2928                           ;PWMConfig.h: 142: TRISCbits.TRISC1 = 0;
  2929  006BDA  9294               	bcf	3988,1,c	;volatile
  2930                           
  2931                           ;PWMConfig.h: 143: }else {
  2932  006BDC  0012               	return	
  2933  006BDE                     l513:
  2934                           
  2935                           ; BSR set to: 1
  2936                           ;PWMConfig.h: 144: TRISCbits.TRISC0 = 1;
  2937  006BDE  8094               	bsf	3988,0,c	;volatile
  2938                           
  2939                           ;PWMConfig.h: 145: TRISCbits.TRISC1 = 1;
  2940  006BE0  8294               	bsf	3988,1,c	;volatile
  2941  006BE2  0012               	return	
  2942  006BE4                     __end_of_setPWM2on:
  2943                           	opt stack 0
  2944                           tblptru	equ	0xFF8
  2945                           tblptrh	equ	0xFF7
  2946                           tblptrl	equ	0xFF6
  2947                           tablat	equ	0xFF5
  2948                           postinc0	equ	0xFEE
  2949                           wreg	equ	0xFE8
  2950                           postdec1	equ	0xFE5
  2951                           fsr1l	equ	0xFE1
  2952                           status	equ	0xFD8
  2953                           
  2954 ;; *************** function _lcd_init *****************
  2955 ;; Defined at:
  2956 ;;		line 179 in file "source/../../vclib_lcd.h"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;		None
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;  LCD_INIT_STR    4    9[BANK1 ] unsigned char [4]
  2961 ;;  i               1   13[BANK1 ] unsigned char 
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  1    wreg      void 
  2964 ;; Registers used:
  2965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2971 ;;      Params:         0       0       0       0       0       0       0
  2972 ;;      Locals:         0       0       5       0       0       0       0
  2973 ;;      Temps:          0       0       1       0       0       0       0
  2974 ;;      Totals:         0       0       6       0       0       0       0
  2975 ;;Total ram usage:        6 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:   15
  2978 ;; This function calls:
  2979 ;;		_lcd_send_4bits
  2980 ;;		_lcd_send_byte
  2981 ;; This function is called by:
  2982 ;;		_main
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           	psect	text6
  2987  0056A8                     __ptext6:
  2988                           	opt stack 0
  2989  0056A8                     _lcd_init:
  2990                           	opt stack 15
  2991                           
  2992                           ;vclib_lcd.h: 180: unsigned char i;
  2993                           ;vclib_lcd.h: 181: unsigned char LCD_INIT_STRING[4] = {0x20 | (2 << 2), 0xc, 1, 6};
  2994                           
  2995                           ; BSR set to: 1
  2996                           ;incstack = 0
  2997  0056A8  C0A5  F109         	movff	lcd_init@F7567,lcd_init@LCD_INIT_STRING
  2998  0056AC  C0A6  F10A         	movff	lcd_init@F7567+1,lcd_init@LCD_INIT_STRING+1
  2999  0056B0  C0A7  F10B         	movff	lcd_init@F7567+2,lcd_init@LCD_INIT_STRING+2
  3000  0056B4  C0A8  F10C         	movff	lcd_init@F7567+3,lcd_init@LCD_INIT_STRING+3
  3001                           
  3002                           ;vclib_lcd.h: 184: PORTBbits.RB3 = 0;
  3003  0056B8  9681               	bcf	3969,3,c	;volatile
  3004                           
  3005                           ;vclib_lcd.h: 185: PORTBbits.RB1 = 0;
  3006  0056BA  9281               	bcf	3969,1,c	;volatile
  3007                           
  3008                           ;vclib_lcd.h: 186: PORTBbits.RB2 = 0;
  3009  0056BC  9481               	bcf	3969,2,c	;volatile
  3010                           
  3011                           ;vclib_lcd.h: 187: _delay((unsigned long)((15)*(16000000/4000.0)));
  3012  0056BE  0E4E               	movlw	78
  3013  0056C0  0101               	movlb	1	; () banked
  3014  0056C2  6F08               	movwf	??_lcd_init& (0+255),b
  3015  0056C4  0EEB               	movlw	235
  3016  0056C6                     u18917:
  3017  0056C6  2EE8               	decfsz	wreg,f,c
  3018  0056C8  D7FE               	goto	u18917
  3019  0056CA  2F08               	decfsz	??_lcd_init& (0+255),f,b
  3020  0056CC  D7FC               	goto	u18917
  3021  0056CE  F000               	nop	
  3022                           
  3023                           ;vclib_lcd.h: 188: for (i = 1; i <= 3; ++i) {
  3024  0056D0  0E01               	movlw	1
  3025  0056D2  0101               	movlb	1	; () banked
  3026  0056D4  6F0D               	movwf	lcd_init@i& (0+255),b
  3027  0056D6                     l12021:
  3028                           
  3029                           ; BSR set to: 1
  3030  0056D6  0E03               	movlw	3
  3031  0056D8  0101               	movlb	1	; () banked
  3032  0056DA  650D               	cpfsgt	lcd_init@i& (0+255),b
  3033  0056DC  D001               	goto	l12025
  3034  0056DE  D00F               	goto	l12033
  3035  0056E0                     l12025:
  3036                           
  3037                           ; BSR set to: 1
  3038                           ;vclib_lcd.h: 189: lcd_send_4bits(3);
  3039  0056E0  0E03               	movlw	3
  3040  0056E2  ECA2  F02E         	call	_lcd_send_4bits
  3041                           
  3042                           ;vclib_lcd.h: 190: _delay((unsigned long)((5)*(16000000/4000.0)));
  3043  0056E6  0E1A               	movlw	26
  3044  0056E8  0101               	movlb	1	; () banked
  3045  0056EA  6F08               	movwf	??_lcd_init& (0+255),b
  3046  0056EC  0EF8               	movlw	248
  3047  0056EE                     u18927:
  3048  0056EE  2EE8               	decfsz	wreg,f,c
  3049  0056F0  D7FE               	goto	u18927
  3050  0056F2  2F08               	decfsz	??_lcd_init& (0+255),f,b
  3051  0056F4  D7FC               	goto	u18927
  3052  0056F6  D000               	nop2	
  3053  0056F8  0101               	movlb	1	; () banked
  3054  0056FA  2B0D               	incf	lcd_init@i& (0+255),f,b
  3055  0056FC  D7EC               	goto	l12021
  3056  0056FE                     l12033:
  3057                           
  3058                           ; BSR set to: 1
  3059                           ;vclib_lcd.h: 191: }
  3060                           ;vclib_lcd.h: 192: lcd_send_4bits(2);
  3061  0056FE  0E02               	movlw	2
  3062  005700  ECA2  F02E         	call	_lcd_send_4bits
  3063                           
  3064                           ;vclib_lcd.h: 193: _delay((unsigned long)((5)*(16000000/4000.0)));
  3065  005704  0E1A               	movlw	26
  3066  005706  0101               	movlb	1	; () banked
  3067  005708  6F08               	movwf	??_lcd_init& (0+255),b
  3068  00570A  0EF8               	movlw	248
  3069  00570C                     u18937:
  3070  00570C  2EE8               	decfsz	wreg,f,c
  3071  00570E  D7FE               	goto	u18937
  3072  005710  2F08               	decfsz	??_lcd_init& (0+255),f,b
  3073  005712  D7FC               	goto	u18937
  3074  005714  D000               	nop2	
  3075                           
  3076                           ;vclib_lcd.h: 194: for (i = 0; i <= 3; ++i)
  3077  005716  0E00               	movlw	0
  3078  005718  0101               	movlb	1	; () banked
  3079  00571A  6F0D               	movwf	lcd_init@i& (0+255),b
  3080  00571C                     l12039:
  3081                           
  3082                           ; BSR set to: 1
  3083  00571C  0E03               	movlw	3
  3084  00571E  0101               	movlb	1	; () banked
  3085  005720  650D               	cpfsgt	lcd_init@i& (0+255),b
  3086  005722  D001               	goto	l12043
  3087  005724  0012               	return	
  3088  005726                     l12043:
  3089                           
  3090                           ; BSR set to: 1
  3091                           ;vclib_lcd.h: 195: lcd_send_byte(0, LCD_INIT_STRING[i]);
  3092  005726  0101               	movlb	1	; () banked
  3093  005728  510D               	movf	lcd_init@i& (0+255),w,b
  3094  00572A  0D01               	mullw	1
  3095  00572C  0E09               	movlw	low lcd_init@LCD_INIT_STRING
  3096  00572E  24F3               	addwf	prodl,w,c
  3097  005730  6ED9               	movwf	fsr2l,c
  3098  005732  0E01               	movlw	high lcd_init@LCD_INIT_STRING
  3099  005734  20F4               	addwfc	prodh,w,c
  3100  005736  6EDA               	movwf	fsr2h,c
  3101  005738  50DF               	movf	indf2,w,c
  3102  00573A  0101               	movlb	1	; () banked
  3103  00573C  6F05               	movwf	lcd_send_byte@n& (0+255),b
  3104  00573E  0E00               	movlw	0
  3105  005740  EC62  F034         	call	_lcd_send_byte
  3106  005744  0101               	movlb	1	; () banked
  3107  005746  2B0D               	incf	lcd_init@i& (0+255),f,b
  3108  005748  D7E9               	goto	l12039
  3109  00574A                     __end_of_lcd_init:
  3110                           	opt stack 0
  3111                           tblptru	equ	0xFF8
  3112                           tblptrh	equ	0xFF7
  3113                           tblptrl	equ	0xFF6
  3114                           tablat	equ	0xFF5
  3115                           prodh	equ	0xFF4
  3116                           prodl	equ	0xFF3
  3117                           postinc0	equ	0xFEE
  3118                           wreg	equ	0xFE8
  3119                           postdec1	equ	0xFE5
  3120                           fsr1l	equ	0xFE1
  3121                           indf2	equ	0xFDF
  3122                           fsr2h	equ	0xFDA
  3123                           fsr2l	equ	0xFD9
  3124                           status	equ	0xFD8
  3125                           
  3126 ;; *************** function _ioInitStt *****************
  3127 ;; Defined at:
  3128 ;;		line 85 in file "source/IOConfig.h"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;		None
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;		None
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  1    wreg      void 
  3135 ;; Registers used:
  3136 ;;		None
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3142 ;;      Params:         0       0       0       0       0       0       0
  3143 ;;      Locals:         0       0       0       0       0       0       0
  3144 ;;      Temps:          0       0       0       0       0       0       0
  3145 ;;      Totals:         0       0       0       0       0       0       0
  3146 ;;Total ram usage:        0 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:   12
  3149 ;; This function calls:
  3150 ;;		Nothing
  3151 ;; This function is called by:
  3152 ;;		_main
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           	psect	text7
  3157  006CB0                     __ptext7:
  3158                           	opt stack 0
  3159  006CB0                     _ioInitStt:
  3160                           	opt stack 18
  3161                           
  3162                           ;IOConfig.h: 86: LATCbits.LATC4 = 0;
  3163                           
  3164                           ; BSR set to: 1
  3165                           ;incstack = 0
  3166  006CB0  988B               	bcf	3979,4,c	;volatile
  3167                           
  3168                           ;IOConfig.h: 87: LATBbits.LATB0 = 0;
  3169  006CB2  908A               	bcf	3978,0,c	;volatile
  3170                           
  3171                           ;IOConfig.h: 88: LATCbits.LATC5 = 0;
  3172  006CB4  9A8B               	bcf	3979,5,c	;volatile
  3173  006CB6  0012               	return		;funcret
  3174  006CB8                     __end_of_ioInitStt:
  3175                           	opt stack 0
  3176                           tblptru	equ	0xFF8
  3177                           tblptrh	equ	0xFF7
  3178                           tblptrl	equ	0xFF6
  3179                           tablat	equ	0xFF5
  3180                           prodh	equ	0xFF4
  3181                           prodl	equ	0xFF3
  3182                           postinc0	equ	0xFEE
  3183                           wreg	equ	0xFE8
  3184                           postdec1	equ	0xFE5
  3185                           fsr1l	equ	0xFE1
  3186                           indf2	equ	0xFDF
  3187                           fsr2h	equ	0xFDA
  3188                           fsr2l	equ	0xFD9
  3189                           status	equ	0xFD8
  3190                           
  3191 ;; *************** function _ioConfig *****************
  3192 ;; Defined at:
  3193 ;;		line 68 in file "source/IOConfig.h"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;		None
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;		None
  3198 ;; Return value:  Size  Location     Type
  3199 ;;                  1    wreg      void 
  3200 ;; Registers used:
  3201 ;;		None
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3207 ;;      Params:         0       0       0       0       0       0       0
  3208 ;;      Locals:         0       0       0       0       0       0       0
  3209 ;;      Temps:          0       0       0       0       0       0       0
  3210 ;;      Totals:         0       0       0       0       0       0       0
  3211 ;;Total ram usage:        0 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:   12
  3214 ;; This function calls:
  3215 ;;		Nothing
  3216 ;; This function is called by:
  3217 ;;		_main
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           	psect	text8
  3222  0069B0                     __ptext8:
  3223                           	opt stack 0
  3224  0069B0                     _ioConfig:
  3225                           	opt stack 18
  3226                           
  3227                           ;IOConfig.h: 69: TRISBbits.TRISB1 = 0;
  3228                           
  3229                           ;incstack = 0
  3230  0069B0  9293               	bcf	3987,1,c	;volatile
  3231                           
  3232                           ;IOConfig.h: 70: TRISBbits.TRISB2 = 0;
  3233  0069B2  9493               	bcf	3987,2,c	;volatile
  3234                           
  3235                           ;IOConfig.h: 71: TRISBbits.TRISB3 = 0;
  3236  0069B4  9693               	bcf	3987,3,c	;volatile
  3237                           
  3238                           ;IOConfig.h: 72: TRISBbits.TRISB0 = 0;
  3239  0069B6  9093               	bcf	3987,0,c	;volatile
  3240                           
  3241                           ;IOConfig.h: 73: TRISCbits.TRISC5 = 0;
  3242  0069B8  9A94               	bcf	3988,5,c	;volatile
  3243                           
  3244                           ;IOConfig.h: 74: TRISAbits.TRISA7 = 1;
  3245  0069BA  8E92               	bsf	3986,7,c	;volatile
  3246                           
  3247                           ;IOConfig.h: 75: TRISAbits.TRISA6 = 1;
  3248  0069BC  8C92               	bsf	3986,6,c	;volatile
  3249                           
  3250                           ;IOConfig.h: 76: TRISCbits.TRISC2 = 1; ANSELCbits.ANSC2 = 0;
  3251  0069BE  8494               	bsf	3988,2,c	;volatile
  3252  0069C0  010F               	movlb	15	; () banked
  3253  0069C2  953A               	bcf	58,2,b	;volatile
  3254                           
  3255                           ;IOConfig.h: 77: TRISCbits.TRISC3 = 1; ANSELCbits.ANSC3 = 0;
  3256  0069C4  8694               	bsf	3988,3,c	;volatile
  3257  0069C6  010F               	movlb	15	; () banked
  3258  0069C8  973A               	bcf	58,3,b	;volatile
  3259                           
  3260                           ;IOConfig.h: 78: TRISAbits.TRISA2 = 1; ANSELAbits.ANSA2 = 0;
  3261  0069CA  8492               	bsf	3986,2,c	;volatile
  3262  0069CC  010F               	movlb	15	; () banked
  3263  0069CE  9538               	bcf	56,2,b	;volatile
  3264                           
  3265                           ;IOConfig.h: 79: TRISAbits.TRISA3 = 1; ANSELAbits.ANSA3 = 0;
  3266  0069D0  8692               	bsf	3986,3,c	;volatile
  3267  0069D2  010F               	movlb	15	; () banked
  3268  0069D4  9738               	bcf	56,3,b	;volatile
  3269                           
  3270                           ;IOConfig.h: 80: TRISAbits.TRISA4 = 1;
  3271  0069D6  8892               	bsf	3986,4,c	;volatile
  3272                           
  3273                           ;IOConfig.h: 81: TRISAbits.TRISA5 = 1; ANSELAbits.ANSA5 = 0;
  3274  0069D8  8A92               	bsf	3986,5,c	;volatile
  3275  0069DA  010F               	movlb	15	; () banked
  3276  0069DC  9B38               	bcf	56,5,b	;volatile
  3277                           
  3278                           ;IOConfig.h: 82: TRISCbits.TRISC4 = 0;
  3279  0069DE  9894               	bcf	3988,4,c	;volatile
  3280                           
  3281                           ; BSR set to: 15
  3282  0069E0  0012               	return		;funcret
  3283  0069E2                     __end_of_ioConfig:
  3284                           	opt stack 0
  3285                           tblptru	equ	0xFF8
  3286                           tblptrh	equ	0xFF7
  3287                           tblptrl	equ	0xFF6
  3288                           tablat	equ	0xFF5
  3289                           prodh	equ	0xFF4
  3290                           prodl	equ	0xFF3
  3291                           postinc0	equ	0xFEE
  3292                           wreg	equ	0xFE8
  3293                           postdec1	equ	0xFE5
  3294                           fsr1l	equ	0xFE1
  3295                           indf2	equ	0xFDF
  3296                           fsr2h	equ	0xFDA
  3297                           fsr2l	equ	0xFD9
  3298                           status	equ	0xFD8
  3299                           
  3300 ;; *************** function _interruptConfig *****************
  3301 ;; Defined at:
  3302 ;;		line 89 in file "source/SYSConfig.h"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;		None
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;		None
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      void 
  3309 ;; Registers used:
  3310 ;;		None
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3316 ;;      Params:         0       0       0       0       0       0       0
  3317 ;;      Locals:         0       0       0       0       0       0       0
  3318 ;;      Temps:          0       0       0       0       0       0       0
  3319 ;;      Totals:         0       0       0       0       0       0       0
  3320 ;;Total ram usage:        0 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:   12
  3323 ;; This function calls:
  3324 ;;		Nothing
  3325 ;; This function is called by:
  3326 ;;		_main
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           	psect	text9
  3331  006CB8                     __ptext9:
  3332                           	opt stack 0
  3333  006CB8                     _interruptConfig:
  3334                           	opt stack 18
  3335                           
  3336                           ;SYSConfig.h: 90: RCONbits.IPEN = 1;
  3337                           
  3338                           ; BSR set to: 15
  3339                           ;incstack = 0
  3340  006CB8  8ED0               	bsf	4048,7,c	;volatile
  3341                           
  3342                           ;SYSConfig.h: 91: INTCONbits.PEIE = 1;
  3343  006CBA  8CF2               	bsf	intcon,6,c	;volatile
  3344                           
  3345                           ;SYSConfig.h: 92: INTCONbits.GIE = 1;
  3346  006CBC  8EF2               	bsf	intcon,7,c	;volatile
  3347  006CBE  0012               	return		;funcret
  3348  006CC0                     __end_of_interruptConfig:
  3349                           	opt stack 0
  3350                           tblptru	equ	0xFF8
  3351                           tblptrh	equ	0xFF7
  3352                           tblptrl	equ	0xFF6
  3353                           tablat	equ	0xFF5
  3354                           prodh	equ	0xFF4
  3355                           prodl	equ	0xFF3
  3356                           intcon	equ	0xFF2
  3357                           postinc0	equ	0xFEE
  3358                           wreg	equ	0xFE8
  3359                           postdec1	equ	0xFE5
  3360                           fsr1l	equ	0xFE1
  3361                           indf2	equ	0xFDF
  3362                           fsr2h	equ	0xFDA
  3363                           fsr2l	equ	0xFD9
  3364                           status	equ	0xFD8
  3365                           
  3366 ;; *************** function _drawScreen *****************
  3367 ;; Defined at:
  3368 ;;		line 249 in file "source/screenDrawers.h"
  3369 ;; Parameters:    Size  Location     Type
  3370 ;;		None
  3371 ;; Auto vars:     Size  Location     Type
  3372 ;;		None
  3373 ;; Return value:  Size  Location     Type
  3374 ;;                  1    wreg      void 
  3375 ;; Registers used:
  3376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3377 ;; Tracked objects:
  3378 ;;		On entry : 0/0
  3379 ;;		On exit  : 0/0
  3380 ;;		Unchanged: 0/0
  3381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3382 ;;      Params:         0       0       0       0       0       0       0
  3383 ;;      Locals:         0       0       0       0       0       0       0
  3384 ;;      Temps:          0       0       0       0       0       0       0
  3385 ;;      Totals:         0       0       0       0       0       0       0
  3386 ;;Total ram usage:        0 bytes
  3387 ;; Hardware stack levels used:    1
  3388 ;; Hardware stack levels required when called:   21
  3389 ;; This function calls:
  3390 ;;		_drawAdvON
  3391 ;;		_drawAutoCalibRM
  3392 ;;		_drawBadPass
  3393 ;;		_drawCalibProc
  3394 ;;		_drawChanVal
  3395 ;;		_drawMenu
  3396 ;;		_drawPassWord
  3397 ;;		_drawSNquest
  3398 ;; This function is called by:
  3399 ;;		_main
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           	psect	text10
  3404  00549A                     __ptext10:
  3405                           	opt stack 0
  3406  00549A                     _drawScreen:
  3407                           	opt stack 9
  3408                           
  3409                           ;screenDrawers.h: 250: switch (actualScreen) {
  3410                           
  3411                           ;incstack = 0
  3412  00549A  D02F               	goto	l12099
  3413  00549C                     l12071:
  3414                           
  3415                           ;screenDrawers.h: 252: drawMenu(0);
  3416  00549C  0E00               	movlw	0
  3417  00549E  ECE4  F014         	call	_drawMenu
  3418                           
  3419                           ;screenDrawers.h: 253: break;
  3420  0054A2  0012               	return	
  3421  0054A4                     l12073:
  3422                           
  3423                           ;screenDrawers.h: 255: drawPassWord();
  3424  0054A4  EC3E  F025         	call	_drawPassWord	;wreg free
  3425                           
  3426                           ;screenDrawers.h: 256: break;
  3427  0054A8  0012               	return	
  3428  0054AA                     l12075:
  3429                           
  3430                           ;screenDrawers.h: 258: drawBadPass();
  3431  0054AA  EC09  F036         	call	_drawBadPass	;wreg free
  3432                           
  3433                           ;screenDrawers.h: 259: break;
  3434  0054AE  0012               	return	
  3435  0054B0                     l12077:
  3436                           
  3437                           ;screenDrawers.h: 261: drawMenu(1);
  3438  0054B0  0E01               	movlw	1
  3439  0054B2  ECE4  F014         	call	_drawMenu
  3440                           
  3441                           ;screenDrawers.h: 262: break;
  3442  0054B6  0012               	return	
  3443  0054B8                     l12079:
  3444                           
  3445                           ;screenDrawers.h: 264: drawAdvON(1);
  3446  0054B8  0E01               	movlw	1
  3447  0054BA  EC87  F033         	call	_drawAdvON
  3448                           
  3449                           ;screenDrawers.h: 265: break;
  3450  0054BE  0012               	return	
  3451  0054C0                     l12081:
  3452                           
  3453                           ;screenDrawers.h: 267: drawAdvON(0);
  3454  0054C0  0E00               	movlw	0
  3455  0054C2  EC87  F033         	call	_drawAdvON
  3456                           
  3457                           ;screenDrawers.h: 268: break;
  3458  0054C6  0012               	return	
  3459  0054C8                     l12083:
  3460                           
  3461                           ;screenDrawers.h: 270: drawChanVal();
  3462  0054C8  ECD5  F028         	call	_drawChanVal	;wreg free
  3463                           
  3464                           ;screenDrawers.h: 271: break;
  3465  0054CC  0012               	return	
  3466  0054CE                     l12085:
  3467                           
  3468                           ;screenDrawers.h: 273: drawSNquest(0);
  3469  0054CE  0E00               	movlw	0
  3470  0054D0  ECC6  F024         	call	_drawSNquest
  3471                           
  3472                           ;screenDrawers.h: 274: break;
  3473  0054D4  0012               	return	
  3474  0054D6                     l12087:
  3475                           
  3476                           ;screenDrawers.h: 276: drawSNquest(1);
  3477  0054D6  0E01               	movlw	1
  3478  0054D8  ECC6  F024         	call	_drawSNquest
  3479                           
  3480                           ;screenDrawers.h: 277: break;
  3481  0054DC  0012               	return	
  3482  0054DE                     l12089:
  3483                           
  3484                           ;screenDrawers.h: 279: drawSNquest(2);
  3485  0054DE  0E02               	movlw	2
  3486  0054E0  ECC6  F024         	call	_drawSNquest
  3487                           
  3488                           ;screenDrawers.h: 280: break;
  3489  0054E4  0012               	return	
  3490  0054E6                     l12091:
  3491                           
  3492                           ;screenDrawers.h: 282: drawSNquest(3);
  3493  0054E6  0E03               	movlw	3
  3494  0054E8  ECC6  F024         	call	_drawSNquest
  3495                           
  3496                           ;screenDrawers.h: 283: break;
  3497  0054EC  0012               	return	
  3498  0054EE                     l12093:
  3499                           
  3500                           ;screenDrawers.h: 285: drawCalibProc();
  3501  0054EE  EC77  F02F         	call	_drawCalibProc	;wreg free
  3502                           
  3503                           ;screenDrawers.h: 286: break;
  3504  0054F2  0012               	return	
  3505  0054F4                     l12095:
  3506                           
  3507                           ;screenDrawers.h: 288: drawAutoCalibRM();
  3508  0054F4  ECF1  F034         	call	_drawAutoCalibRM	;wreg free
  3509                           
  3510                           ;screenDrawers.h: 290: }
  3511                           ;screenDrawers.h: 291: }
  3512                           
  3513                           ;screenDrawers.h: 289: break;
  3514  0054F8  0012               	return	
  3515  0054FA                     l12099:
  3516  0054FA  0101               	movlb	1	; () banked
  3517  0054FC  51BA               	movf	_actualScreen& (0+255),w,b
  3518                           
  3519                           ; Switch size 1, requested type "space"
  3520                           ; Number of cases is 13, Range of values is 0 to 12
  3521                           ; switch strategies available:
  3522                           ; Name         Instructions Cycles
  3523                           ; simple_byte           40    21 (average)
  3524                           ;	Chosen strategy is simple_byte
  3525  0054FE  0A00               	xorlw	0	; case 0
  3526  005500  B4D8               	btfsc	status,2,c
  3527  005502  D7CC               	goto	l12071
  3528  005504  0A01               	xorlw	1	; case 1
  3529  005506  B4D8               	btfsc	status,2,c
  3530  005508  D7CD               	goto	l12073
  3531  00550A  0A03               	xorlw	3	; case 2
  3532  00550C  B4D8               	btfsc	status,2,c
  3533  00550E  D7DF               	goto	l12085
  3534  005510  0A01               	xorlw	1	; case 3
  3535  005512  B4D8               	btfsc	status,2,c
  3536  005514  D7E0               	goto	l12087
  3537  005516  0A07               	xorlw	7	; case 4
  3538  005518  B4D8               	btfsc	status,2,c
  3539  00551A  D7CA               	goto	l12077
  3540  00551C  0A01               	xorlw	1	; case 5
  3541  00551E  B4D8               	btfsc	status,2,c
  3542  005520  D7D3               	goto	l12083
  3543  005522  0A03               	xorlw	3	; case 6
  3544  005524  B4D8               	btfsc	status,2,c
  3545  005526  D7E3               	goto	l12093
  3546  005528  0A01               	xorlw	1	; case 7
  3547  00552A  B4D8               	btfsc	status,2,c
  3548  00552C  D7BE               	goto	l12075
  3549  00552E  0A0F               	xorlw	15	; case 8
  3550  005530  B4D8               	btfsc	status,2,c
  3551  005532  D7C2               	goto	l12079
  3552  005534  0A01               	xorlw	1	; case 9
  3553  005536  B4D8               	btfsc	status,2,c
  3554  005538  D7C3               	goto	l12081
  3555  00553A  0A03               	xorlw	3	; case 10
  3556  00553C  B4D8               	btfsc	status,2,c
  3557  00553E  D7CF               	goto	l12089
  3558  005540  0A01               	xorlw	1	; case 11
  3559  005542  B4D8               	btfsc	status,2,c
  3560  005544  D7D0               	goto	l12091
  3561  005546  0A07               	xorlw	7	; case 12
  3562  005548  A4D8               	btfss	status,2,c
  3563  00554A  0012               	return	
  3564  00554C  D7D3               	goto	l12095
  3565  00554E                     __end_of_drawScreen:
  3566                           	opt stack 0
  3567                           tblptru	equ	0xFF8
  3568                           tblptrh	equ	0xFF7
  3569                           tblptrl	equ	0xFF6
  3570                           tablat	equ	0xFF5
  3571                           prodh	equ	0xFF4
  3572                           prodl	equ	0xFF3
  3573                           intcon	equ	0xFF2
  3574                           postinc0	equ	0xFEE
  3575                           wreg	equ	0xFE8
  3576                           postdec1	equ	0xFE5
  3577                           fsr1l	equ	0xFE1
  3578                           indf2	equ	0xFDF
  3579                           fsr2h	equ	0xFDA
  3580                           fsr2l	equ	0xFD9
  3581                           status	equ	0xFD8
  3582                           
  3583 ;; *************** function _drawSNquest *****************
  3584 ;; Defined at:
  3585 ;;		line 211 in file "source/screenDrawers.h"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;  tq              1    wreg     unsigned char 
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;  tq              1  118[BANK1 ] unsigned char 
  3590 ;;  i               2  116[BANK1 ] int 
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  1    wreg      void 
  3593 ;; Registers used:
  3594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3600 ;;      Params:         0       0       0       0       0       0       0
  3601 ;;      Locals:         0       0       3       0       0       0       0
  3602 ;;      Temps:          0       0       0       0       0       0       0
  3603 ;;      Totals:         0       0       3       0       0       0       0
  3604 ;;Total ram usage:        3 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:   19
  3607 ;; This function calls:
  3608 ;;		_lcd_gotoxy
  3609 ;;		_printf
  3610 ;; This function is called by:
  3611 ;;		_drawScreen
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           	psect	text11
  3616  00498C                     __ptext11:
  3617                           	opt stack 0
  3618  00498C                     _drawSNquest:
  3619                           	opt stack 10
  3620                           
  3621                           ;incstack = 0
  3622                           ;drawSNquest@tq stored from wreg
  3623  00498C  0101               	movlb	1	; () banked
  3624  00498E  6F76               	movwf	drawSNquest@tq& (0+255),b
  3625                           
  3626                           ;screenDrawers.h: 212: int i;
  3627                           ;screenDrawers.h: 213: for (i = 0; i < 2; i++)
  3628  004990  0E00               	movlw	0
  3629  004992  0101               	movlb	1	; () banked
  3630  004994  6F75               	movwf	(drawSNquest@i+1)& (0+255),b
  3631  004996  0E00               	movlw	0
  3632  004998  6F74               	movwf	drawSNquest@i& (0+255),b
  3633  00499A                     l11069:
  3634                           
  3635                           ; BSR set to: 1
  3636  00499A  0101               	movlb	1	; () banked
  3637  00499C  BF75               	btfsc	(drawSNquest@i+1)& (0+255),7,b
  3638  00499E  D008               	goto	l11073
  3639  0049A0  0101               	movlb	1	; () banked
  3640  0049A2  5175               	movf	(drawSNquest@i+1)& (0+255),w,b
  3641  0049A4  E113               	bnz	l11079
  3642  0049A6  0E02               	movlw	2
  3643  0049A8  0101               	movlb	1	; () banked
  3644  0049AA  5D74               	subwf	drawSNquest@i& (0+255),w,b
  3645  0049AC  B0D8               	btfsc	status,0,c
  3646  0049AE  D00E               	goto	l11079
  3647  0049B0                     l11073:
  3648                           
  3649                           ; BSR set to: 1
  3650                           ;screenDrawers.h: 214: questSN[i] = ' ';
  3651  0049B0  0EB3               	movlw	low _questSN
  3652  0049B2  0101               	movlb	1	; () banked
  3653  0049B4  2574               	addwf	drawSNquest@i& (0+255),w,b
  3654  0049B6  6ED9               	movwf	fsr2l,c
  3655  0049B8  0E01               	movlw	high _questSN
  3656  0049BA  0101               	movlb	1	; () banked
  3657  0049BC  2175               	addwfc	(drawSNquest@i+1)& (0+255),w,b
  3658  0049BE  6EDA               	movwf	fsr2h,c
  3659  0049C0  0E20               	movlw	32
  3660  0049C2  6EDF               	movwf	indf2,c
  3661                           
  3662                           ; BSR set to: 1
  3663  0049C4  0101               	movlb	1	; () banked
  3664  0049C6  4B74               	infsnz	drawSNquest@i& (0+255),f,b
  3665  0049C8  2B75               	incf	(drawSNquest@i+1)& (0+255),f,b
  3666  0049CA  D7E7               	goto	l11069
  3667  0049CC                     l11079:
  3668                           
  3669                           ; BSR set to: 1
  3670                           ;screenDrawers.h: 215: questSN[selSN] = flech;
  3671  0049CC  0101               	movlb	1	; () banked
  3672  0049CE  51C3               	movf	_selSN& (0+255),w,b
  3673  0049D0  0D01               	mullw	1
  3674  0049D2  0EB3               	movlw	low _questSN
  3675  0049D4  24F3               	addwf	prodl,w,c
  3676  0049D6  6ED9               	movwf	fsr2l,c
  3677  0049D8  0E01               	movlw	high _questSN
  3678  0049DA  20F4               	addwfc	prodh,w,c
  3679  0049DC  6EDA               	movwf	fsr2h,c
  3680  0049DE  C195  FFDF         	movff	_flech,indf2
  3681                           
  3682                           ; BSR set to: 1
  3683                           ;screenDrawers.h: 216: lcd_gotoxy(1, 1);
  3684  0049E2  0E01               	movlw	1
  3685  0049E4  0101               	movlb	1	; () banked
  3686  0049E6  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  3687  0049E8  0E01               	movlw	1
  3688  0049EA  EC0A  F035         	call	_lcd_gotoxy
  3689                           
  3690                           ;screenDrawers.h: 217: if (tq == 0)
  3691  0049EE  0101               	movlb	1	; () banked
  3692  0049F0  5176               	movf	drawSNquest@tq& (0+255),w,b
  3693  0049F2  0101               	movlb	1	; () banked
  3694  0049F4  A4D8               	btfss	status,2,c
  3695  0049F6  D009               	goto	l11087
  3696                           
  3697                           ; BSR set to: 1
  3698                           ;screenDrawers.h: 218: printf("Iniciar Proceso?\n");
  3699  0049F8  0E8B               	movlw	low STR_30
  3700  0049FA  0101               	movlb	1	; () banked
  3701  0049FC  6F3F               	movwf	printf@f& (0+255),b
  3702  0049FE  0E7E               	movlw	high STR_30
  3703  004A00  0101               	movlb	1	; () banked
  3704  004A02  6F40               	movwf	(printf@f+1)& (0+255),b
  3705  004A04  EC61  F000         	call	_printf	;wreg free
  3706  004A08  D028               	goto	l418
  3707  004A0A                     l11087:
  3708                           
  3709                           ;screenDrawers.h: 219: else if(tq == 1)
  3710  004A0A  0101               	movlb	1	; () banked
  3711  004A0C  0576               	decf	drawSNquest@tq& (0+255),w,b
  3712  004A0E  A4D8               	btfss	status,2,c
  3713  004A10  D009               	goto	l11091
  3714                           
  3715                           ; BSR set to: 1
  3716                           ;screenDrawers.h: 220: printf("Detener Proceso?\n");
  3717  004A12  0E9D               	movlw	low STR_31
  3718  004A14  0101               	movlb	1	; () banked
  3719  004A16  6F3F               	movwf	printf@f& (0+255),b
  3720  004A18  0E7E               	movlw	high STR_31
  3721  004A1A  0101               	movlb	1	; () banked
  3722  004A1C  6F40               	movwf	(printf@f+1)& (0+255),b
  3723  004A1E  EC61  F000         	call	_printf	;wreg free
  3724  004A22  D01B               	goto	l418
  3725  004A24                     l11091:
  3726                           
  3727                           ;screenDrawers.h: 221: else if(tq == 2)
  3728  004A24  0E02               	movlw	2
  3729  004A26  0101               	movlb	1	; () banked
  3730  004A28  1976               	xorwf	drawSNquest@tq& (0+255),w,b
  3731  004A2A  A4D8               	btfss	status,2,c
  3732  004A2C  D009               	goto	l11095
  3733                           
  3734                           ; BSR set to: 1
  3735                           ;screenDrawers.h: 222: printf("Guardar Cambio? \n");
  3736  004A2E  0E43               	movlw	low STR_32
  3737  004A30  0101               	movlb	1	; () banked
  3738  004A32  6F3F               	movwf	printf@f& (0+255),b
  3739  004A34  0E7E               	movlw	high STR_32
  3740  004A36  0101               	movlb	1	; () banked
  3741  004A38  6F40               	movwf	(printf@f+1)& (0+255),b
  3742  004A3A  EC61  F000         	call	_printf	;wreg free
  3743  004A3E  D00D               	goto	l418
  3744  004A40                     l11095:
  3745                           
  3746                           ;screenDrawers.h: 223: else if(tq == 3)
  3747  004A40  0E03               	movlw	3
  3748  004A42  0101               	movlb	1	; () banked
  3749  004A44  1976               	xorwf	drawSNquest@tq& (0+255),w,b
  3750  004A46  A4D8               	btfss	status,2,c
  3751  004A48  D008               	goto	l418
  3752                           
  3753                           ; BSR set to: 1
  3754                           ;screenDrawers.h: 224: printf("Init AutoCalib? \n");
  3755  004A4A  0E31               	movlw	low STR_33
  3756  004A4C  0101               	movlb	1	; () banked
  3757  004A4E  6F3F               	movwf	printf@f& (0+255),b
  3758  004A50  0E7E               	movlw	high STR_33
  3759  004A52  0101               	movlb	1	; () banked
  3760  004A54  6F40               	movwf	(printf@f+1)& (0+255),b
  3761  004A56  EC61  F000         	call	_printf	;wreg free
  3762  004A5A                     l418:
  3763                           
  3764                           ;screenDrawers.h: 225: printf("   %cSI    %cNO   ", questSN[0], questSN[1]);
  3765  004A5A  0EC4               	movlw	low STR_34
  3766  004A5C  0101               	movlb	1	; () banked
  3767  004A5E  6F3F               	movwf	printf@f& (0+255),b
  3768  004A60  0E7D               	movlw	high STR_34
  3769  004A62  0101               	movlb	1	; () banked
  3770  004A64  6F40               	movwf	(printf@f+1)& (0+255),b
  3771  004A66  C1B3  F141         	movff	_questSN,?_printf+2
  3772  004A6A  0101               	movlb	1	; () banked
  3773  004A6C  6B42               	clrf	(?_printf+3)& (0+255),b
  3774  004A6E  C1B4  F143         	movff	_questSN+1,?_printf+4
  3775  004A72  0101               	movlb	1	; () banked
  3776  004A74  6B44               	clrf	(?_printf+5)& (0+255),b
  3777  004A76  EC61  F000         	call	_printf	;wreg free
  3778  004A7A  0012               	return		;funcret
  3779  004A7C                     __end_of_drawSNquest:
  3780                           	opt stack 0
  3781                           tblptru	equ	0xFF8
  3782                           tblptrh	equ	0xFF7
  3783                           tblptrl	equ	0xFF6
  3784                           tablat	equ	0xFF5
  3785                           prodh	equ	0xFF4
  3786                           prodl	equ	0xFF3
  3787                           intcon	equ	0xFF2
  3788                           postinc0	equ	0xFEE
  3789                           wreg	equ	0xFE8
  3790                           postdec1	equ	0xFE5
  3791                           fsr1l	equ	0xFE1
  3792                           indf2	equ	0xFDF
  3793                           fsr2h	equ	0xFDA
  3794                           fsr2l	equ	0xFD9
  3795                           status	equ	0xFD8
  3796                           
  3797 ;; *************** function _drawPassWord *****************
  3798 ;; Defined at:
  3799 ;;		line 179 in file "source/screenDrawers.h"
  3800 ;; Parameters:    Size  Location     Type
  3801 ;;		None
  3802 ;; Auto vars:     Size  Location     Type
  3803 ;;  i               2  116[BANK1 ] int 
  3804 ;; Return value:  Size  Location     Type
  3805 ;;                  1    wreg      void 
  3806 ;; Registers used:
  3807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3808 ;; Tracked objects:
  3809 ;;		On entry : 0/0
  3810 ;;		On exit  : 0/0
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3813 ;;      Params:         0       0       0       0       0       0       0
  3814 ;;      Locals:         0       0       2       0       0       0       0
  3815 ;;      Temps:          0       0       0       0       0       0       0
  3816 ;;      Totals:         0       0       2       0       0       0       0
  3817 ;;Total ram usage:        2 bytes
  3818 ;; Hardware stack levels used:    1
  3819 ;; Hardware stack levels required when called:   20
  3820 ;; This function calls:
  3821 ;;		_drawPass1Lin
  3822 ;;		_printf
  3823 ;; This function is called by:
  3824 ;;		_drawScreen
  3825 ;; This function uses a non-reentrant model
  3826 ;;
  3827                           
  3828                           	psect	text12
  3829  004A7C                     __ptext12:
  3830                           	opt stack 0
  3831  004A7C                     _drawPassWord:
  3832                           	opt stack 9
  3833                           
  3834                           ;screenDrawers.h: 180: if (!fd) {
  3835                           
  3836                           ;incstack = 0
  3837  004A7C  0101               	movlb	1	; () banked
  3838  004A7E  51BC               	movf	_fd& (0+255),w,b
  3839  004A80  A4D8               	btfss	status,2,c
  3840  004A82  D012               	goto	l401
  3841                           
  3842                           ; BSR set to: 1
  3843                           ;screenDrawers.h: 181: passSection = 0;
  3844  004A84  0E00               	movlw	0
  3845  004A86  0101               	movlb	1	; () banked
  3846  004A88  6FC2               	movwf	_passSection& (0+255),b
  3847                           
  3848                           ;screenDrawers.h: 182: introducido[0] = 0;
  3849  004A8A  0E00               	movlw	0
  3850  004A8C  0101               	movlb	1	; () banked
  3851  004A8E  6FA6               	movwf	_introducido& (0+255),b
  3852                           
  3853                           ;screenDrawers.h: 183: introducido[1] = 0;
  3854  004A90  0E00               	movlw	0
  3855  004A92  0101               	movlb	1	; () banked
  3856  004A94  6FA7               	movwf	(_introducido+1)& (0+255),b
  3857                           
  3858                           ;screenDrawers.h: 184: introducido[2] = 0;
  3859  004A96  0E00               	movlw	0
  3860  004A98  0101               	movlb	1	; () banked
  3861  004A9A  6FA8               	movwf	(_introducido+2)& (0+255),b
  3862                           
  3863                           ;screenDrawers.h: 185: introducido[3] = 0;
  3864  004A9C  0E00               	movlw	0
  3865  004A9E  0101               	movlb	1	; () banked
  3866  004AA0  6FA9               	movwf	(_introducido+3)& (0+255),b
  3867                           
  3868                           ;screenDrawers.h: 186: fd = 1;
  3869  004AA2  0E01               	movlw	1
  3870  004AA4  0101               	movlb	1	; () banked
  3871  004AA6  6FBC               	movwf	_fd& (0+255),b
  3872  004AA8                     l401:
  3873                           
  3874                           ; BSR set to: 1
  3875                           ;screenDrawers.h: 187: }
  3876                           ;screenDrawers.h: 188: int i;
  3877                           ;screenDrawers.h: 189: for (i = 0; i < 4; i++)
  3878  004AA8  0E00               	movlw	0
  3879  004AAA  0101               	movlb	1	; () banked
  3880  004AAC  6F75               	movwf	(drawPassWord@i+1)& (0+255),b
  3881  004AAE  0E00               	movlw	0
  3882  004AB0  6F74               	movwf	drawPassWord@i& (0+255),b
  3883  004AB2                     l11039:
  3884                           
  3885                           ; BSR set to: 1
  3886  004AB2  0101               	movlb	1	; () banked
  3887  004AB4  BF75               	btfsc	(drawPassWord@i+1)& (0+255),7,b
  3888  004AB6  D008               	goto	l11043
  3889  004AB8  0101               	movlb	1	; () banked
  3890  004ABA  5175               	movf	(drawPassWord@i+1)& (0+255),w,b
  3891  004ABC  E113               	bnz	l11049
  3892  004ABE  0E04               	movlw	4
  3893  004AC0  0101               	movlb	1	; () banked
  3894  004AC2  5D74               	subwf	drawPassWord@i& (0+255),w,b
  3895  004AC4  B0D8               	btfsc	status,0,c
  3896  004AC6  D00E               	goto	l11049
  3897  004AC8                     l11043:
  3898                           
  3899                           ; BSR set to: 1
  3900                           ;screenDrawers.h: 190: passChar[i] = ' ';
  3901  004AC8  0EAA               	movlw	low _passChar
  3902  004ACA  0101               	movlb	1	; () banked
  3903  004ACC  2574               	addwf	drawPassWord@i& (0+255),w,b
  3904  004ACE  6ED9               	movwf	fsr2l,c
  3905  004AD0  0E01               	movlw	high _passChar
  3906  004AD2  0101               	movlb	1	; () banked
  3907  004AD4  2175               	addwfc	(drawPassWord@i+1)& (0+255),w,b
  3908  004AD6  6EDA               	movwf	fsr2h,c
  3909  004AD8  0E20               	movlw	32
  3910  004ADA  6EDF               	movwf	indf2,c
  3911                           
  3912                           ; BSR set to: 1
  3913  004ADC  0101               	movlb	1	; () banked
  3914  004ADE  4B74               	infsnz	drawPassWord@i& (0+255),f,b
  3915  004AE0  2B75               	incf	(drawPassWord@i+1)& (0+255),f,b
  3916  004AE2  D7E7               	goto	l11039
  3917  004AE4                     l11049:
  3918                           
  3919                           ; BSR set to: 1
  3920                           ;screenDrawers.h: 191: passChar[passSection] = flech;
  3921  004AE4  0101               	movlb	1	; () banked
  3922  004AE6  51C2               	movf	_passSection& (0+255),w,b
  3923  004AE8  0D01               	mullw	1
  3924  004AEA  0EAA               	movlw	low _passChar
  3925  004AEC  24F3               	addwf	prodl,w,c
  3926  004AEE  6ED9               	movwf	fsr2l,c
  3927  004AF0  0E01               	movlw	high _passChar
  3928  004AF2  20F4               	addwfc	prodh,w,c
  3929  004AF4  6EDA               	movwf	fsr2h,c
  3930  004AF6  C195  FFDF         	movff	_flech,indf2
  3931                           
  3932                           ; BSR set to: 1
  3933                           ;screenDrawers.h: 192: drawPass1Lin();
  3934  004AFA  ECD6  F035         	call	_drawPass1Lin	;wreg free
  3935                           
  3936                           ;screenDrawers.h: 193: printf("    %c%u%c%u%c%u%c%u    ", passChar[0], introducido[0], p
      +                          assChar[1], introducido[1],
  3937                           ;screenDrawers.h: 194: passChar[2], introducido[2], passChar[3], introducido[3]);
  3938  004AFE  0EAB               	movlw	low STR_25
  3939  004B00  0101               	movlb	1	; () banked
  3940  004B02  6F3F               	movwf	printf@f& (0+255),b
  3941  004B04  0E7D               	movlw	high STR_25
  3942  004B06  0101               	movlb	1	; () banked
  3943  004B08  6F40               	movwf	(printf@f+1)& (0+255),b
  3944  004B0A  C1AA  F141         	movff	_passChar,?_printf+2
  3945  004B0E  0101               	movlb	1	; () banked
  3946  004B10  6B42               	clrf	(?_printf+3)& (0+255),b
  3947  004B12  0101               	movlb	1	; () banked
  3948  004B14  51A6               	movf	_introducido& (0+255),w,b
  3949  004B16  0101               	movlb	1	; () banked
  3950  004B18  6F43               	movwf	(?_printf+4)& (0+255),b
  3951  004B1A  6B44               	clrf	(?_printf+5)& (0+255),b
  3952  004B1C  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  3953  004B1E  0744               	decf	(?_printf+5)& (0+255),f,b
  3954  004B20  C1AB  F145         	movff	_passChar+1,?_printf+6
  3955  004B24  0101               	movlb	1	; () banked
  3956  004B26  6B46               	clrf	(?_printf+7)& (0+255),b
  3957  004B28  0101               	movlb	1	; () banked
  3958  004B2A  51A7               	movf	(_introducido+1)& (0+255),w,b
  3959  004B2C  0101               	movlb	1	; () banked
  3960  004B2E  6F47               	movwf	(?_printf+8)& (0+255),b
  3961  004B30  6B48               	clrf	(?_printf+9)& (0+255),b
  3962  004B32  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  3963  004B34  0748               	decf	(?_printf+9)& (0+255),f,b
  3964  004B36  C1AC  F149         	movff	_passChar+2,?_printf+10
  3965  004B3A  0101               	movlb	1	; () banked
  3966  004B3C  6B4A               	clrf	(?_printf+11)& (0+255),b
  3967  004B3E  0101               	movlb	1	; () banked
  3968  004B40  51A8               	movf	(_introducido+2)& (0+255),w,b
  3969  004B42  0101               	movlb	1	; () banked
  3970  004B44  6F4B               	movwf	(?_printf+12)& (0+255),b
  3971  004B46  6B4C               	clrf	(?_printf+13)& (0+255),b
  3972  004B48  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  3973  004B4A  074C               	decf	(?_printf+13)& (0+255),f,b
  3974  004B4C  C1AD  F14D         	movff	_passChar+3,?_printf+14
  3975  004B50  0101               	movlb	1	; () banked
  3976  004B52  6B4E               	clrf	(?_printf+15)& (0+255),b
  3977  004B54  0101               	movlb	1	; () banked
  3978  004B56  51A9               	movf	(_introducido+3)& (0+255),w,b
  3979  004B58  0101               	movlb	1	; () banked
  3980  004B5A  6F4F               	movwf	(?_printf+16)& (0+255),b
  3981  004B5C  6B50               	clrf	(?_printf+17)& (0+255),b
  3982  004B5E  BF4F               	btfsc	(?_printf+16)& (0+255),7,b
  3983  004B60  0750               	decf	(?_printf+17)& (0+255),f,b
  3984  004B62  EC61  F000         	call	_printf	;wreg free
  3985  004B66  0012               	return		;funcret
  3986  004B68                     __end_of_drawPassWord:
  3987                           	opt stack 0
  3988                           tblptru	equ	0xFF8
  3989                           tblptrh	equ	0xFF7
  3990                           tblptrl	equ	0xFF6
  3991                           tablat	equ	0xFF5
  3992                           prodh	equ	0xFF4
  3993                           prodl	equ	0xFF3
  3994                           intcon	equ	0xFF2
  3995                           postinc0	equ	0xFEE
  3996                           wreg	equ	0xFE8
  3997                           postdec1	equ	0xFE5
  3998                           fsr1l	equ	0xFE1
  3999                           indf2	equ	0xFDF
  4000                           fsr2h	equ	0xFDA
  4001                           fsr2l	equ	0xFD9
  4002                           status	equ	0xFD8
  4003                           
  4004 ;; *************** function _drawMenu *****************
  4005 ;; Defined at:
  4006 ;;		line 88 in file "source/screenDrawers.h"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;  adv             1    wreg     unsigned char 
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;  adv             1  116[BANK1 ] unsigned char 
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  1    wreg      void 
  4013 ;; Registers used:
  4014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4020 ;;      Params:         0       0       0       0       0       0       0
  4021 ;;      Locals:         0       0       1       0       0       0       0
  4022 ;;      Temps:          0       0       0       0       0       0       0
  4023 ;;      Totals:         0       0       1       0       0       0       0
  4024 ;;Total ram usage:        1 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:   19
  4027 ;; This function calls:
  4028 ;;		_lcd_gotoxy
  4029 ;;		_lcd_putc
  4030 ;;		_printf
  4031 ;; This function is called by:
  4032 ;;		_drawScreen
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           	psect	text13
  4037  0029C8                     __ptext13:
  4038                           	opt stack 0
  4039  0029C8                     _drawMenu:
  4040                           	opt stack 10
  4041                           
  4042                           ;incstack = 0
  4043                           ;drawMenu@adv stored from wreg
  4044  0029C8  0101               	movlb	1	; () banked
  4045  0029CA  6F74               	movwf	drawMenu@adv& (0+255),b
  4046                           
  4047                           ;screenDrawers.h: 89: switch (menuSection) {
  4048  0029CC  D0F7               	goto	l11005
  4049  0029CE                     l10939:
  4050                           
  4051                           ;screenDrawers.h: 91: lcd_gotoxy(1, 1);
  4052  0029CE  0E01               	movlw	1
  4053  0029D0  0101               	movlb	1	; () banked
  4054  0029D2  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4055  0029D4  0E01               	movlw	1
  4056  0029D6  EC0A  F035         	call	_lcd_gotoxy
  4057                           
  4058                           ;screenDrawers.h: 92: printf("Estado proceso: \n");
  4059  0029DA  0E1F               	movlw	low STR_7
  4060  0029DC  0101               	movlb	1	; () banked
  4061  0029DE  6F3F               	movwf	printf@f& (0+255),b
  4062  0029E0  0E7E               	movlw	high STR_7
  4063  0029E2  0101               	movlb	1	; () banked
  4064  0029E4  6F40               	movwf	(printf@f+1)& (0+255),b
  4065  0029E6  EC61  F000         	call	_printf	;wreg free
  4066                           
  4067                           ;screenDrawers.h: 93: if (adv)
  4068  0029EA  0101               	movlb	1	; () banked
  4069  0029EC  5174               	movf	drawMenu@adv& (0+255),w,b
  4070  0029EE  0101               	movlb	1	; () banked
  4071  0029F0  B4D8               	btfsc	status,2,c
  4072  0029F2  D004               	goto	l10947
  4073                           
  4074                           ; BSR set to: 1
  4075                           ;screenDrawers.h: 94: lcd_putc('A');
  4076  0029F4  0E41               	movlw	65
  4077  0029F6  ECFB  F02F         	call	_lcd_putc
  4078  0029FA  D003               	goto	l369
  4079  0029FC                     l10947:
  4080                           
  4081                           ;screenDrawers.h: 95: else
  4082                           ;screenDrawers.h: 96: lcd_putc(' ');
  4083  0029FC  0E20               	movlw	32
  4084  0029FE  ECFB  F02F         	call	_lcd_putc
  4085  002A02                     l369:
  4086                           
  4087                           ;screenDrawers.h: 97: lcd_gotoxy(2, 2);
  4088  002A02  0E02               	movlw	2
  4089  002A04  0101               	movlb	1	; () banked
  4090  002A06  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4091  002A08  0E02               	movlw	2
  4092  002A0A  EC0A  F035         	call	_lcd_gotoxy
  4093                           
  4094                           ;screenDrawers.h: 98: if(ProcessStarted)
  4095  002A0E  503A               	movf	_ProcessStarted,w,c
  4096  002A10  B4D8               	btfsc	status,2,c
  4097  002A12  D011               	goto	l10953
  4098                           
  4099                           ;screenDrawers.h: 99: printf("   %d / %d    ", processState, numCortes);
  4100  002A14  0EB4               	movlw	low STR_8
  4101  002A16  0101               	movlb	1	; () banked
  4102  002A18  6F3F               	movwf	printf@f& (0+255),b
  4103  002A1A  0E7F               	movlw	high STR_8
  4104  002A1C  0101               	movlb	1	; () banked
  4105  002A1E  6F40               	movwf	(printf@f+1)& (0+255),b
  4106  002A20  C035  F141         	movff	_processState,?_printf+2
  4107  002A24  C036  F142         	movff	_processState+1,?_printf+3
  4108  002A28  C0B8  F143         	movff	_numCortes,?_printf+4
  4109  002A2C  C0B9  F144         	movff	_numCortes+1,?_printf+5
  4110  002A30  EC61  F000         	call	_printf	;wreg free
  4111  002A34  0012               	return	
  4112  002A36                     l10953:
  4113                           
  4114                           ;screenDrawers.h: 100: else
  4115                           ;screenDrawers.h: 101: printf("    Detenido    ");
  4116  002A36  0E82               	movlw	low STR_9
  4117  002A38  0101               	movlb	1	; () banked
  4118  002A3A  6F3F               	movwf	printf@f& (0+255),b
  4119  002A3C  0E7F               	movlw	high STR_9
  4120  002A3E  0101               	movlb	1	; () banked
  4121  002A40  6F40               	movwf	(printf@f+1)& (0+255),b
  4122  002A42  EC61  F000         	call	_printf	;wreg free
  4123                           
  4124                           ;screenDrawers.h: 102: break;
  4125  002A46  0012               	return	
  4126  002A48                     l10955:
  4127                           
  4128                           ;screenDrawers.h: 104: lcd_gotoxy(1, 1);
  4129  002A48  0E01               	movlw	1
  4130  002A4A  0101               	movlb	1	; () banked
  4131  002A4C  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4132  002A4E  0E01               	movlw	1
  4133  002A50  EC0A  F035         	call	_lcd_gotoxy
  4134                           
  4135                           ;screenDrawers.h: 105: printf("Valor por Corte:\n");
  4136  002A54  0E55               	movlw	low STR_10
  4137  002A56  0101               	movlb	1	; () banked
  4138  002A58  6F3F               	movwf	printf@f& (0+255),b
  4139  002A5A  0E7E               	movlw	high STR_10
  4140  002A5C  0101               	movlb	1	; () banked
  4141  002A5E  6F40               	movwf	(printf@f+1)& (0+255),b
  4142  002A60  EC61  F000         	call	_printf	;wreg free
  4143                           
  4144                           ;screenDrawers.h: 106: if (adv)
  4145  002A64  0101               	movlb	1	; () banked
  4146  002A66  5174               	movf	drawMenu@adv& (0+255),w,b
  4147  002A68  0101               	movlb	1	; () banked
  4148  002A6A  B4D8               	btfsc	status,2,c
  4149  002A6C  D004               	goto	l10963
  4150                           
  4151                           ; BSR set to: 1
  4152                           ;screenDrawers.h: 107: lcd_putc('A');
  4153  002A6E  0E41               	movlw	65
  4154  002A70  ECFB  F02F         	call	_lcd_putc
  4155  002A74  D003               	goto	l375
  4156  002A76                     l10963:
  4157                           
  4158                           ;screenDrawers.h: 108: else
  4159                           ;screenDrawers.h: 109: lcd_putc(' ');
  4160  002A76  0E20               	movlw	32
  4161  002A78  ECFB  F02F         	call	_lcd_putc
  4162  002A7C                     l375:
  4163                           
  4164                           ;screenDrawers.h: 110: lcd_gotoxy(2, 2);
  4165  002A7C  0E02               	movlw	2
  4166  002A7E  0101               	movlb	1	; () banked
  4167  002A80  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4168  002A82  0E02               	movlw	2
  4169  002A84  EC0A  F035         	call	_lcd_gotoxy
  4170                           
  4171                           ;screenDrawers.h: 111: printf("   %3.3f kg   ", kgXcorte);
  4172  002A88  0EC3               	movlw	low STR_11
  4173  002A8A  0101               	movlb	1	; () banked
  4174  002A8C  6F3F               	movwf	printf@f& (0+255),b
  4175  002A8E  0E7F               	movlw	high STR_11
  4176  002A90  0101               	movlb	1	; () banked
  4177  002A92  6F40               	movwf	(printf@f+1)& (0+255),b
  4178  002A94  C0AC  F141         	movff	_kgXcorte,?_printf+2
  4179  002A98  C0AD  F142         	movff	_kgXcorte+1,?_printf+3
  4180  002A9C  C0AE  F143         	movff	_kgXcorte+2,?_printf+4
  4181  002AA0  EC61  F000         	call	_printf	;wreg free
  4182                           
  4183                           ;screenDrawers.h: 112: break;
  4184  002AA4  0012               	return	
  4185  002AA6                     l10967:
  4186                           
  4187                           ;screenDrawers.h: 114: lcd_gotoxy(1, 1);
  4188  002AA6  0E01               	movlw	1
  4189  002AA8  0101               	movlb	1	; () banked
  4190  002AAA  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4191  002AAC  0E01               	movlw	1
  4192  002AAE  EC0A  F035         	call	_lcd_gotoxy
  4193                           
  4194                           ;screenDrawers.h: 115: printf("Cantidad Cortes:\n");
  4195  002AB2  0E79               	movlw	low STR_12
  4196  002AB4  0101               	movlb	1	; () banked
  4197  002AB6  6F3F               	movwf	printf@f& (0+255),b
  4198  002AB8  0E7E               	movlw	high STR_12
  4199  002ABA  0101               	movlb	1	; () banked
  4200  002ABC  6F40               	movwf	(printf@f+1)& (0+255),b
  4201  002ABE  EC61  F000         	call	_printf	;wreg free
  4202                           
  4203                           ;screenDrawers.h: 116: if (adv)
  4204  002AC2  0101               	movlb	1	; () banked
  4205  002AC4  5174               	movf	drawMenu@adv& (0+255),w,b
  4206  002AC6  0101               	movlb	1	; () banked
  4207  002AC8  B4D8               	btfsc	status,2,c
  4208  002ACA  D004               	goto	l10975
  4209                           
  4210                           ; BSR set to: 1
  4211                           ;screenDrawers.h: 117: lcd_putc('A');
  4212  002ACC  0E41               	movlw	65
  4213  002ACE  ECFB  F02F         	call	_lcd_putc
  4214  002AD2  D003               	goto	l378
  4215  002AD4                     l10975:
  4216                           
  4217                           ;screenDrawers.h: 118: else
  4218                           ;screenDrawers.h: 119: lcd_putc(' ');
  4219  002AD4  0E20               	movlw	32
  4220  002AD6  ECFB  F02F         	call	_lcd_putc
  4221  002ADA                     l378:
  4222                           
  4223                           ;screenDrawers.h: 120: lcd_gotoxy(2, 2);
  4224  002ADA  0E02               	movlw	2
  4225  002ADC  0101               	movlb	1	; () banked
  4226  002ADE  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4227  002AE0  0E02               	movlw	2
  4228  002AE2  EC0A  F035         	call	_lcd_gotoxy
  4229                           
  4230                           ;screenDrawers.h: 121: printf("      %d       ", numCortes);
  4231  002AE6  0EA4               	movlw	low STR_13
  4232  002AE8  0101               	movlb	1	; () banked
  4233  002AEA  6F3F               	movwf	printf@f& (0+255),b
  4234  002AEC  0E7F               	movlw	high STR_13
  4235  002AEE  0101               	movlb	1	; () banked
  4236  002AF0  6F40               	movwf	(printf@f+1)& (0+255),b
  4237  002AF2  C0B8  F141         	movff	_numCortes,?_printf+2
  4238  002AF6  C0B9  F142         	movff	_numCortes+1,?_printf+3
  4239  002AFA  EC61  F000         	call	_printf	;wreg free
  4240                           
  4241                           ;screenDrawers.h: 122: break;
  4242  002AFE  0012               	return	
  4243  002B00                     l10979:
  4244                           
  4245                           ;screenDrawers.h: 124: lcd_gotoxy(1, 1);
  4246  002B00  0E01               	movlw	1
  4247  002B02  0101               	movlb	1	; () banked
  4248  002B04  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4249  002B06  0E01               	movlw	1
  4250  002B08  EC0A  F035         	call	_lcd_gotoxy
  4251                           
  4252                           ;screenDrawers.h: 125: printf("Diametro Tubo:  \n");
  4253  002B0C  0EFB               	movlw	low STR_14
  4254  002B0E  0101               	movlb	1	; () banked
  4255  002B10  6F3F               	movwf	printf@f& (0+255),b
  4256  002B12  0E7D               	movlw	high STR_14
  4257  002B14  0101               	movlb	1	; () banked
  4258  002B16  6F40               	movwf	(printf@f+1)& (0+255),b
  4259  002B18  EC61  F000         	call	_printf	;wreg free
  4260                           
  4261                           ;screenDrawers.h: 126: if (adv)
  4262  002B1C  0101               	movlb	1	; () banked
  4263  002B1E  5174               	movf	drawMenu@adv& (0+255),w,b
  4264  002B20  0101               	movlb	1	; () banked
  4265  002B22  B4D8               	btfsc	status,2,c
  4266  002B24  D004               	goto	l10987
  4267                           
  4268                           ; BSR set to: 1
  4269                           ;screenDrawers.h: 127: lcd_putc('A');
  4270  002B26  0E41               	movlw	65
  4271  002B28  ECFB  F02F         	call	_lcd_putc
  4272  002B2C  D003               	goto	l381
  4273  002B2E                     l10987:
  4274                           
  4275                           ;screenDrawers.h: 128: else
  4276                           ;screenDrawers.h: 129: lcd_putc(' ');
  4277  002B2E  0E20               	movlw	32
  4278  002B30  ECFB  F02F         	call	_lcd_putc
  4279  002B34                     l381:
  4280                           
  4281                           ;screenDrawers.h: 130: lcd_gotoxy(2, 2);
  4282  002B34  0E02               	movlw	2
  4283  002B36  0101               	movlb	1	; () banked
  4284  002B38  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4285  002B3A  0E02               	movlw	2
  4286  002B3C  EC0A  F035         	call	_lcd_gotoxy
  4287                           
  4288                           ;screenDrawers.h: 131: printf("   %3.3f mm   ", diamTubo);
  4289  002B40  0ED2               	movlw	low STR_15
  4290  002B42  0101               	movlb	1	; () banked
  4291  002B44  6F3F               	movwf	printf@f& (0+255),b
  4292  002B46  0E7F               	movlw	high STR_15
  4293  002B48  0101               	movlb	1	; () banked
  4294  002B4A  6F40               	movwf	(printf@f+1)& (0+255),b
  4295  002B4C  C0A9  F141         	movff	_diamTubo,?_printf+2
  4296  002B50  C0AA  F142         	movff	_diamTubo+1,?_printf+3
  4297  002B54  C0AB  F143         	movff	_diamTubo+2,?_printf+4
  4298  002B58  EC61  F000         	call	_printf	;wreg free
  4299                           
  4300                           ;screenDrawers.h: 132: break;
  4301  002B5C  0012               	return	
  4302  002B5E                     l10991:
  4303                           
  4304                           ;screenDrawers.h: 134: lcd_gotoxy(1, 1);
  4305  002B5E  0E01               	movlw	1
  4306  002B60  0101               	movlb	1	; () banked
  4307  002B62  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4308  002B64  0E01               	movlw	1
  4309  002B66  EC0A  F035         	call	_lcd_gotoxy
  4310                           
  4311                           ;screenDrawers.h: 135: printf("Velocidad Masa: \n");
  4312  002B6A  0E0D               	movlw	low STR_16
  4313  002B6C  0101               	movlb	1	; () banked
  4314  002B6E  6F3F               	movwf	printf@f& (0+255),b
  4315  002B70  0E7E               	movlw	high STR_16
  4316  002B72  0101               	movlb	1	; () banked
  4317  002B74  6F40               	movwf	(printf@f+1)& (0+255),b
  4318  002B76  EC61  F000         	call	_printf	;wreg free
  4319                           
  4320                           ;screenDrawers.h: 136: if (adv)
  4321  002B7A  0101               	movlb	1	; () banked
  4322  002B7C  5174               	movf	drawMenu@adv& (0+255),w,b
  4323  002B7E  0101               	movlb	1	; () banked
  4324  002B80  B4D8               	btfsc	status,2,c
  4325  002B82  D004               	goto	l10999
  4326                           
  4327                           ; BSR set to: 1
  4328                           ;screenDrawers.h: 137: lcd_putc('A');
  4329  002B84  0E41               	movlw	65
  4330  002B86  ECFB  F02F         	call	_lcd_putc
  4331  002B8A  D003               	goto	l384
  4332  002B8C                     l10999:
  4333                           
  4334                           ;screenDrawers.h: 138: else
  4335                           ;screenDrawers.h: 139: lcd_putc(' ');
  4336  002B8C  0E20               	movlw	32
  4337  002B8E  ECFB  F02F         	call	_lcd_putc
  4338  002B92                     l384:
  4339                           
  4340                           ;screenDrawers.h: 140: lcd_gotoxy(2, 2);
  4341  002B92  0E02               	movlw	2
  4342  002B94  0101               	movlb	1	; () banked
  4343  002B96  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4344  002B98  0E02               	movlw	2
  4345  002B9A  EC0A  F035         	call	_lcd_gotoxy
  4346                           
  4347                           ;screenDrawers.h: 141: printf("  %3.3f kg/s  ", velocidadMasa);
  4348  002B9E  0EE1               	movlw	low STR_17
  4349  002BA0  0101               	movlb	1	; () banked
  4350  002BA2  6F3F               	movwf	printf@f& (0+255),b
  4351  002BA4  0E7F               	movlw	high STR_17
  4352  002BA6  0101               	movlb	1	; () banked
  4353  002BA8  6F40               	movwf	(printf@f+1)& (0+255),b
  4354  002BAA  C0B5  F141         	movff	_velocidadMasa,?_printf+2
  4355  002BAE  C0B6  F142         	movff	_velocidadMasa+1,?_printf+3
  4356  002BB2  C0B7  F143         	movff	_velocidadMasa+2,?_printf+4
  4357  002BB6  EC61  F000         	call	_printf	;wreg free
  4358                           
  4359                           ;screenDrawers.h: 143: }
  4360                           ;screenDrawers.h: 144: }
  4361                           
  4362                           ;screenDrawers.h: 142: break;
  4363  002BBA  0012               	return	
  4364  002BBC                     l11005:
  4365  002BBC  0101               	movlb	1	; () banked
  4366  002BBE  51C1               	movf	_menuSection& (0+255),w,b
  4367                           
  4368                           ; Switch size 1, requested type "space"
  4369                           ; Number of cases is 5, Range of values is 0 to 4
  4370                           ; switch strategies available:
  4371                           ; Name         Instructions Cycles
  4372                           ; simple_byte           16     9 (average)
  4373                           ;	Chosen strategy is simple_byte
  4374  002BC0  0A00               	xorlw	0	; case 0
  4375  002BC2  B4D8               	btfsc	status,2,c
  4376  002BC4  D704               	goto	l10939
  4377  002BC6  0A01               	xorlw	1	; case 1
  4378  002BC8  B4D8               	btfsc	status,2,c
  4379  002BCA  D73E               	goto	l10955
  4380  002BCC  0A03               	xorlw	3	; case 2
  4381  002BCE  B4D8               	btfsc	status,2,c
  4382  002BD0  D76A               	goto	l10967
  4383  002BD2  0A01               	xorlw	1	; case 3
  4384  002BD4  B4D8               	btfsc	status,2,c
  4385  002BD6  D794               	goto	l10979
  4386  002BD8  0A07               	xorlw	7	; case 4
  4387  002BDA  A4D8               	btfss	status,2,c
  4388  002BDC  0012               	return	
  4389  002BDE  D7BF               	goto	l10991
  4390  002BE0                     __end_of_drawMenu:
  4391                           	opt stack 0
  4392                           tblptru	equ	0xFF8
  4393                           tblptrh	equ	0xFF7
  4394                           tblptrl	equ	0xFF6
  4395                           tablat	equ	0xFF5
  4396                           prodh	equ	0xFF4
  4397                           prodl	equ	0xFF3
  4398                           intcon	equ	0xFF2
  4399                           postinc0	equ	0xFEE
  4400                           wreg	equ	0xFE8
  4401                           postdec1	equ	0xFE5
  4402                           fsr1l	equ	0xFE1
  4403                           indf2	equ	0xFDF
  4404                           fsr2h	equ	0xFDA
  4405                           fsr2l	equ	0xFD9
  4406                           status	equ	0xFD8
  4407                           
  4408 ;; *************** function _drawChanVal *****************
  4409 ;; Defined at:
  4410 ;;		line 147 in file "source/screenDrawers.h"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;		None
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;		None
  4415 ;; Return value:  Size  Location     Type
  4416 ;;                  1    wreg      void 
  4417 ;; Registers used:
  4418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4419 ;; Tracked objects:
  4420 ;;		On entry : 0/0
  4421 ;;		On exit  : 0/0
  4422 ;;		Unchanged: 0/0
  4423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4424 ;;      Params:         0       0       0       0       0       0       0
  4425 ;;      Locals:         0       0       0       0       0       0       0
  4426 ;;      Temps:          0       0       0       0       0       0       0
  4427 ;;      Totals:         0       0       0       0       0       0       0
  4428 ;;Total ram usage:        0 bytes
  4429 ;; Hardware stack levels used:    1
  4430 ;; Hardware stack levels required when called:   20
  4431 ;; This function calls:
  4432 ;;		_drawValEditor
  4433 ;;		_lcd_gotoxy
  4434 ;;		_printf
  4435 ;; This function is called by:
  4436 ;;		_drawScreen
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           	psect	text14
  4441  0051AA                     __ptext14:
  4442                           	opt stack 0
  4443  0051AA                     _drawChanVal:
  4444                           	opt stack 9
  4445                           
  4446                           ;screenDrawers.h: 148: switch (menuSection) {
  4447                           
  4448                           ;incstack = 0
  4449  0051AA  D04D               	goto	l11033
  4450  0051AC                     l11009:
  4451                           
  4452                           ;screenDrawers.h: 152: lcd_gotoxy(1, 1);
  4453  0051AC  0E01               	movlw	1
  4454  0051AE  0101               	movlb	1	; () banked
  4455  0051B0  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4456  0051B2  0E01               	movlw	1
  4457  0051B4  EC0A  F035         	call	_lcd_gotoxy
  4458                           
  4459                           ;screenDrawers.h: 153: printf("Valor por Corte:\n");
  4460  0051B8  0E55               	movlw	low STR_10
  4461  0051BA  0101               	movlb	1	; () banked
  4462  0051BC  6F3F               	movwf	printf@f& (0+255),b
  4463  0051BE  0E7E               	movlw	high STR_10
  4464  0051C0  0101               	movlb	1	; () banked
  4465  0051C2  6F40               	movwf	(printf@f+1)& (0+255),b
  4466  0051C4  EC61  F000         	call	_printf	;wreg free
  4467                           
  4468                           ;screenDrawers.h: 154: drawValEditor();
  4469  0051C8  ECAD  F00B         	call	_drawValEditor	;wreg free
  4470                           
  4471                           ;screenDrawers.h: 155: printf("kg    ");
  4472  0051CC  0EF0               	movlw	low STR_19
  4473  0051CE  0101               	movlb	1	; () banked
  4474  0051D0  6F3F               	movwf	printf@f& (0+255),b
  4475  0051D2  0E7F               	movlw	high STR_19
  4476  0051D4  0101               	movlb	1	; () banked
  4477  0051D6  6F40               	movwf	(printf@f+1)& (0+255),b
  4478  0051D8  EC61  F000         	call	_printf	;wreg free
  4479                           
  4480                           ;screenDrawers.h: 156: break;
  4481  0051DC  0012               	return	
  4482  0051DE                     l11017:
  4483                           
  4484                           ;screenDrawers.h: 158: lcd_gotoxy(1, 1);
  4485  0051DE  0E01               	movlw	1
  4486  0051E0  0101               	movlb	1	; () banked
  4487  0051E2  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4488  0051E4  0E01               	movlw	1
  4489  0051E6  EC0A  F035         	call	_lcd_gotoxy
  4490                           
  4491                           ;screenDrawers.h: 159: printf("Cantidad Cortes:\n");
  4492  0051EA  0E79               	movlw	low STR_12
  4493  0051EC  0101               	movlb	1	; () banked
  4494  0051EE  6F3F               	movwf	printf@f& (0+255),b
  4495  0051F0  0E7E               	movlw	high STR_12
  4496  0051F2  0101               	movlb	1	; () banked
  4497  0051F4  6F40               	movwf	(printf@f+1)& (0+255),b
  4498  0051F6  EC61  F000         	call	_printf	;wreg free
  4499                           
  4500                           ;screenDrawers.h: 160: printf("      %d       ", chanVals);
  4501  0051FA  0EA4               	movlw	low STR_13
  4502  0051FC  0101               	movlb	1	; () banked
  4503  0051FE  6F3F               	movwf	printf@f& (0+255),b
  4504  005200  0E7F               	movlw	high STR_13
  4505  005202  0101               	movlb	1	; () banked
  4506  005204  6F40               	movwf	(printf@f+1)& (0+255),b
  4507  005206  C1B1  F141         	movff	_chanVals,?_printf+2
  4508  00520A  C1B2  F142         	movff	_chanVals+1,?_printf+3
  4509  00520E  EC61  F000         	call	_printf	;wreg free
  4510                           
  4511                           ;screenDrawers.h: 161: break;
  4512  005212  0012               	return	
  4513  005214                     l11023:
  4514                           
  4515                           ;screenDrawers.h: 163: lcd_gotoxy(1, 1);
  4516  005214  0E01               	movlw	1
  4517  005216  0101               	movlb	1	; () banked
  4518  005218  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4519  00521A  0E01               	movlw	1
  4520  00521C  EC0A  F035         	call	_lcd_gotoxy
  4521                           
  4522                           ;screenDrawers.h: 164: printf("Diametro Tubo:  \n");
  4523  005220  0EFB               	movlw	low STR_14
  4524  005222  0101               	movlb	1	; () banked
  4525  005224  6F3F               	movwf	printf@f& (0+255),b
  4526  005226  0E7D               	movlw	high STR_14
  4527  005228  0101               	movlb	1	; () banked
  4528  00522A  6F40               	movwf	(printf@f+1)& (0+255),b
  4529  00522C  EC61  F000         	call	_printf	;wreg free
  4530                           
  4531                           ;screenDrawers.h: 165: drawValEditor();
  4532  005230  ECAD  F00B         	call	_drawValEditor	;wreg free
  4533                           
  4534                           ;screenDrawers.h: 166: printf("mm    ");
  4535  005234  0EF7               	movlw	low STR_23
  4536  005236  0101               	movlb	1	; () banked
  4537  005238  6F3F               	movwf	printf@f& (0+255),b
  4538  00523A  0E7F               	movlw	high STR_23
  4539  00523C  0101               	movlb	1	; () banked
  4540  00523E  6F40               	movwf	(printf@f+1)& (0+255),b
  4541  005240  EC61  F000         	call	_printf	;wreg free
  4542                           
  4543                           ;screenDrawers.h: 170: }
  4544                           ;screenDrawers.h: 171: }
  4545                           
  4546                           ;screenDrawers.h: 169: break;
  4547                           
  4548                           ;screenDrawers.h: 168: }case (4): {
  4549                           
  4550                           ;screenDrawers.h: 167: break;
  4551  005244  0012               	return	
  4552  005246                     l11033:
  4553  005246  0101               	movlb	1	; () banked
  4554  005248  51C1               	movf	_menuSection& (0+255),w,b
  4555                           
  4556                           ; Switch size 1, requested type "space"
  4557                           ; Number of cases is 5, Range of values is 0 to 4
  4558                           ; switch strategies available:
  4559                           ; Name         Instructions Cycles
  4560                           ; simple_byte           16     9 (average)
  4561                           ;	Chosen strategy is simple_byte
  4562  00524A  0A00               	xorlw	0	; case 0
  4563  00524C  B4D8               	btfsc	status,2,c
  4564  00524E  0012               	return	
  4565  005250  0A01               	xorlw	1	; case 1
  4566  005252  B4D8               	btfsc	status,2,c
  4567  005254  D7AB               	goto	l11009
  4568  005256  0A03               	xorlw	3	; case 2
  4569  005258  B4D8               	btfsc	status,2,c
  4570  00525A  D7C1               	goto	l11017
  4571  00525C  0A01               	xorlw	1	; case 3
  4572  00525E  B4D8               	btfsc	status,2,c
  4573  005260  D7D9               	goto	l11023
  4574  005262  0A07               	xorlw	7	; case 4
  4575  005264  0012               	return	
  4576  005266                     __end_of_drawChanVal:
  4577                           	opt stack 0
  4578                           tblptru	equ	0xFF8
  4579                           tblptrh	equ	0xFF7
  4580                           tblptrl	equ	0xFF6
  4581                           tablat	equ	0xFF5
  4582                           prodh	equ	0xFF4
  4583                           prodl	equ	0xFF3
  4584                           intcon	equ	0xFF2
  4585                           postinc0	equ	0xFEE
  4586                           wreg	equ	0xFE8
  4587                           postdec1	equ	0xFE5
  4588                           fsr1l	equ	0xFE1
  4589                           indf2	equ	0xFDF
  4590                           fsr2h	equ	0xFDA
  4591                           fsr2l	equ	0xFD9
  4592                           status	equ	0xFD8
  4593                           
  4594 ;; *************** function _drawCalibProc *****************
  4595 ;; Defined at:
  4596 ;;		line 235 in file "source/screenDrawers.h"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;		None
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;		None
  4601 ;; Return value:  Size  Location     Type
  4602 ;;                  1    wreg      void 
  4603 ;; Registers used:
  4604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4605 ;; Tracked objects:
  4606 ;;		On entry : 0/0
  4607 ;;		On exit  : 0/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4610 ;;      Params:         0       0       0       0       0       0       0
  4611 ;;      Locals:         0       0       0       0       0       0       0
  4612 ;;      Temps:          0       0       0       0       0       0       0
  4613 ;;      Totals:         0       0       0       0       0       0       0
  4614 ;;Total ram usage:        0 bytes
  4615 ;; Hardware stack levels used:    1
  4616 ;; Hardware stack levels required when called:   19
  4617 ;; This function calls:
  4618 ;;		_lcd_gotoxy
  4619 ;;		_printf
  4620 ;; This function is called by:
  4621 ;;		_drawScreen
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           	psect	text15
  4626  005EEE                     __ptext15:
  4627                           	opt stack 0
  4628  005EEE                     _drawCalibProc:
  4629                           	opt stack 10
  4630                           
  4631                           ;screenDrawers.h: 236: lcd_gotoxy(1, 1);
  4632                           
  4633                           ;incstack = 0
  4634  005EEE  0E01               	movlw	1
  4635  005EF0  0101               	movlb	1	; () banked
  4636  005EF2  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4637  005EF4  0E01               	movlw	1
  4638  005EF6  EC0A  F035         	call	_lcd_gotoxy
  4639                           
  4640                           ;screenDrawers.h: 237: if(calibLevel == 0) {
  4641  005EFA  0101               	movlb	1	; () banked
  4642  005EFC  51BB               	movf	_calibLevel& (0+255),w,b
  4643  005EFE  A4D8               	btfss	status,2,c
  4644  005F00  D011               	goto	l11113
  4645                           
  4646                           ; BSR set to: 1
  4647                           ;screenDrawers.h: 238: printf("Autocalib usando\n");
  4648  005F02  0EAF               	movlw	low STR_37
  4649  005F04  0101               	movlb	1	; () banked
  4650  005F06  6F3F               	movwf	printf@f& (0+255),b
  4651  005F08  0E7E               	movlw	high STR_37
  4652  005F0A  0101               	movlb	1	; () banked
  4653  005F0C  6F40               	movwf	(printf@f+1)& (0+255),b
  4654  005F0E  EC61  F000         	call	_printf	;wreg free
  4655                           
  4656                           ;screenDrawers.h: 239: printf("       1 kg     ");
  4657  005F12  0E2D               	movlw	low STR_38
  4658  005F14  0101               	movlb	1	; () banked
  4659  005F16  6F3F               	movwf	printf@f& (0+255),b
  4660  005F18  0E7F               	movlw	high STR_38
  4661  005F1A  0101               	movlb	1	; () banked
  4662  005F1C  6F40               	movwf	(printf@f+1)& (0+255),b
  4663  005F1E  EC61  F000         	call	_printf	;wreg free
  4664                           
  4665                           ;screenDrawers.h: 240: }else if(calibLevel == 1) {
  4666  005F22  0012               	return	
  4667  005F24                     l11113:
  4668  005F24  0101               	movlb	1	; () banked
  4669  005F26  05BB               	decf	_calibLevel& (0+255),w,b
  4670  005F28  A4D8               	btfss	status,2,c
  4671  005F2A  D011               	goto	l11117
  4672                           
  4673                           ; BSR set to: 1
  4674                           ;screenDrawers.h: 241: printf("Autocalib usando\n");
  4675  005F2C  0EAF               	movlw	low STR_37
  4676  005F2E  0101               	movlb	1	; () banked
  4677  005F30  6F3F               	movwf	printf@f& (0+255),b
  4678  005F32  0E7E               	movlw	high STR_37
  4679  005F34  0101               	movlb	1	; () banked
  4680  005F36  6F40               	movwf	(printf@f+1)& (0+255),b
  4681  005F38  EC61  F000         	call	_printf	;wreg free
  4682                           
  4683                           ;screenDrawers.h: 242: printf("     0.5 kg     ");
  4684  005F3C  0E3E               	movlw	low STR_40
  4685  005F3E  0101               	movlb	1	; () banked
  4686  005F40  6F3F               	movwf	printf@f& (0+255),b
  4687  005F42  0E7F               	movlw	high STR_40
  4688  005F44  0101               	movlb	1	; () banked
  4689  005F46  6F40               	movwf	(printf@f+1)& (0+255),b
  4690  005F48  EC61  F000         	call	_printf	;wreg free
  4691                           
  4692                           ;screenDrawers.h: 243: }else if(calibLevel == 2) {
  4693  005F4C  0012               	return	
  4694  005F4E                     l11117:
  4695  005F4E  0E02               	movlw	2
  4696  005F50  0101               	movlb	1	; () banked
  4697  005F52  19BB               	xorwf	_calibLevel& (0+255),w,b
  4698  005F54  A4D8               	btfss	status,2,c
  4699  005F56  0012               	return	
  4700                           
  4701                           ; BSR set to: 1
  4702                           ;screenDrawers.h: 244: printf("Autocalib usando\n");
  4703  005F58  0EAF               	movlw	low STR_37
  4704  005F5A  0101               	movlb	1	; () banked
  4705  005F5C  6F3F               	movwf	printf@f& (0+255),b
  4706  005F5E  0E7E               	movlw	high STR_37
  4707  005F60  0101               	movlb	1	; () banked
  4708  005F62  6F40               	movwf	(printf@f+1)& (0+255),b
  4709  005F64  EC61  F000         	call	_printf	;wreg free
  4710                           
  4711                           ;screenDrawers.h: 245: printf("    0.25 kg     ");
  4712  005F68  0E4F               	movlw	low STR_42
  4713  005F6A  0101               	movlb	1	; () banked
  4714  005F6C  6F3F               	movwf	printf@f& (0+255),b
  4715  005F6E  0E7F               	movlw	high STR_42
  4716  005F70  0101               	movlb	1	; () banked
  4717  005F72  6F40               	movwf	(printf@f+1)& (0+255),b
  4718  005F74  EC61  F000         	call	_printf	;wreg free
  4719  005F78  0012               	return	
  4720  005F7A                     __end_of_drawCalibProc:
  4721                           	opt stack 0
  4722                           tblptru	equ	0xFF8
  4723                           tblptrh	equ	0xFF7
  4724                           tblptrl	equ	0xFF6
  4725                           tablat	equ	0xFF5
  4726                           prodh	equ	0xFF4
  4727                           prodl	equ	0xFF3
  4728                           intcon	equ	0xFF2
  4729                           postinc0	equ	0xFEE
  4730                           wreg	equ	0xFE8
  4731                           postdec1	equ	0xFE5
  4732                           fsr1l	equ	0xFE1
  4733                           indf2	equ	0xFDF
  4734                           fsr2h	equ	0xFDA
  4735                           fsr2l	equ	0xFD9
  4736                           status	equ	0xFD8
  4737                           
  4738 ;; *************** function _drawBadPass *****************
  4739 ;; Defined at:
  4740 ;;		line 197 in file "source/screenDrawers.h"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;		None
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;		None
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  1    wreg      void 
  4747 ;; Registers used:
  4748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4754 ;;      Params:         0       0       0       0       0       0       0
  4755 ;;      Locals:         0       0       0       0       0       0       0
  4756 ;;      Temps:          0       0       0       0       0       0       0
  4757 ;;      Totals:         0       0       0       0       0       0       0
  4758 ;;Total ram usage:        0 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:   20
  4761 ;; This function calls:
  4762 ;;		_drawPass1Lin
  4763 ;;		_printf
  4764 ;; This function is called by:
  4765 ;;		_drawScreen
  4766 ;; This function uses a non-reentrant model
  4767 ;;
  4768                           
  4769                           	psect	text16
  4770  006C12                     __ptext16:
  4771                           	opt stack 0
  4772  006C12                     _drawBadPass:
  4773                           	opt stack 9
  4774                           
  4775                           ;screenDrawers.h: 198: drawPass1Lin();
  4776                           
  4777                           ;incstack = 0
  4778  006C12  ECD6  F035         	call	_drawPass1Lin	;wreg free
  4779                           
  4780                           ;screenDrawers.h: 199: printf("     Erronea    ");
  4781  006C16  0E60               	movlw	low STR_26
  4782  006C18  0101               	movlb	1	; () banked
  4783  006C1A  6F3F               	movwf	printf@f& (0+255),b
  4784  006C1C  0E7F               	movlw	high STR_26
  4785  006C1E  0101               	movlb	1	; () banked
  4786  006C20  6F40               	movwf	(printf@f+1)& (0+255),b
  4787  006C22  EC61  F000         	call	_printf	;wreg free
  4788  006C26  0012               	return		;funcret
  4789  006C28                     __end_of_drawBadPass:
  4790                           	opt stack 0
  4791                           tblptru	equ	0xFF8
  4792                           tblptrh	equ	0xFF7
  4793                           tblptrl	equ	0xFF6
  4794                           tablat	equ	0xFF5
  4795                           prodh	equ	0xFF4
  4796                           prodl	equ	0xFF3
  4797                           intcon	equ	0xFF2
  4798                           postinc0	equ	0xFEE
  4799                           wreg	equ	0xFE8
  4800                           postdec1	equ	0xFE5
  4801                           fsr1l	equ	0xFE1
  4802                           indf2	equ	0xFDF
  4803                           fsr2h	equ	0xFDA
  4804                           fsr2l	equ	0xFD9
  4805                           status	equ	0xFD8
  4806                           
  4807 ;; *************** function _drawPass1Lin *****************
  4808 ;; Defined at:
  4809 ;;		line 174 in file "source/screenDrawers.h"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;		None
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;		None
  4814 ;; Return value:  Size  Location     Type
  4815 ;;                  1    wreg      void 
  4816 ;; Registers used:
  4817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4818 ;; Tracked objects:
  4819 ;;		On entry : 0/0
  4820 ;;		On exit  : 0/0
  4821 ;;		Unchanged: 0/0
  4822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4823 ;;      Params:         0       0       0       0       0       0       0
  4824 ;;      Locals:         0       0       0       0       0       0       0
  4825 ;;      Temps:          0       0       0       0       0       0       0
  4826 ;;      Totals:         0       0       0       0       0       0       0
  4827 ;;Total ram usage:        0 bytes
  4828 ;; Hardware stack levels used:    1
  4829 ;; Hardware stack levels required when called:   19
  4830 ;; This function calls:
  4831 ;;		_lcd_gotoxy
  4832 ;;		_printf
  4833 ;; This function is called by:
  4834 ;;		_drawPassWord
  4835 ;;		_drawBadPass
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           	psect	text17
  4840  006BAC                     __ptext17:
  4841                           	opt stack 0
  4842  006BAC                     _drawPass1Lin:
  4843                           	opt stack 9
  4844                           
  4845                           ;screenDrawers.h: 175: lcd_gotoxy(1, 1);
  4846                           
  4847                           ;incstack = 0
  4848  006BAC  0E01               	movlw	1
  4849  006BAE  0101               	movlb	1	; () banked
  4850  006BB0  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4851  006BB2  0E01               	movlw	1
  4852  006BB4  EC0A  F035         	call	_lcd_gotoxy
  4853                           
  4854                           ;screenDrawers.h: 176: printf("Contrasena:     \n");
  4855  006BB8  0EE9               	movlw	low STR_24
  4856  006BBA  0101               	movlb	1	; () banked
  4857  006BBC  6F3F               	movwf	printf@f& (0+255),b
  4858  006BBE  0E7D               	movlw	high STR_24
  4859  006BC0  0101               	movlb	1	; () banked
  4860  006BC2  6F40               	movwf	(printf@f+1)& (0+255),b
  4861  006BC4  EC61  F000         	call	_printf	;wreg free
  4862  006BC8  0012               	return		;funcret
  4863  006BCA                     __end_of_drawPass1Lin:
  4864                           	opt stack 0
  4865                           tblptru	equ	0xFF8
  4866                           tblptrh	equ	0xFF7
  4867                           tblptrl	equ	0xFF6
  4868                           tablat	equ	0xFF5
  4869                           prodh	equ	0xFF4
  4870                           prodl	equ	0xFF3
  4871                           intcon	equ	0xFF2
  4872                           postinc0	equ	0xFEE
  4873                           wreg	equ	0xFE8
  4874                           postdec1	equ	0xFE5
  4875                           fsr1l	equ	0xFE1
  4876                           indf2	equ	0xFDF
  4877                           fsr2h	equ	0xFDA
  4878                           fsr2l	equ	0xFD9
  4879                           status	equ	0xFD8
  4880                           
  4881 ;; *************** function _drawAutoCalibRM *****************
  4882 ;; Defined at:
  4883 ;;		line 228 in file "source/screenDrawers.h"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;		None
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;		None
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  1    wreg      void 
  4890 ;; Registers used:
  4891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4897 ;;      Params:         0       0       0       0       0       0       0
  4898 ;;      Locals:         0       0       0       0       0       0       0
  4899 ;;      Temps:          0       0       0       0       0       0       0
  4900 ;;      Totals:         0       0       0       0       0       0       0
  4901 ;;Total ram usage:        0 bytes
  4902 ;; Hardware stack levels used:    1
  4903 ;; Hardware stack levels required when called:   20
  4904 ;; This function calls:
  4905 ;;		_drawValEditor
  4906 ;;		_lcd_gotoxy
  4907 ;;		_printf
  4908 ;; This function is called by:
  4909 ;;		_drawScreen
  4910 ;; This function uses a non-reentrant model
  4911 ;;
  4912                           
  4913                           	psect	text18
  4914  0069E2                     __ptext18:
  4915                           	opt stack 0
  4916  0069E2                     _drawAutoCalibRM:
  4917                           	opt stack 9
  4918                           
  4919                           ;screenDrawers.h: 229: lcd_gotoxy(1, 1);
  4920                           
  4921                           ;incstack = 0
  4922  0069E2  0E01               	movlw	1
  4923  0069E4  0101               	movlb	1	; () banked
  4924  0069E6  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4925  0069E8  0E01               	movlw	1
  4926  0069EA  EC0A  F035         	call	_lcd_gotoxy
  4927                           
  4928                           ;screenDrawers.h: 230: printf("Peso Real:      \n");
  4929  0069EE  0ED7               	movlw	low STR_35
  4930  0069F0  0101               	movlb	1	; () banked
  4931  0069F2  6F3F               	movwf	printf@f& (0+255),b
  4932  0069F4  0E7D               	movlw	high STR_35
  4933  0069F6  0101               	movlb	1	; () banked
  4934  0069F8  6F40               	movwf	(printf@f+1)& (0+255),b
  4935  0069FA  EC61  F000         	call	_printf	;wreg free
  4936                           
  4937                           ;screenDrawers.h: 231: drawValEditor();
  4938  0069FE  ECAD  F00B         	call	_drawValEditor	;wreg free
  4939                           
  4940                           ;screenDrawers.h: 232: printf("kg    ");
  4941  006A02  0EF0               	movlw	low STR_19
  4942  006A04  0101               	movlb	1	; () banked
  4943  006A06  6F3F               	movwf	printf@f& (0+255),b
  4944  006A08  0E7F               	movlw	high STR_19
  4945  006A0A  0101               	movlb	1	; () banked
  4946  006A0C  6F40               	movwf	(printf@f+1)& (0+255),b
  4947  006A0E  EC61  F000         	call	_printf	;wreg free
  4948  006A12  0012               	return		;funcret
  4949  006A14                     __end_of_drawAutoCalibRM:
  4950                           	opt stack 0
  4951                           tblptru	equ	0xFF8
  4952                           tblptrh	equ	0xFF7
  4953                           tblptrl	equ	0xFF6
  4954                           tablat	equ	0xFF5
  4955                           prodh	equ	0xFF4
  4956                           prodl	equ	0xFF3
  4957                           intcon	equ	0xFF2
  4958                           postinc0	equ	0xFEE
  4959                           wreg	equ	0xFE8
  4960                           postdec1	equ	0xFE5
  4961                           fsr1l	equ	0xFE1
  4962                           indf2	equ	0xFDF
  4963                           fsr2h	equ	0xFDA
  4964                           fsr2l	equ	0xFD9
  4965                           status	equ	0xFD8
  4966                           
  4967 ;; *************** function _drawValEditor *****************
  4968 ;; Defined at:
  4969 ;;		line 59 in file "source/screenDrawers.h"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;		None
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;		None
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  1    wreg      void 
  4976 ;; Registers used:
  4977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4983 ;;      Params:         0       0       0       0       0       0       0
  4984 ;;      Locals:         0       0       0       0       0       0       0
  4985 ;;      Temps:          0       0       0       0       0       0       0
  4986 ;;      Totals:         0       0       0       0       0       0       0
  4987 ;;Total ram usage:        0 bytes
  4988 ;; Hardware stack levels used:    1
  4989 ;; Hardware stack levels required when called:   19
  4990 ;; This function calls:
  4991 ;;		_lcd_gotoxy
  4992 ;;		_printf
  4993 ;; This function is called by:
  4994 ;;		_drawChanVal
  4995 ;;		_drawAutoCalibRM
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           	psect	text19
  5000  00175A                     __ptext19:
  5001                           	opt stack 0
  5002  00175A                     _drawValEditor:
  5003                           	opt stack 9
  5004                           
  5005                           ;screenDrawers.h: 60: if(chanValSection == 5) {
  5006                           
  5007                           ;incstack = 0
  5008  00175A  0E05               	movlw	5
  5009  00175C  0101               	movlb	1	; () banked
  5010  00175E  1994               	xorwf	_chanValSection& (0+255),w,b
  5011  001760  A4D8               	btfss	status,2,c
  5012  001762  D037               	goto	l10513
  5013                           
  5014                           ; BSR set to: 1
  5015                           ;screenDrawers.h: 61: printf(" %u%u%u.%u%u%c%u ", chanValdig[0], chanValdig[1],
  5016                           ;screenDrawers.h: 62: chanValdig[2], chanValdig[3], chanValdig[4], flech, chanValdig[5])
      +                          ;
  5017  001764  0EC1               	movlw	low STR_1
  5018  001766  0101               	movlb	1	; () banked
  5019  001768  6F3F               	movwf	printf@f& (0+255),b
  5020  00176A  0E7E               	movlw	high STR_1
  5021  00176C  0101               	movlb	1	; () banked
  5022  00176E  6F40               	movwf	(printf@f+1)& (0+255),b
  5023  001770  0101               	movlb	1	; () banked
  5024  001772  51A0               	movf	_chanValdig& (0+255),w,b
  5025  001774  0101               	movlb	1	; () banked
  5026  001776  6F41               	movwf	(?_printf+2)& (0+255),b
  5027  001778  6B42               	clrf	(?_printf+3)& (0+255),b
  5028  00177A  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5029  00177C  0742               	decf	(?_printf+3)& (0+255),f,b
  5030  00177E  0101               	movlb	1	; () banked
  5031  001780  51A1               	movf	(_chanValdig+1)& (0+255),w,b
  5032  001782  0101               	movlb	1	; () banked
  5033  001784  6F43               	movwf	(?_printf+4)& (0+255),b
  5034  001786  6B44               	clrf	(?_printf+5)& (0+255),b
  5035  001788  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5036  00178A  0744               	decf	(?_printf+5)& (0+255),f,b
  5037  00178C  0101               	movlb	1	; () banked
  5038  00178E  51A2               	movf	(_chanValdig+2)& (0+255),w,b
  5039  001790  0101               	movlb	1	; () banked
  5040  001792  6F45               	movwf	(?_printf+6)& (0+255),b
  5041  001794  6B46               	clrf	(?_printf+7)& (0+255),b
  5042  001796  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5043  001798  0746               	decf	(?_printf+7)& (0+255),f,b
  5044  00179A  0101               	movlb	1	; () banked
  5045  00179C  51A3               	movf	(_chanValdig+3)& (0+255),w,b
  5046  00179E  0101               	movlb	1	; () banked
  5047  0017A0  6F47               	movwf	(?_printf+8)& (0+255),b
  5048  0017A2  6B48               	clrf	(?_printf+9)& (0+255),b
  5049  0017A4  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5050  0017A6  0748               	decf	(?_printf+9)& (0+255),f,b
  5051  0017A8  0101               	movlb	1	; () banked
  5052  0017AA  51A4               	movf	(_chanValdig+4)& (0+255),w,b
  5053  0017AC  0101               	movlb	1	; () banked
  5054  0017AE  6F49               	movwf	(?_printf+10)& (0+255),b
  5055  0017B0  6B4A               	clrf	(?_printf+11)& (0+255),b
  5056  0017B2  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5057  0017B4  074A               	decf	(?_printf+11)& (0+255),f,b
  5058  0017B6  C195  F14B         	movff	_flech,?_printf+12
  5059  0017BA  0101               	movlb	1	; () banked
  5060  0017BC  6B4C               	clrf	(?_printf+13)& (0+255),b
  5061  0017BE  0101               	movlb	1	; () banked
  5062  0017C0  51A5               	movf	(_chanValdig+5)& (0+255),w,b
  5063  0017C2  0101               	movlb	1	; () banked
  5064  0017C4  6F4D               	movwf	(?_printf+14)& (0+255),b
  5065  0017C6  6B4E               	clrf	(?_printf+15)& (0+255),b
  5066  0017C8  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5067  0017CA  074E               	decf	(?_printf+15)& (0+255),f,b
  5068  0017CC  EC61  F000         	call	_printf	;wreg free
  5069                           
  5070                           ;screenDrawers.h: 63: }else if(chanValSection == 4) {
  5071  0017D0  D129               	goto	l10533
  5072  0017D2                     l10513:
  5073  0017D2  0E04               	movlw	4
  5074  0017D4  0101               	movlb	1	; () banked
  5075  0017D6  1994               	xorwf	_chanValSection& (0+255),w,b
  5076  0017D8  A4D8               	btfss	status,2,c
  5077  0017DA  D037               	goto	l10517
  5078                           
  5079                           ; BSR set to: 1
  5080                           ;screenDrawers.h: 64: printf(" %u%u%u.%u%c%u%u ", chanValdig[0], chanValdig[1],
  5081                           ;screenDrawers.h: 65: chanValdig[2], chanValdig[3], flech, chanValdig[4], chanValdig[5])
      +                          ;
  5082  0017DC  0ED3               	movlw	low STR_2
  5083  0017DE  0101               	movlb	1	; () banked
  5084  0017E0  6F3F               	movwf	printf@f& (0+255),b
  5085  0017E2  0E7E               	movlw	high STR_2
  5086  0017E4  0101               	movlb	1	; () banked
  5087  0017E6  6F40               	movwf	(printf@f+1)& (0+255),b
  5088  0017E8  0101               	movlb	1	; () banked
  5089  0017EA  51A0               	movf	_chanValdig& (0+255),w,b
  5090  0017EC  0101               	movlb	1	; () banked
  5091  0017EE  6F41               	movwf	(?_printf+2)& (0+255),b
  5092  0017F0  6B42               	clrf	(?_printf+3)& (0+255),b
  5093  0017F2  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5094  0017F4  0742               	decf	(?_printf+3)& (0+255),f,b
  5095  0017F6  0101               	movlb	1	; () banked
  5096  0017F8  51A1               	movf	(_chanValdig+1)& (0+255),w,b
  5097  0017FA  0101               	movlb	1	; () banked
  5098  0017FC  6F43               	movwf	(?_printf+4)& (0+255),b
  5099  0017FE  6B44               	clrf	(?_printf+5)& (0+255),b
  5100  001800  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5101  001802  0744               	decf	(?_printf+5)& (0+255),f,b
  5102  001804  0101               	movlb	1	; () banked
  5103  001806  51A2               	movf	(_chanValdig+2)& (0+255),w,b
  5104  001808  0101               	movlb	1	; () banked
  5105  00180A  6F45               	movwf	(?_printf+6)& (0+255),b
  5106  00180C  6B46               	clrf	(?_printf+7)& (0+255),b
  5107  00180E  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5108  001810  0746               	decf	(?_printf+7)& (0+255),f,b
  5109  001812  0101               	movlb	1	; () banked
  5110  001814  51A3               	movf	(_chanValdig+3)& (0+255),w,b
  5111  001816  0101               	movlb	1	; () banked
  5112  001818  6F47               	movwf	(?_printf+8)& (0+255),b
  5113  00181A  6B48               	clrf	(?_printf+9)& (0+255),b
  5114  00181C  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5115  00181E  0748               	decf	(?_printf+9)& (0+255),f,b
  5116  001820  C195  F149         	movff	_flech,?_printf+10
  5117  001824  0101               	movlb	1	; () banked
  5118  001826  6B4A               	clrf	(?_printf+11)& (0+255),b
  5119  001828  0101               	movlb	1	; () banked
  5120  00182A  51A4               	movf	(_chanValdig+4)& (0+255),w,b
  5121  00182C  0101               	movlb	1	; () banked
  5122  00182E  6F4B               	movwf	(?_printf+12)& (0+255),b
  5123  001830  6B4C               	clrf	(?_printf+13)& (0+255),b
  5124  001832  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5125  001834  074C               	decf	(?_printf+13)& (0+255),f,b
  5126  001836  0101               	movlb	1	; () banked
  5127  001838  51A5               	movf	(_chanValdig+5)& (0+255),w,b
  5128  00183A  0101               	movlb	1	; () banked
  5129  00183C  6F4D               	movwf	(?_printf+14)& (0+255),b
  5130  00183E  6B4E               	clrf	(?_printf+15)& (0+255),b
  5131  001840  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5132  001842  074E               	decf	(?_printf+15)& (0+255),f,b
  5133  001844  EC61  F000         	call	_printf	;wreg free
  5134                           
  5135                           ;screenDrawers.h: 66: }else if(chanValSection == 3) {
  5136  001848  D0ED               	goto	l10533
  5137  00184A                     l10517:
  5138  00184A  0E03               	movlw	3
  5139  00184C  0101               	movlb	1	; () banked
  5140  00184E  1994               	xorwf	_chanValSection& (0+255),w,b
  5141  001850  A4D8               	btfss	status,2,c
  5142  001852  D037               	goto	l10521
  5143                           
  5144                           ; BSR set to: 1
  5145                           ;screenDrawers.h: 67: printf(" %u%u%u.%c%u%u%u ", chanValdig[0], chanValdig[1],
  5146                           ;screenDrawers.h: 68: chanValdig[2], flech, chanValdig[3], chanValdig[4], chanValdig[5])
      +                          ;
  5147  001854  0E1B               	movlw	low STR_3
  5148  001856  0101               	movlb	1	; () banked
  5149  001858  6F3F               	movwf	printf@f& (0+255),b
  5150  00185A  0E7F               	movlw	high STR_3
  5151  00185C  0101               	movlb	1	; () banked
  5152  00185E  6F40               	movwf	(printf@f+1)& (0+255),b
  5153  001860  0101               	movlb	1	; () banked
  5154  001862  51A0               	movf	_chanValdig& (0+255),w,b
  5155  001864  0101               	movlb	1	; () banked
  5156  001866  6F41               	movwf	(?_printf+2)& (0+255),b
  5157  001868  6B42               	clrf	(?_printf+3)& (0+255),b
  5158  00186A  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5159  00186C  0742               	decf	(?_printf+3)& (0+255),f,b
  5160  00186E  0101               	movlb	1	; () banked
  5161  001870  51A1               	movf	(_chanValdig+1)& (0+255),w,b
  5162  001872  0101               	movlb	1	; () banked
  5163  001874  6F43               	movwf	(?_printf+4)& (0+255),b
  5164  001876  6B44               	clrf	(?_printf+5)& (0+255),b
  5165  001878  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5166  00187A  0744               	decf	(?_printf+5)& (0+255),f,b
  5167  00187C  0101               	movlb	1	; () banked
  5168  00187E  51A2               	movf	(_chanValdig+2)& (0+255),w,b
  5169  001880  0101               	movlb	1	; () banked
  5170  001882  6F45               	movwf	(?_printf+6)& (0+255),b
  5171  001884  6B46               	clrf	(?_printf+7)& (0+255),b
  5172  001886  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5173  001888  0746               	decf	(?_printf+7)& (0+255),f,b
  5174  00188A  C195  F147         	movff	_flech,?_printf+8
  5175  00188E  0101               	movlb	1	; () banked
  5176  001890  6B48               	clrf	(?_printf+9)& (0+255),b
  5177  001892  0101               	movlb	1	; () banked
  5178  001894  51A3               	movf	(_chanValdig+3)& (0+255),w,b
  5179  001896  0101               	movlb	1	; () banked
  5180  001898  6F49               	movwf	(?_printf+10)& (0+255),b
  5181  00189A  6B4A               	clrf	(?_printf+11)& (0+255),b
  5182  00189C  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5183  00189E  074A               	decf	(?_printf+11)& (0+255),f,b
  5184  0018A0  0101               	movlb	1	; () banked
  5185  0018A2  51A4               	movf	(_chanValdig+4)& (0+255),w,b
  5186  0018A4  0101               	movlb	1	; () banked
  5187  0018A6  6F4B               	movwf	(?_printf+12)& (0+255),b
  5188  0018A8  6B4C               	clrf	(?_printf+13)& (0+255),b
  5189  0018AA  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5190  0018AC  074C               	decf	(?_printf+13)& (0+255),f,b
  5191  0018AE  0101               	movlb	1	; () banked
  5192  0018B0  51A5               	movf	(_chanValdig+5)& (0+255),w,b
  5193  0018B2  0101               	movlb	1	; () banked
  5194  0018B4  6F4D               	movwf	(?_printf+14)& (0+255),b
  5195  0018B6  6B4E               	clrf	(?_printf+15)& (0+255),b
  5196  0018B8  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5197  0018BA  074E               	decf	(?_printf+15)& (0+255),f,b
  5198  0018BC  EC61  F000         	call	_printf	;wreg free
  5199                           
  5200                           ;screenDrawers.h: 69: }else if(chanValSection == 2) {
  5201  0018C0  D0B1               	goto	l10533
  5202  0018C2                     l10521:
  5203  0018C2  0E02               	movlw	2
  5204  0018C4  0101               	movlb	1	; () banked
  5205  0018C6  1994               	xorwf	_chanValSection& (0+255),w,b
  5206  0018C8  A4D8               	btfss	status,2,c
  5207  0018CA  D037               	goto	l10525
  5208                           
  5209                           ; BSR set to: 1
  5210                           ;screenDrawers.h: 70: printf(" %u%u%c%u.%u%u%u ", chanValdig[0], chanValdig[1], flech,
  5211                           ;screenDrawers.h: 71: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5212  0018CC  0EE5               	movlw	low STR_4
  5213  0018CE  0101               	movlb	1	; () banked
  5214  0018D0  6F3F               	movwf	printf@f& (0+255),b
  5215  0018D2  0E7E               	movlw	high STR_4
  5216  0018D4  0101               	movlb	1	; () banked
  5217  0018D6  6F40               	movwf	(printf@f+1)& (0+255),b
  5218  0018D8  0101               	movlb	1	; () banked
  5219  0018DA  51A0               	movf	_chanValdig& (0+255),w,b
  5220  0018DC  0101               	movlb	1	; () banked
  5221  0018DE  6F41               	movwf	(?_printf+2)& (0+255),b
  5222  0018E0  6B42               	clrf	(?_printf+3)& (0+255),b
  5223  0018E2  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5224  0018E4  0742               	decf	(?_printf+3)& (0+255),f,b
  5225  0018E6  0101               	movlb	1	; () banked
  5226  0018E8  51A1               	movf	(_chanValdig+1)& (0+255),w,b
  5227  0018EA  0101               	movlb	1	; () banked
  5228  0018EC  6F43               	movwf	(?_printf+4)& (0+255),b
  5229  0018EE  6B44               	clrf	(?_printf+5)& (0+255),b
  5230  0018F0  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5231  0018F2  0744               	decf	(?_printf+5)& (0+255),f,b
  5232  0018F4  C195  F145         	movff	_flech,?_printf+6
  5233  0018F8  0101               	movlb	1	; () banked
  5234  0018FA  6B46               	clrf	(?_printf+7)& (0+255),b
  5235  0018FC  0101               	movlb	1	; () banked
  5236  0018FE  51A2               	movf	(_chanValdig+2)& (0+255),w,b
  5237  001900  0101               	movlb	1	; () banked
  5238  001902  6F47               	movwf	(?_printf+8)& (0+255),b
  5239  001904  6B48               	clrf	(?_printf+9)& (0+255),b
  5240  001906  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5241  001908  0748               	decf	(?_printf+9)& (0+255),f,b
  5242  00190A  0101               	movlb	1	; () banked
  5243  00190C  51A3               	movf	(_chanValdig+3)& (0+255),w,b
  5244  00190E  0101               	movlb	1	; () banked
  5245  001910  6F49               	movwf	(?_printf+10)& (0+255),b
  5246  001912  6B4A               	clrf	(?_printf+11)& (0+255),b
  5247  001914  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5248  001916  074A               	decf	(?_printf+11)& (0+255),f,b
  5249  001918  0101               	movlb	1	; () banked
  5250  00191A  51A4               	movf	(_chanValdig+4)& (0+255),w,b
  5251  00191C  0101               	movlb	1	; () banked
  5252  00191E  6F4B               	movwf	(?_printf+12)& (0+255),b
  5253  001920  6B4C               	clrf	(?_printf+13)& (0+255),b
  5254  001922  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5255  001924  074C               	decf	(?_printf+13)& (0+255),f,b
  5256  001926  0101               	movlb	1	; () banked
  5257  001928  51A5               	movf	(_chanValdig+5)& (0+255),w,b
  5258  00192A  0101               	movlb	1	; () banked
  5259  00192C  6F4D               	movwf	(?_printf+14)& (0+255),b
  5260  00192E  6B4E               	clrf	(?_printf+15)& (0+255),b
  5261  001930  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5262  001932  074E               	decf	(?_printf+15)& (0+255),f,b
  5263  001934  EC61  F000         	call	_printf	;wreg free
  5264                           
  5265                           ;screenDrawers.h: 72: }else if(chanValSection == 1) {
  5266  001938  D075               	goto	l10533
  5267  00193A                     l10525:
  5268  00193A  0101               	movlb	1	; () banked
  5269  00193C  0594               	decf	_chanValSection& (0+255),w,b
  5270  00193E  A4D8               	btfss	status,2,c
  5271  001940  D037               	goto	l10529
  5272                           
  5273                           ; BSR set to: 1
  5274                           ;screenDrawers.h: 73: printf(" %u%c%u%u.%u%u%u ", chanValdig[0], flech, chanValdig[1],
  5275                           ;screenDrawers.h: 74: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5276  001942  0EF7               	movlw	low STR_5
  5277  001944  0101               	movlb	1	; () banked
  5278  001946  6F3F               	movwf	printf@f& (0+255),b
  5279  001948  0E7E               	movlw	high STR_5
  5280  00194A  0101               	movlb	1	; () banked
  5281  00194C  6F40               	movwf	(printf@f+1)& (0+255),b
  5282  00194E  0101               	movlb	1	; () banked
  5283  001950  51A0               	movf	_chanValdig& (0+255),w,b
  5284  001952  0101               	movlb	1	; () banked
  5285  001954  6F41               	movwf	(?_printf+2)& (0+255),b
  5286  001956  6B42               	clrf	(?_printf+3)& (0+255),b
  5287  001958  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5288  00195A  0742               	decf	(?_printf+3)& (0+255),f,b
  5289  00195C  C195  F143         	movff	_flech,?_printf+4
  5290  001960  0101               	movlb	1	; () banked
  5291  001962  6B44               	clrf	(?_printf+5)& (0+255),b
  5292  001964  0101               	movlb	1	; () banked
  5293  001966  51A1               	movf	(_chanValdig+1)& (0+255),w,b
  5294  001968  0101               	movlb	1	; () banked
  5295  00196A  6F45               	movwf	(?_printf+6)& (0+255),b
  5296  00196C  6B46               	clrf	(?_printf+7)& (0+255),b
  5297  00196E  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5298  001970  0746               	decf	(?_printf+7)& (0+255),f,b
  5299  001972  0101               	movlb	1	; () banked
  5300  001974  51A2               	movf	(_chanValdig+2)& (0+255),w,b
  5301  001976  0101               	movlb	1	; () banked
  5302  001978  6F47               	movwf	(?_printf+8)& (0+255),b
  5303  00197A  6B48               	clrf	(?_printf+9)& (0+255),b
  5304  00197C  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5305  00197E  0748               	decf	(?_printf+9)& (0+255),f,b
  5306  001980  0101               	movlb	1	; () banked
  5307  001982  51A3               	movf	(_chanValdig+3)& (0+255),w,b
  5308  001984  0101               	movlb	1	; () banked
  5309  001986  6F49               	movwf	(?_printf+10)& (0+255),b
  5310  001988  6B4A               	clrf	(?_printf+11)& (0+255),b
  5311  00198A  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5312  00198C  074A               	decf	(?_printf+11)& (0+255),f,b
  5313  00198E  0101               	movlb	1	; () banked
  5314  001990  51A4               	movf	(_chanValdig+4)& (0+255),w,b
  5315  001992  0101               	movlb	1	; () banked
  5316  001994  6F4B               	movwf	(?_printf+12)& (0+255),b
  5317  001996  6B4C               	clrf	(?_printf+13)& (0+255),b
  5318  001998  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5319  00199A  074C               	decf	(?_printf+13)& (0+255),f,b
  5320  00199C  0101               	movlb	1	; () banked
  5321  00199E  51A5               	movf	(_chanValdig+5)& (0+255),w,b
  5322  0019A0  0101               	movlb	1	; () banked
  5323  0019A2  6F4D               	movwf	(?_printf+14)& (0+255),b
  5324  0019A4  6B4E               	clrf	(?_printf+15)& (0+255),b
  5325  0019A6  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5326  0019A8  074E               	decf	(?_printf+15)& (0+255),f,b
  5327  0019AA  EC61  F000         	call	_printf	;wreg free
  5328                           
  5329                           ;screenDrawers.h: 75: }else if(chanValSection == 0) {
  5330  0019AE  D03A               	goto	l10533
  5331  0019B0                     l10529:
  5332  0019B0  0101               	movlb	1	; () banked
  5333  0019B2  5194               	movf	_chanValSection& (0+255),w,b
  5334  0019B4  A4D8               	btfss	status,2,c
  5335  0019B6  D036               	goto	l10533
  5336                           
  5337                           ; BSR set to: 1
  5338                           ;screenDrawers.h: 76: printf(" %c%u%u%u.%u%u%u ", flech, chanValdig[0], chanValdig[1],
  5339                           ;screenDrawers.h: 77: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5340  0019B8  0E09               	movlw	low STR_6
  5341  0019BA  0101               	movlb	1	; () banked
  5342  0019BC  6F3F               	movwf	printf@f& (0+255),b
  5343  0019BE  0E7F               	movlw	high STR_6
  5344  0019C0  0101               	movlb	1	; () banked
  5345  0019C2  6F40               	movwf	(printf@f+1)& (0+255),b
  5346  0019C4  C195  F141         	movff	_flech,?_printf+2
  5347  0019C8  0101               	movlb	1	; () banked
  5348  0019CA  6B42               	clrf	(?_printf+3)& (0+255),b
  5349  0019CC  0101               	movlb	1	; () banked
  5350  0019CE  51A0               	movf	_chanValdig& (0+255),w,b
  5351  0019D0  0101               	movlb	1	; () banked
  5352  0019D2  6F43               	movwf	(?_printf+4)& (0+255),b
  5353  0019D4  6B44               	clrf	(?_printf+5)& (0+255),b
  5354  0019D6  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5355  0019D8  0744               	decf	(?_printf+5)& (0+255),f,b
  5356  0019DA  0101               	movlb	1	; () banked
  5357  0019DC  51A1               	movf	(_chanValdig+1)& (0+255),w,b
  5358  0019DE  0101               	movlb	1	; () banked
  5359  0019E0  6F45               	movwf	(?_printf+6)& (0+255),b
  5360  0019E2  6B46               	clrf	(?_printf+7)& (0+255),b
  5361  0019E4  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5362  0019E6  0746               	decf	(?_printf+7)& (0+255),f,b
  5363  0019E8  0101               	movlb	1	; () banked
  5364  0019EA  51A2               	movf	(_chanValdig+2)& (0+255),w,b
  5365  0019EC  0101               	movlb	1	; () banked
  5366  0019EE  6F47               	movwf	(?_printf+8)& (0+255),b
  5367  0019F0  6B48               	clrf	(?_printf+9)& (0+255),b
  5368  0019F2  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5369  0019F4  0748               	decf	(?_printf+9)& (0+255),f,b
  5370  0019F6  0101               	movlb	1	; () banked
  5371  0019F8  51A3               	movf	(_chanValdig+3)& (0+255),w,b
  5372  0019FA  0101               	movlb	1	; () banked
  5373  0019FC  6F49               	movwf	(?_printf+10)& (0+255),b
  5374  0019FE  6B4A               	clrf	(?_printf+11)& (0+255),b
  5375  001A00  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5376  001A02  074A               	decf	(?_printf+11)& (0+255),f,b
  5377  001A04  0101               	movlb	1	; () banked
  5378  001A06  51A4               	movf	(_chanValdig+4)& (0+255),w,b
  5379  001A08  0101               	movlb	1	; () banked
  5380  001A0A  6F4B               	movwf	(?_printf+12)& (0+255),b
  5381  001A0C  6B4C               	clrf	(?_printf+13)& (0+255),b
  5382  001A0E  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5383  001A10  074C               	decf	(?_printf+13)& (0+255),f,b
  5384  001A12  0101               	movlb	1	; () banked
  5385  001A14  51A5               	movf	(_chanValdig+5)& (0+255),w,b
  5386  001A16  0101               	movlb	1	; () banked
  5387  001A18  6F4D               	movwf	(?_printf+14)& (0+255),b
  5388  001A1A  6B4E               	clrf	(?_printf+15)& (0+255),b
  5389  001A1C  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5390  001A1E  074E               	decf	(?_printf+15)& (0+255),f,b
  5391  001A20  EC61  F000         	call	_printf	;wreg free
  5392  001A24                     l10533:
  5393                           
  5394                           ;screenDrawers.h: 78: }
  5395                           ;screenDrawers.h: 79: lcd_gotoxy(11, 2);
  5396  001A24  0E02               	movlw	2
  5397  001A26  0101               	movlb	1	; () banked
  5398  001A28  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5399  001A2A  0E0B               	movlw	11
  5400  001A2C  EC0A  F035         	call	_lcd_gotoxy
  5401  001A30  0012               	return		;funcret
  5402  001A32                     __end_of_drawValEditor:
  5403                           	opt stack 0
  5404                           tblptru	equ	0xFF8
  5405                           tblptrh	equ	0xFF7
  5406                           tblptrl	equ	0xFF6
  5407                           tablat	equ	0xFF5
  5408                           prodh	equ	0xFF4
  5409                           prodl	equ	0xFF3
  5410                           intcon	equ	0xFF2
  5411                           postinc0	equ	0xFEE
  5412                           wreg	equ	0xFE8
  5413                           postdec1	equ	0xFE5
  5414                           fsr1l	equ	0xFE1
  5415                           indf2	equ	0xFDF
  5416                           fsr2h	equ	0xFDA
  5417                           fsr2l	equ	0xFD9
  5418                           status	equ	0xFD8
  5419                           
  5420 ;; *************** function _drawAdvON *****************
  5421 ;; Defined at:
  5422 ;;		line 202 in file "source/screenDrawers.h"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;  on              1    wreg     unsigned char 
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;  on              1  116[BANK1 ] unsigned char 
  5427 ;; Return value:  Size  Location     Type
  5428 ;;                  1    wreg      void 
  5429 ;; Registers used:
  5430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5431 ;; Tracked objects:
  5432 ;;		On entry : 0/0
  5433 ;;		On exit  : 0/0
  5434 ;;		Unchanged: 0/0
  5435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5436 ;;      Params:         0       0       0       0       0       0       0
  5437 ;;      Locals:         0       0       1       0       0       0       0
  5438 ;;      Temps:          0       0       0       0       0       0       0
  5439 ;;      Totals:         0       0       1       0       0       0       0
  5440 ;;Total ram usage:        1 bytes
  5441 ;; Hardware stack levels used:    1
  5442 ;; Hardware stack levels required when called:   19
  5443 ;; This function calls:
  5444 ;;		_lcd_gotoxy
  5445 ;;		_printf
  5446 ;; This function is called by:
  5447 ;;		_drawScreen
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451                           	psect	text20
  5452  00670E                     __ptext20:
  5453                           	opt stack 0
  5454  00670E                     _drawAdvON:
  5455                           	opt stack 10
  5456                           
  5457                           ;incstack = 0
  5458                           ;drawAdvON@on stored from wreg
  5459  00670E  0101               	movlb	1	; () banked
  5460  006710  6F74               	movwf	drawAdvON@on& (0+255),b
  5461                           
  5462                           ;screenDrawers.h: 203: lcd_gotoxy(1, 1);
  5463  006712  0E01               	movlw	1
  5464  006714  0101               	movlb	1	; () banked
  5465  006716  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5466  006718  0E01               	movlw	1
  5467  00671A  EC0A  F035         	call	_lcd_gotoxy
  5468                           
  5469                           ;screenDrawers.h: 204: printf("Modo Configurar:\n");
  5470  00671E  0E67               	movlw	low STR_27
  5471  006720  0101               	movlb	1	; () banked
  5472  006722  6F3F               	movwf	printf@f& (0+255),b
  5473  006724  0E7E               	movlw	high STR_27
  5474  006726  0101               	movlb	1	; () banked
  5475  006728  6F40               	movwf	(printf@f+1)& (0+255),b
  5476  00672A  EC61  F000         	call	_printf	;wreg free
  5477                           
  5478                           ;screenDrawers.h: 205: if(on)
  5479  00672E  0101               	movlb	1	; () banked
  5480  006730  5174               	movf	drawAdvON@on& (0+255),w,b
  5481  006732  0101               	movlb	1	; () banked
  5482  006734  B4D8               	btfsc	status,2,c
  5483  006736  D009               	goto	l11065
  5484                           
  5485                           ; BSR set to: 1
  5486                           ;screenDrawers.h: 206: printf("    Iniciado    ");
  5487  006738  0E71               	movlw	low STR_28
  5488  00673A  0101               	movlb	1	; () banked
  5489  00673C  6F3F               	movwf	printf@f& (0+255),b
  5490  00673E  0E7F               	movlw	high STR_28
  5491  006740  0101               	movlb	1	; () banked
  5492  006742  6F40               	movwf	(printf@f+1)& (0+255),b
  5493  006744  EC61  F000         	call	_printf	;wreg free
  5494  006748  0012               	return	
  5495  00674A                     l11065:
  5496                           
  5497                           ;screenDrawers.h: 207: else
  5498                           ;screenDrawers.h: 208: printf("   Finalizado   ");
  5499  00674A  0E93               	movlw	low STR_29
  5500  00674C  0101               	movlb	1	; () banked
  5501  00674E  6F3F               	movwf	printf@f& (0+255),b
  5502  006750  0E7F               	movlw	high STR_29
  5503  006752  0101               	movlb	1	; () banked
  5504  006754  6F40               	movwf	(printf@f+1)& (0+255),b
  5505  006756  EC61  F000         	call	_printf	;wreg free
  5506  00675A  0012               	return	
  5507  00675C                     __end_of_drawAdvON:
  5508                           	opt stack 0
  5509                           tblptru	equ	0xFF8
  5510                           tblptrh	equ	0xFF7
  5511                           tblptrl	equ	0xFF6
  5512                           tablat	equ	0xFF5
  5513                           prodh	equ	0xFF4
  5514                           prodl	equ	0xFF3
  5515                           intcon	equ	0xFF2
  5516                           postinc0	equ	0xFEE
  5517                           wreg	equ	0xFE8
  5518                           postdec1	equ	0xFE5
  5519                           fsr1l	equ	0xFE1
  5520                           indf2	equ	0xFDF
  5521                           fsr2h	equ	0xFDA
  5522                           fsr2l	equ	0xFD9
  5523                           status	equ	0xFD8
  5524                           
  5525 ;; *************** function _printf *****************
  5526 ;; Defined at:
  5527 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;  f               2   63[BANK1 ] PTR const unsigned char 
  5530 ;;		 -> STR_42(17), STR_41(18), STR_40(17), STR_39(18), 
  5531 ;;		 -> STR_38(17), STR_37(18), STR_36(7), STR_35(18), 
  5532 ;;		 -> STR_34(19), STR_33(18), STR_32(18), STR_31(18), 
  5533 ;;		 -> STR_30(18), STR_29(17), STR_28(17), STR_27(18), 
  5534 ;;		 -> STR_26(17), STR_25(25), STR_24(18), STR_23(7), 
  5535 ;;		 -> STR_22(18), STR_21(16), STR_20(18), STR_19(7), 
  5536 ;;		 -> STR_18(18), STR_17(15), STR_16(18), STR_15(15), 
  5537 ;;		 -> STR_14(18), STR_13(16), STR_12(18), STR_11(15), 
  5538 ;;		 -> STR_10(18), STR_9(17), STR_8(15), STR_7(18), 
  5539 ;;		 -> STR_6(18), STR_5(18), STR_4(18), STR_3(18), 
  5540 ;;		 -> STR_2(18), STR_1(18), 
  5541 ;; Auto vars:     Size  Location     Type
  5542 ;;  val             4  102[BANK1 ] unsigned long 
  5543 ;;  tmpval          4   98[BANK1 ] struct .
  5544 ;;  fval            3  110[BANK1 ] struct .
  5545 ;;  prec            2  113[BANK1 ] int 
  5546 ;;  width           2  108[BANK1 ] int 
  5547 ;;  exp             2  106[BANK1 ] int 
  5548 ;;  flag            2   96[BANK1 ] unsigned short 
  5549 ;;  ap              2   94[BANK1 ] PTR void [1]
  5550 ;;		 -> ?_printf(2), 
  5551 ;;  len             2   92[BANK1 ] unsigned int 
  5552 ;;  cp              2   90[BANK1 ] PTR const unsigned char 
  5553 ;;		 -> printf@c(1), 
  5554 ;;  c               1  115[BANK1 ] char 
  5555 ;;  d               1    0        unsigned char 
  5556 ;; Return value:  Size  Location     Type
  5557 ;;                  2   63[BANK1 ] int 
  5558 ;; Registers used:
  5559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5560 ;; Tracked objects:
  5561 ;;		On entry : 0/0
  5562 ;;		On exit  : 0/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5565 ;;      Params:         0       0      18       0       0       0       0
  5566 ;;      Locals:         0       0      29       0       0       0       0
  5567 ;;      Temps:          0       0       6       0       0       0       0
  5568 ;;      Totals:         0       0      53       0       0       0       0
  5569 ;;Total ram usage:       53 bytes
  5570 ;; Hardware stack levels used:    1
  5571 ;; Hardware stack levels required when called:   18
  5572 ;; This function calls:
  5573 ;;		___awdiv
  5574 ;;		___ftadd
  5575 ;;		___ftge
  5576 ;;		___ftmul
  5577 ;;		___ftneg
  5578 ;;		___ftsub
  5579 ;;		___fttol
  5580 ;;		___lldiv
  5581 ;;		___llmod
  5582 ;;		___lltoft
  5583 ;;		___wmul
  5584 ;;		__div_to_l_
  5585 ;;		__tdiv_to_l_
  5586 ;;		_fround
  5587 ;;		_isdigit
  5588 ;;		_putch
  5589 ;;		_scale
  5590 ;; This function is called by:
  5591 ;;		_drawValEditor
  5592 ;;		_drawMenu
  5593 ;;		_drawChanVal
  5594 ;;		_drawPass1Lin
  5595 ;;		_drawPassWord
  5596 ;;		_drawBadPass
  5597 ;;		_drawAdvON
  5598 ;;		_drawSNquest
  5599 ;;		_drawAutoCalibRM
  5600 ;;		_drawCalibProc
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           	psect	text21
  5605  0000C2                     __ptext21:
  5606                           	opt stack 0
  5607  0000C2                     _printf:
  5608                           	opt stack 10
  5609                           
  5610                           ;doprnt.c: 466: va_list ap;
  5611                           ;doprnt.c: 499: signed char c;
  5612                           ;doprnt.c: 501: int width;
  5613                           ;doprnt.c: 504: int prec;
  5614                           ;doprnt.c: 508: unsigned short flag;
  5615                           ;doprnt.c: 515: char d;
  5616                           ;doprnt.c: 516: double fval;
  5617                           ;doprnt.c: 517: int exp;
  5618                           ;doprnt.c: 523: union {
  5619                           ;doprnt.c: 524: unsigned long vd;
  5620                           ;doprnt.c: 525: double integ;
  5621                           ;doprnt.c: 526: } tmpval;
  5622                           ;doprnt.c: 528: unsigned long val;
  5623                           ;doprnt.c: 529: unsigned len;
  5624                           ;doprnt.c: 530: const char * cp;
  5625                           ;doprnt.c: 533: *ap = __va_start();
  5626                           
  5627                           ;incstack = 0
  5628  0000C2  0E41               	movlw	low (?_printf+2)
  5629  0000C4  0101               	movlb	1	; () banked
  5630  0000C6  6F5E               	movwf	printf@ap& (0+255),b
  5631  0000C8  0E01               	movlw	high (?_printf+2)
  5632  0000CA  0101               	movlb	1	; () banked
  5633  0000CC  6F5F               	movwf	(printf@ap+1)& (0+255),b
  5634                           
  5635                           ;doprnt.c: 536: while(c = *f++) {
  5636  0000CE  EF6A  F006         	goto	l10279
  5637  0000D2                     l9981:
  5638                           
  5639                           ; BSR set to: 1
  5640                           ;doprnt.c: 538: if(c != '%')
  5641  0000D2  0E25               	movlw	37
  5642  0000D4  0101               	movlb	1	; () banked
  5643  0000D6  1973               	xorwf	printf@c& (0+255),w,b
  5644  0000D8  B4D8               	btfsc	status,2,c
  5645  0000DA  D006               	goto	l9985
  5646                           
  5647                           ; BSR set to: 1
  5648                           ;doprnt.c: 540: {
  5649                           ;doprnt.c: 541: (putch(c) );
  5650  0000DC  0101               	movlb	1	; () banked
  5651  0000DE  5173               	movf	printf@c& (0+255),w,b
  5652  0000E0  EC31  F036         	call	_putch
  5653                           
  5654                           ;doprnt.c: 542: continue;
  5655  0000E4  EF6A  F006         	goto	l10279
  5656  0000E8                     l9985:
  5657                           
  5658                           ;doprnt.c: 543: }
  5659                           ;doprnt.c: 546: width = 0;
  5660  0000E8  0E00               	movlw	0
  5661  0000EA  0101               	movlb	1	; () banked
  5662  0000EC  6F6D               	movwf	(printf@width+1)& (0+255),b
  5663  0000EE  0E00               	movlw	0
  5664  0000F0  6F6C               	movwf	printf@width& (0+255),b
  5665                           
  5666                           ;doprnt.c: 548: flag = 0;
  5667  0000F2  0E00               	movlw	0
  5668  0000F4  0101               	movlb	1	; () banked
  5669  0000F6  6F61               	movwf	(printf@flag+1)& (0+255),b
  5670  0000F8  0E00               	movlw	0
  5671  0000FA  6F60               	movwf	printf@flag& (0+255),b
  5672                           
  5673                           ; BSR set to: 1
  5674                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5675  0000FC  C13F  FFF6         	movff	printf@f,tblptrl
  5676  000100  C140  FFF7         	movff	printf@f+1,tblptrh
  5677  000104                     	if	0	;tblptru may be non-zero
  5678  000104                     	endif
  5679  000104                     	if	0	;tblptru may be non-zero
  5680  000104                     	endif
  5681  000104  0008               	tblrd		*
  5682  000106  50F5               	movf	tablat,w,c
  5683  000108  EC4F  F035         	call	_isdigit
  5684  00010C  A0D8               	btfss	status,0,c
  5685  00010E  D040               	goto	l9999
  5686                           
  5687                           ;doprnt.c: 598: width = 0;
  5688  000110  0E00               	movlw	0
  5689  000112  0101               	movlb	1	; () banked
  5690  000114  6F6D               	movwf	(printf@width+1)& (0+255),b
  5691  000116  0E00               	movlw	0
  5692  000118  6F6C               	movwf	printf@width& (0+255),b
  5693  00011A                     l9991:
  5694                           
  5695                           ;doprnt.c: 600: width *= 10;
  5696  00011A  C16C  F10E         	movff	printf@width,___wmul@multiplier
  5697  00011E  C16D  F10F         	movff	printf@width+1,___wmul@multiplier+1
  5698  000122  0E00               	movlw	0
  5699  000124  0101               	movlb	1	; () banked
  5700  000126  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5701  000128  0E0A               	movlw	10
  5702  00012A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5703  00012C  ECBD  F034         	call	___wmul	;wreg free
  5704  000130  C10E  F16C         	movff	?___wmul,printf@width
  5705  000134  C10F  F16D         	movff	?___wmul+1,printf@width+1
  5706                           
  5707                           ;doprnt.c: 601: width += *f++ - '0';
  5708  000138  0ED0               	movlw	208
  5709  00013A  0101               	movlb	1	; () banked
  5710  00013C  6F51               	movwf	??_printf& (0+255),b
  5711  00013E  0EFF               	movlw	255
  5712  000140  0101               	movlb	1	; () banked
  5713  000142  6F52               	movwf	(??_printf+1)& (0+255),b
  5714  000144  C13F  FFF6         	movff	printf@f,tblptrl
  5715  000148  C140  FFF7         	movff	printf@f+1,tblptrh
  5716  00014C                     	if	0	;tblptru may be non-zero
  5717  00014C                     	endif
  5718  00014C                     	if	0	;tblptru may be non-zero
  5719  00014C                     	endif
  5720  00014C  0008               	tblrd		*
  5721  00014E  50F5               	movf	tablat,w,c
  5722  000150  0101               	movlb	1	; () banked
  5723  000152  6F53               	movwf	(??_printf+2)& (0+255),b
  5724  000154  6B54               	clrf	(??_printf+3)& (0+255),b
  5725  000156  0101               	movlb	1	; () banked
  5726  000158  5151               	movf	??_printf& (0+255),w,b
  5727  00015A  0101               	movlb	1	; () banked
  5728  00015C  2753               	addwf	(??_printf+2)& (0+255),f,b
  5729  00015E  0101               	movlb	1	; () banked
  5730  000160  5152               	movf	(??_printf+1)& (0+255),w,b
  5731  000162  0101               	movlb	1	; () banked
  5732  000164  2354               	addwfc	(??_printf+3)& (0+255),f,b
  5733  000166  0101               	movlb	1	; () banked
  5734  000168  5153               	movf	(??_printf+2)& (0+255),w,b
  5735  00016A  0101               	movlb	1	; () banked
  5736  00016C  276C               	addwf	printf@width& (0+255),f,b
  5737  00016E  0101               	movlb	1	; () banked
  5738  000170  5154               	movf	(??_printf+3)& (0+255),w,b
  5739  000172  0101               	movlb	1	; () banked
  5740  000174  236D               	addwfc	(printf@width+1)& (0+255),f,b
  5741                           
  5742                           ; BSR set to: 1
  5743  000176  0101               	movlb	1	; () banked
  5744  000178  4B3F               	infsnz	printf@f& (0+255),f,b
  5745  00017A  2B40               	incf	(printf@f+1)& (0+255),f,b
  5746                           
  5747                           ; BSR set to: 1
  5748                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5749  00017C  C13F  FFF6         	movff	printf@f,tblptrl
  5750  000180  C140  FFF7         	movff	printf@f+1,tblptrh
  5751  000184                     	if	0	;tblptru may be non-zero
  5752  000184                     	endif
  5753  000184                     	if	0	;tblptru may be non-zero
  5754  000184                     	endif
  5755  000184  0008               	tblrd		*
  5756  000186  50F5               	movf	tablat,w,c
  5757  000188  EC4F  F035         	call	_isdigit
  5758  00018C  B0D8               	btfsc	status,0,c
  5759  00018E  D7C5               	goto	l9991
  5760  000190                     l9999:
  5761                           
  5762                           ;doprnt.c: 608: }
  5763                           ;doprnt.c: 611: if(*f == '.') {
  5764  000190  C13F  FFF6         	movff	printf@f,tblptrl
  5765  000194  C140  FFF7         	movff	printf@f+1,tblptrh
  5766  000198                     	if	0	;tblptru may be non-zero
  5767  000198                     	endif
  5768  000198                     	if	0	;tblptru may be non-zero
  5769  000198                     	endif
  5770  000198  0008               	tblrd		*
  5771  00019A  50F5               	movf	tablat,w,c
  5772  00019C  0A2E               	xorlw	46
  5773  00019E  A4D8               	btfss	status,2,c
  5774  0001A0  D039               	goto	l10011
  5775                           
  5776                           ;doprnt.c: 612: flag |= 0x4000;
  5777  0001A2  0101               	movlb	1	; () banked
  5778  0001A4  8D61               	bsf	(printf@flag+1)& (0+255),6,b
  5779                           
  5780                           ;doprnt.c: 613: f++;
  5781  0001A6  0101               	movlb	1	; () banked
  5782  0001A8  4B3F               	infsnz	printf@f& (0+255),f,b
  5783  0001AA  2B40               	incf	(printf@f+1)& (0+255),f,b
  5784                           
  5785                           ; BSR set to: 1
  5786                           ;doprnt.c: 620: {
  5787                           ;doprnt.c: 621: prec = 0;
  5788  0001AC  0E00               	movlw	0
  5789  0001AE  0101               	movlb	1	; () banked
  5790  0001B0  6F72               	movwf	(printf@prec+1)& (0+255),b
  5791  0001B2  0E00               	movlw	0
  5792  0001B4  6F71               	movwf	printf@prec& (0+255),b
  5793                           
  5794                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5795  0001B6  D023               	goto	l10009
  5796  0001B8                     l10005:
  5797                           
  5798                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5799  0001B8  C171  F10E         	movff	printf@prec,___wmul@multiplier
  5800  0001BC  C172  F10F         	movff	printf@prec+1,___wmul@multiplier+1
  5801  0001C0  0E00               	movlw	0
  5802  0001C2  0101               	movlb	1	; () banked
  5803  0001C4  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5804  0001C6  0E0A               	movlw	10
  5805  0001C8  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5806  0001CA  ECBD  F034         	call	___wmul	;wreg free
  5807  0001CE  C13F  FFF6         	movff	printf@f,tblptrl
  5808  0001D2  C140  FFF7         	movff	printf@f+1,tblptrh
  5809  0001D6                     	if	0	;tblptru may be non-zero
  5810  0001D6                     	endif
  5811  0001D6                     	if	0	;tblptru may be non-zero
  5812  0001D6                     	endif
  5813  0001D6  0008               	tblrd		*
  5814  0001D8  50F5               	movf	tablat,w,c
  5815  0001DA  0101               	movlb	1	; () banked
  5816  0001DC  270E               	addwf	?___wmul& (0+255),f,b
  5817  0001DE  0E00               	movlw	0
  5818  0001E0  0101               	movlb	1	; () banked
  5819  0001E2  230F               	addwfc	(?___wmul+1)& (0+255),f,b
  5820  0001E4  0ED0               	movlw	208
  5821  0001E6  0101               	movlb	1	; () banked
  5822  0001E8  250E               	addwf	?___wmul& (0+255),w,b
  5823  0001EA  0101               	movlb	1	; () banked
  5824  0001EC  6F71               	movwf	printf@prec& (0+255),b
  5825  0001EE  0EFF               	movlw	255
  5826  0001F0  0101               	movlb	1	; () banked
  5827  0001F2  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5828  0001F4  0101               	movlb	1	; () banked
  5829  0001F6  6F72               	movwf	(printf@prec+1)& (0+255),b
  5830                           
  5831                           ; BSR set to: 1
  5832  0001F8  0101               	movlb	1	; () banked
  5833  0001FA  4B3F               	infsnz	printf@f& (0+255),f,b
  5834  0001FC  2B40               	incf	(printf@f+1)& (0+255),f,b
  5835  0001FE                     l10009:
  5836                           
  5837                           ; BSR set to: 1
  5838  0001FE  C13F  FFF6         	movff	printf@f,tblptrl
  5839  000202  C140  FFF7         	movff	printf@f+1,tblptrh
  5840  000206                     	if	0	;tblptru may be non-zero
  5841  000206                     	endif
  5842  000206                     	if	0	;tblptru may be non-zero
  5843  000206                     	endif
  5844  000206  0008               	tblrd		*
  5845  000208  50F5               	movf	tablat,w,c
  5846  00020A  EC4F  F035         	call	_isdigit
  5847  00020E  A0D8               	btfss	status,0,c
  5848  000210  D07A               	goto	l10051
  5849  000212  D7D2               	goto	l10005
  5850  000214                     l10011:
  5851                           
  5852                           ;doprnt.c: 626: prec = 0;
  5853  000214  0E00               	movlw	0
  5854  000216  0101               	movlb	1	; () banked
  5855  000218  6F72               	movwf	(printf@prec+1)& (0+255),b
  5856  00021A  0E00               	movlw	0
  5857  00021C  6F71               	movwf	printf@prec& (0+255),b
  5858                           
  5859                           ; BSR set to: 1
  5860                           ;doprnt.c: 628: flag |= 0x1000;
  5861  00021E  0101               	movlb	1	; () banked
  5862  000220  8961               	bsf	(printf@flag+1)& (0+255),4,b
  5863                           
  5864                           ; BSR set to: 1
  5865                           ;doprnt.c: 630: }
  5866                           ;doprnt.c: 635: switch(c = *f++) {
  5867  000222  D071               	goto	l10051
  5868  000224                     l10015:
  5869                           
  5870                           ; BSR set to: 1
  5871                           ;doprnt.c: 663: flag |= 0x400;
  5872  000224  0101               	movlb	1	; () banked
  5873  000226  8561               	bsf	(printf@flag+1)& (0+255),2,b
  5874                           
  5875                           ; BSR set to: 1
  5876                           ;doprnt.c: 698: case 'i':
  5877                           ;doprnt.c: 699: break;
  5878                           
  5879                           ; BSR set to: 1
  5880                           
  5881                           ;doprnt.c: 697: case 'd':
  5882                           
  5883                           ;doprnt.c: 664: break;
  5884  000228  D08D               	goto	l10053
  5885  00022A                     l10017:
  5886                           
  5887                           ; BSR set to: 1
  5888                           ;doprnt.c: 753: if(prec && prec < len)
  5889  00022A  0101               	movlb	1	; () banked
  5890  00022C  5171               	movf	printf@prec& (0+255),w,b
  5891  00022E  0101               	movlb	1	; () banked
  5892  000230  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  5893  000232  B4D8               	btfsc	status,2,c
  5894  000234  D00E               	goto	l10023
  5895                           
  5896                           ; BSR set to: 1
  5897  000236  0101               	movlb	1	; () banked
  5898  000238  515C               	movf	printf@len& (0+255),w,b
  5899  00023A  0101               	movlb	1	; () banked
  5900  00023C  5D71               	subwf	printf@prec& (0+255),w,b
  5901  00023E  0101               	movlb	1	; () banked
  5902  000240  515D               	movf	(printf@len+1)& (0+255),w,b
  5903  000242  0101               	movlb	1	; () banked
  5904  000244  5972               	subwfb	(printf@prec+1)& (0+255),w,b
  5905  000246  B0D8               	btfsc	status,0,c
  5906  000248  D004               	goto	l10023
  5907                           
  5908                           ; BSR set to: 1
  5909                           ;doprnt.c: 754: len = prec;
  5910  00024A  C171  F15C         	movff	printf@prec,printf@len
  5911  00024E  C172  F15D         	movff	printf@prec+1,printf@len+1
  5912  000252                     l10023:
  5913                           
  5914                           ; BSR set to: 1
  5915                           ;doprnt.c: 757: if(width > len)
  5916  000252  0101               	movlb	1	; () banked
  5917  000254  516C               	movf	printf@width& (0+255),w,b
  5918  000256  0101               	movlb	1	; () banked
  5919  000258  5D5C               	subwf	printf@len& (0+255),w,b
  5920  00025A  0101               	movlb	1	; () banked
  5921  00025C  516D               	movf	(printf@width+1)& (0+255),w,b
  5922  00025E  0101               	movlb	1	; () banked
  5923  000260  595D               	subwfb	(printf@len+1)& (0+255),w,b
  5924  000262  B0D8               	btfsc	status,0,c
  5925  000264  D009               	goto	l10027
  5926                           
  5927                           ; BSR set to: 1
  5928                           ;doprnt.c: 758: width -= len;
  5929  000266  0101               	movlb	1	; () banked
  5930  000268  515C               	movf	printf@len& (0+255),w,b
  5931  00026A  0101               	movlb	1	; () banked
  5932  00026C  5F6C               	subwf	printf@width& (0+255),f,b
  5933  00026E  0101               	movlb	1	; () banked
  5934  000270  515D               	movf	(printf@len+1)& (0+255),w,b
  5935  000272  0101               	movlb	1	; () banked
  5936  000274  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  5937  000276  D009               	goto	l10031
  5938  000278                     l10027:
  5939                           
  5940                           ; BSR set to: 1
  5941                           ;doprnt.c: 759: else
  5942                           ;doprnt.c: 760: width = 0;
  5943  000278  0E00               	movlw	0
  5944  00027A  0101               	movlb	1	; () banked
  5945  00027C  6F6D               	movwf	(printf@width+1)& (0+255),b
  5946  00027E  0E00               	movlw	0
  5947  000280  6F6C               	movwf	printf@width& (0+255),b
  5948                           
  5949                           ; BSR set to: 1
  5950                           ;doprnt.c: 764: while(width--)
  5951  000282  D003               	goto	l10031
  5952  000284                     l10029:
  5953                           
  5954                           ; BSR set to: 1
  5955                           ;doprnt.c: 765: (putch(' ') );
  5956  000284  0E20               	movlw	32
  5957  000286  EC31  F036         	call	_putch
  5958  00028A                     l10031:
  5959  00028A  0101               	movlb	1	; () banked
  5960  00028C  076C               	decf	printf@width& (0+255),f,b
  5961  00028E  A0D8               	btfss	status,0,c
  5962  000290  076D               	decf	(printf@width+1)& (0+255),f,b
  5963  000292  0101               	movlb	1	; () banked
  5964  000294  296C               	incf	printf@width& (0+255),w,b
  5965  000296  E1F6               	bnz	l10029
  5966  000298  0101               	movlb	1	; () banked
  5967  00029A  296D               	incf	(printf@width+1)& (0+255),w,b
  5968  00029C  B4D8               	btfsc	status,2,c
  5969  00029E  D00B               	goto	l10037
  5970  0002A0  D7F1               	goto	l10029
  5971  0002A2                     l10033:
  5972                           
  5973                           ; BSR set to: 1
  5974                           ;doprnt.c: 768: (putch(*cp++) );
  5975  0002A2  C15A  FFD9         	movff	printf@cp,fsr2l
  5976  0002A6  C15B  FFDA         	movff	printf@cp+1,fsr2h
  5977  0002AA  50DF               	movf	indf2,w,c
  5978  0002AC  EC31  F036         	call	_putch
  5979  0002B0  0101               	movlb	1	; () banked
  5980  0002B2  4B5A               	infsnz	printf@cp& (0+255),f,b
  5981  0002B4  2B5B               	incf	(printf@cp+1)& (0+255),f,b
  5982  0002B6                     l10037:
  5983                           
  5984                           ; BSR set to: 1
  5985  0002B6  0101               	movlb	1	; () banked
  5986  0002B8  075C               	decf	printf@len& (0+255),f,b
  5987  0002BA  A0D8               	btfss	status,0,c
  5988  0002BC  075D               	decf	(printf@len+1)& (0+255),f,b
  5989  0002BE  0101               	movlb	1	; () banked
  5990  0002C0  295C               	incf	printf@len& (0+255),w,b
  5991  0002C2  E1EF               	bnz	l10033
  5992  0002C4  0101               	movlb	1	; () banked
  5993  0002C6  295D               	incf	(printf@len+1)& (0+255),w,b
  5994  0002C8  B4D8               	btfsc	status,2,c
  5995  0002CA  EF6A  F006         	goto	l10279
  5996  0002CE  D7E9               	goto	l10033
  5997  0002D0                     l10039:
  5998                           
  5999                           ; BSR set to: 1
  6000                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6001  0002D0  C15E  FFD9         	movff	printf@ap,fsr2l
  6002  0002D4  C15F  FFDA         	movff	printf@ap+1,fsr2h
  6003  0002D8  50DF               	movf	indf2,w,c
  6004  0002DA  0101               	movlb	1	; () banked
  6005  0002DC  6F73               	movwf	printf@c& (0+255),b
  6006                           
  6007                           ; BSR set to: 1
  6008  0002DE  0E02               	movlw	2
  6009  0002E0  0101               	movlb	1	; () banked
  6010  0002E2  275E               	addwf	printf@ap& (0+255),f,b
  6011  0002E4  0E00               	movlw	0
  6012  0002E6  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  6013  0002E8                     l10043:
  6014                           
  6015                           ; BSR set to: 1
  6016                           ;doprnt.c: 805: cp = (char *)&c;
  6017  0002E8  0E73               	movlw	low printf@c
  6018  0002EA  0101               	movlb	1	; () banked
  6019  0002EC  6F5A               	movwf	printf@cp& (0+255),b
  6020  0002EE  0E01               	movlw	high printf@c
  6021  0002F0  0101               	movlb	1	; () banked
  6022  0002F2  6F5B               	movwf	(printf@cp+1)& (0+255),b
  6023                           
  6024                           ; BSR set to: 1
  6025                           ;doprnt.c: 806: len = 1;
  6026  0002F4  0E00               	movlw	0
  6027  0002F6  0101               	movlb	1	; () banked
  6028  0002F8  6F5D               	movwf	(printf@len+1)& (0+255),b
  6029  0002FA  0E01               	movlw	1
  6030  0002FC  6F5C               	movwf	printf@len& (0+255),b
  6031                           
  6032                           ;doprnt.c: 807: goto dostring;
  6033  0002FE  D795               	goto	l10017
  6034  000300                     l10047:
  6035                           
  6036                           ; BSR set to: 1
  6037                           ;doprnt.c: 818: flag |= 0x40;
  6038  000300  0101               	movlb	1	; () banked
  6039  000302  8D60               	bsf	printf@flag& (0+255),6,b
  6040                           
  6041                           ; BSR set to: 1
  6042                           ;doprnt.c: 822: }
  6043                           
  6044                           ;doprnt.c: 819: break;
  6045  000304  D01F               	goto	l10053
  6046  000306                     l10051:
  6047  000306  C13F  FFF6         	movff	printf@f,tblptrl
  6048  00030A  C140  FFF7         	movff	printf@f+1,tblptrh
  6049  00030E  0101               	movlb	1	; () banked
  6050  000310  4B3F               	infsnz	printf@f& (0+255),f,b
  6051  000312  2B40               	incf	(printf@f+1)& (0+255),f,b
  6052  000314                     	if	0	;tblptru may be non-zero
  6053  000314                     	endif
  6054  000314                     	if	0	;tblptru may be non-zero
  6055  000314                     	endif
  6056  000314  0008               	tblrd		*
  6057  000316  CFF5 F173          	movff	tablat,printf@c
  6058  00031A  0101               	movlb	1	; () banked
  6059  00031C  5173               	movf	printf@c& (0+255),w,b
  6060                           
  6061                           ; Switch size 1, requested type "space"
  6062                           ; Number of cases is 6, Range of values is 0 to 117
  6063                           ; switch strategies available:
  6064                           ; Name         Instructions Cycles
  6065                           ; simple_byte           19    10 (average)
  6066                           ;	Chosen strategy is simple_byte
  6067  00031E  0A00               	xorlw	0	; case 0
  6068  000320  B4D8               	btfsc	status,2,c
  6069  000322  0012               	return	
  6070  000324  0A63               	xorlw	99	; case 99
  6071  000326  B4D8               	btfsc	status,2,c
  6072  000328  D7D3               	goto	l10039
  6073  00032A  0A07               	xorlw	7	; case 100
  6074  00032C  B4D8               	btfsc	status,2,c
  6075  00032E  D00A               	goto	l10053
  6076  000330  0A02               	xorlw	2	; case 102
  6077  000332  B4D8               	btfsc	status,2,c
  6078  000334  D777               	goto	l10015
  6079  000336  0A0F               	xorlw	15	; case 105
  6080  000338  B4D8               	btfsc	status,2,c
  6081  00033A  D004               	goto	l10053
  6082  00033C  0A1C               	xorlw	28	; case 117
  6083  00033E  B4D8               	btfsc	status,2,c
  6084  000340  D7DF               	goto	l10047
  6085  000342  D7D2               	goto	l10043
  6086  000344                     l10053:
  6087                           
  6088                           ; BSR set to: 1
  6089                           ;doprnt.c: 825: if(flag & (0x700)) {
  6090  000344  0E07               	movlw	7
  6091  000346  0101               	movlb	1	; () banked
  6092  000348  1561               	andwf	(printf@flag+1)& (0+255),w,b
  6093  00034A  B4D8               	btfsc	status,2,c
  6094  00034C  D351               	goto	l955
  6095                           
  6096                           ; BSR set to: 1
  6097                           ;doprnt.c: 827: if(flag & 0x1000)
  6098  00034E  0101               	movlb	1	; () banked
  6099  000350  A961               	btfss	(printf@flag+1)& (0+255),4,b
  6100  000352  D005               	goto	l10059
  6101                           
  6102                           ; BSR set to: 1
  6103                           ;doprnt.c: 829: prec = 6;
  6104  000354  0E00               	movlw	0
  6105  000356  0101               	movlb	1	; () banked
  6106  000358  6F72               	movwf	(printf@prec+1)& (0+255),b
  6107  00035A  0E06               	movlw	6
  6108  00035C  6F71               	movwf	printf@prec& (0+255),b
  6109  00035E                     l10059:
  6110                           
  6111                           ; BSR set to: 1
  6112                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6113  00035E  C15E  FFD9         	movff	printf@ap,fsr2l
  6114  000362  C15F  FFDA         	movff	printf@ap+1,fsr2h
  6115  000366  CFDE F16E          	movff	postinc2,printf@fval
  6116  00036A  CFDE F16F          	movff	postinc2,printf@fval+1
  6117  00036E  CFDD F170          	movff	postdec2,printf@fval+2
  6118                           
  6119                           ; BSR set to: 1
  6120  000372  0E03               	movlw	3
  6121  000374  0101               	movlb	1	; () banked
  6122  000376  275E               	addwf	printf@ap& (0+255),f,b
  6123  000378  0E00               	movlw	0
  6124  00037A  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  6125                           
  6126                           ; BSR set to: 1
  6127                           ;doprnt.c: 831: if(fval < 0.0) {
  6128  00037C  0101               	movlb	1	; () banked
  6129  00037E  AF70               	btfss	(printf@fval+2)& (0+255),7,b
  6130  000380  D011               	goto	l10069
  6131                           
  6132                           ; BSR set to: 1
  6133                           ;doprnt.c: 832: fval = -fval;
  6134  000382  C16E  F100         	movff	printf@fval,___ftneg@f1
  6135  000386  C16F  F101         	movff	printf@fval+1,___ftneg@f1+1
  6136  00038A  C170  F102         	movff	printf@fval+2,___ftneg@f1+2
  6137  00038E  EC22  F035         	call	___ftneg	;wreg free
  6138  000392  C100  F16E         	movff	?___ftneg,printf@fval
  6139  000396  C101  F16F         	movff	?___ftneg+1,printf@fval+1
  6140  00039A  C102  F170         	movff	?___ftneg+2,printf@fval+2
  6141                           
  6142                           ;doprnt.c: 833: flag |= 0x03;
  6143  00039E  0E03               	movlw	3
  6144  0003A0  0101               	movlb	1	; () banked
  6145  0003A2  1360               	iorwf	printf@flag& (0+255),f,b
  6146  0003A4                     l10069:
  6147                           
  6148                           ; BSR set to: 1
  6149                           ;doprnt.c: 834: }
  6150                           ;doprnt.c: 835: exp = 0;
  6151  0003A4  0E00               	movlw	0
  6152  0003A6  0101               	movlb	1	; () banked
  6153  0003A8  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6154  0003AA  0E00               	movlw	0
  6155  0003AC  6F6A               	movwf	printf@exp& (0+255),b
  6156                           
  6157                           ; BSR set to: 1
  6158                           ;doprnt.c: 836: if( fval!=0) {
  6159  0003AE  0101               	movlb	1	; () banked
  6160  0003B0  516E               	movf	printf@fval& (0+255),w,b
  6161  0003B2  0101               	movlb	1	; () banked
  6162  0003B4  116F               	iorwf	(printf@fval+1)& (0+255),w,b
  6163  0003B6  0101               	movlb	1	; () banked
  6164  0003B8  1170               	iorwf	(printf@fval+2)& (0+255),w,b
  6165  0003BA  B4D8               	btfsc	status,2,c
  6166  0003BC  D09B               	goto	l10097
  6167                           
  6168                           ; BSR set to: 1
  6169                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6170  0003BE  0E82               	movlw	130
  6171  0003C0  0101               	movlb	1	; () banked
  6172  0003C2  6F51               	movwf	??_printf& (0+255),b
  6173  0003C4  0EFF               	movlw	255
  6174  0003C6  0101               	movlb	1	; () banked
  6175  0003C8  6F52               	movwf	(??_printf+1)& (0+255),b
  6176  0003CA  C16E  F153         	movff	printf@fval,??_printf+2
  6177  0003CE  C16F  F154         	movff	printf@fval+1,??_printf+3
  6178  0003D2  C170  F155         	movff	printf@fval+2,??_printf+4
  6179  0003D6  C171  F156         	movff	printf@fval+3,??_printf+5
  6180  0003DA  0E10               	movlw	16
  6181  0003DC  D006               	goto	u14230
  6182  0003DE                     u14235:
  6183  0003DE  0101               	movlb	1	; () banked
  6184  0003E0  90D8               	bcf	status,0,c
  6185  0003E2  3356               	rrcf	(??_printf+5)& (0+255),f,b
  6186  0003E4  3355               	rrcf	(??_printf+4)& (0+255),f,b
  6187  0003E6  3354               	rrcf	(??_printf+3)& (0+255),f,b
  6188  0003E8  3353               	rrcf	(??_printf+2)& (0+255),f,b
  6189  0003EA                     u14230:
  6190  0003EA  2EE8               	decfsz	wreg,f,c
  6191  0003EC  D7F8               	goto	u14235
  6192  0003EE  0101               	movlb	1	; () banked
  6193  0003F0  5153               	movf	(??_printf+2)& (0+255),w,b
  6194  0003F2  0101               	movlb	1	; () banked
  6195  0003F4  2551               	addwf	??_printf& (0+255),w,b
  6196  0003F6  0101               	movlb	1	; () banked
  6197  0003F8  6F6A               	movwf	printf@exp& (0+255),b
  6198  0003FA  0E00               	movlw	0
  6199  0003FC  0101               	movlb	1	; () banked
  6200  0003FE  2152               	addwfc	(??_printf+1)& (0+255),w,b
  6201  000400  0101               	movlb	1	; () banked
  6202  000402  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6203                           
  6204                           ; BSR set to: 1
  6205                           ;doprnt.c: 838: exp--;
  6206  000404  0101               	movlb	1	; () banked
  6207  000406  076A               	decf	printf@exp& (0+255),f,b
  6208  000408  A0D8               	btfss	status,0,c
  6209  00040A  076B               	decf	(printf@exp+1)& (0+255),f,b
  6210                           
  6211                           ; BSR set to: 1
  6212                           ;doprnt.c: 839: exp *= 3;
  6213  00040C  C16A  F10E         	movff	printf@exp,___wmul@multiplier
  6214  000410  C16B  F10F         	movff	printf@exp+1,___wmul@multiplier+1
  6215  000414  0E00               	movlw	0
  6216  000416  0101               	movlb	1	; () banked
  6217  000418  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6218  00041A  0E03               	movlw	3
  6219  00041C  6F10               	movwf	___wmul@multiplicand& (0+255),b
  6220  00041E  ECBD  F034         	call	___wmul	;wreg free
  6221  000422  C10E  F16A         	movff	?___wmul,printf@exp
  6222  000426  C10F  F16B         	movff	?___wmul+1,printf@exp+1
  6223                           
  6224                           ;doprnt.c: 840: exp /= 10;
  6225  00042A  C16A  F106         	movff	printf@exp,___awdiv@dividend
  6226  00042E  C16B  F107         	movff	printf@exp+1,___awdiv@dividend+1
  6227  000432  0E00               	movlw	0
  6228  000434  0101               	movlb	1	; () banked
  6229  000436  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  6230  000438  0E0A               	movlw	10
  6231  00043A  6F08               	movwf	___awdiv@divisor& (0+255),b
  6232  00043C  EC76  F028         	call	___awdiv	;wreg free
  6233  000440  C106  F16A         	movff	?___awdiv,printf@exp
  6234  000444  C107  F16B         	movff	?___awdiv+1,printf@exp+1
  6235                           
  6236                           ;doprnt.c: 841: if(exp < 0)
  6237  000448  0101               	movlb	1	; () banked
  6238  00044A  AF6B               	btfss	(printf@exp+1)& (0+255),7,b
  6239  00044C  D004               	goto	l10085
  6240                           
  6241                           ; BSR set to: 1
  6242                           ;doprnt.c: 842: exp--;
  6243  00044E  0101               	movlb	1	; () banked
  6244  000450  076A               	decf	printf@exp& (0+255),f,b
  6245  000452  A0D8               	btfss	status,0,c
  6246  000454  076B               	decf	(printf@exp+1)& (0+255),f,b
  6247  000456                     l10085:
  6248                           
  6249                           ; BSR set to: 1
  6250                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6251  000456  0101               	movlb	1	; () banked
  6252  000458  516A               	movf	printf@exp& (0+255),w,b
  6253  00045A  0800               	sublw	0
  6254  00045C  EC7A  F006         	call	_scale
  6255  000460  C123  F162         	movff	?_scale,printf@tmpval
  6256  000464  C124  F163         	movff	?_scale+1,printf@tmpval+1
  6257  000468  C125  F164         	movff	?_scale+2,printf@tmpval+2
  6258                           
  6259                           ;doprnt.c: 847: tmpval.integ *= fval;
  6260  00046C  C162  F114         	movff	printf@tmpval,___ftmul@f1
  6261  000470  C163  F115         	movff	printf@tmpval+1,___ftmul@f1+1
  6262  000474  C164  F116         	movff	printf@tmpval+2,___ftmul@f1+2
  6263  000478  C16E  F117         	movff	printf@fval,___ftmul@f2
  6264  00047C  C16F  F118         	movff	printf@fval+1,___ftmul@f2+1
  6265  000480  C170  F119         	movff	printf@fval+2,___ftmul@f2+2
  6266  000484  ECF4  F019         	call	___ftmul	;wreg free
  6267  000488  C114  F162         	movff	?___ftmul,printf@tmpval
  6268  00048C  C115  F163         	movff	?___ftmul+1,printf@tmpval+1
  6269  000490  C116  F164         	movff	?___ftmul+2,printf@tmpval+2
  6270                           
  6271                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6272  000494  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6273  000498  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6274  00049C  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6275  0004A0  0E00               	movlw	0
  6276  0004A2  0101               	movlb	1	; () banked
  6277  0004A4  6F03               	movwf	___ftge@ff2& (0+255),b
  6278  0004A6  0E80               	movlw	128
  6279  0004A8  0101               	movlb	1	; () banked
  6280  0004AA  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6281  0004AC  0E3F               	movlw	63
  6282  0004AE  0101               	movlb	1	; () banked
  6283  0004B0  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6284  0004B2  EC50  F027         	call	___ftge	;wreg free
  6285  0004B6  0101               	movlb	1	; () banked
  6286  0004B8  B0D8               	btfsc	status,0,c
  6287  0004BA  D005               	goto	l10093
  6288                           
  6289                           ; BSR set to: 1
  6290                           ;doprnt.c: 849: exp--;
  6291  0004BC  0101               	movlb	1	; () banked
  6292  0004BE  076A               	decf	printf@exp& (0+255),f,b
  6293  0004C0  A0D8               	btfss	status,0,c
  6294  0004C2  076B               	decf	(printf@exp+1)& (0+255),f,b
  6295  0004C4  D017               	goto	l10097
  6296  0004C6                     l10093:
  6297                           
  6298                           ; BSR set to: 1
  6299                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6300  0004C6  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6301  0004CA  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6302  0004CE  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6303  0004D2  0E00               	movlw	0
  6304  0004D4  0101               	movlb	1	; () banked
  6305  0004D6  6F03               	movwf	___ftge@ff2& (0+255),b
  6306  0004D8  0E20               	movlw	32
  6307  0004DA  0101               	movlb	1	; () banked
  6308  0004DC  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6309  0004DE  0E41               	movlw	65
  6310  0004E0  0101               	movlb	1	; () banked
  6311  0004E2  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6312  0004E4  EC50  F027         	call	___ftge	;wreg free
  6313  0004E8  0101               	movlb	1	; () banked
  6314  0004EA  A0D8               	btfss	status,0,c
  6315  0004EC  D003               	goto	l10097
  6316                           
  6317                           ; BSR set to: 1
  6318                           ;doprnt.c: 851: exp++;
  6319  0004EE  0101               	movlb	1	; () banked
  6320  0004F0  4B6A               	infsnz	printf@exp& (0+255),f,b
  6321  0004F2  2B6B               	incf	(printf@exp+1)& (0+255),f,b
  6322  0004F4                     l10097:
  6323                           
  6324                           ; BSR set to: 1
  6325                           ;doprnt.c: 852: }
  6326                           ;doprnt.c: 1112: if(prec <= 12)
  6327  0004F4  0101               	movlb	1	; () banked
  6328  0004F6  BF72               	btfsc	(printf@prec+1)& (0+255),7,b
  6329  0004F8  D008               	goto	l10099
  6330  0004FA  0101               	movlb	1	; () banked
  6331  0004FC  5172               	movf	(printf@prec+1)& (0+255),w,b
  6332  0004FE  E11D               	bnz	l10101
  6333  000500  0E0D               	movlw	13
  6334  000502  0101               	movlb	1	; () banked
  6335  000504  5D71               	subwf	printf@prec& (0+255),w,b
  6336  000506  B0D8               	btfsc	status,0,c
  6337  000508  D018               	goto	l10101
  6338  00050A                     l10099:
  6339                           
  6340                           ; BSR set to: 1
  6341                           ;doprnt.c: 1113: fval += fround(prec);
  6342  00050A  C16E  F12D         	movff	printf@fval,___ftadd@f1
  6343  00050E  C16F  F12E         	movff	printf@fval+1,___ftadd@f1+1
  6344  000512  C170  F12F         	movff	printf@fval+2,___ftadd@f1+2
  6345  000516  0101               	movlb	1	; () banked
  6346  000518  5171               	movf	printf@prec& (0+255),w,b
  6347  00051A  EC26  F011         	call	_fround
  6348  00051E  C123  F130         	movff	?_fround,___ftadd@f2
  6349  000522  C124  F131         	movff	?_fround+1,___ftadd@f2+1
  6350  000526  C125  F132         	movff	?_fround+2,___ftadd@f2+2
  6351  00052A  EC7C  F012         	call	___ftadd	;wreg free
  6352  00052E  C12D  F16E         	movff	?___ftadd,printf@fval
  6353  000532  C12E  F16F         	movff	?___ftadd+1,printf@fval+1
  6354  000536  C12F  F170         	movff	?___ftadd+2,printf@fval+2
  6355  00053A                     l10101:
  6356                           
  6357                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6358  00053A  0101               	movlb	1	; () banked
  6359  00053C  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  6360  00053E  D008               	goto	l10103
  6361  000540  0101               	movlb	1	; () banked
  6362  000542  516B               	movf	(printf@exp+1)& (0+255),w,b
  6363  000544  E12A               	bnz	l10109
  6364  000546  0E0A               	movlw	10
  6365  000548  0101               	movlb	1	; () banked
  6366  00054A  5D6A               	subwf	printf@exp& (0+255),w,b
  6367  00054C  B0D8               	btfsc	status,0,c
  6368  00054E  D025               	goto	l10109
  6369  000550                     l10103:
  6370                           
  6371                           ; BSR set to: 1
  6372  000550  0101               	movlb	1	; () banked
  6373  000552  516E               	movf	printf@fval& (0+255),w,b
  6374  000554  0101               	movlb	1	; () banked
  6375  000556  116F               	iorwf	(printf@fval+1)& (0+255),w,b
  6376  000558  0101               	movlb	1	; () banked
  6377  00055A  1170               	iorwf	(printf@fval+2)& (0+255),w,b
  6378  00055C  B4D8               	btfsc	status,2,c
  6379  00055E  D063               	goto	l10123
  6380                           
  6381                           ; BSR set to: 1
  6382  000560  C16E  F12A         	movff	printf@fval,___fttol@f1
  6383  000564  C16F  F12B         	movff	printf@fval+1,___fttol@f1+1
  6384  000568  C170  F12C         	movff	printf@fval+2,___fttol@f1+2
  6385  00056C  EC9E  F01C         	call	___fttol	;wreg free
  6386  000570  0101               	movlb	1	; () banked
  6387  000572  512A               	movf	?___fttol& (0+255),w,b
  6388  000574  0101               	movlb	1	; () banked
  6389  000576  112B               	iorwf	(?___fttol+1)& (0+255),w,b
  6390  000578  0101               	movlb	1	; () banked
  6391  00057A  112C               	iorwf	(?___fttol+2)& (0+255),w,b
  6392  00057C  0101               	movlb	1	; () banked
  6393  00057E  112D               	iorwf	(?___fttol+3)& (0+255),w,b
  6394  000580  A4D8               	btfss	status,2,c
  6395  000582  D051               	goto	l10123
  6396                           
  6397                           ; BSR set to: 1
  6398  000584  0101               	movlb	1	; () banked
  6399  000586  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  6400  000588  D04E               	goto	l10123
  6401  00058A  0101               	movlb	1	; () banked
  6402  00058C  516B               	movf	(printf@exp+1)& (0+255),w,b
  6403  00058E  E105               	bnz	l10109
  6404  000590  0E02               	movlw	2
  6405  000592  0101               	movlb	1	; () banked
  6406  000594  5D6A               	subwf	printf@exp& (0+255),w,b
  6407  000596  A0D8               	btfss	status,0,c
  6408  000598  D046               	goto	l10123
  6409  00059A                     l10109:
  6410                           
  6411                           ; BSR set to: 1
  6412                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6413  00059A  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6414  00059E  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6415  0005A2  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6416  0005A6  0E70               	movlw	112
  6417  0005A8  0101               	movlb	1	; () banked
  6418  0005AA  6F03               	movwf	___ftge@ff2& (0+255),b
  6419  0005AC  0E89               	movlw	137
  6420  0005AE  0101               	movlb	1	; () banked
  6421  0005B0  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6422  0005B2  0E40               	movlw	64
  6423  0005B4  0101               	movlb	1	; () banked
  6424  0005B6  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6425  0005B8  EC50  F027         	call	___ftge	;wreg free
  6426  0005BC  0101               	movlb	1	; () banked
  6427  0005BE  B0D8               	btfsc	status,0,c
  6428  0005C0  D003               	goto	l10113
  6429                           
  6430                           ; BSR set to: 1
  6431                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6432  0005C2  0101               	movlb	1	; () banked
  6433  0005C4  0EF7               	movlw	247
  6434  0005C6  D002               	goto	L1
  6435  0005C8                     l10113:
  6436                           
  6437                           ; BSR set to: 1
  6438                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6439  0005C8  0101               	movlb	1	; () banked
  6440  0005CA  0EF8               	movlw	248
  6441  0005CC                     L1:
  6442  0005CC  276A               	addwf	printf@exp& (0+255),f,b
  6443  0005CE  0EFF               	movlw	255
  6444  0005D0  236B               	addwfc	(printf@exp+1)& (0+255),f,b
  6445                           
  6446                           ; BSR set to: 1
  6447                           ;doprnt.c: 1124: }
  6448                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6449                           
  6450                           ; BSR set to: 1
  6451  0005D2  0101               	movlb	1	; () banked
  6452  0005D4  516A               	movf	printf@exp& (0+255),w,b
  6453  0005D6  EC7A  F006         	call	_scale
  6454  0005DA  C123  F162         	movff	?_scale,printf@tmpval
  6455  0005DE  C124  F163         	movff	?_scale+1,printf@tmpval+1
  6456  0005E2  C125  F164         	movff	?_scale+2,printf@tmpval+2
  6457                           
  6458                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6459  0005E6  C16E  F100         	movff	printf@fval,__tdiv_to_l_@f1
  6460  0005EA  C16F  F101         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  6461  0005EE  C170  F102         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  6462  0005F2  C162  F103         	movff	printf@tmpval,__tdiv_to_l_@f2
  6463  0005F6  C163  F104         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  6464  0005FA  C164  F105         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  6465  0005FE  EC96  F017         	call	__tdiv_to_l_	;wreg free
  6466  000602  C100  F166         	movff	?__tdiv_to_l_,printf@val
  6467  000606  C101  F167         	movff	?__tdiv_to_l_+1,printf@val+1
  6468  00060A  C102  F168         	movff	?__tdiv_to_l_+2,printf@val+2
  6469  00060E  C103  F169         	movff	?__tdiv_to_l_+3,printf@val+3
  6470                           
  6471                           ;doprnt.c: 1129: fval = 0.0;
  6472  000612  0E00               	movlw	0
  6473  000614  0101               	movlb	1	; () banked
  6474  000616  6F6E               	movwf	printf@fval& (0+255),b
  6475  000618  0E00               	movlw	0
  6476  00061A  0101               	movlb	1	; () banked
  6477  00061C  6F6F               	movwf	(printf@fval+1)& (0+255),b
  6478  00061E  0E00               	movlw	0
  6479  000620  0101               	movlb	1	; () banked
  6480  000622  6F70               	movwf	(printf@fval+2)& (0+255),b
  6481                           
  6482                           ;doprnt.c: 1130: } else {
  6483  000624  D033               	goto	l10127
  6484  000626                     l10123:
  6485                           
  6486                           ; BSR set to: 1
  6487                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6488  000626  C16E  F12A         	movff	printf@fval,___fttol@f1
  6489  00062A  C16F  F12B         	movff	printf@fval+1,___fttol@f1+1
  6490  00062E  C170  F12C         	movff	printf@fval+2,___fttol@f1+2
  6491  000632  EC9E  F01C         	call	___fttol	;wreg free
  6492  000636  C12A  F166         	movff	?___fttol,printf@val
  6493  00063A  C12B  F167         	movff	?___fttol+1,printf@val+1
  6494  00063E  C12C  F168         	movff	?___fttol+2,printf@val+2
  6495  000642  C12D  F169         	movff	?___fttol+3,printf@val+3
  6496                           
  6497                           ;doprnt.c: 1132: fval -= (double)val;
  6498  000646  C16E  F139         	movff	printf@fval,___ftsub@f1
  6499  00064A  C16F  F13A         	movff	printf@fval+1,___ftsub@f1+1
  6500  00064E  C170  F13B         	movff	printf@fval+2,___ftsub@f1+2
  6501  000652  C166  F108         	movff	printf@val,___lltoft@c
  6502  000656  C167  F109         	movff	printf@val+1,___lltoft@c+1
  6503  00065A  C168  F10A         	movff	printf@val+2,___lltoft@c+2
  6504  00065E  C169  F10B         	movff	printf@val+3,___lltoft@c+3
  6505  000662  ECBD  F02F         	call	___lltoft	;wreg free
  6506  000666  C108  F13C         	movff	?___lltoft,___ftsub@f2
  6507  00066A  C109  F13D         	movff	?___lltoft+1,___ftsub@f2+1
  6508  00066E  C10A  F13E         	movff	?___lltoft+2,___ftsub@f2+2
  6509  000672  ECAE  F033         	call	___ftsub	;wreg free
  6510  000676  C139  F16E         	movff	?___ftsub,printf@fval
  6511  00067A  C13A  F16F         	movff	?___ftsub+1,printf@fval+1
  6512  00067E  C13B  F170         	movff	?___ftsub+2,printf@fval+2
  6513                           
  6514                           ;doprnt.c: 1133: exp = 0;
  6515  000682  0E00               	movlw	0
  6516  000684  0101               	movlb	1	; () banked
  6517  000686  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6518  000688  0E00               	movlw	0
  6519  00068A  6F6A               	movwf	printf@exp& (0+255),b
  6520  00068C                     l10127:
  6521                           
  6522                           ; BSR set to: 1
  6523                           ;doprnt.c: 1134: }
  6524                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6525  00068C  0E01               	movlw	1
  6526  00068E  0101               	movlb	1	; () banked
  6527  000690  6F73               	movwf	printf@c& (0+255),b
  6528  000692                     l10129:
  6529                           
  6530                           ; BSR set to: 1
  6531  000692  0E0A               	movlw	10
  6532  000694  0101               	movlb	1	; () banked
  6533  000696  1973               	xorwf	printf@c& (0+255),w,b
  6534  000698  B4D8               	btfsc	status,2,c
  6535  00069A  D01E               	goto	l10141
  6536                           
  6537                           ; BSR set to: 1
  6538                           ;doprnt.c: 1137: if(val < dpowers[c])
  6539                           
  6540                           ; BSR set to: 1
  6541                           
  6542                           ; BSR set to: 1
  6543  00069C  0101               	movlb	1	; () banked
  6544  00069E  5173               	movf	printf@c& (0+255),w,b
  6545  0006A0  0D04               	mullw	4
  6546  0006A2  0E35               	movlw	low _dpowers
  6547  0006A4  24F3               	addwf	prodl,w,c
  6548  0006A6  6EF6               	movwf	tblptrl,c
  6549  0006A8  0E7D               	movlw	high _dpowers
  6550  0006AA  20F4               	addwfc	prodh,w,c
  6551  0006AC  6EF7               	movwf	tblptrh,c
  6552  0006AE                     	if	0	;There are less than 3 active tblptr bytes
  6553  0006AE                     	endif
  6554  0006AE  0009               	tblrd		*+
  6555  0006B0  50F5               	movf	tablat,w,c
  6556  0006B2  0101               	movlb	1	; () banked
  6557  0006B4  5D66               	subwf	printf@val& (0+255),w,b
  6558  0006B6  0009               	tblrd		*+
  6559  0006B8  50F5               	movf	tablat,w,c
  6560  0006BA  0101               	movlb	1	; () banked
  6561  0006BC  5967               	subwfb	(printf@val+1)& (0+255),w,b
  6562  0006BE  0009               	tblrd		*+
  6563  0006C0  50F5               	movf	tablat,w,c
  6564  0006C2  0101               	movlb	1	; () banked
  6565  0006C4  5968               	subwfb	(printf@val+2)& (0+255),w,b
  6566  0006C6  0009               	tblrd		*+
  6567  0006C8  50F5               	movf	tablat,w,c
  6568  0006CA  0101               	movlb	1	; () banked
  6569  0006CC  5969               	subwfb	(printf@val+3)& (0+255),w,b
  6570  0006CE  A0D8               	btfss	status,0,c
  6571  0006D0  D003               	goto	l10141
  6572                           
  6573                           ; BSR set to: 1
  6574                           
  6575                           ; BSR set to: 1
  6576                           
  6577                           ; BSR set to: 1
  6578                           ;doprnt.c: 1138: break;
  6579  0006D2  0101               	movlb	1	; () banked
  6580  0006D4  2B73               	incf	printf@c& (0+255),f,b
  6581  0006D6  D7DD               	goto	l10129
  6582  0006D8                     l10141:
  6583                           
  6584                           ; BSR set to: 1
  6585                           ;doprnt.c: 1142: width -= prec + c + exp;
  6586  0006D8  C173  F151         	movff	printf@c,??_printf
  6587  0006DC  0101               	movlb	1	; () banked
  6588  0006DE  6B52               	clrf	(??_printf+1)& (0+255),b
  6589  0006E0  BF51               	btfsc	??_printf& (0+255),7,b
  6590  0006E2  0752               	decf	(??_printf+1)& (0+255),f,b
  6591  0006E4  0101               	movlb	1	; () banked
  6592  0006E6  5171               	movf	printf@prec& (0+255),w,b
  6593  0006E8  0101               	movlb	1	; () banked
  6594  0006EA  2751               	addwf	??_printf& (0+255),f,b
  6595  0006EC  0101               	movlb	1	; () banked
  6596  0006EE  5172               	movf	(printf@prec+1)& (0+255),w,b
  6597  0006F0  0101               	movlb	1	; () banked
  6598  0006F2  2352               	addwfc	(??_printf+1)& (0+255),f,b
  6599  0006F4  0101               	movlb	1	; () banked
  6600  0006F6  516A               	movf	printf@exp& (0+255),w,b
  6601  0006F8  0101               	movlb	1	; () banked
  6602  0006FA  2751               	addwf	??_printf& (0+255),f,b
  6603  0006FC  0101               	movlb	1	; () banked
  6604  0006FE  516B               	movf	(printf@exp+1)& (0+255),w,b
  6605  000700  0101               	movlb	1	; () banked
  6606  000702  2352               	addwfc	(??_printf+1)& (0+255),f,b
  6607  000704  0101               	movlb	1	; () banked
  6608  000706  5151               	movf	??_printf& (0+255),w,b
  6609  000708  0101               	movlb	1	; () banked
  6610  00070A  5F6C               	subwf	printf@width& (0+255),f,b
  6611  00070C  0101               	movlb	1	; () banked
  6612  00070E  5152               	movf	(??_printf+1)& (0+255),w,b
  6613  000710  0101               	movlb	1	; () banked
  6614  000712  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  6615                           
  6616                           ;doprnt.c: 1143: if(
  6617                           ;doprnt.c: 1147: prec)
  6618  000714  0101               	movlb	1	; () banked
  6619  000716  5171               	movf	printf@prec& (0+255),w,b
  6620  000718  0101               	movlb	1	; () banked
  6621  00071A  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  6622  00071C  B4D8               	btfsc	status,2,c
  6623  00071E  D004               	goto	l10145
  6624                           
  6625                           ; BSR set to: 1
  6626                           ;doprnt.c: 1148: width--;
  6627  000720  0101               	movlb	1	; () banked
  6628  000722  076C               	decf	printf@width& (0+255),f,b
  6629  000724  A0D8               	btfss	status,0,c
  6630  000726  076D               	decf	(printf@width+1)& (0+255),f,b
  6631  000728                     l10145:
  6632                           
  6633                           ; BSR set to: 1
  6634                           ;doprnt.c: 1149: if(flag & 0x03)
  6635  000728  0E03               	movlw	3
  6636  00072A  0101               	movlb	1	; () banked
  6637  00072C  1560               	andwf	printf@flag& (0+255),w,b
  6638  00072E  0101               	movlb	1	; () banked
  6639  000730  6F51               	movwf	??_printf& (0+255),b
  6640  000732  0E00               	movlw	0
  6641  000734  0101               	movlb	1	; () banked
  6642  000736  1561               	andwf	(printf@flag+1)& (0+255),w,b
  6643  000738  0101               	movlb	1	; () banked
  6644  00073A  6F52               	movwf	(??_printf+1)& (0+255),b
  6645  00073C  0101               	movlb	1	; () banked
  6646  00073E  5151               	movf	??_printf& (0+255),w,b
  6647  000740  0101               	movlb	1	; () banked
  6648  000742  1152               	iorwf	(??_printf+1)& (0+255),w,b
  6649  000744  B4D8               	btfsc	status,2,c
  6650  000746  D008               	goto	l10153
  6651  000748  D003               	goto	l10151
  6652  00074A                     l10149:
  6653                           
  6654                           ; BSR set to: 1
  6655                           ;doprnt.c: 1181: (putch(' ') );
  6656  00074A  0E20               	movlw	32
  6657  00074C  EC31  F036         	call	_putch
  6658  000750                     l10151:
  6659                           
  6660                           ;doprnt.c: 1182: width--;
  6661  000750  0101               	movlb	1	; () banked
  6662  000752  076C               	decf	printf@width& (0+255),f,b
  6663  000754  A0D8               	btfss	status,0,c
  6664  000756  076D               	decf	(printf@width+1)& (0+255),f,b
  6665  000758                     l10153:
  6666                           
  6667                           ; BSR set to: 1
  6668  000758  0101               	movlb	1	; () banked
  6669  00075A  BF6D               	btfsc	(printf@width+1)& (0+255),7,b
  6670  00075C  D007               	goto	l10155
  6671  00075E  0101               	movlb	1	; () banked
  6672  000760  516D               	movf	(printf@width+1)& (0+255),w,b
  6673  000762  E1F3               	bnz	l10149
  6674  000764  0101               	movlb	1	; () banked
  6675  000766  056C               	decf	printf@width& (0+255),w,b
  6676  000768  B0D8               	btfsc	status,0,c
  6677  00076A  D7EF               	goto	l10149
  6678  00076C                     l10155:
  6679                           
  6680                           ; BSR set to: 1
  6681                           ;doprnt.c: 1183: }
  6682                           ;doprnt.c: 1188: if(flag & 0x03)
  6683  00076C  0E03               	movlw	3
  6684  00076E  0101               	movlb	1	; () banked
  6685  000770  1560               	andwf	printf@flag& (0+255),w,b
  6686  000772  0101               	movlb	1	; () banked
  6687  000774  6F51               	movwf	??_printf& (0+255),b
  6688  000776  0E00               	movlw	0
  6689  000778  0101               	movlb	1	; () banked
  6690  00077A  1561               	andwf	(printf@flag+1)& (0+255),w,b
  6691  00077C  0101               	movlb	1	; () banked
  6692  00077E  6F52               	movwf	(??_printf+1)& (0+255),b
  6693  000780  0101               	movlb	1	; () banked
  6694  000782  5151               	movf	??_printf& (0+255),w,b
  6695  000784  0101               	movlb	1	; () banked
  6696  000786  1152               	iorwf	(??_printf+1)& (0+255),w,b
  6697  000788  B4D8               	btfsc	status,2,c
  6698  00078A  D04B               	goto	l10165
  6699                           
  6700                           ; BSR set to: 1
  6701                           ;doprnt.c: 1190: (putch('-') );
  6702  00078C  0E2D               	movlw	45
  6703  00078E  EC31  F036         	call	_putch
  6704                           
  6705                           ;doprnt.c: 1195: }
  6706                           ;doprnt.c: 1196: while(c--) {
  6707  000792  D047               	goto	l10165
  6708  000794                     l10159:
  6709                           
  6710                           ;doprnt.c: 1200: {
  6711                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6712  000794  C166  F100         	movff	printf@val,___lldiv@dividend
  6713  000798  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  6714  00079C  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  6715  0007A0  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  6716  0007A4  0101               	movlb	1	; () banked
  6717  0007A6  5173               	movf	printf@c& (0+255),w,b
  6718  0007A8  0D04               	mullw	4
  6719  0007AA  0E35               	movlw	low _dpowers
  6720  0007AC  24F3               	addwf	prodl,w,c
  6721  0007AE  6EF6               	movwf	tblptrl,c
  6722  0007B0  0E7D               	movlw	high _dpowers
  6723  0007B2  20F4               	addwfc	prodh,w,c
  6724  0007B4  6EF7               	movwf	tblptrh,c
  6725  0007B6                     	if	0	;There are less than 3 active tblptr bytes
  6726  0007B6                     	endif
  6727  0007B6  0009               	tblrd		*+
  6728  0007B8  CFF5 F104          	movff	tablat,___lldiv@divisor
  6729  0007BC  0009               	tblrd		*+
  6730  0007BE  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  6731  0007C2  0009               	tblrd		*+
  6732  0007C4  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  6733  0007C8  000A               	tblrd		*-
  6734  0007CA  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  6735  0007CE  EC33  F029         	call	___lldiv	;wreg free
  6736  0007D2  C100  F162         	movff	?___lldiv,printf@tmpval
  6737  0007D6  C101  F163         	movff	?___lldiv+1,printf@tmpval+1
  6738  0007DA  C102  F164         	movff	?___lldiv+2,printf@tmpval+2
  6739  0007DE  C103  F165         	movff	?___lldiv+3,printf@tmpval+3
  6740                           
  6741                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6742  0007E2  C162  F10D         	movff	printf@tmpval,___llmod@dividend
  6743  0007E6  C163  F10E         	movff	printf@tmpval+1,___llmod@dividend+1
  6744  0007EA  C164  F10F         	movff	printf@tmpval+2,___llmod@dividend+2
  6745  0007EE  C165  F110         	movff	printf@tmpval+3,___llmod@dividend+3
  6746  0007F2  0E0A               	movlw	10
  6747  0007F4  0101               	movlb	1	; () banked
  6748  0007F6  6F11               	movwf	___llmod@divisor& (0+255),b
  6749  0007F8  0E00               	movlw	0
  6750  0007FA  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  6751  0007FC  0E00               	movlw	0
  6752  0007FE  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  6753  000800  0E00               	movlw	0
  6754  000802  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  6755  000804  EC30  F02D         	call	___llmod	;wreg free
  6756  000808  C10D  F162         	movff	?___llmod,printf@tmpval
  6757  00080C  C10E  F163         	movff	?___llmod+1,printf@tmpval+1
  6758  000810  C10F  F164         	movff	?___llmod+2,printf@tmpval+2
  6759  000814  C110  F165         	movff	?___llmod+3,printf@tmpval+3
  6760                           
  6761                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  6762  000818  0101               	movlb	1	; () banked
  6763  00081A  5162               	movf	printf@tmpval& (0+255),w,b
  6764  00081C  0F30               	addlw	48
  6765  00081E  EC31  F036         	call	_putch
  6766  000822                     l10165:
  6767  000822  0101               	movlb	1	; () banked
  6768  000824  0773               	decf	printf@c& (0+255),f,b
  6769  000826  0101               	movlb	1	; () banked
  6770  000828  2973               	incf	printf@c& (0+255),w,b
  6771  00082A  B4D8               	btfsc	status,2,c
  6772  00082C  D008               	goto	l10171
  6773  00082E  D7B2               	goto	l10159
  6774  000830                     l10167:
  6775                           
  6776                           ; BSR set to: 1
  6777                           ;doprnt.c: 1208: (putch('0') );
  6778  000830  0E30               	movlw	48
  6779  000832  EC31  F036         	call	_putch
  6780                           
  6781                           ;doprnt.c: 1209: exp--;
  6782  000836  0101               	movlb	1	; () banked
  6783  000838  076A               	decf	printf@exp& (0+255),f,b
  6784  00083A  A0D8               	btfss	status,0,c
  6785  00083C  076B               	decf	(printf@exp+1)& (0+255),f,b
  6786  00083E                     l10171:
  6787                           
  6788                           ; BSR set to: 1
  6789  00083E  0101               	movlb	1	; () banked
  6790  000840  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  6791  000842  D007               	goto	l10173
  6792  000844  0101               	movlb	1	; () banked
  6793  000846  516B               	movf	(printf@exp+1)& (0+255),w,b
  6794  000848  E1F3               	bnz	l10167
  6795  00084A  0101               	movlb	1	; () banked
  6796  00084C  056A               	decf	printf@exp& (0+255),w,b
  6797  00084E  B0D8               	btfsc	status,0,c
  6798  000850  D7EF               	goto	l10167
  6799  000852                     l10173:
  6800                           
  6801                           ; BSR set to: 1
  6802                           ;doprnt.c: 1210: }
  6803                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6804  000852  0101               	movlb	1	; () banked
  6805  000854  BF72               	btfsc	(printf@prec+1)& (0+255),7,b
  6806  000856  D00C               	goto	l989
  6807  000858  0101               	movlb	1	; () banked
  6808  00085A  5172               	movf	(printf@prec+1)& (0+255),w,b
  6809  00085C  E105               	bnz	u14420
  6810  00085E  0E09               	movlw	9
  6811  000860  0101               	movlb	1	; () banked
  6812  000862  5D71               	subwf	printf@prec& (0+255),w,b
  6813  000864  A0D8               	btfss	status,0,c
  6814  000866  D004               	goto	l989
  6815  000868                     u14420:
  6816                           
  6817                           ; BSR set to: 1
  6818                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6819  000868  0E08               	movlw	8
  6820  00086A  0101               	movlb	1	; () banked
  6821  00086C  6F73               	movwf	printf@c& (0+255),b
  6822  00086E  D002               	goto	l10177
  6823  000870                     l989:
  6824                           
  6825                           ; BSR set to: 1
  6826                           ;doprnt.c: 1213: else
  6827                           ;doprnt.c: 1214: c = prec;
  6828  000870  C171  F173         	movff	printf@prec,printf@c
  6829  000874                     l10177:
  6830                           
  6831                           ; BSR set to: 1
  6832                           ;doprnt.c: 1215: prec -= c;
  6833  000874  0101               	movlb	1	; () banked
  6834  000876  5173               	movf	printf@c& (0+255),w,b
  6835  000878  0101               	movlb	1	; () banked
  6836  00087A  5F71               	subwf	printf@prec& (0+255),f,b
  6837  00087C  0E00               	movlw	0
  6838  00087E  0101               	movlb	1	; () banked
  6839  000880  BF73               	btfsc	printf@c& (0+255),7,b
  6840  000882  0EFF               	movlw	255
  6841  000884  0101               	movlb	1	; () banked
  6842  000886  5B72               	subwfb	(printf@prec+1)& (0+255),f,b
  6843                           
  6844                           ; BSR set to: 1
  6845                           ;doprnt.c: 1219: if(c)
  6846  000888  0101               	movlb	1	; () banked
  6847  00088A  5173               	movf	printf@c& (0+255),w,b
  6848  00088C  0101               	movlb	1	; () banked
  6849  00088E  B4D8               	btfsc	status,2,c
  6850  000890  D003               	goto	l10183
  6851                           
  6852                           ; BSR set to: 1
  6853                           ;doprnt.c: 1221: (putch('.') );
  6854  000892  0E2E               	movlw	46
  6855  000894  EC31  F036         	call	_putch
  6856  000898                     l10183:
  6857                           
  6858                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6859  000898  0101               	movlb	1	; () banked
  6860  00089A  5173               	movf	printf@c& (0+255),w,b
  6861  00089C  EC7A  F006         	call	_scale
  6862  0008A0  C123  F157         	movff	?_scale,_printf$2995
  6863  0008A4  C124  F158         	movff	?_scale+1,_printf$2995+1
  6864  0008A8  C125  F159         	movff	?_scale+2,_printf$2995+2
  6865                           
  6866                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6867  0008AC  C16E  F117         	movff	printf@fval,___ftmul@f2
  6868  0008B0  C16F  F118         	movff	printf@fval+1,___ftmul@f2+1
  6869  0008B4  C170  F119         	movff	printf@fval+2,___ftmul@f2+2
  6870  0008B8  C157  F114         	movff	_printf$2995,___ftmul@f1
  6871  0008BC  C158  F115         	movff	_printf$2995+1,___ftmul@f1+1
  6872  0008C0  C159  F116         	movff	_printf$2995+2,___ftmul@f1+2
  6873  0008C4  ECF4  F019         	call	___ftmul	;wreg free
  6874  0008C8  C114  F12A         	movff	?___ftmul,___fttol@f1
  6875  0008CC  C115  F12B         	movff	?___ftmul+1,___fttol@f1+1
  6876  0008D0  C116  F12C         	movff	?___ftmul+2,___fttol@f1+2
  6877  0008D4  EC9E  F01C         	call	___fttol	;wreg free
  6878  0008D8  C12A  F166         	movff	?___fttol,printf@val
  6879  0008DC  C12B  F167         	movff	?___fttol+1,printf@val+1
  6880  0008E0  C12C  F168         	movff	?___fttol+2,printf@val+2
  6881  0008E4  C12D  F169         	movff	?___fttol+3,printf@val+3
  6882                           
  6883                           ;doprnt.c: 1228: while(c--) {
  6884  0008E8  D06E               	goto	l10193
  6885  0008EA                     l10187:
  6886                           
  6887                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6888  0008EA  C166  F100         	movff	printf@val,___lldiv@dividend
  6889  0008EE  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  6890  0008F2  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  6891  0008F6  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  6892  0008FA  0101               	movlb	1	; () banked
  6893  0008FC  5173               	movf	printf@c& (0+255),w,b
  6894  0008FE  0D04               	mullw	4
  6895  000900  0E35               	movlw	low _dpowers
  6896  000902  24F3               	addwf	prodl,w,c
  6897  000904  6EF6               	movwf	tblptrl,c
  6898  000906  0E7D               	movlw	high _dpowers
  6899  000908  20F4               	addwfc	prodh,w,c
  6900  00090A  6EF7               	movwf	tblptrh,c
  6901  00090C                     	if	0	;There are less than 3 active tblptr bytes
  6902  00090C                     	endif
  6903  00090C  0009               	tblrd		*+
  6904  00090E  CFF5 F104          	movff	tablat,___lldiv@divisor
  6905  000912  0009               	tblrd		*+
  6906  000914  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  6907  000918  0009               	tblrd		*+
  6908  00091A  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  6909  00091E  000A               	tblrd		*-
  6910  000920  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  6911  000924  EC33  F029         	call	___lldiv	;wreg free
  6912  000928  C100  F162         	movff	?___lldiv,printf@tmpval
  6913  00092C  C101  F163         	movff	?___lldiv+1,printf@tmpval+1
  6914  000930  C102  F164         	movff	?___lldiv+2,printf@tmpval+2
  6915  000934  C103  F165         	movff	?___lldiv+3,printf@tmpval+3
  6916                           
  6917                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6918  000938  C162  F10D         	movff	printf@tmpval,___llmod@dividend
  6919  00093C  C163  F10E         	movff	printf@tmpval+1,___llmod@dividend+1
  6920  000940  C164  F10F         	movff	printf@tmpval+2,___llmod@dividend+2
  6921  000944  C165  F110         	movff	printf@tmpval+3,___llmod@dividend+3
  6922  000948  0E0A               	movlw	10
  6923  00094A  0101               	movlb	1	; () banked
  6924  00094C  6F11               	movwf	___llmod@divisor& (0+255),b
  6925  00094E  0E00               	movlw	0
  6926  000950  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  6927  000952  0E00               	movlw	0
  6928  000954  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  6929  000956  0E00               	movlw	0
  6930  000958  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  6931  00095A  EC30  F02D         	call	___llmod	;wreg free
  6932  00095E  C10D  F162         	movff	?___llmod,printf@tmpval
  6933  000962  C10E  F163         	movff	?___llmod+1,printf@tmpval+1
  6934  000966  C10F  F164         	movff	?___llmod+2,printf@tmpval+2
  6935  00096A  C110  F165         	movff	?___llmod+3,printf@tmpval+3
  6936                           
  6937                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  6938  00096E  0101               	movlb	1	; () banked
  6939  000970  5162               	movf	printf@tmpval& (0+255),w,b
  6940  000972  0F30               	addlw	48
  6941  000974  EC31  F036         	call	_putch
  6942                           
  6943                           ;doprnt.c: 1232: val %= dpowers[c];
  6944  000978  C166  F10D         	movff	printf@val,___llmod@dividend
  6945  00097C  C167  F10E         	movff	printf@val+1,___llmod@dividend+1
  6946  000980  C168  F10F         	movff	printf@val+2,___llmod@dividend+2
  6947  000984  C169  F110         	movff	printf@val+3,___llmod@dividend+3
  6948  000988  0101               	movlb	1	; () banked
  6949  00098A  5173               	movf	printf@c& (0+255),w,b
  6950  00098C  0D04               	mullw	4
  6951  00098E  0E35               	movlw	low _dpowers
  6952  000990  24F3               	addwf	prodl,w,c
  6953  000992  6EF6               	movwf	tblptrl,c
  6954  000994  0E7D               	movlw	high _dpowers
  6955  000996  20F4               	addwfc	prodh,w,c
  6956  000998  6EF7               	movwf	tblptrh,c
  6957  00099A                     	if	0	;There are less than 3 active tblptr bytes
  6958  00099A                     	endif
  6959  00099A  0009               	tblrd		*+
  6960  00099C  CFF5 F111          	movff	tablat,___llmod@divisor
  6961  0009A0  0009               	tblrd		*+
  6962  0009A2  CFF5 F112          	movff	tablat,___llmod@divisor+1
  6963  0009A6  0009               	tblrd		*+
  6964  0009A8  CFF5 F113          	movff	tablat,___llmod@divisor+2
  6965  0009AC  000A               	tblrd		*-
  6966  0009AE  CFF5 F114          	movff	tablat,___llmod@divisor+3
  6967  0009B2  EC30  F02D         	call	___llmod	;wreg free
  6968  0009B6  C10D  F166         	movff	?___llmod,printf@val
  6969  0009BA  C10E  F167         	movff	?___llmod+1,printf@val+1
  6970  0009BE  C10F  F168         	movff	?___llmod+2,printf@val+2
  6971  0009C2  C110  F169         	movff	?___llmod+3,printf@val+3
  6972  0009C6                     l10193:
  6973  0009C6  0101               	movlb	1	; () banked
  6974  0009C8  0773               	decf	printf@c& (0+255),f,b
  6975  0009CA  0101               	movlb	1	; () banked
  6976  0009CC  2973               	incf	printf@c& (0+255),w,b
  6977  0009CE  B4D8               	btfsc	status,2,c
  6978  0009D0  D008               	goto	l10199
  6979  0009D2  D78B               	goto	l10187
  6980  0009D4                     l10195:
  6981                           
  6982                           ; BSR set to: 1
  6983                           ;doprnt.c: 1236: (putch('0') );
  6984  0009D4  0E30               	movlw	48
  6985  0009D6  EC31  F036         	call	_putch
  6986                           
  6987                           ;doprnt.c: 1237: prec--;
  6988  0009DA  0101               	movlb	1	; () banked
  6989  0009DC  0771               	decf	printf@prec& (0+255),f,b
  6990  0009DE  A0D8               	btfss	status,0,c
  6991  0009E0  0772               	decf	(printf@prec+1)& (0+255),f,b
  6992  0009E2                     l10199:
  6993                           
  6994                           ; BSR set to: 1
  6995  0009E2  0101               	movlb	1	; () banked
  6996  0009E4  5171               	movf	printf@prec& (0+255),w,b
  6997  0009E6  0101               	movlb	1	; () banked
  6998  0009E8  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  6999  0009EA  B4D8               	btfsc	status,2,c
  7000  0009EC  D173               	goto	l10279
  7001  0009EE  D7F2               	goto	l10195
  7002  0009F0                     l955:
  7003                           
  7004                           ; BSR set to: 1
  7005                           ;doprnt.c: 1246: }
  7006                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  7007  0009F0  0101               	movlb	1	; () banked
  7008  0009F2  BD60               	btfsc	printf@flag& (0+255),6,b
  7009  0009F4  D023               	goto	l10211
  7010                           
  7011                           ; BSR set to: 1
  7012                           ;doprnt.c: 1253: {
  7013                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7014  0009F6  C15E  FFD9         	movff	printf@ap,fsr2l
  7015  0009FA  C15F  FFDA         	movff	printf@ap+1,fsr2h
  7016  0009FE  CFDE F166          	movff	postinc2,printf@val
  7017  000A02  CFDD F167          	movff	postdec2,printf@val+1
  7018  000A06  0101               	movlb	1	; () banked
  7019  000A08  0E00               	movlw	0
  7020  000A0A  BF67               	btfsc	(printf@val+1)& (0+255),7,b
  7021  000A0C  0EFF               	movlw	-1
  7022  000A0E  6F68               	movwf	(printf@val+2)& (0+255),b
  7023  000A10  6F69               	movwf	(printf@val+3)& (0+255),b
  7024                           
  7025                           ; BSR set to: 1
  7026  000A12  0E02               	movlw	2
  7027  000A14  0101               	movlb	1	; () banked
  7028  000A16  275E               	addwf	printf@ap& (0+255),f,b
  7029  000A18  0E00               	movlw	0
  7030  000A1A  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  7031                           
  7032                           ; BSR set to: 1
  7033                           ;doprnt.c: 1261: if((long)val < 0) {
  7034  000A1C  0101               	movlb	1	; () banked
  7035  000A1E  AF69               	btfss	(printf@val+3)& (0+255),7,b
  7036  000A20  D021               	goto	l10215
  7037                           
  7038                           ; BSR set to: 1
  7039                           ;doprnt.c: 1262: flag |= 0x03;
  7040  000A22  0E03               	movlw	3
  7041  000A24  0101               	movlb	1	; () banked
  7042  000A26  1360               	iorwf	printf@flag& (0+255),f,b
  7043                           
  7044                           ; BSR set to: 1
  7045                           ;doprnt.c: 1263: val = -val;
  7046  000A28  0101               	movlb	1	; () banked
  7047  000A2A  1F69               	comf	(printf@val+3)& (0+255),f,b
  7048  000A2C  1F68               	comf	(printf@val+2)& (0+255),f,b
  7049  000A2E  1F67               	comf	(printf@val+1)& (0+255),f,b
  7050  000A30  6D66               	negf	printf@val& (0+255),b
  7051  000A32  0E00               	movlw	0
  7052  000A34  2367               	addwfc	(printf@val+1)& (0+255),f,b
  7053  000A36  2368               	addwfc	(printf@val+2)& (0+255),f,b
  7054  000A38  2369               	addwfc	(printf@val+3)& (0+255),f,b
  7055                           
  7056                           ; BSR set to: 1
  7057                           ;doprnt.c: 1264: }
  7058                           ;doprnt.c: 1266: }
  7059  000A3A  D014               	goto	l10215
  7060  000A3C                     l10211:
  7061                           
  7062                           ; BSR set to: 1
  7063                           ;doprnt.c: 1268: else
  7064                           ;doprnt.c: 1273: {
  7065                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7066  000A3C  C15E  FFD9         	movff	printf@ap,fsr2l
  7067  000A40  C15F  FFDA         	movff	printf@ap+1,fsr2h
  7068  000A44  CFDE F151          	movff	postinc2,??_printf
  7069  000A48  CFDD F152          	movff	postdec2,??_printf+1
  7070  000A4C  C151  F166         	movff	??_printf,printf@val
  7071  000A50  C152  F167         	movff	??_printf+1,printf@val+1
  7072  000A54  0101               	movlb	1	; () banked
  7073  000A56  6B68               	clrf	(printf@val+2)& (0+255),b
  7074  000A58  6B69               	clrf	(printf@val+3)& (0+255),b
  7075                           
  7076                           ; BSR set to: 1
  7077  000A5A  0E02               	movlw	2
  7078  000A5C  0101               	movlb	1	; () banked
  7079  000A5E  275E               	addwf	printf@ap& (0+255),f,b
  7080  000A60  0E00               	movlw	0
  7081  000A62  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  7082  000A64                     l10215:
  7083                           
  7084                           ; BSR set to: 1
  7085                           ;doprnt.c: 1287: }
  7086                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7087  000A64  0101               	movlb	1	; () banked
  7088  000A66  5171               	movf	printf@prec& (0+255),w,b
  7089  000A68  0101               	movlb	1	; () banked
  7090  000A6A  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  7091  000A6C  A4D8               	btfss	status,2,c
  7092  000A6E  D00D               	goto	l10221
  7093                           
  7094                           ; BSR set to: 1
  7095  000A70  0101               	movlb	1	; () banked
  7096  000A72  5166               	movf	printf@val& (0+255),w,b
  7097  000A74  0101               	movlb	1	; () banked
  7098  000A76  1167               	iorwf	(printf@val+1)& (0+255),w,b
  7099  000A78  0101               	movlb	1	; () banked
  7100  000A7A  1168               	iorwf	(printf@val+2)& (0+255),w,b
  7101  000A7C  0101               	movlb	1	; () banked
  7102  000A7E  1169               	iorwf	(printf@val+3)& (0+255),w,b
  7103  000A80  A4D8               	btfss	status,2,c
  7104  000A82  D003               	goto	l10221
  7105                           
  7106                           ; BSR set to: 1
  7107                           ;doprnt.c: 1291: prec++;
  7108  000A84  0101               	movlb	1	; () banked
  7109  000A86  4B71               	infsnz	printf@prec& (0+255),f,b
  7110  000A88  2B72               	incf	(printf@prec+1)& (0+255),f,b
  7111  000A8A                     l10221:
  7112                           
  7113                           ; BSR set to: 1
  7114                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7115  000A8A  0E01               	movlw	1
  7116  000A8C  0101               	movlb	1	; () banked
  7117  000A8E  6F73               	movwf	printf@c& (0+255),b
  7118  000A90                     l10223:
  7119                           
  7120                           ; BSR set to: 1
  7121  000A90  0E0A               	movlw	10
  7122  000A92  0101               	movlb	1	; () banked
  7123  000A94  1973               	xorwf	printf@c& (0+255),w,b
  7124  000A96  B4D8               	btfsc	status,2,c
  7125  000A98  D01E               	goto	l10235
  7126                           
  7127                           ; BSR set to: 1
  7128                           ;doprnt.c: 1306: if(val < dpowers[c])
  7129                           
  7130                           ; BSR set to: 1
  7131                           
  7132                           ; BSR set to: 1
  7133  000A9A  0101               	movlb	1	; () banked
  7134  000A9C  5173               	movf	printf@c& (0+255),w,b
  7135  000A9E  0D04               	mullw	4
  7136  000AA0  0E35               	movlw	low _dpowers
  7137  000AA2  24F3               	addwf	prodl,w,c
  7138  000AA4  6EF6               	movwf	tblptrl,c
  7139  000AA6  0E7D               	movlw	high _dpowers
  7140  000AA8  20F4               	addwfc	prodh,w,c
  7141  000AAA  6EF7               	movwf	tblptrh,c
  7142  000AAC                     	if	0	;There are less than 3 active tblptr bytes
  7143  000AAC                     	endif
  7144  000AAC  0009               	tblrd		*+
  7145  000AAE  50F5               	movf	tablat,w,c
  7146  000AB0  0101               	movlb	1	; () banked
  7147  000AB2  5D66               	subwf	printf@val& (0+255),w,b
  7148  000AB4  0009               	tblrd		*+
  7149  000AB6  50F5               	movf	tablat,w,c
  7150  000AB8  0101               	movlb	1	; () banked
  7151  000ABA  5967               	subwfb	(printf@val+1)& (0+255),w,b
  7152  000ABC  0009               	tblrd		*+
  7153  000ABE  50F5               	movf	tablat,w,c
  7154  000AC0  0101               	movlb	1	; () banked
  7155  000AC2  5968               	subwfb	(printf@val+2)& (0+255),w,b
  7156  000AC4  0009               	tblrd		*+
  7157  000AC6  50F5               	movf	tablat,w,c
  7158  000AC8  0101               	movlb	1	; () banked
  7159  000ACA  5969               	subwfb	(printf@val+3)& (0+255),w,b
  7160  000ACC  A0D8               	btfss	status,0,c
  7161  000ACE  D003               	goto	l10235
  7162                           
  7163                           ; BSR set to: 1
  7164                           
  7165                           ; BSR set to: 1
  7166                           
  7167                           ; BSR set to: 1
  7168                           ;doprnt.c: 1307: break;
  7169  000AD0  0101               	movlb	1	; () banked
  7170  000AD2  2B73               	incf	printf@c& (0+255),f,b
  7171  000AD4  D7DD               	goto	l10223
  7172  000AD6                     l10235:
  7173                           
  7174                           ; BSR set to: 1
  7175                           ;doprnt.c: 1339: if(c < prec)
  7176  000AD6  0E80               	movlw	128
  7177  000AD8  0101               	movlb	1	; () banked
  7178  000ADA  BF73               	btfsc	printf@c& (0+255),7,b
  7179  000ADC  0E7F               	movlw	127
  7180  000ADE  0101               	movlb	1	; () banked
  7181  000AE0  6F51               	movwf	??_printf& (0+255),b
  7182  000AE2  0101               	movlb	1	; () banked
  7183  000AE4  5171               	movf	printf@prec& (0+255),w,b
  7184  000AE6  0101               	movlb	1	; () banked
  7185  000AE8  5D73               	subwf	printf@c& (0+255),w,b
  7186  000AEA  0101               	movlb	1	; () banked
  7187  000AEC  5172               	movf	(printf@prec+1)& (0+255),w,b
  7188  000AEE  0A80               	xorlw	128
  7189  000AF0  0101               	movlb	1	; () banked
  7190  000AF2  5951               	subwfb	??_printf& (0+255),w,b
  7191  000AF4  B0D8               	btfsc	status,0,c
  7192  000AF6  D003               	goto	l10239
  7193                           
  7194                           ; BSR set to: 1
  7195                           ;doprnt.c: 1340: c = prec;
  7196  000AF8  C171  F173         	movff	printf@prec,printf@c
  7197  000AFC  D018               	goto	l10243
  7198  000AFE                     l10239:
  7199                           
  7200                           ; BSR set to: 1
  7201                           ;doprnt.c: 1341: else if(prec < c)
  7202  000AFE  0101               	movlb	1	; () banked
  7203  000B00  5172               	movf	(printf@prec+1)& (0+255),w,b
  7204  000B02  0A80               	xorlw	128
  7205  000B04  0101               	movlb	1	; () banked
  7206  000B06  6F51               	movwf	??_printf& (0+255),b
  7207  000B08  0101               	movlb	1	; () banked
  7208  000B0A  5173               	movf	printf@c& (0+255),w,b
  7209  000B0C  0101               	movlb	1	; () banked
  7210  000B0E  5D71               	subwf	printf@prec& (0+255),w,b
  7211  000B10  0E80               	movlw	128
  7212  000B12  0101               	movlb	1	; () banked
  7213  000B14  BF73               	btfsc	printf@c& (0+255),7,b
  7214  000B16  0E7F               	movlw	127
  7215  000B18  0101               	movlb	1	; () banked
  7216  000B1A  5951               	subwfb	??_printf& (0+255),w,b
  7217  000B1C  B0D8               	btfsc	status,0,c
  7218  000B1E  D007               	goto	l10243
  7219                           
  7220                           ; BSR set to: 1
  7221                           ;doprnt.c: 1342: prec = c;
  7222  000B20  0101               	movlb	1	; () banked
  7223  000B22  5173               	movf	printf@c& (0+255),w,b
  7224  000B24  0101               	movlb	1	; () banked
  7225  000B26  6F71               	movwf	printf@prec& (0+255),b
  7226  000B28  6B72               	clrf	(printf@prec+1)& (0+255),b
  7227  000B2A  BF71               	btfsc	printf@prec& (0+255),7,b
  7228  000B2C  0772               	decf	(printf@prec+1)& (0+255),f,b
  7229  000B2E                     l10243:
  7230                           
  7231                           ; BSR set to: 1
  7232                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7233  000B2E  0101               	movlb	1	; () banked
  7234  000B30  516C               	movf	printf@width& (0+255),w,b
  7235  000B32  0101               	movlb	1	; () banked
  7236  000B34  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7237  000B36  B4D8               	btfsc	status,2,c
  7238  000B38  D014               	goto	l10249
  7239                           
  7240                           ; BSR set to: 1
  7241  000B3A  0E03               	movlw	3
  7242  000B3C  0101               	movlb	1	; () banked
  7243  000B3E  1560               	andwf	printf@flag& (0+255),w,b
  7244  000B40  0101               	movlb	1	; () banked
  7245  000B42  6F51               	movwf	??_printf& (0+255),b
  7246  000B44  0E00               	movlw	0
  7247  000B46  0101               	movlb	1	; () banked
  7248  000B48  1561               	andwf	(printf@flag+1)& (0+255),w,b
  7249  000B4A  0101               	movlb	1	; () banked
  7250  000B4C  6F52               	movwf	(??_printf+1)& (0+255),b
  7251  000B4E  0101               	movlb	1	; () banked
  7252  000B50  5151               	movf	??_printf& (0+255),w,b
  7253  000B52  0101               	movlb	1	; () banked
  7254  000B54  1152               	iorwf	(??_printf+1)& (0+255),w,b
  7255  000B56  B4D8               	btfsc	status,2,c
  7256  000B58  D004               	goto	l10249
  7257                           
  7258                           ; BSR set to: 1
  7259                           ;doprnt.c: 1346: width--;
  7260  000B5A  0101               	movlb	1	; () banked
  7261  000B5C  076C               	decf	printf@width& (0+255),f,b
  7262  000B5E  A0D8               	btfss	status,0,c
  7263  000B60  076D               	decf	(printf@width+1)& (0+255),f,b
  7264  000B62                     l10249:
  7265                           
  7266                           ; BSR set to: 1
  7267                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7268  000B62  0101               	movlb	1	; () banked
  7269  000B64  AD61               	btfss	(printf@flag+1)& (0+255),6,b
  7270  000B66  D01E               	goto	l10257
  7271                           
  7272                           ; BSR set to: 1
  7273                           ;doprnt.c: 1349: if(width > prec)
  7274  000B68  0101               	movlb	1	; () banked
  7275  000B6A  516C               	movf	printf@width& (0+255),w,b
  7276  000B6C  0101               	movlb	1	; () banked
  7277  000B6E  5D71               	subwf	printf@prec& (0+255),w,b
  7278  000B70  0101               	movlb	1	; () banked
  7279  000B72  5172               	movf	(printf@prec+1)& (0+255),w,b
  7280  000B74  0A80               	xorlw	128
  7281  000B76  0101               	movlb	1	; () banked
  7282  000B78  6F51               	movwf	??_printf& (0+255),b
  7283  000B7A  0101               	movlb	1	; () banked
  7284  000B7C  516D               	movf	(printf@width+1)& (0+255),w,b
  7285  000B7E  0A80               	xorlw	128
  7286  000B80  0101               	movlb	1	; () banked
  7287  000B82  5951               	subwfb	??_printf& (0+255),w,b
  7288  000B84  B0D8               	btfsc	status,0,c
  7289  000B86  D009               	goto	l10255
  7290                           
  7291                           ; BSR set to: 1
  7292                           ;doprnt.c: 1350: width -= prec;
  7293  000B88  0101               	movlb	1	; () banked
  7294  000B8A  5171               	movf	printf@prec& (0+255),w,b
  7295  000B8C  0101               	movlb	1	; () banked
  7296  000B8E  5F6C               	subwf	printf@width& (0+255),f,b
  7297  000B90  0101               	movlb	1	; () banked
  7298  000B92  5172               	movf	(printf@prec+1)& (0+255),w,b
  7299  000B94  0101               	movlb	1	; () banked
  7300  000B96  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  7301  000B98  D005               	goto	l10257
  7302  000B9A                     l10255:
  7303                           
  7304                           ; BSR set to: 1
  7305                           ;doprnt.c: 1351: else
  7306                           ;doprnt.c: 1352: width = 0;
  7307  000B9A  0E00               	movlw	0
  7308  000B9C  0101               	movlb	1	; () banked
  7309  000B9E  6F6D               	movwf	(printf@width+1)& (0+255),b
  7310  000BA0  0E00               	movlw	0
  7311  000BA2  6F6C               	movwf	printf@width& (0+255),b
  7312  000BA4                     l10257:
  7313                           
  7314                           ; BSR set to: 1
  7315                           ;doprnt.c: 1353: }
  7316                           ;doprnt.c: 1381: if(width > c)
  7317  000BA4  0E80               	movlw	128
  7318  000BA6  0101               	movlb	1	; () banked
  7319  000BA8  BF73               	btfsc	printf@c& (0+255),7,b
  7320  000BAA  0E7F               	movlw	127
  7321  000BAC  0101               	movlb	1	; () banked
  7322  000BAE  6F51               	movwf	??_printf& (0+255),b
  7323  000BB0  0101               	movlb	1	; () banked
  7324  000BB2  516C               	movf	printf@width& (0+255),w,b
  7325  000BB4  0101               	movlb	1	; () banked
  7326  000BB6  5D73               	subwf	printf@c& (0+255),w,b
  7327  000BB8  0101               	movlb	1	; () banked
  7328  000BBA  516D               	movf	(printf@width+1)& (0+255),w,b
  7329  000BBC  0A80               	xorlw	128
  7330  000BBE  0101               	movlb	1	; () banked
  7331  000BC0  5951               	subwfb	??_printf& (0+255),w,b
  7332  000BC2  B0D8               	btfsc	status,0,c
  7333  000BC4  D00B               	goto	l10261
  7334                           
  7335                           ; BSR set to: 1
  7336                           ;doprnt.c: 1382: width -= c;
  7337  000BC6  0101               	movlb	1	; () banked
  7338  000BC8  5173               	movf	printf@c& (0+255),w,b
  7339  000BCA  0101               	movlb	1	; () banked
  7340  000BCC  5F6C               	subwf	printf@width& (0+255),f,b
  7341  000BCE  0E00               	movlw	0
  7342  000BD0  0101               	movlb	1	; () banked
  7343  000BD2  BF73               	btfsc	printf@c& (0+255),7,b
  7344  000BD4  0EFF               	movlw	255
  7345  000BD6  0101               	movlb	1	; () banked
  7346  000BD8  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  7347  000BDA  D005               	goto	l10263
  7348  000BDC                     l10261:
  7349                           
  7350                           ; BSR set to: 1
  7351                           ;doprnt.c: 1383: else
  7352                           ;doprnt.c: 1384: width = 0;
  7353  000BDC  0E00               	movlw	0
  7354  000BDE  0101               	movlb	1	; () banked
  7355  000BE0  6F6D               	movwf	(printf@width+1)& (0+255),b
  7356  000BE2  0E00               	movlw	0
  7357  000BE4  6F6C               	movwf	printf@width& (0+255),b
  7358  000BE6                     l10263:
  7359                           
  7360                           ; BSR set to: 1
  7361                           ;doprnt.c: 1422: {
  7362                           ;doprnt.c: 1424: if(width
  7363                           ;doprnt.c: 1428: )
  7364  000BE6  0101               	movlb	1	; () banked
  7365  000BE8  516C               	movf	printf@width& (0+255),w,b
  7366  000BEA  0101               	movlb	1	; () banked
  7367  000BEC  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7368  000BEE  B4D8               	btfsc	status,2,c
  7369  000BF0  D00D               	goto	l10269
  7370  000BF2                     l10265:
  7371                           
  7372                           ; BSR set to: 1
  7373                           ;doprnt.c: 1430: (putch(' ') );
  7374  000BF2  0E20               	movlw	32
  7375  000BF4  EC31  F036         	call	_putch
  7376                           
  7377                           ;doprnt.c: 1431: while(--width);
  7378  000BF8  0101               	movlb	1	; () banked
  7379  000BFA  076C               	decf	printf@width& (0+255),f,b
  7380  000BFC  A0D8               	btfss	status,0,c
  7381  000BFE  076D               	decf	(printf@width+1)& (0+255),f,b
  7382  000C00  0101               	movlb	1	; () banked
  7383  000C02  516C               	movf	printf@width& (0+255),w,b
  7384  000C04  0101               	movlb	1	; () banked
  7385  000C06  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7386  000C08  A4D8               	btfss	status,2,c
  7387  000C0A  D7F3               	goto	l10265
  7388  000C0C                     l10269:
  7389                           
  7390                           ; BSR set to: 1
  7391                           ;doprnt.c: 1438: if(flag & 0x03)
  7392  000C0C  0E03               	movlw	3
  7393  000C0E  0101               	movlb	1	; () banked
  7394  000C10  1560               	andwf	printf@flag& (0+255),w,b
  7395  000C12  0101               	movlb	1	; () banked
  7396  000C14  6F51               	movwf	??_printf& (0+255),b
  7397  000C16  0E00               	movlw	0
  7398  000C18  0101               	movlb	1	; () banked
  7399  000C1A  1561               	andwf	(printf@flag+1)& (0+255),w,b
  7400  000C1C  0101               	movlb	1	; () banked
  7401  000C1E  6F52               	movwf	(??_printf+1)& (0+255),b
  7402  000C20  0101               	movlb	1	; () banked
  7403  000C22  5151               	movf	??_printf& (0+255),w,b
  7404  000C24  0101               	movlb	1	; () banked
  7405  000C26  1152               	iorwf	(??_printf+1)& (0+255),w,b
  7406  000C28  B4D8               	btfsc	status,2,c
  7407  000C2A  D049               	goto	l10277
  7408                           
  7409                           ; BSR set to: 1
  7410                           ;doprnt.c: 1439: (putch('-') );
  7411  000C2C  0E2D               	movlw	45
  7412  000C2E  EC31  F036         	call	_putch
  7413                           
  7414                           ;doprnt.c: 1469: }
  7415                           ;doprnt.c: 1474: while(prec--) {
  7416  000C32  D045               	goto	l10277
  7417  000C34                     l10273:
  7418                           
  7419                           ;doprnt.c: 1478: {
  7420                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7421  000C34  C171  F151         	movff	printf@prec,??_printf
  7422  000C38  C172  F152         	movff	printf@prec+1,??_printf+1
  7423  000C3C  0101               	movlb	1	; () banked
  7424  000C3E  90D8               	bcf	status,0,c
  7425  000C40  3751               	rlcf	??_printf& (0+255),f,b
  7426  000C42  3752               	rlcf	(??_printf+1)& (0+255),f,b
  7427  000C44  0101               	movlb	1	; () banked
  7428  000C46  90D8               	bcf	status,0,c
  7429  000C48  3751               	rlcf	??_printf& (0+255),f,b
  7430  000C4A  3752               	rlcf	(??_printf+1)& (0+255),f,b
  7431  000C4C  0E35               	movlw	low _dpowers
  7432  000C4E  0101               	movlb	1	; () banked
  7433  000C50  2551               	addwf	??_printf& (0+255),w,b
  7434  000C52  6EF6               	movwf	tblptrl,c
  7435  000C54  0E7D               	movlw	high _dpowers
  7436  000C56  2152               	addwfc	(??_printf+1)& (0+255),w,b
  7437  000C58  6EF7               	movwf	tblptrh,c
  7438  000C5A                     	if	0	;There are less than 3 active tblptr bytes
  7439  000C5A                     	endif
  7440  000C5A  0009               	tblrd		*+
  7441  000C5C  CFF5 F104          	movff	tablat,___lldiv@divisor
  7442  000C60  0009               	tblrd		*+
  7443  000C62  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  7444  000C66  0009               	tblrd		*+
  7445  000C68  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  7446  000C6C  000A               	tblrd		*-
  7447  000C6E  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  7448  000C72  C166  F100         	movff	printf@val,___lldiv@dividend
  7449  000C76  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  7450  000C7A  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  7451  000C7E  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  7452  000C82  EC33  F029         	call	___lldiv	;wreg free
  7453  000C86  C100  F10D         	movff	?___lldiv,___llmod@dividend
  7454  000C8A  C101  F10E         	movff	?___lldiv+1,___llmod@dividend+1
  7455  000C8E  C102  F10F         	movff	?___lldiv+2,___llmod@dividend+2
  7456  000C92  C103  F110         	movff	?___lldiv+3,___llmod@dividend+3
  7457  000C96  0E0A               	movlw	10
  7458  000C98  0101               	movlb	1	; () banked
  7459  000C9A  6F11               	movwf	___llmod@divisor& (0+255),b
  7460  000C9C  0E00               	movlw	0
  7461  000C9E  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  7462  000CA0  0E00               	movlw	0
  7463  000CA2  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  7464  000CA4  0E00               	movlw	0
  7465  000CA6  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  7466  000CA8  EC30  F02D         	call	___llmod	;wreg free
  7467  000CAC  0101               	movlb	1	; () banked
  7468  000CAE  510D               	movf	?___llmod& (0+255),w,b
  7469  000CB0  0F30               	addlw	48
  7470  000CB2  0101               	movlb	1	; () banked
  7471  000CB4  6F73               	movwf	printf@c& (0+255),b
  7472                           
  7473                           ; BSR set to: 1
  7474                           ;doprnt.c: 1523: }
  7475                           ;doprnt.c: 1524: (putch(c) );
  7476  000CB6  0101               	movlb	1	; () banked
  7477  000CB8  5173               	movf	printf@c& (0+255),w,b
  7478  000CBA  EC31  F036         	call	_putch
  7479  000CBE                     l10277:
  7480  000CBE  0101               	movlb	1	; () banked
  7481  000CC0  0771               	decf	printf@prec& (0+255),f,b
  7482  000CC2  A0D8               	btfss	status,0,c
  7483  000CC4  0772               	decf	(printf@prec+1)& (0+255),f,b
  7484  000CC6  0101               	movlb	1	; () banked
  7485  000CC8  2971               	incf	printf@prec& (0+255),w,b
  7486  000CCA  E1B4               	bnz	l10273
  7487  000CCC  0101               	movlb	1	; () banked
  7488  000CCE  2972               	incf	(printf@prec+1)& (0+255),w,b
  7489  000CD0  A4D8               	btfss	status,2,c
  7490  000CD2  D7B0               	goto	l10273
  7491  000CD4                     l10279:
  7492  000CD4  C13F  FFF6         	movff	printf@f,tblptrl
  7493  000CD8  C140  FFF7         	movff	printf@f+1,tblptrh
  7494  000CDC  0101               	movlb	1	; () banked
  7495  000CDE  4B3F               	infsnz	printf@f& (0+255),f,b
  7496  000CE0  2B40               	incf	(printf@f+1)& (0+255),f,b
  7497  000CE2                     	if	0	;tblptru may be non-zero
  7498  000CE2                     	endif
  7499  000CE2                     	if	0	;tblptru may be non-zero
  7500  000CE2                     	endif
  7501  000CE2  0008               	tblrd		*
  7502  000CE4  CFF5 F173          	movff	tablat,printf@c
  7503  000CE8  0101               	movlb	1	; () banked
  7504  000CEA  5173               	movf	printf@c& (0+255),w,b
  7505  000CEC  B4D8               	btfsc	status,2,c
  7506  000CEE  0012               	return	
  7507  000CF0  EF69  F000         	goto	l9981
  7508  000CF4                     __end_of_printf:
  7509                           	opt stack 0
  7510                           tblptru	equ	0xFF8
  7511                           tblptrh	equ	0xFF7
  7512                           tblptrl	equ	0xFF6
  7513                           tablat	equ	0xFF5
  7514                           prodh	equ	0xFF4
  7515                           prodl	equ	0xFF3
  7516                           intcon	equ	0xFF2
  7517                           postinc0	equ	0xFEE
  7518                           wreg	equ	0xFE8
  7519                           postdec1	equ	0xFE5
  7520                           fsr1l	equ	0xFE1
  7521                           indf2	equ	0xFDF
  7522                           postinc2	equ	0xFDE
  7523                           postdec2	equ	0xFDD
  7524                           fsr2h	equ	0xFDA
  7525                           fsr2l	equ	0xFD9
  7526                           status	equ	0xFD8
  7527                           
  7528 ;; *************** function _scale *****************
  7529 ;; Defined at:
  7530 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  7531 ;; Parameters:    Size  Location     Type
  7532 ;;  scl             1    wreg     char 
  7533 ;; Auto vars:     Size  Location     Type
  7534 ;;  scl             1   41[BANK1 ] char 
  7535 ;; Return value:  Size  Location     Type
  7536 ;;                  3   35[BANK1 ] char 
  7537 ;; Registers used:
  7538 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7539 ;; Tracked objects:
  7540 ;;		On entry : 0/0
  7541 ;;		On exit  : 0/0
  7542 ;;		Unchanged: 0/0
  7543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7544 ;;      Params:         0       0       3       0       0       0       0
  7545 ;;      Locals:         0       0       4       0       0       0       0
  7546 ;;      Temps:          0       0       0       0       0       0       0
  7547 ;;      Totals:         0       0       7       0       0       0       0
  7548 ;;Total ram usage:        7 bytes
  7549 ;; Hardware stack levels used:    1
  7550 ;; Hardware stack levels required when called:   14
  7551 ;; This function calls:
  7552 ;;		___awdiv
  7553 ;;		___awmod
  7554 ;;		___ftmul
  7555 ;;		___wmul
  7556 ;; This function is called by:
  7557 ;;		_printf
  7558 ;; This function uses a non-reentrant model
  7559 ;;
  7560                           
  7561                           	psect	text22
  7562  000CF4                     __ptext22:
  7563                           	opt stack 0
  7564  000CF4                     _scale:
  7565                           	opt stack 13
  7566                           
  7567                           ; BSR set to: 1
  7568                           ;incstack = 0
  7569                           ;scale@scl stored from wreg
  7570  000CF4  0101               	movlb	1	; () banked
  7571  000CF6  6F29               	movwf	scale@scl& (0+255),b
  7572                           
  7573                           ;doprnt.c: 428: if(scl < 0) {
  7574  000CF8  0101               	movlb	1	; () banked
  7575  000CFA  AF29               	btfss	scale@scl& (0+255),7,b
  7576  000CFC  D12A               	goto	l9697
  7577                           
  7578                           ; BSR set to: 1
  7579                           ;doprnt.c: 429: scl = -scl;
  7580  000CFE  0101               	movlb	1	; () banked
  7581  000D00  6D29               	negf	scale@scl& (0+255),b
  7582                           
  7583                           ;doprnt.c: 430: if(scl>=110)
  7584  000D02  0101               	movlb	1	; () banked
  7585  000D04  5129               	movf	scale@scl& (0+255),w,b
  7586  000D06  0A80               	xorlw	128
  7587  000D08  0F12               	addlw	-238
  7588  000D0A  A0D8               	btfss	status,0,c
  7589  000D0C  D0AC               	goto	l9687
  7590                           
  7591                           ; BSR set to: 1
  7592                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7593  000D0E  0E00               	movlw	0
  7594  000D10  0101               	movlb	1	; () banked
  7595  000D12  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7596  000D14  0E03               	movlw	3
  7597  000D16  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7598  000D18  0E00               	movlw	0
  7599  000D1A  0101               	movlb	1	; () banked
  7600  000D1C  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7601  000D1E  0E0A               	movlw	10
  7602  000D20  6F08               	movwf	___awdiv@divisor& (0+255),b
  7603  000D22  0E00               	movlw	0
  7604  000D24  0101               	movlb	1	; () banked
  7605  000D26  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7606  000D28  0E64               	movlw	100
  7607  000D2A  6F02               	movwf	___awmod@divisor& (0+255),b
  7608  000D2C  0101               	movlb	1	; () banked
  7609  000D2E  5129               	movf	scale@scl& (0+255),w,b
  7610  000D30  0101               	movlb	1	; () banked
  7611  000D32  6F00               	movwf	___awmod@dividend& (0+255),b
  7612  000D34  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7613  000D36  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  7614  000D38  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  7615  000D3A  ECA5  F02B         	call	___awmod	;wreg free
  7616  000D3E  C100  F106         	movff	?___awmod,___awdiv@dividend
  7617  000D42  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  7618  000D46  EC76  F028         	call	___awdiv	;wreg free
  7619  000D4A  0E09               	movlw	9
  7620  000D4C  0101               	movlb	1	; () banked
  7621  000D4E  2506               	addwf	?___awdiv& (0+255),w,b
  7622  000D50  0101               	movlb	1	; () banked
  7623  000D52  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7624  000D54  0E00               	movlw	0
  7625  000D56  0101               	movlb	1	; () banked
  7626  000D58  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7627  000D5A  0101               	movlb	1	; () banked
  7628  000D5C  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7629  000D5E  ECBD  F034         	call	___wmul	;wreg free
  7630  000D62  0E5D               	movlw	low __npowers_
  7631  000D64  0101               	movlb	1	; () banked
  7632  000D66  250E               	addwf	?___wmul& (0+255),w,b
  7633  000D68  6EF6               	movwf	tblptrl,c
  7634  000D6A  0E7D               	movlw	high __npowers_
  7635  000D6C  0101               	movlb	1	; () banked
  7636  000D6E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7637  000D70  6EF7               	movwf	tblptrh,c
  7638  000D72                     	if	0	;There are less than 3 active tblptr bytes
  7639  000D72                     	endif
  7640  000D72  0009               	tblrd		*+
  7641  000D74  CFF5 F117          	movff	tablat,___ftmul@f2
  7642  000D78  0009               	tblrd		*+
  7643  000D7A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  7644  000D7E  000A               	tblrd		*-
  7645  000D80  CFF5 F119          	movff	tablat,___ftmul@f2+2
  7646  000D84  0E00               	movlw	0
  7647  000D86  0101               	movlb	1	; () banked
  7648  000D88  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7649  000D8A  0E64               	movlw	100
  7650  000D8C  6F08               	movwf	___awdiv@divisor& (0+255),b
  7651  000D8E  0101               	movlb	1	; () banked
  7652  000D90  5129               	movf	scale@scl& (0+255),w,b
  7653  000D92  0101               	movlb	1	; () banked
  7654  000D94  6F06               	movwf	___awdiv@dividend& (0+255),b
  7655  000D96  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  7656  000D98  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  7657  000D9A  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7658  000D9C  EC76  F028         	call	___awdiv	;wreg free
  7659  000DA0  0E12               	movlw	18
  7660  000DA2  0101               	movlb	1	; () banked
  7661  000DA4  2506               	addwf	?___awdiv& (0+255),w,b
  7662  000DA6  0101               	movlb	1	; () banked
  7663  000DA8  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7664  000DAA  0E00               	movlw	0
  7665  000DAC  0101               	movlb	1	; () banked
  7666  000DAE  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7667  000DB0  0101               	movlb	1	; () banked
  7668  000DB2  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7669  000DB4  0E00               	movlw	0
  7670  000DB6  0101               	movlb	1	; () banked
  7671  000DB8  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7672  000DBA  0E03               	movlw	3
  7673  000DBC  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7674  000DBE  ECBD  F034         	call	___wmul	;wreg free
  7675  000DC2  0E5D               	movlw	low __npowers_
  7676  000DC4  0101               	movlb	1	; () banked
  7677  000DC6  250E               	addwf	?___wmul& (0+255),w,b
  7678  000DC8  6EF6               	movwf	tblptrl,c
  7679  000DCA  0E7D               	movlw	high __npowers_
  7680  000DCC  0101               	movlb	1	; () banked
  7681  000DCE  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7682  000DD0  6EF7               	movwf	tblptrh,c
  7683  000DD2                     	if	0	;There are less than 3 active tblptr bytes
  7684  000DD2                     	endif
  7685  000DD2  0009               	tblrd		*+
  7686  000DD4  CFF5 F114          	movff	tablat,___ftmul@f1
  7687  000DD8  0009               	tblrd		*+
  7688  000DDA  CFF5 F115          	movff	tablat,___ftmul@f1+1
  7689  000DDE  000A               	tblrd		*-
  7690  000DE0  CFF5 F116          	movff	tablat,___ftmul@f1+2
  7691  000DE4  ECF4  F019         	call	___ftmul	;wreg free
  7692  000DE8  C114  F126         	movff	?___ftmul,_scale$2994
  7693  000DEC  C115  F127         	movff	?___ftmul+1,_scale$2994+1
  7694  000DF0  C116  F128         	movff	?___ftmul+2,_scale$2994+2
  7695                           
  7696                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7697  000DF4  C126  F114         	movff	_scale$2994,___ftmul@f1
  7698  000DF8  C127  F115         	movff	_scale$2994+1,___ftmul@f1+1
  7699  000DFC  C128  F116         	movff	_scale$2994+2,___ftmul@f1+2
  7700  000E00  0E00               	movlw	0
  7701  000E02  0101               	movlb	1	; () banked
  7702  000E04  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7703  000E06  0E03               	movlw	3
  7704  000E08  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7705  000E0A  0E00               	movlw	0
  7706  000E0C  0101               	movlb	1	; () banked
  7707  000E0E  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7708  000E10  0E0A               	movlw	10
  7709  000E12  6F02               	movwf	___awmod@divisor& (0+255),b
  7710  000E14  0101               	movlb	1	; () banked
  7711  000E16  5129               	movf	scale@scl& (0+255),w,b
  7712  000E18  0101               	movlb	1	; () banked
  7713  000E1A  6F00               	movwf	___awmod@dividend& (0+255),b
  7714  000E1C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7715  000E1E  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  7716  000E20  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  7717  000E22  ECA5  F02B         	call	___awmod	;wreg free
  7718  000E26  C100  F10E         	movff	?___awmod,___wmul@multiplier
  7719  000E2A  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  7720  000E2E  ECBD  F034         	call	___wmul	;wreg free
  7721  000E32  0E5D               	movlw	low __npowers_
  7722  000E34  0101               	movlb	1	; () banked
  7723  000E36  250E               	addwf	?___wmul& (0+255),w,b
  7724  000E38  6EF6               	movwf	tblptrl,c
  7725  000E3A  0E7D               	movlw	high __npowers_
  7726  000E3C  0101               	movlb	1	; () banked
  7727  000E3E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7728  000E40  6EF7               	movwf	tblptrh,c
  7729  000E42                     	if	0	;There are less than 3 active tblptr bytes
  7730  000E42                     	endif
  7731  000E42  0009               	tblrd		*+
  7732  000E44  CFF5 F117          	movff	tablat,___ftmul@f2
  7733  000E48  0009               	tblrd		*+
  7734  000E4A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  7735  000E4E  000A               	tblrd		*-
  7736  000E50  CFF5 F119          	movff	tablat,___ftmul@f2+2
  7737  000E54  ECF4  F019         	call	___ftmul	;wreg free
  7738  000E58  C114  F123         	movff	?___ftmul,?_scale
  7739  000E5C  C115  F124         	movff	?___ftmul+1,?_scale+1
  7740  000E60  C116  F125         	movff	?___ftmul+2,?_scale+2
  7741  000E64  0012               	return	
  7742  000E66                     l9687:
  7743                           
  7744                           ;doprnt.c: 432: else if(scl > 10)
  7745  000E66  0101               	movlb	1	; () banked
  7746  000E68  5129               	movf	scale@scl& (0+255),w,b
  7747  000E6A  0A80               	xorlw	128
  7748  000E6C  0F75               	addlw	-139
  7749  000E6E  A0D8               	btfss	status,0,c
  7750  000E70  D05D               	goto	l9693
  7751                           
  7752                           ; BSR set to: 1
  7753                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7754  000E72  0E00               	movlw	0
  7755  000E74  0101               	movlb	1	; () banked
  7756  000E76  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7757  000E78  0E0A               	movlw	10
  7758  000E7A  6F08               	movwf	___awdiv@divisor& (0+255),b
  7759  000E7C  0101               	movlb	1	; () banked
  7760  000E7E  5129               	movf	scale@scl& (0+255),w,b
  7761  000E80  0101               	movlb	1	; () banked
  7762  000E82  6F06               	movwf	___awdiv@dividend& (0+255),b
  7763  000E84  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  7764  000E86  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  7765  000E88  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7766  000E8A  EC76  F028         	call	___awdiv	;wreg free
  7767  000E8E  0E09               	movlw	9
  7768  000E90  0101               	movlb	1	; () banked
  7769  000E92  2506               	addwf	?___awdiv& (0+255),w,b
  7770  000E94  0101               	movlb	1	; () banked
  7771  000E96  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7772  000E98  0E00               	movlw	0
  7773  000E9A  0101               	movlb	1	; () banked
  7774  000E9C  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7775  000E9E  0101               	movlb	1	; () banked
  7776  000EA0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7777  000EA2  0E00               	movlw	0
  7778  000EA4  0101               	movlb	1	; () banked
  7779  000EA6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7780  000EA8  0E03               	movlw	3
  7781  000EAA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7782  000EAC  ECBD  F034         	call	___wmul	;wreg free
  7783  000EB0  0E5D               	movlw	low __npowers_
  7784  000EB2  0101               	movlb	1	; () banked
  7785  000EB4  250E               	addwf	?___wmul& (0+255),w,b
  7786  000EB6  6EF6               	movwf	tblptrl,c
  7787  000EB8  0E7D               	movlw	high __npowers_
  7788  000EBA  0101               	movlb	1	; () banked
  7789  000EBC  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7790  000EBE  6EF7               	movwf	tblptrh,c
  7791  000EC0                     	if	0	;There are less than 3 active tblptr bytes
  7792  000EC0                     	endif
  7793  000EC0  0009               	tblrd		*+
  7794  000EC2  CFF5 F114          	movff	tablat,___ftmul@f1
  7795  000EC6  0009               	tblrd		*+
  7796  000EC8  CFF5 F115          	movff	tablat,___ftmul@f1+1
  7797  000ECC  000A               	tblrd		*-
  7798  000ECE  CFF5 F116          	movff	tablat,___ftmul@f1+2
  7799  000ED2  0E00               	movlw	0
  7800  000ED4  0101               	movlb	1	; () banked
  7801  000ED6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7802  000ED8  0E03               	movlw	3
  7803  000EDA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7804  000EDC  0E00               	movlw	0
  7805  000EDE  0101               	movlb	1	; () banked
  7806  000EE0  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7807  000EE2  0E0A               	movlw	10
  7808  000EE4  6F02               	movwf	___awmod@divisor& (0+255),b
  7809  000EE6  0101               	movlb	1	; () banked
  7810  000EE8  5129               	movf	scale@scl& (0+255),w,b
  7811  000EEA  0101               	movlb	1	; () banked
  7812  000EEC  6F00               	movwf	___awmod@dividend& (0+255),b
  7813  000EEE  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7814  000EF0  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  7815  000EF2  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  7816  000EF4  ECA5  F02B         	call	___awmod	;wreg free
  7817  000EF8  C100  F10E         	movff	?___awmod,___wmul@multiplier
  7818  000EFC  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  7819  000F00  ECBD  F034         	call	___wmul	;wreg free
  7820  000F04  0E5D               	movlw	low __npowers_
  7821  000F06  0101               	movlb	1	; () banked
  7822  000F08  250E               	addwf	?___wmul& (0+255),w,b
  7823  000F0A  6EF6               	movwf	tblptrl,c
  7824  000F0C  0E7D               	movlw	high __npowers_
  7825  000F0E  0101               	movlb	1	; () banked
  7826  000F10  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7827  000F12  6EF7               	movwf	tblptrh,c
  7828  000F14                     	if	0	;There are less than 3 active tblptr bytes
  7829  000F14                     	endif
  7830  000F14  0009               	tblrd		*+
  7831  000F16  CFF5 F117          	movff	tablat,___ftmul@f2
  7832  000F1A  0009               	tblrd		*+
  7833  000F1C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  7834  000F20  000A               	tblrd		*-
  7835  000F22  CFF5 F119          	movff	tablat,___ftmul@f2+2
  7836  000F26  ECF4  F019         	call	___ftmul	;wreg free
  7837  000F2A  D796               	goto	L2
  7838  000F2C                     l9693:
  7839                           
  7840                           ;doprnt.c: 434: return _npowers_[scl];
  7841  000F2C  0101               	movlb	1	; () banked
  7842  000F2E  5129               	movf	scale@scl& (0+255),w,b
  7843  000F30  0D03               	mullw	3
  7844  000F32  0E5D               	movlw	low __npowers_
  7845  000F34  24F3               	addwf	prodl,w,c
  7846  000F36  6EF6               	movwf	tblptrl,c
  7847  000F38  0E7D               	movlw	high __npowers_
  7848  000F3A  20F4               	addwfc	prodh,w,c
  7849  000F3C  6EF7               	movwf	tblptrh,c
  7850  000F3E                     	if	0	;There are less than 3 active tblptr bytes
  7851  000F3E                     	endif
  7852  000F3E  0009               	tblrd		*+
  7853  000F40  CFF5 F123          	movff	tablat,?_scale
  7854  000F44  0009               	tblrd		*+
  7855  000F46  CFF5 F124          	movff	tablat,?_scale+1
  7856  000F4A  000A               	tblrd		*-
  7857  000F4C  CFF5 F125          	movff	tablat,?_scale+2
  7858                           
  7859                           ; BSR set to: 1
  7860  000F50  0012               	return	
  7861  000F52                     l9697:
  7862                           
  7863                           ; BSR set to: 1
  7864                           ;doprnt.c: 435: }
  7865                           ;doprnt.c: 436: if(scl>=110)
  7866  000F52  0101               	movlb	1	; () banked
  7867  000F54  5129               	movf	scale@scl& (0+255),w,b
  7868  000F56  0A80               	xorlw	128
  7869  000F58  0F12               	addlw	-238
  7870  000F5A  A0D8               	btfss	status,0,c
  7871  000F5C  D0AC               	goto	l9705
  7872                           
  7873                           ; BSR set to: 1
  7874                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7875  000F5E  0E00               	movlw	0
  7876  000F60  0101               	movlb	1	; () banked
  7877  000F62  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7878  000F64  0E03               	movlw	3
  7879  000F66  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7880  000F68  0E00               	movlw	0
  7881  000F6A  0101               	movlb	1	; () banked
  7882  000F6C  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7883  000F6E  0E0A               	movlw	10
  7884  000F70  6F08               	movwf	___awdiv@divisor& (0+255),b
  7885  000F72  0E00               	movlw	0
  7886  000F74  0101               	movlb	1	; () banked
  7887  000F76  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7888  000F78  0E64               	movlw	100
  7889  000F7A  6F02               	movwf	___awmod@divisor& (0+255),b
  7890  000F7C  0101               	movlb	1	; () banked
  7891  000F7E  5129               	movf	scale@scl& (0+255),w,b
  7892  000F80  0101               	movlb	1	; () banked
  7893  000F82  6F00               	movwf	___awmod@dividend& (0+255),b
  7894  000F84  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7895  000F86  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  7896  000F88  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  7897  000F8A  ECA5  F02B         	call	___awmod	;wreg free
  7898  000F8E  C100  F106         	movff	?___awmod,___awdiv@dividend
  7899  000F92  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  7900  000F96  EC76  F028         	call	___awdiv	;wreg free
  7901  000F9A  0E09               	movlw	9
  7902  000F9C  0101               	movlb	1	; () banked
  7903  000F9E  2506               	addwf	?___awdiv& (0+255),w,b
  7904  000FA0  0101               	movlb	1	; () banked
  7905  000FA2  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7906  000FA4  0E00               	movlw	0
  7907  000FA6  0101               	movlb	1	; () banked
  7908  000FA8  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7909  000FAA  0101               	movlb	1	; () banked
  7910  000FAC  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7911  000FAE  ECBD  F034         	call	___wmul	;wreg free
  7912  000FB2  0E84               	movlw	low __powers_
  7913  000FB4  0101               	movlb	1	; () banked
  7914  000FB6  250E               	addwf	?___wmul& (0+255),w,b
  7915  000FB8  6EF6               	movwf	tblptrl,c
  7916  000FBA  0E7D               	movlw	high __powers_
  7917  000FBC  0101               	movlb	1	; () banked
  7918  000FBE  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7919  000FC0  6EF7               	movwf	tblptrh,c
  7920  000FC2                     	if	0	;There are less than 3 active tblptr bytes
  7921  000FC2                     	endif
  7922  000FC2  0009               	tblrd		*+
  7923  000FC4  CFF5 F117          	movff	tablat,___ftmul@f2
  7924  000FC8  0009               	tblrd		*+
  7925  000FCA  CFF5 F118          	movff	tablat,___ftmul@f2+1
  7926  000FCE  000A               	tblrd		*-
  7927  000FD0  CFF5 F119          	movff	tablat,___ftmul@f2+2
  7928  000FD4  0E00               	movlw	0
  7929  000FD6  0101               	movlb	1	; () banked
  7930  000FD8  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7931  000FDA  0E64               	movlw	100
  7932  000FDC  6F08               	movwf	___awdiv@divisor& (0+255),b
  7933  000FDE  0101               	movlb	1	; () banked
  7934  000FE0  5129               	movf	scale@scl& (0+255),w,b
  7935  000FE2  0101               	movlb	1	; () banked
  7936  000FE4  6F06               	movwf	___awdiv@dividend& (0+255),b
  7937  000FE6  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  7938  000FE8  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  7939  000FEA  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7940  000FEC  EC76  F028         	call	___awdiv	;wreg free
  7941  000FF0  0E12               	movlw	18
  7942  000FF2  0101               	movlb	1	; () banked
  7943  000FF4  2506               	addwf	?___awdiv& (0+255),w,b
  7944  000FF6  0101               	movlb	1	; () banked
  7945  000FF8  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7946  000FFA  0E00               	movlw	0
  7947  000FFC  0101               	movlb	1	; () banked
  7948  000FFE  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7949  001000  0101               	movlb	1	; () banked
  7950  001002  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7951  001004  0E00               	movlw	0
  7952  001006  0101               	movlb	1	; () banked
  7953  001008  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7954  00100A  0E03               	movlw	3
  7955  00100C  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7956  00100E  ECBD  F034         	call	___wmul	;wreg free
  7957  001012  0E84               	movlw	low __powers_
  7958  001014  0101               	movlb	1	; () banked
  7959  001016  250E               	addwf	?___wmul& (0+255),w,b
  7960  001018  6EF6               	movwf	tblptrl,c
  7961  00101A  0E7D               	movlw	high __powers_
  7962  00101C  0101               	movlb	1	; () banked
  7963  00101E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7964  001020  6EF7               	movwf	tblptrh,c
  7965  001022                     	if	0	;There are less than 3 active tblptr bytes
  7966  001022                     	endif
  7967  001022  0009               	tblrd		*+
  7968  001024  CFF5 F114          	movff	tablat,___ftmul@f1
  7969  001028  0009               	tblrd		*+
  7970  00102A  CFF5 F115          	movff	tablat,___ftmul@f1+1
  7971  00102E  000A               	tblrd		*-
  7972  001030  CFF5 F116          	movff	tablat,___ftmul@f1+2
  7973  001034  ECF4  F019         	call	___ftmul	;wreg free
  7974  001038  C114  F126         	movff	?___ftmul,_scale$2994
  7975  00103C  C115  F127         	movff	?___ftmul+1,_scale$2994+1
  7976  001040  C116  F128         	movff	?___ftmul+2,_scale$2994+2
  7977                           
  7978                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7979  001044  C126  F114         	movff	_scale$2994,___ftmul@f1
  7980  001048  C127  F115         	movff	_scale$2994+1,___ftmul@f1+1
  7981  00104C  C128  F116         	movff	_scale$2994+2,___ftmul@f1+2
  7982  001050  0E00               	movlw	0
  7983  001052  0101               	movlb	1	; () banked
  7984  001054  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7985  001056  0E03               	movlw	3
  7986  001058  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7987  00105A  0E00               	movlw	0
  7988  00105C  0101               	movlb	1	; () banked
  7989  00105E  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7990  001060  0E0A               	movlw	10
  7991  001062  6F02               	movwf	___awmod@divisor& (0+255),b
  7992  001064  0101               	movlb	1	; () banked
  7993  001066  5129               	movf	scale@scl& (0+255),w,b
  7994  001068  0101               	movlb	1	; () banked
  7995  00106A  6F00               	movwf	___awmod@dividend& (0+255),b
  7996  00106C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7997  00106E  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  7998  001070  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  7999  001072  ECA5  F02B         	call	___awmod	;wreg free
  8000  001076  C100  F10E         	movff	?___awmod,___wmul@multiplier
  8001  00107A  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  8002  00107E  ECBD  F034         	call	___wmul	;wreg free
  8003  001082  0E84               	movlw	low __powers_
  8004  001084  0101               	movlb	1	; () banked
  8005  001086  250E               	addwf	?___wmul& (0+255),w,b
  8006  001088  6EF6               	movwf	tblptrl,c
  8007  00108A  0E7D               	movlw	high __powers_
  8008  00108C  0101               	movlb	1	; () banked
  8009  00108E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8010  001090  6EF7               	movwf	tblptrh,c
  8011  001092                     	if	0	;There are less than 3 active tblptr bytes
  8012  001092                     	endif
  8013  001092  0009               	tblrd		*+
  8014  001094  CFF5 F117          	movff	tablat,___ftmul@f2
  8015  001098  0009               	tblrd		*+
  8016  00109A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8017  00109E  000A               	tblrd		*-
  8018  0010A0  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8019  0010A4  ECF4  F019         	call	___ftmul	;wreg free
  8020  0010A8  C114  F123         	movff	?___ftmul,?_scale
  8021  0010AC  C115  F124         	movff	?___ftmul+1,?_scale+1
  8022  0010B0  C116  F125         	movff	?___ftmul+2,?_scale+2
  8023  0010B4  0012               	return	
  8024  0010B6                     l9705:
  8025                           
  8026                           ;doprnt.c: 438: else if(scl > 10)
  8027  0010B6  0101               	movlb	1	; () banked
  8028  0010B8  5129               	movf	scale@scl& (0+255),w,b
  8029  0010BA  0A80               	xorlw	128
  8030  0010BC  0F75               	addlw	-139
  8031  0010BE  A0D8               	btfss	status,0,c
  8032  0010C0  D05D               	goto	l9711
  8033                           
  8034                           ; BSR set to: 1
  8035                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8036  0010C2  0E00               	movlw	0
  8037  0010C4  0101               	movlb	1	; () banked
  8038  0010C6  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  8039  0010C8  0E0A               	movlw	10
  8040  0010CA  6F08               	movwf	___awdiv@divisor& (0+255),b
  8041  0010CC  0101               	movlb	1	; () banked
  8042  0010CE  5129               	movf	scale@scl& (0+255),w,b
  8043  0010D0  0101               	movlb	1	; () banked
  8044  0010D2  6F06               	movwf	___awdiv@dividend& (0+255),b
  8045  0010D4  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  8046  0010D6  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  8047  0010D8  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8048  0010DA  EC76  F028         	call	___awdiv	;wreg free
  8049  0010DE  0E09               	movlw	9
  8050  0010E0  0101               	movlb	1	; () banked
  8051  0010E2  2506               	addwf	?___awdiv& (0+255),w,b
  8052  0010E4  0101               	movlb	1	; () banked
  8053  0010E6  6F0E               	movwf	___wmul@multiplier& (0+255),b
  8054  0010E8  0E00               	movlw	0
  8055  0010EA  0101               	movlb	1	; () banked
  8056  0010EC  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8057  0010EE  0101               	movlb	1	; () banked
  8058  0010F0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8059  0010F2  0E00               	movlw	0
  8060  0010F4  0101               	movlb	1	; () banked
  8061  0010F6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8062  0010F8  0E03               	movlw	3
  8063  0010FA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8064  0010FC  ECBD  F034         	call	___wmul	;wreg free
  8065  001100  0E84               	movlw	low __powers_
  8066  001102  0101               	movlb	1	; () banked
  8067  001104  250E               	addwf	?___wmul& (0+255),w,b
  8068  001106  6EF6               	movwf	tblptrl,c
  8069  001108  0E7D               	movlw	high __powers_
  8070  00110A  0101               	movlb	1	; () banked
  8071  00110C  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8072  00110E  6EF7               	movwf	tblptrh,c
  8073  001110                     	if	0	;There are less than 3 active tblptr bytes
  8074  001110                     	endif
  8075  001110  0009               	tblrd		*+
  8076  001112  CFF5 F114          	movff	tablat,___ftmul@f1
  8077  001116  0009               	tblrd		*+
  8078  001118  CFF5 F115          	movff	tablat,___ftmul@f1+1
  8079  00111C  000A               	tblrd		*-
  8080  00111E  CFF5 F116          	movff	tablat,___ftmul@f1+2
  8081  001122  0E00               	movlw	0
  8082  001124  0101               	movlb	1	; () banked
  8083  001126  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8084  001128  0E03               	movlw	3
  8085  00112A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8086  00112C  0E00               	movlw	0
  8087  00112E  0101               	movlb	1	; () banked
  8088  001130  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8089  001132  0E0A               	movlw	10
  8090  001134  6F02               	movwf	___awmod@divisor& (0+255),b
  8091  001136  0101               	movlb	1	; () banked
  8092  001138  5129               	movf	scale@scl& (0+255),w,b
  8093  00113A  0101               	movlb	1	; () banked
  8094  00113C  6F00               	movwf	___awmod@dividend& (0+255),b
  8095  00113E  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8096  001140  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8097  001142  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8098  001144  ECA5  F02B         	call	___awmod	;wreg free
  8099  001148  C100  F10E         	movff	?___awmod,___wmul@multiplier
  8100  00114C  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  8101  001150  ECBD  F034         	call	___wmul	;wreg free
  8102  001154  0E84               	movlw	low __powers_
  8103  001156  0101               	movlb	1	; () banked
  8104  001158  250E               	addwf	?___wmul& (0+255),w,b
  8105  00115A  6EF6               	movwf	tblptrl,c
  8106  00115C  0E7D               	movlw	high __powers_
  8107  00115E  0101               	movlb	1	; () banked
  8108  001160  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8109  001162  6EF7               	movwf	tblptrh,c
  8110  001164                     	if	0	;There are less than 3 active tblptr bytes
  8111  001164                     	endif
  8112  001164  0009               	tblrd		*+
  8113  001166  CFF5 F117          	movff	tablat,___ftmul@f2
  8114  00116A  0009               	tblrd		*+
  8115  00116C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8116  001170  000A               	tblrd		*-
  8117  001172  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8118  001176  ECF4  F019         	call	___ftmul	;wreg free
  8119  00117A  D796               	goto	L3
  8120  00117C                     l9711:
  8121                           
  8122                           ;doprnt.c: 440: return _powers_[scl];
  8123  00117C  0101               	movlb	1	; () banked
  8124  00117E  5129               	movf	scale@scl& (0+255),w,b
  8125  001180  0D03               	mullw	3
  8126  001182  0E84               	movlw	low __powers_
  8127  001184  24F3               	addwf	prodl,w,c
  8128  001186  6EF6               	movwf	tblptrl,c
  8129  001188  0E7D               	movlw	high __powers_
  8130  00118A  20F4               	addwfc	prodh,w,c
  8131  00118C  6EF7               	movwf	tblptrh,c
  8132  00118E                     	if	0	;There are less than 3 active tblptr bytes
  8133  00118E                     	endif
  8134  00118E  0009               	tblrd		*+
  8135  001190  CFF5 F123          	movff	tablat,?_scale
  8136  001194  0009               	tblrd		*+
  8137  001196  CFF5 F124          	movff	tablat,?_scale+1
  8138  00119A  000A               	tblrd		*-
  8139  00119C  CFF5 F125          	movff	tablat,?_scale+2
  8140  0011A0  0012               	return	
  8141  0011A2                     __end_of_scale:
  8142                           	opt stack 0
  8143                           tblptru	equ	0xFF8
  8144                           tblptrh	equ	0xFF7
  8145                           tblptrl	equ	0xFF6
  8146                           tablat	equ	0xFF5
  8147                           prodh	equ	0xFF4
  8148                           prodl	equ	0xFF3
  8149                           intcon	equ	0xFF2
  8150                           postinc0	equ	0xFEE
  8151                           wreg	equ	0xFE8
  8152                           postdec1	equ	0xFE5
  8153                           fsr1l	equ	0xFE1
  8154                           indf2	equ	0xFDF
  8155                           postinc2	equ	0xFDE
  8156                           postdec2	equ	0xFDD
  8157                           fsr2h	equ	0xFDA
  8158                           fsr2l	equ	0xFD9
  8159                           status	equ	0xFD8
  8160                           
  8161 ;; *************** function _putch *****************
  8162 ;; Defined at:
  8163 ;;		line 59 in file "source/IOConfig.h"
  8164 ;; Parameters:    Size  Location     Type
  8165 ;;  val             1    wreg     unsigned char 
  8166 ;; Auto vars:     Size  Location     Type
  8167 ;;  val             1   13[BANK1 ] unsigned char 
  8168 ;; Return value:  Size  Location     Type
  8169 ;;                  1    wreg      void 
  8170 ;; Registers used:
  8171 ;;		wreg, status,2, status,0, cstack
  8172 ;; Tracked objects:
  8173 ;;		On entry : 0/0
  8174 ;;		On exit  : 0/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8177 ;;      Params:         0       0       0       0       0       0       0
  8178 ;;      Locals:         0       0       1       0       0       0       0
  8179 ;;      Temps:          0       0       0       0       0       0       0
  8180 ;;      Totals:         0       0       1       0       0       0       0
  8181 ;;Total ram usage:        1 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; Hardware stack levels required when called:   17
  8184 ;; This function calls:
  8185 ;;		_lcd_putc
  8186 ;; This function is called by:
  8187 ;;		_printf
  8188 ;;		_send_float
  8189 ;;		_send_int32
  8190 ;;		_send_int16
  8191 ;;		_send_float_vt
  8192 ;;		_send_int32_vt
  8193 ;;		_send_int16_vt
  8194 ;; This function uses a non-reentrant model
  8195 ;;
  8196                           
  8197                           	psect	text23
  8198  006C62                     __ptext23:
  8199                           	opt stack 0
  8200  006C62                     _putch:
  8201                           	opt stack 10
  8202                           
  8203                           ;incstack = 0
  8204                           ;putch@val stored from wreg
  8205  006C62  0101               	movlb	1	; () banked
  8206  006C64  6F0D               	movwf	putch@val& (0+255),b
  8207                           
  8208                           ;IOConfig.h: 60: lcd_putc(val);
  8209  006C66  0101               	movlb	1	; () banked
  8210  006C68  510D               	movf	putch@val& (0+255),w,b
  8211  006C6A  ECFB  F02F         	call	_lcd_putc
  8212  006C6E  0012               	return		;funcret
  8213  006C70                     __end_of_putch:
  8214                           	opt stack 0
  8215                           tblptru	equ	0xFF8
  8216                           tblptrh	equ	0xFF7
  8217                           tblptrl	equ	0xFF6
  8218                           tablat	equ	0xFF5
  8219                           prodh	equ	0xFF4
  8220                           prodl	equ	0xFF3
  8221                           intcon	equ	0xFF2
  8222                           postinc0	equ	0xFEE
  8223                           wreg	equ	0xFE8
  8224                           postdec1	equ	0xFE5
  8225                           fsr1l	equ	0xFE1
  8226                           indf2	equ	0xFDF
  8227                           postinc2	equ	0xFDE
  8228                           postdec2	equ	0xFDD
  8229                           fsr2h	equ	0xFDA
  8230                           fsr2l	equ	0xFD9
  8231                           status	equ	0xFD8
  8232                           
  8233 ;; *************** function _lcd_putc *****************
  8234 ;; Defined at:
  8235 ;;		line 212 in file "source/../../vclib_lcd.h"
  8236 ;; Parameters:    Size  Location     Type
  8237 ;;  cha             1    wreg     unsigned char 
  8238 ;; Auto vars:     Size  Location     Type
  8239 ;;  cha             1   12[BANK1 ] unsigned char 
  8240 ;; Return value:  Size  Location     Type
  8241 ;;                  1    wreg      void 
  8242 ;; Registers used:
  8243 ;;		wreg, status,2, status,0, cstack
  8244 ;; Tracked objects:
  8245 ;;		On entry : 0/0
  8246 ;;		On exit  : 0/0
  8247 ;;		Unchanged: 0/0
  8248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8249 ;;      Params:         0       0       0       0       0       0       0
  8250 ;;      Locals:         0       0       1       0       0       0       0
  8251 ;;      Temps:          0       0       1       0       0       0       0
  8252 ;;      Totals:         0       0       2       0       0       0       0
  8253 ;;Total ram usage:        2 bytes
  8254 ;; Hardware stack levels used:    1
  8255 ;; Hardware stack levels required when called:   16
  8256 ;; This function calls:
  8257 ;;		_lcd_gotoxy
  8258 ;;		_lcd_send_byte
  8259 ;; This function is called by:
  8260 ;;		_putch
  8261 ;;		_drawMenu
  8262 ;; This function uses a non-reentrant model
  8263 ;;
  8264                           
  8265                           	psect	text24
  8266  005FF6                     __ptext24:
  8267                           	opt stack 0
  8268  005FF6                     _lcd_putc:
  8269                           	opt stack 10
  8270                           
  8271                           ;incstack = 0
  8272                           ;lcd_putc@cha stored from wreg
  8273  005FF6  0101               	movlb	1	; () banked
  8274  005FF8  6F0C               	movwf	lcd_putc@cha& (0+255),b
  8275                           
  8276                           ;vclib_lcd.h: 213: switch (cha) {
  8277  005FFA  D02B               	goto	l9291
  8278  005FFC                     l9277:
  8279  005FFC  0E01               	movlw	1
  8280  005FFE  0101               	movlb	1	; () banked
  8281  006000  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  8282  006002  0E01               	movlw	1
  8283  006004  EC0A  F035         	call	_lcd_gotoxy
  8284                           
  8285                           ;vclib_lcd.h: 215: break;
  8286  006008  0012               	return	
  8287  00600A                     l9279:
  8288  00600A  0E01               	movlw	1
  8289  00600C  0101               	movlb	1	; () banked
  8290  00600E  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8291  006010  0E00               	movlw	0
  8292  006012  EC62  F034         	call	_lcd_send_byte
  8293                           
  8294                           ;vclib_lcd.h: 218: _delay((unsigned long)((2)*(16000000/4000.0)));
  8295  006016  0E0B               	movlw	11
  8296  006018  0101               	movlb	1	; () banked
  8297  00601A  6F0B               	movwf	??_lcd_putc& (0+255),b
  8298  00601C  0E62               	movlw	98
  8299  00601E                     u18947:
  8300  00601E  2EE8               	decfsz	wreg,f,c
  8301  006020  D7FE               	goto	u18947
  8302  006022  2F0B               	decfsz	??_lcd_putc& (0+255),f,b
  8303  006024  D7FC               	goto	u18947
  8304  006026  D000               	nop2	
  8305                           
  8306                           ;vclib_lcd.h: 223: break;
  8307  006028  0012               	return	
  8308  00602A                     l9283:
  8309  00602A  0E02               	movlw	2
  8310  00602C  0101               	movlb	1	; () banked
  8311  00602E  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  8312  006030  0E01               	movlw	1
  8313  006032  EC0A  F035         	call	_lcd_gotoxy
  8314                           
  8315                           ;vclib_lcd.h: 236: break;
  8316  006036  0012               	return	
  8317  006038                     l9285:
  8318  006038  0E10               	movlw	16
  8319  00603A  0101               	movlb	1	; () banked
  8320  00603C  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8321  00603E  0E00               	movlw	0
  8322  006040  EC62  F034         	call	_lcd_send_byte
  8323                           
  8324                           ;vclib_lcd.h: 240: break;
  8325  006044  0012               	return	
  8326  006046                     l9287:
  8327  006046  C10C  F105         	movff	lcd_putc@cha,lcd_send_byte@n
  8328  00604A  0E01               	movlw	1
  8329  00604C  EC62  F034         	call	_lcd_send_byte
  8330                           
  8331                           ;vclib_lcd.h: 253: }
  8332                           
  8333                           ;vclib_lcd.h: 251: break;
  8334  006050  0012               	return	
  8335  006052                     l9291:
  8336  006052  0101               	movlb	1	; () banked
  8337  006054  510C               	movf	lcd_putc@cha& (0+255),w,b
  8338                           
  8339                           ; Switch size 1, requested type "space"
  8340                           ; Number of cases is 4, Range of values is 7 to 12
  8341                           ; switch strategies available:
  8342                           ; Name         Instructions Cycles
  8343                           ; simple_byte           13     7 (average)
  8344                           ;	Chosen strategy is simple_byte
  8345  006056  0A07               	xorlw	7	; case 7
  8346  006058  B4D8               	btfsc	status,2,c
  8347  00605A  D7D0               	goto	l9277
  8348  00605C  0A0F               	xorlw	15	; case 8
  8349  00605E  B4D8               	btfsc	status,2,c
  8350  006060  D7EB               	goto	l9285
  8351  006062  0A02               	xorlw	2	; case 10
  8352  006064  B4D8               	btfsc	status,2,c
  8353  006066  D7E1               	goto	l9283
  8354  006068  0A06               	xorlw	6	; case 12
  8355  00606A  B4D8               	btfsc	status,2,c
  8356  00606C  D7CE               	goto	l9279
  8357  00606E  D7EB               	goto	l9287
  8358  006070                     __end_of_lcd_putc:
  8359                           	opt stack 0
  8360                           tblptru	equ	0xFF8
  8361                           tblptrh	equ	0xFF7
  8362                           tblptrl	equ	0xFF6
  8363                           tablat	equ	0xFF5
  8364                           prodh	equ	0xFF4
  8365                           prodl	equ	0xFF3
  8366                           intcon	equ	0xFF2
  8367                           postinc0	equ	0xFEE
  8368                           wreg	equ	0xFE8
  8369                           postdec1	equ	0xFE5
  8370                           fsr1l	equ	0xFE1
  8371                           indf2	equ	0xFDF
  8372                           postinc2	equ	0xFDE
  8373                           postdec2	equ	0xFDD
  8374                           fsr2h	equ	0xFDA
  8375                           fsr2l	equ	0xFD9
  8376                           status	equ	0xFD8
  8377                           
  8378 ;; *************** function _lcd_gotoxy *****************
  8379 ;; Defined at:
  8380 ;;		line 198 in file "source/../../vclib_lcd.h"
  8381 ;; Parameters:    Size  Location     Type
  8382 ;;  pos             1    wreg     unsigned char 
  8383 ;;  fila            1    8[BANK1 ] unsigned char 
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;  pos             1    9[BANK1 ] unsigned char 
  8386 ;;  address         1   10[BANK1 ] unsigned char 
  8387 ;; Return value:  Size  Location     Type
  8388 ;;                  1    wreg      void 
  8389 ;; Registers used:
  8390 ;;		wreg, status,2, status,0, cstack
  8391 ;; Tracked objects:
  8392 ;;		On entry : 0/0
  8393 ;;		On exit  : 0/0
  8394 ;;		Unchanged: 0/0
  8395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8396 ;;      Params:         0       0       1       0       0       0       0
  8397 ;;      Locals:         0       0       2       0       0       0       0
  8398 ;;      Temps:          0       0       0       0       0       0       0
  8399 ;;      Totals:         0       0       3       0       0       0       0
  8400 ;;Total ram usage:        3 bytes
  8401 ;; Hardware stack levels used:    1
  8402 ;; Hardware stack levels required when called:   15
  8403 ;; This function calls:
  8404 ;;		_lcd_send_byte
  8405 ;; This function is called by:
  8406 ;;		_lcd_putc
  8407 ;;		_drawValEditor
  8408 ;;		_drawMenu
  8409 ;;		_drawChanVal
  8410 ;;		_drawPass1Lin
  8411 ;;		_drawAdvON
  8412 ;;		_drawSNquest
  8413 ;;		_drawAutoCalibRM
  8414 ;;		_drawCalibProc
  8415 ;;		_lcd_getc
  8416 ;; This function uses a non-reentrant model
  8417 ;;
  8418                           
  8419                           	psect	text25
  8420  006A14                     __ptext25:
  8421                           	opt stack 0
  8422  006A14                     _lcd_gotoxy:
  8423                           	opt stack 10
  8424                           
  8425                           ;incstack = 0
  8426                           ;lcd_gotoxy@pos stored from wreg
  8427  006A14  0101               	movlb	1	; () banked
  8428  006A16  6F09               	movwf	lcd_gotoxy@pos& (0+255),b
  8429                           
  8430                           ;vclib_lcd.h: 199: unsigned char address;
  8431                           ;vclib_lcd.h: 200: if (fila != 1)
  8432  006A18  0101               	movlb	1	; () banked
  8433  006A1A  0508               	decf	lcd_gotoxy@fila& (0+255),w,b
  8434  006A1C  B4D8               	btfsc	status,2,c
  8435  006A1E  D002               	goto	l9197
  8436                           
  8437                           ; BSR set to: 1
  8438                           ;vclib_lcd.h: 201: address = 0x40;
  8439  006A20  0E40               	movlw	64
  8440  006A22  D001               	goto	L4
  8441  006A24                     l9197:
  8442                           
  8443                           ; BSR set to: 1
  8444                           ;vclib_lcd.h: 202: else
  8445                           ;vclib_lcd.h: 203: address = 0;
  8446  006A24  0E00               	movlw	0
  8447  006A26                     L4:
  8448  006A26  0101               	movlb	1	; () banked
  8449  006A28  6F0A               	movwf	lcd_gotoxy@address& (0+255),b
  8450                           
  8451                           ; BSR set to: 1
  8452                           ;vclib_lcd.h: 204: address += pos - 1;
  8453                           
  8454                           ; BSR set to: 1
  8455  006A2A  0101               	movlb	1	; () banked
  8456  006A2C  0509               	decf	lcd_gotoxy@pos& (0+255),w,b
  8457  006A2E  0101               	movlb	1	; () banked
  8458  006A30  270A               	addwf	lcd_gotoxy@address& (0+255),f,b
  8459                           
  8460                           ; BSR set to: 1
  8461                           ;vclib_lcd.h: 205: lcd_send_byte(0, 0b10000000 | address);
  8462  006A32  0101               	movlb	1	; () banked
  8463  006A34  510A               	movf	lcd_gotoxy@address& (0+255),w,b
  8464  006A36  0980               	iorlw	128
  8465  006A38  0101               	movlb	1	; () banked
  8466  006A3A  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8467  006A3C  0E00               	movlw	0
  8468  006A3E  EC62  F034         	call	_lcd_send_byte
  8469  006A42  0012               	return		;funcret
  8470  006A44                     __end_of_lcd_gotoxy:
  8471                           	opt stack 0
  8472                           tblptru	equ	0xFF8
  8473                           tblptrh	equ	0xFF7
  8474                           tblptrl	equ	0xFF6
  8475                           tablat	equ	0xFF5
  8476                           prodh	equ	0xFF4
  8477                           prodl	equ	0xFF3
  8478                           intcon	equ	0xFF2
  8479                           postinc0	equ	0xFEE
  8480                           wreg	equ	0xFE8
  8481                           postdec1	equ	0xFE5
  8482                           fsr1l	equ	0xFE1
  8483                           indf2	equ	0xFDF
  8484                           postinc2	equ	0xFDE
  8485                           postdec2	equ	0xFDD
  8486                           fsr2h	equ	0xFDA
  8487                           fsr2l	equ	0xFD9
  8488                           status	equ	0xFD8
  8489                           
  8490 ;; *************** function _lcd_send_byte *****************
  8491 ;; Defined at:
  8492 ;;		line 163 in file "source/../../vclib_lcd.h"
  8493 ;; Parameters:    Size  Location     Type
  8494 ;;  address         1    wreg     unsigned char 
  8495 ;;  n               1    5[BANK1 ] unsigned char 
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;  address         1    7[BANK1 ] unsigned char 
  8498 ;; Return value:  Size  Location     Type
  8499 ;;                  1    wreg      void 
  8500 ;; Registers used:
  8501 ;;		wreg, status,2, status,0, cstack
  8502 ;; Tracked objects:
  8503 ;;		On entry : 0/0
  8504 ;;		On exit  : 0/0
  8505 ;;		Unchanged: 0/0
  8506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8507 ;;      Params:         0       0       1       0       0       0       0
  8508 ;;      Locals:         0       0       1       0       0       0       0
  8509 ;;      Temps:          0       0       1       0       0       0       0
  8510 ;;      Totals:         0       0       3       0       0       0       0
  8511 ;;Total ram usage:        3 bytes
  8512 ;; Hardware stack levels used:    1
  8513 ;; Hardware stack levels required when called:   14
  8514 ;; This function calls:
  8515 ;;		_lcd_read_byte
  8516 ;;		_lcd_send_4bits
  8517 ;; This function is called by:
  8518 ;;		_lcd_init
  8519 ;;		_lcd_gotoxy
  8520 ;;		_lcd_putc
  8521 ;;		_lcd_set_cgram_char
  8522 ;;		_lcd_cursor_en
  8523 ;;		_lcd_clear
  8524 ;;		_lcd_shift_right
  8525 ;;		_lcd_shift_left
  8526 ;; This function uses a non-reentrant model
  8527 ;;
  8528                           
  8529                           	psect	text26
  8530  0068C4                     __ptext26:
  8531                           	opt stack 0
  8532  0068C4                     _lcd_send_byte:
  8533                           	opt stack 15
  8534                           
  8535                           ;incstack = 0
  8536                           ;lcd_send_byte@address stored from wreg
  8537  0068C4  0101               	movlb	1	; () banked
  8538  0068C6  6F07               	movwf	lcd_send_byte@address& (0+255),b
  8539                           
  8540                           ;vclib_lcd.h: 164: PORTBbits.RB1 = 0;
  8541  0068C8  9281               	bcf	3969,1,c	;volatile
  8542  0068CA                     l9189:
  8543  0068CA  ECF9  F033         	call	_lcd_read_byte	;wreg free
  8544  0068CE  0101               	movlb	1	; () banked
  8545  0068D0  6F06               	movwf	??_lcd_send_byte& (0+255),b
  8546  0068D2  0101               	movlb	1	; () banked
  8547  0068D4  BF06               	btfsc	??_lcd_send_byte& (0+255),7,b
  8548  0068D6  D7F9               	goto	l9189
  8549                           
  8550                           ; BSR set to: 1
  8551                           ;vclib_lcd.h: 166: PORTBbits.RB1 = address;
  8552  0068D8  0101               	movlb	1	; () banked
  8553  0068DA  B107               	btfsc	lcd_send_byte@address& (0+255),0,b
  8554  0068DC  D002               	bra	u12965
  8555  0068DE  9281               	bcf	3969,1,c	;volatile
  8556  0068E0  D001               	bra	u12966
  8557  0068E2                     u12965:
  8558  0068E2  8281               	bsf	3969,1,c	;volatile
  8559  0068E4                     u12966:
  8560                           
  8561                           ;vclib_lcd.h: 167: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8562  0068E4  D000               	nop2		;2 cycle nop
  8563  0068E6  D000               	nop2		;2 cycle nop
  8564                           
  8565                           ;vclib_lcd.h: 168: PORTBbits.RB2 = 0;
  8566  0068E8  9481               	bcf	3969,2,c	;volatile
  8567                           
  8568                           ;vclib_lcd.h: 169: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8569  0068EA  D000               	nop2		;2 cycle nop
  8570  0068EC  D000               	nop2		;2 cycle nop
  8571                           
  8572                           ;vclib_lcd.h: 170: PORTBbits.RB3 = 0;
  8573  0068EE  9681               	bcf	3969,3,c	;volatile
  8574                           
  8575                           ;vclib_lcd.h: 171: lcd_send_4bits(n >> 4);
  8576  0068F0  0101               	movlb	1	; () banked
  8577  0068F2  3905               	swapf	lcd_send_byte@n& (0+255),w,b
  8578  0068F4  0B0F               	andlw	15
  8579  0068F6  ECA2  F02E         	call	_lcd_send_4bits
  8580                           
  8581                           ;vclib_lcd.h: 172: lcd_send_4bits(n & 0b00001111 );
  8582  0068FA  0101               	movlb	1	; () banked
  8583  0068FC  5105               	movf	lcd_send_byte@n& (0+255),w,b
  8584  0068FE  0B0F               	andlw	15
  8585  006900  ECA2  F02E         	call	_lcd_send_4bits
  8586  006904  0012               	return		;funcret
  8587  006906                     __end_of_lcd_send_byte:
  8588                           	opt stack 0
  8589                           tblptru	equ	0xFF8
  8590                           tblptrh	equ	0xFF7
  8591                           tblptrl	equ	0xFF6
  8592                           tablat	equ	0xFF5
  8593                           prodh	equ	0xFF4
  8594                           prodl	equ	0xFF3
  8595                           intcon	equ	0xFF2
  8596                           postinc0	equ	0xFEE
  8597                           wreg	equ	0xFE8
  8598                           postdec1	equ	0xFE5
  8599                           fsr1l	equ	0xFE1
  8600                           indf2	equ	0xFDF
  8601                           postinc2	equ	0xFDE
  8602                           postdec2	equ	0xFDD
  8603                           fsr2h	equ	0xFDA
  8604                           fsr2l	equ	0xFD9
  8605                           status	equ	0xFD8
  8606                           
  8607 ;; *************** function _lcd_send_4bits *****************
  8608 ;; Defined at:
  8609 ;;		line 151 in file "source/../../vclib_lcd.h"
  8610 ;; Parameters:    Size  Location     Type
  8611 ;;  n               1    wreg     unsigned char 
  8612 ;; Auto vars:     Size  Location     Type
  8613 ;;  n               1    4[BANK1 ] unsigned char 
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  1    wreg      void 
  8616 ;; Registers used:
  8617 ;;		wreg, status,2, cstack
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8623 ;;      Params:         0       0       0       0       0       0       0
  8624 ;;      Locals:         0       0       5       0       0       0       0
  8625 ;;      Temps:          0       0       0       0       0       0       0
  8626 ;;      Totals:         0       0       5       0       0       0       0
  8627 ;;Total ram usage:        5 bytes
  8628 ;; Hardware stack levels used:    1
  8629 ;; Hardware stack levels required when called:   12
  8630 ;; This function calls:
  8631 ;;		Nothing
  8632 ;; This function is called by:
  8633 ;;		_lcd_send_byte
  8634 ;;		_lcd_init
  8635 ;; This function uses a non-reentrant model
  8636 ;;
  8637                           
  8638                           	psect	text27
  8639  005D44                     __ptext27:
  8640                           	opt stack 0
  8641  005D44                     _lcd_send_4bits:
  8642                           	opt stack 16
  8643                           
  8644                           ;incstack = 0
  8645                           ;lcd_send_4bits@n stored from wreg
  8646  005D44  0101               	movlb	1	; () banked
  8647  005D46  6F04               	movwf	lcd_send_4bits@n& (0+255),b
  8648                           
  8649                           ;vclib_lcd.h: 153: PORTBbits.RB4 = 0 || n & 1;
  8650  005D48  0E01               	movlw	1
  8651  005D4A  0101               	movlb	1	; () banked
  8652  005D4C  6F00               	movwf	_lcd_send_4bits$1688& (0+255),b
  8653                           
  8654                           ; BSR set to: 1
  8655  005D4E  0101               	movlb	1	; () banked
  8656  005D50  B104               	btfsc	lcd_send_4bits@n& (0+255),0,b
  8657  005D52  D003               	goto	l9159
  8658                           
  8659                           ; BSR set to: 1
  8660  005D54  0E00               	movlw	0
  8661  005D56  0101               	movlb	1	; () banked
  8662  005D58  6F00               	movwf	_lcd_send_4bits$1688& (0+255),b
  8663  005D5A                     l9159:
  8664                           
  8665                           ; BSR set to: 1
  8666  005D5A  0101               	movlb	1	; () banked
  8667  005D5C  B100               	btfsc	_lcd_send_4bits$1688& (0+255),0,b
  8668  005D5E  D002               	bra	u12885
  8669  005D60  9881               	bcf	3969,4,c	;volatile
  8670  005D62  D001               	bra	u12886
  8671  005D64                     u12885:
  8672  005D64  8881               	bsf	3969,4,c	;volatile
  8673  005D66                     u12886:
  8674                           
  8675                           ;vclib_lcd.h: 154: PORTBbits.RB5 = 0 || n & 2;
  8676  005D66  0E01               	movlw	1
  8677  005D68  0101               	movlb	1	; () banked
  8678  005D6A  6F01               	movwf	_lcd_send_4bits$1689& (0+255),b
  8679                           
  8680                           ; BSR set to: 1
  8681  005D6C  0101               	movlb	1	; () banked
  8682  005D6E  B304               	btfsc	lcd_send_4bits@n& (0+255),1,b
  8683  005D70  D003               	goto	l9165
  8684                           
  8685                           ; BSR set to: 1
  8686  005D72  0E00               	movlw	0
  8687  005D74  0101               	movlb	1	; () banked
  8688  005D76  6F01               	movwf	_lcd_send_4bits$1689& (0+255),b
  8689  005D78                     l9165:
  8690                           
  8691                           ; BSR set to: 1
  8692  005D78  0101               	movlb	1	; () banked
  8693  005D7A  B101               	btfsc	_lcd_send_4bits$1689& (0+255),0,b
  8694  005D7C  D002               	bra	u12905
  8695  005D7E  9A81               	bcf	3969,5,c	;volatile
  8696  005D80  D001               	bra	u12906
  8697  005D82                     u12905:
  8698  005D82  8A81               	bsf	3969,5,c	;volatile
  8699  005D84                     u12906:
  8700                           
  8701                           ;vclib_lcd.h: 155: PORTBbits.RB6 = 0 || n & 4;
  8702  005D84  0E01               	movlw	1
  8703  005D86  0101               	movlb	1	; () banked
  8704  005D88  6F02               	movwf	_lcd_send_4bits$1690& (0+255),b
  8705                           
  8706                           ; BSR set to: 1
  8707  005D8A  0101               	movlb	1	; () banked
  8708  005D8C  B504               	btfsc	lcd_send_4bits@n& (0+255),2,b
  8709  005D8E  D003               	goto	l9171
  8710                           
  8711                           ; BSR set to: 1
  8712  005D90  0E00               	movlw	0
  8713  005D92  0101               	movlb	1	; () banked
  8714  005D94  6F02               	movwf	_lcd_send_4bits$1690& (0+255),b
  8715  005D96                     l9171:
  8716                           
  8717                           ; BSR set to: 1
  8718  005D96  0101               	movlb	1	; () banked
  8719  005D98  B102               	btfsc	_lcd_send_4bits$1690& (0+255),0,b
  8720  005D9A  D002               	bra	u12925
  8721  005D9C  9C81               	bcf	3969,6,c	;volatile
  8722  005D9E  D001               	bra	u12926
  8723  005DA0                     u12925:
  8724  005DA0  8C81               	bsf	3969,6,c	;volatile
  8725  005DA2                     u12926:
  8726                           
  8727                           ;vclib_lcd.h: 156: PORTBbits.RB7 = 0 || n & 8;
  8728  005DA2  0E01               	movlw	1
  8729  005DA4  0101               	movlb	1	; () banked
  8730  005DA6  6F03               	movwf	_lcd_send_4bits$1691& (0+255),b
  8731                           
  8732                           ; BSR set to: 1
  8733  005DA8  0101               	movlb	1	; () banked
  8734  005DAA  B704               	btfsc	lcd_send_4bits@n& (0+255),3,b
  8735  005DAC  D003               	goto	l9177
  8736                           
  8737                           ; BSR set to: 1
  8738  005DAE  0E00               	movlw	0
  8739  005DB0  0101               	movlb	1	; () banked
  8740  005DB2  6F03               	movwf	_lcd_send_4bits$1691& (0+255),b
  8741  005DB4                     l9177:
  8742                           
  8743                           ; BSR set to: 1
  8744  005DB4  0101               	movlb	1	; () banked
  8745  005DB6  B103               	btfsc	_lcd_send_4bits$1691& (0+255),0,b
  8746  005DB8  D002               	bra	u12945
  8747  005DBA  9E81               	bcf	3969,7,c	;volatile
  8748  005DBC  D001               	bra	u12946
  8749  005DBE                     u12945:
  8750  005DBE  8E81               	bsf	3969,7,c	;volatile
  8751  005DC0                     u12946:
  8752                           
  8753                           ;vclib_lcd.h: 157: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8754  005DC0  D000               	nop2		;2 cycle nop
  8755  005DC2  D000               	nop2		;2 cycle nop
  8756                           
  8757                           ;vclib_lcd.h: 158: PORTBbits.RB3 = 1;
  8758  005DC4  8681               	bsf	3969,3,c	;volatile
  8759                           
  8760                           ;vclib_lcd.h: 159: _delay((unsigned long)((2)*(16000000/4000000.0)));
  8761  005DC6  0E02               	movlw	2
  8762  005DC8                     u18957:
  8763  005DC8  2EE8               	decfsz	wreg,f,c
  8764  005DCA  D7FE               	goto	u18957
  8765  005DCC  D000               	nop2		;nop
  8766                           
  8767                           ;vclib_lcd.h: 160: PORTBbits.RB3 = 0;
  8768  005DCE  9681               	bcf	3969,3,c	;volatile
  8769  005DD0  0012               	return		;funcret
  8770  005DD2                     __end_of_lcd_send_4bits:
  8771                           	opt stack 0
  8772                           tblptru	equ	0xFF8
  8773                           tblptrh	equ	0xFF7
  8774                           tblptrl	equ	0xFF6
  8775                           tablat	equ	0xFF5
  8776                           prodh	equ	0xFF4
  8777                           prodl	equ	0xFF3
  8778                           intcon	equ	0xFF2
  8779                           postinc0	equ	0xFEE
  8780                           wreg	equ	0xFE8
  8781                           postdec1	equ	0xFE5
  8782                           fsr1l	equ	0xFE1
  8783                           indf2	equ	0xFDF
  8784                           postinc2	equ	0xFDE
  8785                           postdec2	equ	0xFDD
  8786                           fsr2h	equ	0xFDA
  8787                           fsr2l	equ	0xFD9
  8788                           status	equ	0xFD8
  8789                           
  8790 ;; *************** function _lcd_read_byte *****************
  8791 ;; Defined at:
  8792 ;;		line 127 in file "source/../../vclib_lcd.h"
  8793 ;; Parameters:    Size  Location     Type
  8794 ;;		None
  8795 ;; Auto vars:     Size  Location     Type
  8796 ;;  high            1    3[BANK1 ] unsigned char 
  8797 ;;  low             1    2[BANK1 ] unsigned char 
  8798 ;; Return value:  Size  Location     Type
  8799 ;;                  1    wreg      unsigned char 
  8800 ;; Registers used:
  8801 ;;		wreg, status,2, status,0, cstack
  8802 ;; Tracked objects:
  8803 ;;		On entry : 0/0
  8804 ;;		On exit  : 0/0
  8805 ;;		Unchanged: 0/0
  8806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8807 ;;      Params:         0       0       0       0       0       0       0
  8808 ;;      Locals:         0       0       2       0       0       0       0
  8809 ;;      Temps:          0       0       0       0       0       0       0
  8810 ;;      Totals:         0       0       2       0       0       0       0
  8811 ;;Total ram usage:        2 bytes
  8812 ;; Hardware stack levels used:    1
  8813 ;; Hardware stack levels required when called:   13
  8814 ;; This function calls:
  8815 ;;		_lcd_read_4bits
  8816 ;; This function is called by:
  8817 ;;		_lcd_send_byte
  8818 ;;		_lcd_getc
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           	psect	text28
  8823  0067F2                     __ptext28:
  8824                           	opt stack 0
  8825  0067F2                     _lcd_read_byte:
  8826                           	opt stack 15
  8827                           
  8828                           ;vclib_lcd.h: 128: unsigned char low, high;
  8829                           ;vclib_lcd.h: 129: TRISBbits.TRISB4 = 1;
  8830                           
  8831                           ;incstack = 0
  8832  0067F2  8893               	bsf	3987,4,c	;volatile
  8833                           
  8834                           ;vclib_lcd.h: 130: TRISBbits.TRISB5 = 1;
  8835  0067F4  8A93               	bsf	3987,5,c	;volatile
  8836                           
  8837                           ;vclib_lcd.h: 131: TRISBbits.TRISB6 = 1;
  8838  0067F6  8C93               	bsf	3987,6,c	;volatile
  8839                           
  8840                           ;vclib_lcd.h: 132: TRISBbits.TRISB7 = 1;
  8841  0067F8  8E93               	bsf	3987,7,c	;volatile
  8842                           
  8843                           ;vclib_lcd.h: 133: PORTBbits.RB2 = 1;
  8844  0067FA  8481               	bsf	3969,2,c	;volatile
  8845                           
  8846                           ;vclib_lcd.h: 134: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8847  0067FC  D000               	nop2		;2 cycle nop
  8848  0067FE  D000               	nop2		;2 cycle nop
  8849                           
  8850                           ;vclib_lcd.h: 135: PORTBbits.RB3 = 1;
  8851  006800  8681               	bsf	3969,3,c	;volatile
  8852                           
  8853                           ;vclib_lcd.h: 136: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8854  006802  D000               	nop2		;2 cycle nop
  8855  006804  D000               	nop2		;2 cycle nop
  8856                           
  8857                           ;vclib_lcd.h: 137: high = lcd_read_4bits();
  8858  006806  EC38  F030         	call	_lcd_read_4bits	;wreg free
  8859  00680A  0101               	movlb	1	; () banked
  8860  00680C  6F03               	movwf	lcd_read_byte@high& (0+255),b
  8861                           
  8862                           ; BSR set to: 1
  8863                           ;vclib_lcd.h: 138: PORTBbits.RB3 = 0;
  8864  00680E  9681               	bcf	3969,3,c	;volatile
  8865                           
  8866                           ; BSR set to: 1
  8867                           ;vclib_lcd.h: 139: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8868  006810  D000               	nop2		;2 cycle nop
  8869  006812  D000               	nop2		;2 cycle nop
  8870                           
  8871                           ;vclib_lcd.h: 140: PORTBbits.RB3 = 1;
  8872  006814  8681               	bsf	3969,3,c	;volatile
  8873                           
  8874                           ;vclib_lcd.h: 141: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8875  006816  D000               	nop2		;2 cycle nop
  8876  006818  D000               	nop2		;2 cycle nop
  8877                           
  8878                           ;vclib_lcd.h: 142: low = lcd_read_4bits();
  8879  00681A  EC38  F030         	call	_lcd_read_4bits	;wreg free
  8880  00681E  0101               	movlb	1	; () banked
  8881  006820  6F02               	movwf	lcd_read_byte@low& (0+255),b
  8882                           
  8883                           ; BSR set to: 1
  8884                           ;vclib_lcd.h: 143: PORTBbits.RB3 = 0;
  8885  006822  9681               	bcf	3969,3,c	;volatile
  8886                           
  8887                           ; BSR set to: 1
  8888                           ;vclib_lcd.h: 144: TRISBbits.TRISB4 = 0;
  8889  006824  9893               	bcf	3987,4,c	;volatile
  8890                           
  8891                           ; BSR set to: 1
  8892                           ;vclib_lcd.h: 145: TRISBbits.TRISB5 = 0;
  8893  006826  9A93               	bcf	3987,5,c	;volatile
  8894                           
  8895                           ; BSR set to: 1
  8896                           ;vclib_lcd.h: 146: TRISBbits.TRISB6 = 0;
  8897  006828  9C93               	bcf	3987,6,c	;volatile
  8898                           
  8899                           ; BSR set to: 1
  8900                           ;vclib_lcd.h: 147: TRISBbits.TRISB7 = 0;
  8901  00682A  9E93               	bcf	3987,7,c	;volatile
  8902                           
  8903                           ; BSR set to: 1
  8904                           ;vclib_lcd.h: 148: return ( (high << 4) | low);
  8905  00682C  0101               	movlb	1	; () banked
  8906  00682E  3903               	swapf	lcd_read_byte@high& (0+255),w,b
  8907  006830  0BF0               	andlw	240
  8908  006832  0101               	movlb	1	; () banked
  8909  006834  1102               	iorwf	lcd_read_byte@low& (0+255),w,b
  8910  006836  0012               	return	
  8911  006838                     __end_of_lcd_read_byte:
  8912                           	opt stack 0
  8913                           tblptru	equ	0xFF8
  8914                           tblptrh	equ	0xFF7
  8915                           tblptrl	equ	0xFF6
  8916                           tablat	equ	0xFF5
  8917                           prodh	equ	0xFF4
  8918                           prodl	equ	0xFF3
  8919                           intcon	equ	0xFF2
  8920                           postinc0	equ	0xFEE
  8921                           wreg	equ	0xFE8
  8922                           postdec1	equ	0xFE5
  8923                           fsr1l	equ	0xFE1
  8924                           indf2	equ	0xFDF
  8925                           postinc2	equ	0xFDE
  8926                           postdec2	equ	0xFDD
  8927                           fsr2h	equ	0xFDA
  8928                           fsr2l	equ	0xFD9
  8929                           status	equ	0xFD8
  8930                           
  8931 ;; *************** function _lcd_read_4bits *****************
  8932 ;; Defined at:
  8933 ;;		line 117 in file "source/../../vclib_lcd.h"
  8934 ;; Parameters:    Size  Location     Type
  8935 ;;		None
  8936 ;; Auto vars:     Size  Location     Type
  8937 ;;  n               1    1[BANK1 ] unsigned char 
  8938 ;; Return value:  Size  Location     Type
  8939 ;;                  1    wreg      unsigned char 
  8940 ;; Registers used:
  8941 ;;		wreg, status,2, status,0
  8942 ;; Tracked objects:
  8943 ;;		On entry : 0/0
  8944 ;;		On exit  : 0/0
  8945 ;;		Unchanged: 0/0
  8946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8947 ;;      Params:         0       0       0       0       0       0       0
  8948 ;;      Locals:         0       0       1       0       0       0       0
  8949 ;;      Temps:          0       0       1       0       0       0       0
  8950 ;;      Totals:         0       0       2       0       0       0       0
  8951 ;;Total ram usage:        2 bytes
  8952 ;; Hardware stack levels used:    1
  8953 ;; Hardware stack levels required when called:   12
  8954 ;; This function calls:
  8955 ;;		Nothing
  8956 ;; This function is called by:
  8957 ;;		_lcd_read_byte
  8958 ;; This function uses a non-reentrant model
  8959 ;;
  8960                           
  8961                           	psect	text29
  8962  006070                     __ptext29:
  8963                           	opt stack 0
  8964  006070                     _lcd_read_4bits:
  8965                           	opt stack 15
  8966                           
  8967                           ;vclib_lcd.h: 118: unsigned char n = 0x00;
  8968                           
  8969                           ; BSR set to: 1
  8970                           ;incstack = 0
  8971  006070  0E00               	movlw	0
  8972  006072  0101               	movlb	1	; () banked
  8973  006074  6F01               	movwf	lcd_read_4bits@n& (0+255),b
  8974                           
  8975                           ; BSR set to: 1
  8976                           ;vclib_lcd.h: 120: n |= PORTBbits.RB4;
  8977  006076  A881               	btfss	3969,4,c	;volatile
  8978  006078  D002               	goto	u12830
  8979  00607A  0E01               	movlw	1
  8980  00607C  D001               	goto	u12836
  8981  00607E                     u12830:
  8982  00607E  0E00               	movlw	0
  8983  006080                     u12836:
  8984  006080  0101               	movlb	1	; () banked
  8985  006082  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  8986                           
  8987                           ; BSR set to: 1
  8988                           ;vclib_lcd.h: 121: n |= PORTBbits.RB5 << 1;
  8989  006084  AA81               	btfss	3969,5,c	;volatile
  8990  006086  D004               	goto	u12840
  8991  006088  0101               	movlb	1	; () banked
  8992  00608A  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  8993  00608C  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  8994  00608E  D002               	goto	u12848
  8995  006090                     u12840:
  8996  006090  0101               	movlb	1	; () banked
  8997  006092  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  8998  006094                     u12848:
  8999  006094  0101               	movlb	1	; () banked
  9000  006096  90D8               	bcf	status,0,c
  9001  006098  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  9002  00609A  0101               	movlb	1	; () banked
  9003  00609C  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9004                           
  9005                           ; BSR set to: 1
  9006                           ;vclib_lcd.h: 122: n |= PORTBbits.RB6 << 2;
  9007  00609E  AC81               	btfss	3969,6,c	;volatile
  9008  0060A0  D004               	goto	u12850
  9009  0060A2  0101               	movlb	1	; () banked
  9010  0060A4  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9011  0060A6  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  9012  0060A8  D002               	goto	u12858
  9013  0060AA                     u12850:
  9014  0060AA  0101               	movlb	1	; () banked
  9015  0060AC  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9016  0060AE                     u12858:
  9017  0060AE  0101               	movlb	1	; () banked
  9018  0060B0  90D8               	bcf	status,0,c
  9019  0060B2  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  9020  0060B4  0101               	movlb	1	; () banked
  9021  0060B6  90D8               	bcf	status,0,c
  9022  0060B8  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  9023  0060BA  0101               	movlb	1	; () banked
  9024  0060BC  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9025                           
  9026                           ; BSR set to: 1
  9027                           ;vclib_lcd.h: 123: n |= PORTBbits.RB7 << 3;
  9028  0060BE  AE81               	btfss	3969,7,c	;volatile
  9029  0060C0  D004               	goto	u12860
  9030  0060C2  0101               	movlb	1	; () banked
  9031  0060C4  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9032  0060C6  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  9033  0060C8  D002               	goto	u12868
  9034  0060CA                     u12860:
  9035  0060CA  0101               	movlb	1	; () banked
  9036  0060CC  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9037  0060CE                     u12868:
  9038  0060CE  0101               	movlb	1	; () banked
  9039  0060D0  90D8               	bcf	status,0,c
  9040  0060D2  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  9041  0060D4  0101               	movlb	1	; () banked
  9042  0060D6  90D8               	bcf	status,0,c
  9043  0060D8  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  9044  0060DA  0101               	movlb	1	; () banked
  9045  0060DC  90D8               	bcf	status,0,c
  9046  0060DE  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  9047  0060E0  0101               	movlb	1	; () banked
  9048  0060E2  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9049                           
  9050                           ;vclib_lcd.h: 124: return (n);
  9051  0060E4  0101               	movlb	1	; () banked
  9052  0060E6  5101               	movf	lcd_read_4bits@n& (0+255),w,b
  9053  0060E8  0012               	return	
  9054  0060EA                     __end_of_lcd_read_4bits:
  9055                           	opt stack 0
  9056                           tblptru	equ	0xFF8
  9057                           tblptrh	equ	0xFF7
  9058                           tblptrl	equ	0xFF6
  9059                           tablat	equ	0xFF5
  9060                           prodh	equ	0xFF4
  9061                           prodl	equ	0xFF3
  9062                           intcon	equ	0xFF2
  9063                           postinc0	equ	0xFEE
  9064                           wreg	equ	0xFE8
  9065                           postdec1	equ	0xFE5
  9066                           fsr1l	equ	0xFE1
  9067                           indf2	equ	0xFDF
  9068                           postinc2	equ	0xFDE
  9069                           postdec2	equ	0xFDD
  9070                           fsr2h	equ	0xFDA
  9071                           fsr2l	equ	0xFD9
  9072                           status	equ	0xFD8
  9073                           
  9074 ;; *************** function _isdigit *****************
  9075 ;; Defined at:
  9076 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  9077 ;; Parameters:    Size  Location     Type
  9078 ;;  c               1    wreg     unsigned char 
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;  c               1    2[BANK1 ] unsigned char 
  9081 ;; Return value:  Size  Location     Type
  9082 ;;		None               void
  9083 ;; Registers used:
  9084 ;;		wreg, status,2, status,0
  9085 ;; Tracked objects:
  9086 ;;		On entry : 0/0
  9087 ;;		On exit  : 0/0
  9088 ;;		Unchanged: 0/0
  9089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9090 ;;      Params:         0       0       0       0       0       0       0
  9091 ;;      Locals:         0       0       2       0       0       0       0
  9092 ;;      Temps:          0       0       1       0       0       0       0
  9093 ;;      Totals:         0       0       3       0       0       0       0
  9094 ;;Total ram usage:        3 bytes
  9095 ;; Hardware stack levels used:    1
  9096 ;; Hardware stack levels required when called:   12
  9097 ;; This function calls:
  9098 ;;		Nothing
  9099 ;; This function is called by:
  9100 ;;		_printf
  9101 ;; This function uses a non-reentrant model
  9102 ;;
  9103                           
  9104                           	psect	text30
  9105  006A9E                     __ptext30:
  9106                           	opt stack 0
  9107  006A9E                     _isdigit:
  9108                           	opt stack 15
  9109                           
  9110                           ; BSR set to: 1
  9111                           ;incstack = 0
  9112                           ;isdigit@c stored from wreg
  9113  006A9E  0101               	movlb	1	; () banked
  9114  006AA0  6F02               	movwf	isdigit@c& (0+255),b
  9115  006AA2  0E00               	movlw	0
  9116  006AA4  0101               	movlb	1	; () banked
  9117  006AA6  6F01               	movwf	_isdigit$2496& (0+255),b
  9118                           
  9119                           ; BSR set to: 1
  9120  006AA8  0E3A               	movlw	58
  9121  006AAA  0101               	movlb	1	; () banked
  9122  006AAC  6102               	cpfslt	isdigit@c& (0+255),b
  9123  006AAE  D007               	goto	l9723
  9124                           
  9125                           ; BSR set to: 1
  9126  006AB0  0E2F               	movlw	47
  9127  006AB2  0101               	movlb	1	; () banked
  9128  006AB4  6502               	cpfsgt	isdigit@c& (0+255),b
  9129  006AB6  D003               	goto	l9723
  9130                           
  9131                           ; BSR set to: 1
  9132  006AB8  0E01               	movlw	1
  9133  006ABA  0101               	movlb	1	; () banked
  9134  006ABC  6F01               	movwf	_isdigit$2496& (0+255),b
  9135  006ABE                     l9723:
  9136                           
  9137                           ; BSR set to: 1
  9138  006ABE  C101  F100         	movff	_isdigit$2496,??_isdigit
  9139  006AC2  0101               	movlb	1	; () banked
  9140  006AC4  3100               	rrcf	??_isdigit& (0+255),w,b
  9141  006AC6  0012               	return	
  9142  006AC8                     __end_of_isdigit:
  9143                           	opt stack 0
  9144                           tblptru	equ	0xFF8
  9145                           tblptrh	equ	0xFF7
  9146                           tblptrl	equ	0xFF6
  9147                           tablat	equ	0xFF5
  9148                           prodh	equ	0xFF4
  9149                           prodl	equ	0xFF3
  9150                           intcon	equ	0xFF2
  9151                           postinc0	equ	0xFEE
  9152                           wreg	equ	0xFE8
  9153                           postdec1	equ	0xFE5
  9154                           fsr1l	equ	0xFE1
  9155                           indf2	equ	0xFDF
  9156                           postinc2	equ	0xFDE
  9157                           postdec2	equ	0xFDD
  9158                           fsr2h	equ	0xFDA
  9159                           fsr2l	equ	0xFD9
  9160                           status	equ	0xFD8
  9161                           
  9162 ;; *************** function _fround *****************
  9163 ;; Defined at:
  9164 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  9165 ;; Parameters:    Size  Location     Type
  9166 ;;  prec            1    wreg     unsigned char 
  9167 ;; Auto vars:     Size  Location     Type
  9168 ;;  prec            1   44[BANK1 ] unsigned char 
  9169 ;; Return value:  Size  Location     Type
  9170 ;;                  3   35[BANK1 ] unsigned char 
  9171 ;; Registers used:
  9172 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9173 ;; Tracked objects:
  9174 ;;		On entry : 0/0
  9175 ;;		On exit  : 0/0
  9176 ;;		Unchanged: 0/0
  9177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9178 ;;      Params:         0       0       3       0       0       0       0
  9179 ;;      Locals:         0       0       7       0       0       0       0
  9180 ;;      Temps:          0       0       0       0       0       0       0
  9181 ;;      Totals:         0       0      10       0       0       0       0
  9182 ;;Total ram usage:       10 bytes
  9183 ;; Hardware stack levels used:    1
  9184 ;; Hardware stack levels required when called:   14
  9185 ;; This function calls:
  9186 ;;		___awdiv
  9187 ;;		___awmod
  9188 ;;		___ftmul
  9189 ;;		___wmul
  9190 ;; This function is called by:
  9191 ;;		_printf
  9192 ;; This function uses a non-reentrant model
  9193 ;;
  9194                           
  9195                           	psect	text31
  9196  00224C                     __ptext31:
  9197                           	opt stack 0
  9198  00224C                     _fround:
  9199                           	opt stack 13
  9200                           
  9201                           ; BSR set to: 1
  9202                           ;incstack = 0
  9203                           ;fround@prec stored from wreg
  9204  00224C  0101               	movlb	1	; () banked
  9205  00224E  6F2C               	movwf	fround@prec& (0+255),b
  9206                           
  9207                           ;doprnt.c: 413: if(prec>=110)
  9208  002250  0E6D               	movlw	109
  9209  002252  0101               	movlb	1	; () banked
  9210  002254  652C               	cpfsgt	fround@prec& (0+255),b
  9211  002256  D0BA               	goto	l9665
  9212                           
  9213                           ; BSR set to: 1
  9214                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9215  002258  0E00               	movlw	0
  9216  00225A  0101               	movlb	1	; () banked
  9217  00225C  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9218  00225E  0E03               	movlw	3
  9219  002260  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9220  002262  0E00               	movlw	0
  9221  002264  0101               	movlb	1	; () banked
  9222  002266  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9223  002268  0E0A               	movlw	10
  9224  00226A  6F08               	movwf	___awdiv@divisor& (0+255),b
  9225  00226C  0E00               	movlw	0
  9226  00226E  0101               	movlb	1	; () banked
  9227  002270  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9228  002272  0E64               	movlw	100
  9229  002274  6F02               	movwf	___awmod@divisor& (0+255),b
  9230  002276  C12C  F100         	movff	fround@prec,___awmod@dividend
  9231  00227A  0101               	movlb	1	; () banked
  9232  00227C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9233  00227E  ECA5  F02B         	call	___awmod	;wreg free
  9234  002282  C100  F106         	movff	?___awmod,___awdiv@dividend
  9235  002286  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  9236  00228A  EC76  F028         	call	___awdiv	;wreg free
  9237  00228E  0E09               	movlw	9
  9238  002290  0101               	movlb	1	; () banked
  9239  002292  2506               	addwf	?___awdiv& (0+255),w,b
  9240  002294  0101               	movlb	1	; () banked
  9241  002296  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9242  002298  0E00               	movlw	0
  9243  00229A  0101               	movlb	1	; () banked
  9244  00229C  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9245  00229E  0101               	movlb	1	; () banked
  9246  0022A0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9247  0022A2  ECBD  F034         	call	___wmul	;wreg free
  9248  0022A6  0E5D               	movlw	low __npowers_
  9249  0022A8  0101               	movlb	1	; () banked
  9250  0022AA  250E               	addwf	?___wmul& (0+255),w,b
  9251  0022AC  6EF6               	movwf	tblptrl,c
  9252  0022AE  0E7D               	movlw	high __npowers_
  9253  0022B0  0101               	movlb	1	; () banked
  9254  0022B2  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9255  0022B4  6EF7               	movwf	tblptrh,c
  9256  0022B6                     	if	0	;There are less than 3 active tblptr bytes
  9257  0022B6                     	endif
  9258  0022B6  0009               	tblrd		*+
  9259  0022B8  CFF5 F117          	movff	tablat,___ftmul@f2
  9260  0022BC  0009               	tblrd		*+
  9261  0022BE  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9262  0022C2  000A               	tblrd		*-
  9263  0022C4  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9264  0022C8  0E00               	movlw	0
  9265  0022CA  0101               	movlb	1	; () banked
  9266  0022CC  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9267  0022CE  0E64               	movlw	100
  9268  0022D0  6F08               	movwf	___awdiv@divisor& (0+255),b
  9269  0022D2  C12C  F106         	movff	fround@prec,___awdiv@dividend
  9270  0022D6  0101               	movlb	1	; () banked
  9271  0022D8  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  9272  0022DA  EC76  F028         	call	___awdiv	;wreg free
  9273  0022DE  0E12               	movlw	18
  9274  0022E0  0101               	movlb	1	; () banked
  9275  0022E2  2506               	addwf	?___awdiv& (0+255),w,b
  9276  0022E4  0101               	movlb	1	; () banked
  9277  0022E6  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9278  0022E8  0E00               	movlw	0
  9279  0022EA  0101               	movlb	1	; () banked
  9280  0022EC  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9281  0022EE  0101               	movlb	1	; () banked
  9282  0022F0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9283  0022F2  0E00               	movlw	0
  9284  0022F4  0101               	movlb	1	; () banked
  9285  0022F6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9286  0022F8  0E03               	movlw	3
  9287  0022FA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9288  0022FC  ECBD  F034         	call	___wmul	;wreg free
  9289  002300  0E5D               	movlw	low __npowers_
  9290  002302  0101               	movlb	1	; () banked
  9291  002304  250E               	addwf	?___wmul& (0+255),w,b
  9292  002306  6EF6               	movwf	tblptrl,c
  9293  002308  0E7D               	movlw	high __npowers_
  9294  00230A  0101               	movlb	1	; () banked
  9295  00230C  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9296  00230E  6EF7               	movwf	tblptrh,c
  9297  002310                     	if	0	;There are less than 3 active tblptr bytes
  9298  002310                     	endif
  9299  002310  0009               	tblrd		*+
  9300  002312  CFF5 F114          	movff	tablat,___ftmul@f1
  9301  002316  0009               	tblrd		*+
  9302  002318  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9303  00231C  000A               	tblrd		*-
  9304  00231E  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9305  002322  ECF4  F019         	call	___ftmul	;wreg free
  9306  002326  C114  F129         	movff	?___ftmul,_fround$2992
  9307  00232A  C115  F12A         	movff	?___ftmul+1,_fround$2992+1
  9308  00232E  C116  F12B         	movff	?___ftmul+2,_fround$2992+2
  9309                           
  9310                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9311  002332  0E00               	movlw	0
  9312  002334  0101               	movlb	1	; () banked
  9313  002336  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9314  002338  0E03               	movlw	3
  9315  00233A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9316  00233C  0E00               	movlw	0
  9317  00233E  0101               	movlb	1	; () banked
  9318  002340  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9319  002342  0E0A               	movlw	10
  9320  002344  6F02               	movwf	___awmod@divisor& (0+255),b
  9321  002346  C12C  F100         	movff	fround@prec,___awmod@dividend
  9322  00234A  0101               	movlb	1	; () banked
  9323  00234C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9324  00234E  ECA5  F02B         	call	___awmod	;wreg free
  9325  002352  C100  F10E         	movff	?___awmod,___wmul@multiplier
  9326  002356  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  9327  00235A  ECBD  F034         	call	___wmul	;wreg free
  9328  00235E  0E5D               	movlw	low __npowers_
  9329  002360  0101               	movlb	1	; () banked
  9330  002362  250E               	addwf	?___wmul& (0+255),w,b
  9331  002364  6EF6               	movwf	tblptrl,c
  9332  002366  0E7D               	movlw	high __npowers_
  9333  002368  0101               	movlb	1	; () banked
  9334  00236A  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9335  00236C  6EF7               	movwf	tblptrh,c
  9336  00236E                     	if	0	;There are less than 3 active tblptr bytes
  9337  00236E                     	endif
  9338  00236E  0009               	tblrd		*+
  9339  002370  CFF5 F117          	movff	tablat,___ftmul@f2
  9340  002374  0009               	tblrd		*+
  9341  002376  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9342  00237A  000A               	tblrd		*-
  9343  00237C  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9344  002380  C129  F114         	movff	_fround$2992,___ftmul@f1
  9345  002384  C12A  F115         	movff	_fround$2992+1,___ftmul@f1+1
  9346  002388  C12B  F116         	movff	_fround$2992+2,___ftmul@f1+2
  9347  00238C  ECF4  F019         	call	___ftmul	;wreg free
  9348  002390  C114  F126         	movff	?___ftmul,_fround$2993
  9349  002394  C115  F127         	movff	?___ftmul+1,_fround$2993+1
  9350  002398  C116  F128         	movff	?___ftmul+2,_fround$2993+2
  9351                           
  9352                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9353  00239C  C126  F114         	movff	_fround$2993,___ftmul@f1
  9354  0023A0  C127  F115         	movff	_fround$2993+1,___ftmul@f1+1
  9355  0023A4  C128  F116         	movff	_fround$2993+2,___ftmul@f1+2
  9356  0023A8  0E00               	movlw	0
  9357  0023AA  0101               	movlb	1	; () banked
  9358  0023AC  6F17               	movwf	___ftmul@f2& (0+255),b
  9359  0023AE  0E00               	movlw	0
  9360  0023B0  0101               	movlb	1	; () banked
  9361  0023B2  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9362  0023B4  0E3F               	movlw	63
  9363  0023B6  0101               	movlb	1	; () banked
  9364  0023B8  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9365  0023BA  ECF4  F019         	call	___ftmul	;wreg free
  9366  0023BE  C114  F123         	movff	?___ftmul,?_fround
  9367  0023C2  C115  F124         	movff	?___ftmul+1,?_fround+1
  9368  0023C6  C116  F125         	movff	?___ftmul+2,?_fround+2
  9369  0023CA  0012               	return	
  9370  0023CC                     l9665:
  9371                           
  9372                           ;doprnt.c: 415: else if(prec > 10)
  9373  0023CC  0E0A               	movlw	10
  9374  0023CE  0101               	movlb	1	; () banked
  9375  0023D0  652C               	cpfsgt	fround@prec& (0+255),b
  9376  0023D2  D06E               	goto	l9673
  9377                           
  9378                           ; BSR set to: 1
  9379                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9380  0023D4  0E00               	movlw	0
  9381  0023D6  0101               	movlb	1	; () banked
  9382  0023D8  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9383  0023DA  0E03               	movlw	3
  9384  0023DC  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9385  0023DE  0E00               	movlw	0
  9386  0023E0  0101               	movlb	1	; () banked
  9387  0023E2  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9388  0023E4  0E0A               	movlw	10
  9389  0023E6  6F02               	movwf	___awmod@divisor& (0+255),b
  9390  0023E8  C12C  F100         	movff	fround@prec,___awmod@dividend
  9391  0023EC  0101               	movlb	1	; () banked
  9392  0023EE  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9393  0023F0  ECA5  F02B         	call	___awmod	;wreg free
  9394  0023F4  C100  F10E         	movff	?___awmod,___wmul@multiplier
  9395  0023F8  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  9396  0023FC  ECBD  F034         	call	___wmul	;wreg free
  9397  002400  0E5D               	movlw	low __npowers_
  9398  002402  0101               	movlb	1	; () banked
  9399  002404  250E               	addwf	?___wmul& (0+255),w,b
  9400  002406  6EF6               	movwf	tblptrl,c
  9401  002408  0E7D               	movlw	high __npowers_
  9402  00240A  0101               	movlb	1	; () banked
  9403  00240C  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9404  00240E  6EF7               	movwf	tblptrh,c
  9405  002410                     	if	0	;There are less than 3 active tblptr bytes
  9406  002410                     	endif
  9407  002410  0009               	tblrd		*+
  9408  002412  CFF5 F117          	movff	tablat,___ftmul@f2
  9409  002416  0009               	tblrd		*+
  9410  002418  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9411  00241C  000A               	tblrd		*-
  9412  00241E  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9413  002422  0E00               	movlw	0
  9414  002424  0101               	movlb	1	; () banked
  9415  002426  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9416  002428  0E0A               	movlw	10
  9417  00242A  6F08               	movwf	___awdiv@divisor& (0+255),b
  9418  00242C  C12C  F106         	movff	fround@prec,___awdiv@dividend
  9419  002430  0101               	movlb	1	; () banked
  9420  002432  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  9421  002434  EC76  F028         	call	___awdiv	;wreg free
  9422  002438  0E09               	movlw	9
  9423  00243A  0101               	movlb	1	; () banked
  9424  00243C  2506               	addwf	?___awdiv& (0+255),w,b
  9425  00243E  0101               	movlb	1	; () banked
  9426  002440  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9427  002442  0E00               	movlw	0
  9428  002444  0101               	movlb	1	; () banked
  9429  002446  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9430  002448  0101               	movlb	1	; () banked
  9431  00244A  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9432  00244C  0E00               	movlw	0
  9433  00244E  0101               	movlb	1	; () banked
  9434  002450  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9435  002452  0E03               	movlw	3
  9436  002454  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9437  002456  ECBD  F034         	call	___wmul	;wreg free
  9438  00245A  0E5D               	movlw	low __npowers_
  9439  00245C  0101               	movlb	1	; () banked
  9440  00245E  250E               	addwf	?___wmul& (0+255),w,b
  9441  002460  6EF6               	movwf	tblptrl,c
  9442  002462  0E7D               	movlw	high __npowers_
  9443  002464  0101               	movlb	1	; () banked
  9444  002466  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9445  002468  6EF7               	movwf	tblptrh,c
  9446  00246A                     	if	0	;There are less than 3 active tblptr bytes
  9447  00246A                     	endif
  9448  00246A  0009               	tblrd		*+
  9449  00246C  CFF5 F114          	movff	tablat,___ftmul@f1
  9450  002470  0009               	tblrd		*+
  9451  002472  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9452  002476  000A               	tblrd		*-
  9453  002478  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9454  00247C  ECF4  F019         	call	___ftmul	;wreg free
  9455  002480  C114  F129         	movff	?___ftmul,_fround$2992
  9456  002484  C115  F12A         	movff	?___ftmul+1,_fround$2992+1
  9457  002488  C116  F12B         	movff	?___ftmul+2,_fround$2992+2
  9458                           
  9459                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9460  00248C  C129  F114         	movff	_fround$2992,___ftmul@f1
  9461  002490  C12A  F115         	movff	_fround$2992+1,___ftmul@f1+1
  9462  002494  C12B  F116         	movff	_fround$2992+2,___ftmul@f1+2
  9463  002498  0E00               	movlw	0
  9464  00249A  0101               	movlb	1	; () banked
  9465  00249C  6F17               	movwf	___ftmul@f2& (0+255),b
  9466  00249E  0E00               	movlw	0
  9467  0024A0  0101               	movlb	1	; () banked
  9468  0024A2  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9469  0024A4  0E3F               	movlw	63
  9470  0024A6  0101               	movlb	1	; () banked
  9471  0024A8  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9472  0024AA  ECF4  F019         	call	___ftmul	;wreg free
  9473  0024AE  D787               	goto	L5
  9474  0024B0                     l9673:
  9475                           
  9476                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9477  0024B0  0101               	movlb	1	; () banked
  9478  0024B2  512C               	movf	fround@prec& (0+255),w,b
  9479  0024B4  0D03               	mullw	3
  9480  0024B6  0E5D               	movlw	low __npowers_
  9481  0024B8  24F3               	addwf	prodl,w,c
  9482  0024BA  6EF6               	movwf	tblptrl,c
  9483  0024BC  0E7D               	movlw	high __npowers_
  9484  0024BE  20F4               	addwfc	prodh,w,c
  9485  0024C0  6EF7               	movwf	tblptrh,c
  9486  0024C2                     	if	0	;There are less than 3 active tblptr bytes
  9487  0024C2                     	endif
  9488  0024C2  0009               	tblrd		*+
  9489  0024C4  CFF5 F114          	movff	tablat,___ftmul@f1
  9490  0024C8  0009               	tblrd		*+
  9491  0024CA  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9492  0024CE  000A               	tblrd		*-
  9493  0024D0  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9494  0024D4  0E00               	movlw	0
  9495  0024D6  0101               	movlb	1	; () banked
  9496  0024D8  6F17               	movwf	___ftmul@f2& (0+255),b
  9497  0024DA  0E00               	movlw	0
  9498  0024DC  0101               	movlb	1	; () banked
  9499  0024DE  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9500  0024E0  0E3F               	movlw	63
  9501  0024E2  0101               	movlb	1	; () banked
  9502  0024E4  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9503  0024E6  ECF4  F019         	call	___ftmul	;wreg free
  9504  0024EA  C114  F123         	movff	?___ftmul,?_fround
  9505  0024EE  C115  F124         	movff	?___ftmul+1,?_fround+1
  9506  0024F2  C116  F125         	movff	?___ftmul+2,?_fround+2
  9507  0024F6  0012               	return	
  9508  0024F8                     __end_of_fround:
  9509                           	opt stack 0
  9510                           tblptru	equ	0xFF8
  9511                           tblptrh	equ	0xFF7
  9512                           tblptrl	equ	0xFF6
  9513                           tablat	equ	0xFF5
  9514                           prodh	equ	0xFF4
  9515                           prodl	equ	0xFF3
  9516                           intcon	equ	0xFF2
  9517                           postinc0	equ	0xFEE
  9518                           wreg	equ	0xFE8
  9519                           postdec1	equ	0xFE5
  9520                           fsr1l	equ	0xFE1
  9521                           indf2	equ	0xFDF
  9522                           postinc2	equ	0xFDE
  9523                           postdec2	equ	0xFDD
  9524                           fsr2h	equ	0xFDA
  9525                           fsr2l	equ	0xFD9
  9526                           status	equ	0xFD8
  9527                           
  9528 ;; *************** function ___wmul *****************
  9529 ;; Defined at:
  9530 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  9531 ;; Parameters:    Size  Location     Type
  9532 ;;  multiplier      2   14[BANK1 ] unsigned int 
  9533 ;;  multiplicand    2   16[BANK1 ] unsigned int 
  9534 ;; Auto vars:     Size  Location     Type
  9535 ;;  product         2   18[BANK1 ] unsigned int 
  9536 ;; Return value:  Size  Location     Type
  9537 ;;                  2   14[BANK1 ] unsigned int 
  9538 ;; Registers used:
  9539 ;;		wreg, status,2, status,0, prodl, prodh
  9540 ;; Tracked objects:
  9541 ;;		On entry : 0/0
  9542 ;;		On exit  : 0/0
  9543 ;;		Unchanged: 0/0
  9544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9545 ;;      Params:         0       0       4       0       0       0       0
  9546 ;;      Locals:         0       0       2       0       0       0       0
  9547 ;;      Temps:          0       0       0       0       0       0       0
  9548 ;;      Totals:         0       0       6       0       0       0       0
  9549 ;;Total ram usage:        6 bytes
  9550 ;; Hardware stack levels used:    1
  9551 ;; Hardware stack levels required when called:   12
  9552 ;; This function calls:
  9553 ;;		Nothing
  9554 ;; This function is called by:
  9555 ;;		_fround
  9556 ;;		_scale
  9557 ;;		_printf
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           	psect	text32
  9562  00697A                     __ptext32:
  9563                           	opt stack 0
  9564  00697A                     ___wmul:
  9565                           	opt stack 14
  9566                           
  9567                           ;incstack = 0
  9568  00697A  0101               	movlb	1	; () banked
  9569  00697C  510E               	movf	___wmul@multiplier& (0+255),w,b
  9570  00697E  0101               	movlb	1	; () banked
  9571  006980  0310               	mulwf	___wmul@multiplicand& (0+255),b
  9572  006982  CFF3 F112          	movff	prodl,___wmul@product
  9573  006986  CFF4 F113          	movff	prodh,___wmul@product+1
  9574  00698A  0101               	movlb	1	; () banked
  9575  00698C  510E               	movf	___wmul@multiplier& (0+255),w,b
  9576  00698E  0101               	movlb	1	; () banked
  9577  006990  0311               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9578  006992  50F3               	movf	prodl,w,c
  9579  006994  0101               	movlb	1	; () banked
  9580  006996  2713               	addwf	(___wmul@product+1)& (0+255),f,b
  9581  006998  0101               	movlb	1	; () banked
  9582  00699A  510F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9583  00699C  0101               	movlb	1	; () banked
  9584  00699E  0310               	mulwf	___wmul@multiplicand& (0+255),b
  9585  0069A0  50F3               	movf	prodl,w,c
  9586  0069A2  0101               	movlb	1	; () banked
  9587  0069A4  2713               	addwf	(___wmul@product+1)& (0+255),f,b
  9588                           
  9589                           ; BSR set to: 1
  9590  0069A6  C112  F10E         	movff	___wmul@product,?___wmul
  9591  0069AA  C113  F10F         	movff	___wmul@product+1,?___wmul+1
  9592  0069AE  0012               	return	
  9593  0069B0                     __end_of___wmul:
  9594                           	opt stack 0
  9595                           tblptru	equ	0xFF8
  9596                           tblptrh	equ	0xFF7
  9597                           tblptrl	equ	0xFF6
  9598                           tablat	equ	0xFF5
  9599                           prodh	equ	0xFF4
  9600                           prodl	equ	0xFF3
  9601                           intcon	equ	0xFF2
  9602                           postinc0	equ	0xFEE
  9603                           wreg	equ	0xFE8
  9604                           postdec1	equ	0xFE5
  9605                           fsr1l	equ	0xFE1
  9606                           indf2	equ	0xFDF
  9607                           postinc2	equ	0xFDE
  9608                           postdec2	equ	0xFDD
  9609                           fsr2h	equ	0xFDA
  9610                           fsr2l	equ	0xFD9
  9611                           status	equ	0xFD8
  9612                           
  9613 ;; *************** function ___awmod *****************
  9614 ;; Defined at:
  9615 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  9616 ;; Parameters:    Size  Location     Type
  9617 ;;  dividend        2    0[BANK1 ] int 
  9618 ;;  divisor         2    2[BANK1 ] int 
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;  sign            1    5[BANK1 ] unsigned char 
  9621 ;;  counter         1    4[BANK1 ] unsigned char 
  9622 ;; Return value:  Size  Location     Type
  9623 ;;                  2    0[BANK1 ] int 
  9624 ;; Registers used:
  9625 ;;		wreg, status,2, status,0
  9626 ;; Tracked objects:
  9627 ;;		On entry : 0/0
  9628 ;;		On exit  : 0/0
  9629 ;;		Unchanged: 0/0
  9630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9631 ;;      Params:         0       0       4       0       0       0       0
  9632 ;;      Locals:         0       0       2       0       0       0       0
  9633 ;;      Temps:          0       0       0       0       0       0       0
  9634 ;;      Totals:         0       0       6       0       0       0       0
  9635 ;;Total ram usage:        6 bytes
  9636 ;; Hardware stack levels used:    1
  9637 ;; Hardware stack levels required when called:   12
  9638 ;; This function calls:
  9639 ;;		Nothing
  9640 ;; This function is called by:
  9641 ;;		_fround
  9642 ;;		_scale
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           	psect	text33
  9647  00574A                     __ptext33:
  9648                           	opt stack 0
  9649  00574A                     ___awmod:
  9650                           	opt stack 14
  9651                           
  9652                           ; BSR set to: 1
  9653                           ;incstack = 0
  9654  00574A  0E00               	movlw	0
  9655  00574C  0101               	movlb	1	; () banked
  9656  00574E  6F05               	movwf	___awmod@sign& (0+255),b
  9657                           
  9658                           ; BSR set to: 1
  9659  005750  0101               	movlb	1	; () banked
  9660  005752  AF01               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9661  005754  D008               	goto	l9515
  9662                           
  9663                           ; BSR set to: 1
  9664  005756  0101               	movlb	1	; () banked
  9665  005758  6D00               	negf	___awmod@dividend& (0+255),b
  9666  00575A  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
  9667  00575C  B0D8               	btfsc	status,0,c
  9668  00575E  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
  9669                           
  9670                           ; BSR set to: 1
  9671  005760  0E01               	movlw	1
  9672  005762  0101               	movlb	1	; () banked
  9673  005764  6F05               	movwf	___awmod@sign& (0+255),b
  9674  005766                     l9515:
  9675                           
  9676                           ; BSR set to: 1
  9677  005766  0101               	movlb	1	; () banked
  9678  005768  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9679  00576A  D005               	goto	l9519
  9680                           
  9681                           ; BSR set to: 1
  9682  00576C  0101               	movlb	1	; () banked
  9683  00576E  6D02               	negf	___awmod@divisor& (0+255),b
  9684  005770  1F03               	comf	(___awmod@divisor+1)& (0+255),f,b
  9685  005772  B0D8               	btfsc	status,0,c
  9686  005774  2B03               	incf	(___awmod@divisor+1)& (0+255),f,b
  9687  005776                     l9519:
  9688                           
  9689                           ; BSR set to: 1
  9690  005776  0101               	movlb	1	; () banked
  9691  005778  5102               	movf	___awmod@divisor& (0+255),w,b
  9692  00577A  0101               	movlb	1	; () banked
  9693  00577C  1103               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9694  00577E  B4D8               	btfsc	status,2,c
  9695  005780  D026               	goto	l9535
  9696                           
  9697                           ; BSR set to: 1
  9698  005782  0E01               	movlw	1
  9699  005784  0101               	movlb	1	; () banked
  9700  005786  6F04               	movwf	___awmod@counter& (0+255),b
  9701  005788  D006               	goto	l9525
  9702  00578A                     l9523:
  9703                           
  9704                           ; BSR set to: 1
  9705  00578A  0101               	movlb	1	; () banked
  9706  00578C  90D8               	bcf	status,0,c
  9707  00578E  3702               	rlcf	___awmod@divisor& (0+255),f,b
  9708  005790  3703               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9709  005792  0101               	movlb	1	; () banked
  9710  005794  2B04               	incf	___awmod@counter& (0+255),f,b
  9711  005796                     l9525:
  9712                           
  9713                           ; BSR set to: 1
  9714  005796  0101               	movlb	1	; () banked
  9715  005798  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9716  00579A  D7F7               	goto	l9523
  9717  00579C                     l9527:
  9718                           
  9719                           ; BSR set to: 1
  9720  00579C  0101               	movlb	1	; () banked
  9721  00579E  5102               	movf	___awmod@divisor& (0+255),w,b
  9722  0057A0  0101               	movlb	1	; () banked
  9723  0057A2  5D00               	subwf	___awmod@dividend& (0+255),w,b
  9724  0057A4  0101               	movlb	1	; () banked
  9725  0057A6  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
  9726  0057A8  0101               	movlb	1	; () banked
  9727  0057AA  5901               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9728  0057AC  A0D8               	btfss	status,0,c
  9729  0057AE  D008               	goto	l9531
  9730                           
  9731                           ; BSR set to: 1
  9732  0057B0  0101               	movlb	1	; () banked
  9733  0057B2  5102               	movf	___awmod@divisor& (0+255),w,b
  9734  0057B4  0101               	movlb	1	; () banked
  9735  0057B6  5F00               	subwf	___awmod@dividend& (0+255),f,b
  9736  0057B8  0101               	movlb	1	; () banked
  9737  0057BA  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
  9738  0057BC  0101               	movlb	1	; () banked
  9739  0057BE  5B01               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9740  0057C0                     l9531:
  9741                           
  9742                           ; BSR set to: 1
  9743  0057C0  0101               	movlb	1	; () banked
  9744  0057C2  90D8               	bcf	status,0,c
  9745  0057C4  3303               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9746  0057C6  3302               	rrcf	___awmod@divisor& (0+255),f,b
  9747                           
  9748                           ; BSR set to: 1
  9749  0057C8  0101               	movlb	1	; () banked
  9750  0057CA  2F04               	decfsz	___awmod@counter& (0+255),f,b
  9751  0057CC  D7E7               	goto	l9527
  9752  0057CE                     l9535:
  9753                           
  9754                           ; BSR set to: 1
  9755  0057CE  0101               	movlb	1	; () banked
  9756  0057D0  5105               	movf	___awmod@sign& (0+255),w,b
  9757  0057D2  0101               	movlb	1	; () banked
  9758  0057D4  B4D8               	btfsc	status,2,c
  9759  0057D6  D005               	goto	l9539
  9760                           
  9761                           ; BSR set to: 1
  9762  0057D8  0101               	movlb	1	; () banked
  9763  0057DA  6D00               	negf	___awmod@dividend& (0+255),b
  9764  0057DC  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
  9765  0057DE  B0D8               	btfsc	status,0,c
  9766  0057E0  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
  9767  0057E2                     l9539:
  9768                           
  9769                           ; BSR set to: 1
  9770  0057E2  C100  F100         	movff	___awmod@dividend,?___awmod
  9771  0057E6  C101  F101         	movff	___awmod@dividend+1,?___awmod+1
  9772  0057EA  0012               	return	
  9773  0057EC                     __end_of___awmod:
  9774                           	opt stack 0
  9775                           tblptru	equ	0xFF8
  9776                           tblptrh	equ	0xFF7
  9777                           tblptrl	equ	0xFF6
  9778                           tablat	equ	0xFF5
  9779                           prodh	equ	0xFF4
  9780                           prodl	equ	0xFF3
  9781                           intcon	equ	0xFF2
  9782                           postinc0	equ	0xFEE
  9783                           wreg	equ	0xFE8
  9784                           postdec1	equ	0xFE5
  9785                           fsr1l	equ	0xFE1
  9786                           indf2	equ	0xFDF
  9787                           postinc2	equ	0xFDE
  9788                           postdec2	equ	0xFDD
  9789                           fsr2h	equ	0xFDA
  9790                           fsr2l	equ	0xFD9
  9791                           status	equ	0xFD8
  9792                           
  9793 ;; *************** function ___awdiv *****************
  9794 ;; Defined at:
  9795 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  9796 ;; Parameters:    Size  Location     Type
  9797 ;;  dividend        2    6[BANK1 ] int 
  9798 ;;  divisor         2    8[BANK1 ] int 
  9799 ;; Auto vars:     Size  Location     Type
  9800 ;;  quotient        2   12[BANK1 ] int 
  9801 ;;  sign            1   11[BANK1 ] unsigned char 
  9802 ;;  counter         1   10[BANK1 ] unsigned char 
  9803 ;; Return value:  Size  Location     Type
  9804 ;;                  2    6[BANK1 ] int 
  9805 ;; Registers used:
  9806 ;;		wreg, status,2, status,0
  9807 ;; Tracked objects:
  9808 ;;		On entry : 0/0
  9809 ;;		On exit  : 0/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9812 ;;      Params:         0       0       4       0       0       0       0
  9813 ;;      Locals:         0       0       4       0       0       0       0
  9814 ;;      Temps:          0       0       0       0       0       0       0
  9815 ;;      Totals:         0       0       8       0       0       0       0
  9816 ;;Total ram usage:        8 bytes
  9817 ;; Hardware stack levels used:    1
  9818 ;; Hardware stack levels required when called:   12
  9819 ;; This function calls:
  9820 ;;		Nothing
  9821 ;; This function is called by:
  9822 ;;		_fround
  9823 ;;		_scale
  9824 ;;		_printf
  9825 ;; This function uses a non-reentrant model
  9826 ;;
  9827                           
  9828                           	psect	text34
  9829  0050EC                     __ptext34:
  9830                           	opt stack 0
  9831  0050EC                     ___awdiv:
  9832                           	opt stack 14
  9833                           
  9834                           ; BSR set to: 1
  9835                           ;incstack = 0
  9836  0050EC  0E00               	movlw	0
  9837  0050EE  0101               	movlb	1	; () banked
  9838  0050F0  6F0B               	movwf	___awdiv@sign& (0+255),b
  9839                           
  9840                           ; BSR set to: 1
  9841  0050F2  0101               	movlb	1	; () banked
  9842  0050F4  AF09               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9843  0050F6  D008               	goto	l9471
  9844                           
  9845                           ; BSR set to: 1
  9846  0050F8  0101               	movlb	1	; () banked
  9847  0050FA  6D08               	negf	___awdiv@divisor& (0+255),b
  9848  0050FC  1F09               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9849  0050FE  B0D8               	btfsc	status,0,c
  9850  005100  2B09               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9851                           
  9852                           ; BSR set to: 1
  9853  005102  0E01               	movlw	1
  9854  005104  0101               	movlb	1	; () banked
  9855  005106  6F0B               	movwf	___awdiv@sign& (0+255),b
  9856  005108                     l9471:
  9857                           
  9858                           ; BSR set to: 1
  9859  005108  0101               	movlb	1	; () banked
  9860  00510A  AF07               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9861  00510C  D008               	goto	l9477
  9862                           
  9863                           ; BSR set to: 1
  9864  00510E  0101               	movlb	1	; () banked
  9865  005110  6D06               	negf	___awdiv@dividend& (0+255),b
  9866  005112  1F07               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9867  005114  B0D8               	btfsc	status,0,c
  9868  005116  2B07               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9869                           
  9870                           ; BSR set to: 1
  9871  005118  0E01               	movlw	1
  9872  00511A  0101               	movlb	1	; () banked
  9873  00511C  1B0B               	xorwf	___awdiv@sign& (0+255),f,b
  9874  00511E                     l9477:
  9875                           
  9876                           ; BSR set to: 1
  9877  00511E  0E00               	movlw	0
  9878  005120  0101               	movlb	1	; () banked
  9879  005122  6F0D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9880  005124  0E00               	movlw	0
  9881  005126  6F0C               	movwf	___awdiv@quotient& (0+255),b
  9882                           
  9883                           ; BSR set to: 1
  9884  005128  0101               	movlb	1	; () banked
  9885  00512A  5108               	movf	___awdiv@divisor& (0+255),w,b
  9886  00512C  0101               	movlb	1	; () banked
  9887  00512E  1109               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9888  005130  B4D8               	btfsc	status,2,c
  9889  005132  D02C               	goto	l9499
  9890                           
  9891                           ; BSR set to: 1
  9892  005134  0E01               	movlw	1
  9893  005136  0101               	movlb	1	; () banked
  9894  005138  6F0A               	movwf	___awdiv@counter& (0+255),b
  9895  00513A  D006               	goto	l9485
  9896  00513C                     l9483:
  9897                           
  9898                           ; BSR set to: 1
  9899  00513C  0101               	movlb	1	; () banked
  9900  00513E  90D8               	bcf	status,0,c
  9901  005140  3708               	rlcf	___awdiv@divisor& (0+255),f,b
  9902  005142  3709               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9903  005144  0101               	movlb	1	; () banked
  9904  005146  2B0A               	incf	___awdiv@counter& (0+255),f,b
  9905  005148                     l9485:
  9906                           
  9907                           ; BSR set to: 1
  9908  005148  0101               	movlb	1	; () banked
  9909  00514A  AF09               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9910  00514C  D7F7               	goto	l9483
  9911  00514E                     l9487:
  9912                           
  9913                           ; BSR set to: 1
  9914  00514E  0101               	movlb	1	; () banked
  9915  005150  90D8               	bcf	status,0,c
  9916  005152  370C               	rlcf	___awdiv@quotient& (0+255),f,b
  9917  005154  370D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9918                           
  9919                           ; BSR set to: 1
  9920  005156  0101               	movlb	1	; () banked
  9921  005158  5108               	movf	___awdiv@divisor& (0+255),w,b
  9922  00515A  0101               	movlb	1	; () banked
  9923  00515C  5D06               	subwf	___awdiv@dividend& (0+255),w,b
  9924  00515E  0101               	movlb	1	; () banked
  9925  005160  5109               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9926  005162  0101               	movlb	1	; () banked
  9927  005164  5907               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9928  005166  A0D8               	btfss	status,0,c
  9929  005168  D00A               	goto	l9495
  9930                           
  9931                           ; BSR set to: 1
  9932  00516A  0101               	movlb	1	; () banked
  9933  00516C  5108               	movf	___awdiv@divisor& (0+255),w,b
  9934  00516E  0101               	movlb	1	; () banked
  9935  005170  5F06               	subwf	___awdiv@dividend& (0+255),f,b
  9936  005172  0101               	movlb	1	; () banked
  9937  005174  5109               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9938  005176  0101               	movlb	1	; () banked
  9939  005178  5B07               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9940                           
  9941                           ; BSR set to: 1
  9942  00517A  0101               	movlb	1	; () banked
  9943  00517C  810C               	bsf	___awdiv@quotient& (0+255),0,b
  9944  00517E                     l9495:
  9945                           
  9946                           ; BSR set to: 1
  9947  00517E  0101               	movlb	1	; () banked
  9948  005180  90D8               	bcf	status,0,c
  9949  005182  3309               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9950  005184  3308               	rrcf	___awdiv@divisor& (0+255),f,b
  9951                           
  9952                           ; BSR set to: 1
  9953  005186  0101               	movlb	1	; () banked
  9954  005188  2F0A               	decfsz	___awdiv@counter& (0+255),f,b
  9955  00518A  D7E1               	goto	l9487
  9956  00518C                     l9499:
  9957                           
  9958                           ; BSR set to: 1
  9959  00518C  0101               	movlb	1	; () banked
  9960  00518E  510B               	movf	___awdiv@sign& (0+255),w,b
  9961  005190  0101               	movlb	1	; () banked
  9962  005192  B4D8               	btfsc	status,2,c
  9963  005194  D005               	goto	l9503
  9964                           
  9965                           ; BSR set to: 1
  9966  005196  0101               	movlb	1	; () banked
  9967  005198  6D0C               	negf	___awdiv@quotient& (0+255),b
  9968  00519A  1F0D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9969  00519C  B0D8               	btfsc	status,0,c
  9970  00519E  2B0D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9971  0051A0                     l9503:
  9972                           
  9973                           ; BSR set to: 1
  9974  0051A0  C10C  F106         	movff	___awdiv@quotient,?___awdiv
  9975  0051A4  C10D  F107         	movff	___awdiv@quotient+1,?___awdiv+1
  9976  0051A8  0012               	return	
  9977  0051AA                     __end_of___awdiv:
  9978                           	opt stack 0
  9979                           tblptru	equ	0xFF8
  9980                           tblptrh	equ	0xFF7
  9981                           tblptrl	equ	0xFF6
  9982                           tablat	equ	0xFF5
  9983                           prodh	equ	0xFF4
  9984                           prodl	equ	0xFF3
  9985                           intcon	equ	0xFF2
  9986                           postinc0	equ	0xFEE
  9987                           wreg	equ	0xFE8
  9988                           postdec1	equ	0xFE5
  9989                           fsr1l	equ	0xFE1
  9990                           indf2	equ	0xFDF
  9991                           postinc2	equ	0xFDE
  9992                           postdec2	equ	0xFDD
  9993                           fsr2h	equ	0xFDA
  9994                           fsr2l	equ	0xFD9
  9995                           status	equ	0xFD8
  9996                           
  9997 ;; *************** function __tdiv_to_l_ *****************
  9998 ;; Defined at:
  9999 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdivl.c"
 10000 ;; Parameters:    Size  Location     Type
 10001 ;;  f1              3    0[BANK1 ] float 
 10002 ;;  f2              3    3[BANK1 ] float 
 10003 ;; Auto vars:     Size  Location     Type
 10004 ;;  quot            4    9[BANK1 ] unsigned long 
 10005 ;;  exp1            1   14[BANK1 ] unsigned char 
 10006 ;;  cntr            1   13[BANK1 ] unsigned char 
 10007 ;; Return value:  Size  Location     Type
 10008 ;;                  4    0[BANK1 ] unsigned long 
 10009 ;; Registers used:
 10010 ;;		wreg, status,2, status,0
 10011 ;; Tracked objects:
 10012 ;;		On entry : 0/0
 10013 ;;		On exit  : 0/0
 10014 ;;		Unchanged: 0/0
 10015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10016 ;;      Params:         0       0       6       0       0       0       0
 10017 ;;      Locals:         0       0       6       0       0       0       0
 10018 ;;      Temps:          0       0       3       0       0       0       0
 10019 ;;      Totals:         0       0      15       0       0       0       0
 10020 ;;Total ram usage:       15 bytes
 10021 ;; Hardware stack levels used:    1
 10022 ;; Hardware stack levels required when called:   12
 10023 ;; This function calls:
 10024 ;;		Nothing
 10025 ;; This function is called by:
 10026 ;;		_printf
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           	psect	text35
 10031  002F2C                     __ptext35:
 10032                           	opt stack 0
 10033  002F2C                     __tdiv_to_l_:
 10034                           	opt stack 15
 10035                           
 10036                           ; BSR set to: 1
 10037                           ;incstack = 0
 10038  002F2C  C102  F106         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 10039  002F30  0101               	movlb	1	; () banked
 10040  002F32  6B07               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 10041  002F34  6B08               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 10042  002F36  0101               	movlb	1	; () banked
 10043  002F38  3501               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
 10044  002F3A  0101               	movlb	1	; () banked
 10045  002F3C  3706               	rlcf	??__tdiv_to_l_& (0+255),f,b
 10046  002F3E  E301               	bnc	u13791
 10047  002F40  8107               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 10048  002F42                     u13791:
 10049  002F42  0101               	movlb	1	; () banked
 10050  002F44  5106               	movf	??__tdiv_to_l_& (0+255),w,b
 10051  002F46  0101               	movlb	1	; () banked
 10052  002F48  6F0E               	movwf	__tdiv_to_l_@exp1& (0+255),b
 10053  002F4A  0101               	movlb	1	; () banked
 10054  002F4C  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10055  002F4E  A4D8               	btfss	status,2,c
 10056  002F50  D00A               	goto	l9733
 10057                           
 10058                           ; BSR set to: 1
 10059  002F52  0E00               	movlw	0
 10060  002F54  0101               	movlb	1	; () banked
 10061  002F56  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10062  002F58  0E00               	movlw	0
 10063  002F5A  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10064  002F5C  0E00               	movlw	0
 10065  002F5E  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10066  002F60  0E00               	movlw	0
 10067  002F62  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10068                           
 10069                           ; BSR set to: 1
 10070  002F64  0012               	return	
 10071  002F66                     l9733:
 10072                           
 10073                           ; BSR set to: 1
 10074  002F66  C105  F106         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 10075  002F6A  0101               	movlb	1	; () banked
 10076  002F6C  6B07               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 10077  002F6E  6B08               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 10078  002F70  0101               	movlb	1	; () banked
 10079  002F72  3504               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10080  002F74  0101               	movlb	1	; () banked
 10081  002F76  3706               	rlcf	??__tdiv_to_l_& (0+255),f,b
 10082  002F78  E301               	bnc	u13811
 10083  002F7A  8107               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 10084  002F7C                     u13811:
 10085  002F7C  0101               	movlb	1	; () banked
 10086  002F7E  5106               	movf	??__tdiv_to_l_& (0+255),w,b
 10087  002F80  0101               	movlb	1	; () banked
 10088  002F82  6F0D               	movwf	__tdiv_to_l_@cntr& (0+255),b
 10089  002F84  0101               	movlb	1	; () banked
 10090  002F86  510D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 10091  002F88  A4D8               	btfss	status,2,c
 10092  002F8A  D00A               	goto	l9739
 10093                           
 10094                           ; BSR set to: 1
 10095  002F8C  0E00               	movlw	0
 10096  002F8E  0101               	movlb	1	; () banked
 10097  002F90  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10098  002F92  0E00               	movlw	0
 10099  002F94  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10100  002F96  0E00               	movlw	0
 10101  002F98  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10102  002F9A  0E00               	movlw	0
 10103  002F9C  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10104                           
 10105                           ; BSR set to: 1
 10106  002F9E  0012               	return	
 10107  002FA0                     l9739:
 10108                           
 10109                           ; BSR set to: 1
 10110  002FA0  0101               	movlb	1	; () banked
 10111  002FA2  8F01               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
 10112                           
 10113                           ; BSR set to: 1
 10114  002FA4  0EFF               	movlw	255
 10115  002FA6  0101               	movlb	1	; () banked
 10116  002FA8  1700               	andwf	__tdiv_to_l_@f1& (0+255),f,b
 10117  002FAA  0EFF               	movlw	255
 10118  002FAC  0101               	movlb	1	; () banked
 10119  002FAE  1701               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10120  002FB0  0E00               	movlw	0
 10121  002FB2  0101               	movlb	1	; () banked
 10122  002FB4  1702               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10123  002FB6  0101               	movlb	1	; () banked
 10124  002FB8  8F04               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
 10125                           
 10126                           ; BSR set to: 1
 10127  002FBA  0EFF               	movlw	255
 10128  002FBC  0101               	movlb	1	; () banked
 10129  002FBE  1703               	andwf	__tdiv_to_l_@f2& (0+255),f,b
 10130  002FC0  0EFF               	movlw	255
 10131  002FC2  0101               	movlb	1	; () banked
 10132  002FC4  1704               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
 10133  002FC6  0E00               	movlw	0
 10134  002FC8  0101               	movlb	1	; () banked
 10135  002FCA  1705               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
 10136                           
 10137                           ; BSR set to: 1
 10138  002FCC  0E00               	movlw	0
 10139  002FCE  0101               	movlb	1	; () banked
 10140  002FD0  6F09               	movwf	__tdiv_to_l_@quot& (0+255),b
 10141  002FD2  0E00               	movlw	0
 10142  002FD4  6F0A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
 10143  002FD6  0E00               	movlw	0
 10144  002FD8  6F0B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
 10145  002FDA  0E00               	movlw	0
 10146  002FDC  6F0C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
 10147                           
 10148                           ; BSR set to: 1
 10149  002FDE  0E7F               	movlw	127
 10150  002FE0  0101               	movlb	1	; () banked
 10151  002FE2  5F0E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 10152                           
 10153                           ; BSR set to: 1
 10154  002FE4  0101               	movlb	1	; () banked
 10155  002FE6  510D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 10156  002FE8  0F98               	addlw	152
 10157  002FEA  0101               	movlb	1	; () banked
 10158  002FEC  5F0E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 10159                           
 10160                           ; BSR set to: 1
 10161  002FEE  0E18               	movlw	24
 10162  002FF0  0101               	movlb	1	; () banked
 10163  002FF2  6F0D               	movwf	__tdiv_to_l_@cntr& (0+255),b
 10164  002FF4                     l1329:
 10165                           
 10166                           ; BSR set to: 1
 10167  002FF4  0101               	movlb	1	; () banked
 10168  002FF6  90D8               	bcf	status,0,c
 10169  002FF8  3709               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 10170  002FFA  370A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10171  002FFC  370B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10172  002FFE  370C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10173                           
 10174                           ; BSR set to: 1
 10175  003000  0101               	movlb	1	; () banked
 10176  003002  5103               	movf	__tdiv_to_l_@f2& (0+255),w,b
 10177  003004  0101               	movlb	1	; () banked
 10178  003006  5D00               	subwf	__tdiv_to_l_@f1& (0+255),w,b
 10179  003008  0101               	movlb	1	; () banked
 10180  00300A  5104               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10181  00300C  0101               	movlb	1	; () banked
 10182  00300E  5901               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
 10183  003010  0101               	movlb	1	; () banked
 10184  003012  5105               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 10185  003014  0101               	movlb	1	; () banked
 10186  003016  5902               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
 10187  003018  A0D8               	btfss	status,0,c
 10188  00301A  D00E               	goto	l1330
 10189                           
 10190                           ; BSR set to: 1
 10191  00301C  0101               	movlb	1	; () banked
 10192  00301E  5103               	movf	__tdiv_to_l_@f2& (0+255),w,b
 10193  003020  0101               	movlb	1	; () banked
 10194  003022  5F00               	subwf	__tdiv_to_l_@f1& (0+255),f,b
 10195  003024  0101               	movlb	1	; () banked
 10196  003026  5104               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10197  003028  0101               	movlb	1	; () banked
 10198  00302A  5B01               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10199  00302C  0101               	movlb	1	; () banked
 10200  00302E  5105               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 10201  003030  0101               	movlb	1	; () banked
 10202  003032  5B02               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10203                           
 10204                           ; BSR set to: 1
 10205  003034  0101               	movlb	1	; () banked
 10206  003036  8109               	bsf	__tdiv_to_l_@quot& (0+255),0,b
 10207  003038                     l1330:
 10208                           
 10209                           ; BSR set to: 1
 10210  003038  0101               	movlb	1	; () banked
 10211  00303A  90D8               	bcf	status,0,c
 10212  00303C  3700               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
 10213  00303E  3701               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10214  003040  3702               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10215                           
 10216                           ; BSR set to: 1
 10217  003042  0101               	movlb	1	; () banked
 10218  003044  2F0D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
 10219  003046  D7D6               	goto	l1329
 10220                           
 10221                           ; BSR set to: 1
 10222                           
 10223                           ; BSR set to: 1
 10224  003048  0101               	movlb	1	; () banked
 10225  00304A  AF0E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
 10226  00304C  D01A               	goto	l9773
 10227                           
 10228                           ; BSR set to: 1
 10229  00304E  0101               	movlb	1	; () banked
 10230  003050  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10231  003052  0A80               	xorlw	128
 10232  003054  0F97               	addlw	151
 10233  003056  B0D8               	btfsc	status,0,c
 10234  003058  D00A               	goto	l9769
 10235                           
 10236                           ; BSR set to: 1
 10237  00305A  0E00               	movlw	0
 10238  00305C  0101               	movlb	1	; () banked
 10239  00305E  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10240  003060  0E00               	movlw	0
 10241  003062  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10242  003064  0E00               	movlw	0
 10243  003066  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10244  003068  0E00               	movlw	0
 10245  00306A  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10246                           
 10247                           ; BSR set to: 1
 10248  00306C  0012               	return	
 10249  00306E                     l9769:
 10250                           
 10251                           ; BSR set to: 1
 10252  00306E  0101               	movlb	1	; () banked
 10253  003070  90D8               	bcf	status,0,c
 10254  003072  330C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10255  003074  330B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10256  003076  330A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10257  003078  3309               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
 10258                           
 10259                           ; BSR set to: 1
 10260  00307A  0101               	movlb	1	; () banked
 10261  00307C  3F0E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
 10262  00307E  D7F7               	goto	l9769
 10263                           
 10264                           ; BSR set to: 1
 10265  003080  D01B               	goto	l1336
 10266  003082                     l9773:
 10267                           
 10268                           ; BSR set to: 1
 10269  003082  0E17               	movlw	23
 10270  003084  0101               	movlb	1	; () banked
 10271  003086  650E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
 10272  003088  D012               	goto	l9781
 10273                           
 10274                           ; BSR set to: 1
 10275  00308A  0E00               	movlw	0
 10276  00308C  0101               	movlb	1	; () banked
 10277  00308E  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10278  003090  0E00               	movlw	0
 10279  003092  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10280  003094  0E00               	movlw	0
 10281  003096  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10282  003098  0E00               	movlw	0
 10283  00309A  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10284                           
 10285                           ; BSR set to: 1
 10286  00309C  0012               	return	
 10287  00309E                     l9779:
 10288                           
 10289                           ; BSR set to: 1
 10290  00309E  0101               	movlb	1	; () banked
 10291  0030A0  90D8               	bcf	status,0,c
 10292  0030A2  3709               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 10293  0030A4  370A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10294  0030A6  370B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10295  0030A8  370C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10296  0030AA  0101               	movlb	1	; () banked
 10297  0030AC  070E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
 10298  0030AE                     l9781:
 10299                           
 10300                           ; BSR set to: 1
 10301  0030AE  0101               	movlb	1	; () banked
 10302  0030B0  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10303  0030B2  0101               	movlb	1	; () banked
 10304  0030B4  A4D8               	btfss	status,2,c
 10305  0030B6  D7F3               	goto	l9779
 10306  0030B8                     l1336:
 10307                           
 10308                           ; BSR set to: 1
 10309  0030B8  C109  F100         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 10310  0030BC  C10A  F101         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 10311  0030C0  C10B  F102         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 10312  0030C4  C10C  F103         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 10313                           
 10314                           ; BSR set to: 1
 10315  0030C8  0012               	return		;funcret
 10316  0030CA                     __end_of__tdiv_to_l_:
 10317                           	opt stack 0
 10318                           tblptru	equ	0xFF8
 10319                           tblptrh	equ	0xFF7
 10320                           tblptrl	equ	0xFF6
 10321                           tablat	equ	0xFF5
 10322                           prodh	equ	0xFF4
 10323                           prodl	equ	0xFF3
 10324                           intcon	equ	0xFF2
 10325                           postinc0	equ	0xFEE
 10326                           wreg	equ	0xFE8
 10327                           postdec1	equ	0xFE5
 10328                           fsr1l	equ	0xFE1
 10329                           indf2	equ	0xFDF
 10330                           postinc2	equ	0xFDE
 10331                           postdec2	equ	0xFDD
 10332                           fsr2h	equ	0xFDA
 10333                           fsr2l	equ	0xFD9
 10334                           status	equ	0xFD8
 10335                           
 10336 ;; *************** function __div_to_l_ *****************
 10337 ;; Defined at:
 10338 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fldivl.c"
 10339 ;; Parameters:    Size  Location     Type
 10340 ;;  f1              3    0[BANK1 ] unsigned long 
 10341 ;;  f2              3    3[BANK1 ] unsigned long 
 10342 ;; Auto vars:     Size  Location     Type
 10343 ;;  quot            4    6[BANK1 ] unsigned long 
 10344 ;;  exp1            1   11[BANK1 ] unsigned char 
 10345 ;;  cntr            1   10[BANK1 ] unsigned char 
 10346 ;; Return value:  Size  Location     Type
 10347 ;;                  4    0[BANK1 ] unsigned long 
 10348 ;; Registers used:
 10349 ;;		wreg, status,2, status,0
 10350 ;; Tracked objects:
 10351 ;;		On entry : 0/0
 10352 ;;		On exit  : 0/0
 10353 ;;		Unchanged: 0/0
 10354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10355 ;;      Params:         0       0       6       0       0       0       0
 10356 ;;      Locals:         0       0       6       0       0       0       0
 10357 ;;      Temps:          0       0       0       0       0       0       0
 10358 ;;      Totals:         0       0      12       0       0       0       0
 10359 ;;Total ram usage:       12 bytes
 10360 ;; Hardware stack levels used:    1
 10361 ;; Hardware stack levels required when called:   12
 10362 ;; This function calls:
 10363 ;;		Nothing
 10364 ;; This function is called by:
 10365 ;;		_printf
 10366 ;; This function uses a non-reentrant model
 10367 ;;
 10368                           
 10369                           	psect	text36
 10370  003260                     __ptext36:
 10371                           	opt stack 0
 10372  003260                     __div_to_l_:
 10373                           	opt stack 15
 10374                           
 10375                           ; BSR set to: 1
 10376                           ;incstack = 0
 10377  003260  0101               	movlb	1	; () banked
 10378  003262  3502               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
 10379  003264  3503               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
 10380  003266  0101               	movlb	1	; () banked
 10381  003268  6F0B               	movwf	__div_to_l_@exp1& (0+255),b
 10382  00326A  0101               	movlb	1	; () banked
 10383  00326C  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 10384  00326E  A4D8               	btfss	status,2,c
 10385  003270  D00A               	goto	l9789
 10386                           
 10387                           ; BSR set to: 1
 10388  003272  0E00               	movlw	0
 10389  003274  0101               	movlb	1	; () banked
 10390  003276  6F00               	movwf	?__div_to_l_& (0+255),b
 10391  003278  0E00               	movlw	0
 10392  00327A  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10393  00327C  0E00               	movlw	0
 10394  00327E  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10395  003280  0E00               	movlw	0
 10396  003282  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10397                           
 10398                           ; BSR set to: 1
 10399  003284  0012               	return	
 10400  003286                     l9789:
 10401                           
 10402                           ; BSR set to: 1
 10403  003286  0101               	movlb	1	; () banked
 10404  003288  3505               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
 10405  00328A  3506               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
 10406  00328C  0101               	movlb	1	; () banked
 10407  00328E  6F0A               	movwf	__div_to_l_@cntr& (0+255),b
 10408  003290  0101               	movlb	1	; () banked
 10409  003292  510A               	movf	__div_to_l_@cntr& (0+255),w,b
 10410  003294  A4D8               	btfss	status,2,c
 10411  003296  D00A               	goto	l9795
 10412                           
 10413                           ; BSR set to: 1
 10414  003298  0E00               	movlw	0
 10415  00329A  0101               	movlb	1	; () banked
 10416  00329C  6F00               	movwf	?__div_to_l_& (0+255),b
 10417  00329E  0E00               	movlw	0
 10418  0032A0  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10419  0032A2  0E00               	movlw	0
 10420  0032A4  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10421  0032A6  0E00               	movlw	0
 10422  0032A8  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10423                           
 10424                           ; BSR set to: 1
 10425  0032AA  0012               	return	
 10426  0032AC                     l9795:
 10427                           
 10428                           ; BSR set to: 1
 10429  0032AC  0101               	movlb	1	; () banked
 10430  0032AE  8F02               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
 10431                           
 10432                           ; BSR set to: 1
 10433  0032B0  0EFF               	movlw	255
 10434  0032B2  0101               	movlb	1	; () banked
 10435  0032B4  1700               	andwf	__div_to_l_@f1& (0+255),f,b
 10436  0032B6  0EFF               	movlw	255
 10437  0032B8  1701               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
 10438  0032BA  0EFF               	movlw	255
 10439  0032BC  1702               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
 10440  0032BE  0E00               	movlw	0
 10441  0032C0  1703               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
 10442                           
 10443                           ; BSR set to: 1
 10444  0032C2  0101               	movlb	1	; () banked
 10445  0032C4  8F05               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
 10446  0032C6  0EFF               	movlw	255
 10447  0032C8  0101               	movlb	1	; () banked
 10448  0032CA  1703               	andwf	__div_to_l_@f2& (0+255),f,b
 10449  0032CC  0EFF               	movlw	255
 10450  0032CE  1704               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
 10451  0032D0  0EFF               	movlw	255
 10452  0032D2  1705               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
 10453  0032D4  0E00               	movlw	0
 10454  0032D6  1706               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
 10455                           
 10456                           ; BSR set to: 1
 10457  0032D8  0E00               	movlw	0
 10458  0032DA  0101               	movlb	1	; () banked
 10459  0032DC  6F06               	movwf	__div_to_l_@quot& (0+255),b
 10460  0032DE  0E00               	movlw	0
 10461  0032E0  6F07               	movwf	(__div_to_l_@quot+1)& (0+255),b
 10462  0032E2  0E00               	movlw	0
 10463  0032E4  6F08               	movwf	(__div_to_l_@quot+2)& (0+255),b
 10464  0032E6  0E00               	movlw	0
 10465  0032E8  6F09               	movwf	(__div_to_l_@quot+3)& (0+255),b
 10466                           
 10467                           ; BSR set to: 1
 10468  0032EA  0E7F               	movlw	127
 10469  0032EC  0101               	movlb	1	; () banked
 10470  0032EE  5F0B               	subwf	__div_to_l_@exp1& (0+255),f,b
 10471                           
 10472                           ; BSR set to: 1
 10473  0032F0  0101               	movlb	1	; () banked
 10474  0032F2  510A               	movf	__div_to_l_@cntr& (0+255),w,b
 10475  0032F4  0FA0               	addlw	160
 10476  0032F6  0101               	movlb	1	; () banked
 10477  0032F8  5F0B               	subwf	__div_to_l_@exp1& (0+255),f,b
 10478                           
 10479                           ; BSR set to: 1
 10480  0032FA  0E20               	movlw	32
 10481  0032FC  0101               	movlb	1	; () banked
 10482  0032FE  6F0A               	movwf	__div_to_l_@cntr& (0+255),b
 10483  003300                     l9809:
 10484                           
 10485                           ; BSR set to: 1
 10486  003300  0101               	movlb	1	; () banked
 10487  003302  90D8               	bcf	status,0,c
 10488  003304  3706               	rlcf	__div_to_l_@quot& (0+255),f,b
 10489  003306  3707               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 10490  003308  3708               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 10491  00330A  3709               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 10492                           
 10493                           ; BSR set to: 1
 10494  00330C  0101               	movlb	1	; () banked
 10495  00330E  5103               	movf	__div_to_l_@f2& (0+255),w,b
 10496  003310  0101               	movlb	1	; () banked
 10497  003312  5D00               	subwf	__div_to_l_@f1& (0+255),w,b
 10498  003314  0101               	movlb	1	; () banked
 10499  003316  5104               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 10500  003318  0101               	movlb	1	; () banked
 10501  00331A  5901               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
 10502  00331C  0101               	movlb	1	; () banked
 10503  00331E  5105               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 10504  003320  0101               	movlb	1	; () banked
 10505  003322  5902               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
 10506  003324  0101               	movlb	1	; () banked
 10507  003326  5106               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 10508  003328  0101               	movlb	1	; () banked
 10509  00332A  5903               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
 10510  00332C  A0D8               	btfss	status,0,c
 10511  00332E  D012               	goto	l9817
 10512                           
 10513                           ; BSR set to: 1
 10514  003330  0101               	movlb	1	; () banked
 10515  003332  5103               	movf	__div_to_l_@f2& (0+255),w,b
 10516  003334  0101               	movlb	1	; () banked
 10517  003336  5F00               	subwf	__div_to_l_@f1& (0+255),f,b
 10518  003338  0101               	movlb	1	; () banked
 10519  00333A  5104               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 10520  00333C  0101               	movlb	1	; () banked
 10521  00333E  5B01               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
 10522  003340  0101               	movlb	1	; () banked
 10523  003342  5105               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 10524  003344  0101               	movlb	1	; () banked
 10525  003346  5B02               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
 10526  003348  0101               	movlb	1	; () banked
 10527  00334A  5106               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 10528  00334C  0101               	movlb	1	; () banked
 10529  00334E  5B03               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
 10530                           
 10531                           ; BSR set to: 1
 10532  003350  0101               	movlb	1	; () banked
 10533  003352  8106               	bsf	__div_to_l_@quot& (0+255),0,b
 10534  003354                     l9817:
 10535                           
 10536                           ; BSR set to: 1
 10537  003354  0101               	movlb	1	; () banked
 10538  003356  90D8               	bcf	status,0,c
 10539  003358  3700               	rlcf	__div_to_l_@f1& (0+255),f,b
 10540  00335A  3701               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
 10541  00335C  3702               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
 10542  00335E  3703               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
 10543                           
 10544                           ; BSR set to: 1
 10545  003360  0101               	movlb	1	; () banked
 10546  003362  2F0A               	decfsz	__div_to_l_@cntr& (0+255),f,b
 10547  003364  D7CD               	goto	l9809
 10548                           
 10549                           ; BSR set to: 1
 10550                           
 10551                           ; BSR set to: 1
 10552  003366  0101               	movlb	1	; () banked
 10553  003368  AF0B               	btfss	__div_to_l_@exp1& (0+255),7,b
 10554  00336A  D01A               	goto	l9833
 10555                           
 10556                           ; BSR set to: 1
 10557  00336C  0101               	movlb	1	; () banked
 10558  00336E  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 10559  003370  0A80               	xorlw	128
 10560  003372  0F9F               	addlw	159
 10561  003374  B0D8               	btfsc	status,0,c
 10562  003376  D00A               	goto	l9829
 10563                           
 10564                           ; BSR set to: 1
 10565  003378  0E00               	movlw	0
 10566  00337A  0101               	movlb	1	; () banked
 10567  00337C  6F00               	movwf	?__div_to_l_& (0+255),b
 10568  00337E  0E00               	movlw	0
 10569  003380  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10570  003382  0E00               	movlw	0
 10571  003384  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10572  003386  0E00               	movlw	0
 10573  003388  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10574                           
 10575                           ; BSR set to: 1
 10576  00338A  0012               	return	
 10577  00338C                     l9829:
 10578                           
 10579                           ; BSR set to: 1
 10580  00338C  0101               	movlb	1	; () banked
 10581  00338E  90D8               	bcf	status,0,c
 10582  003390  3309               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
 10583  003392  3308               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
 10584  003394  3307               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
 10585  003396  3306               	rrcf	__div_to_l_@quot& (0+255),f,b
 10586                           
 10587                           ; BSR set to: 1
 10588  003398  0101               	movlb	1	; () banked
 10589  00339A  3F0B               	incfsz	__div_to_l_@exp1& (0+255),f,b
 10590  00339C  D7F7               	goto	l9829
 10591                           
 10592                           ; BSR set to: 1
 10593  00339E  D01B               	goto	l1232
 10594  0033A0                     l9833:
 10595                           
 10596                           ; BSR set to: 1
 10597  0033A0  0E1F               	movlw	31
 10598  0033A2  0101               	movlb	1	; () banked
 10599  0033A4  650B               	cpfsgt	__div_to_l_@exp1& (0+255),b
 10600  0033A6  D012               	goto	l9841
 10601                           
 10602                           ; BSR set to: 1
 10603  0033A8  0E00               	movlw	0
 10604  0033AA  0101               	movlb	1	; () banked
 10605  0033AC  6F00               	movwf	?__div_to_l_& (0+255),b
 10606  0033AE  0E00               	movlw	0
 10607  0033B0  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10608  0033B2  0E00               	movlw	0
 10609  0033B4  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10610  0033B6  0E00               	movlw	0
 10611  0033B8  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10612                           
 10613                           ; BSR set to: 1
 10614  0033BA  0012               	return	
 10615  0033BC                     l9839:
 10616                           
 10617                           ; BSR set to: 1
 10618  0033BC  0101               	movlb	1	; () banked
 10619  0033BE  90D8               	bcf	status,0,c
 10620  0033C0  3706               	rlcf	__div_to_l_@quot& (0+255),f,b
 10621  0033C2  3707               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 10622  0033C4  3708               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 10623  0033C6  3709               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 10624  0033C8  0101               	movlb	1	; () banked
 10625  0033CA  070B               	decf	__div_to_l_@exp1& (0+255),f,b
 10626  0033CC                     l9841:
 10627                           
 10628                           ; BSR set to: 1
 10629  0033CC  0101               	movlb	1	; () banked
 10630  0033CE  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 10631  0033D0  0101               	movlb	1	; () banked
 10632  0033D2  A4D8               	btfss	status,2,c
 10633  0033D4  D7F3               	goto	l9839
 10634  0033D6                     l1232:
 10635                           
 10636                           ; BSR set to: 1
 10637  0033D6  C106  F100         	movff	__div_to_l_@quot,?__div_to_l_
 10638  0033DA  C107  F101         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 10639  0033DE  C108  F102         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 10640  0033E2  C109  F103         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 10641                           
 10642                           ; BSR set to: 1
 10643  0033E6  0012               	return		;funcret
 10644  0033E8                     __end_of__div_to_l_:
 10645                           	opt stack 0
 10646                           tblptru	equ	0xFF8
 10647                           tblptrh	equ	0xFF7
 10648                           tblptrl	equ	0xFF6
 10649                           tablat	equ	0xFF5
 10650                           prodh	equ	0xFF4
 10651                           prodl	equ	0xFF3
 10652                           intcon	equ	0xFF2
 10653                           postinc0	equ	0xFEE
 10654                           wreg	equ	0xFE8
 10655                           postdec1	equ	0xFE5
 10656                           fsr1l	equ	0xFE1
 10657                           indf2	equ	0xFDF
 10658                           postinc2	equ	0xFDE
 10659                           postdec2	equ	0xFDD
 10660                           fsr2h	equ	0xFDA
 10661                           fsr2l	equ	0xFD9
 10662                           status	equ	0xFD8
 10663                           
 10664 ;; *************** function ___lltoft *****************
 10665 ;; Defined at:
 10666 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
 10667 ;; Parameters:    Size  Location     Type
 10668 ;;  c               4    8[BANK1 ] unsigned long 
 10669 ;; Auto vars:     Size  Location     Type
 10670 ;;  exp             1   16[BANK1 ] unsigned char 
 10671 ;; Return value:  Size  Location     Type
 10672 ;;                  3    8[BANK1 ] float 
 10673 ;; Registers used:
 10674 ;;		wreg, status,2, status,0, cstack
 10675 ;; Tracked objects:
 10676 ;;		On entry : 0/0
 10677 ;;		On exit  : 0/0
 10678 ;;		Unchanged: 0/0
 10679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10680 ;;      Params:         0       0       4       0       0       0       0
 10681 ;;      Locals:         0       0       1       0       0       0       0
 10682 ;;      Temps:          0       0       4       0       0       0       0
 10683 ;;      Totals:         0       0       9       0       0       0       0
 10684 ;;Total ram usage:        9 bytes
 10685 ;; Hardware stack levels used:    1
 10686 ;; Hardware stack levels required when called:   13
 10687 ;; This function calls:
 10688 ;;		___ftpack
 10689 ;; This function is called by:
 10690 ;;		_printf
 10691 ;; This function uses a non-reentrant model
 10692 ;;
 10693                           
 10694                           	psect	text37
 10695  005F7A                     __ptext37:
 10696                           	opt stack 0
 10697  005F7A                     ___lltoft:
 10698                           	opt stack 14
 10699                           
 10700                           ; BSR set to: 1
 10701                           ;incstack = 0
 10702  005F7A  0E8E               	movlw	142
 10703  005F7C  0101               	movlb	1	; () banked
 10704  005F7E  6F10               	movwf	___lltoft@exp& (0+255),b
 10705  005F80  D008               	goto	l9915
 10706  005F82                     l9913:
 10707                           
 10708                           ; BSR set to: 1
 10709  005F82  0101               	movlb	1	; () banked
 10710  005F84  90D8               	bcf	status,0,c
 10711  005F86  330B               	rrcf	(___lltoft@c+3)& (0+255),f,b
 10712  005F88  330A               	rrcf	(___lltoft@c+2)& (0+255),f,b
 10713  005F8A  3309               	rrcf	(___lltoft@c+1)& (0+255),f,b
 10714  005F8C  3308               	rrcf	___lltoft@c& (0+255),f,b
 10715  005F8E  0101               	movlb	1	; () banked
 10716  005F90  2B10               	incf	___lltoft@exp& (0+255),f,b
 10717  005F92                     l9915:
 10718                           
 10719                           ; BSR set to: 1
 10720  005F92  0E00               	movlw	0
 10721  005F94  0101               	movlb	1	; () banked
 10722  005F96  1508               	andwf	___lltoft@c& (0+255),w,b
 10723  005F98  0101               	movlb	1	; () banked
 10724  005F9A  6F0C               	movwf	??___lltoft& (0+255),b
 10725  005F9C  0E00               	movlw	0
 10726  005F9E  0101               	movlb	1	; () banked
 10727  005FA0  1509               	andwf	(___lltoft@c+1)& (0+255),w,b
 10728  005FA2  0101               	movlb	1	; () banked
 10729  005FA4  6F0D               	movwf	(??___lltoft+1)& (0+255),b
 10730  005FA6  0E00               	movlw	0
 10731  005FA8  0101               	movlb	1	; () banked
 10732  005FAA  150A               	andwf	(___lltoft@c+2)& (0+255),w,b
 10733  005FAC  0101               	movlb	1	; () banked
 10734  005FAE  6F0E               	movwf	(??___lltoft+2)& (0+255),b
 10735  005FB0  0EFF               	movlw	255
 10736  005FB2  0101               	movlb	1	; () banked
 10737  005FB4  150B               	andwf	(___lltoft@c+3)& (0+255),w,b
 10738  005FB6  0101               	movlb	1	; () banked
 10739  005FB8  6F0F               	movwf	(??___lltoft+3)& (0+255),b
 10740  005FBA  0101               	movlb	1	; () banked
 10741  005FBC  510C               	movf	??___lltoft& (0+255),w,b
 10742  005FBE  0101               	movlb	1	; () banked
 10743  005FC0  110D               	iorwf	(??___lltoft+1)& (0+255),w,b
 10744  005FC2  0101               	movlb	1	; () banked
 10745  005FC4  110E               	iorwf	(??___lltoft+2)& (0+255),w,b
 10746  005FC6  0101               	movlb	1	; () banked
 10747  005FC8  110F               	iorwf	(??___lltoft+3)& (0+255),w,b
 10748  005FCA  A4D8               	btfss	status,2,c
 10749  005FCC  D7DA               	goto	l9913
 10750                           
 10751                           ; BSR set to: 1
 10752                           
 10753                           ; BSR set to: 1
 10754  005FCE  C108  F100         	movff	___lltoft@c,___ftpack@arg
 10755  005FD2  C109  F101         	movff	___lltoft@c+1,___ftpack@arg+1
 10756  005FD6  C10A  F102         	movff	___lltoft@c+2,___ftpack@arg+2
 10757  005FDA  C110  F103         	movff	___lltoft@exp,___ftpack@exp
 10758  005FDE  0E00               	movlw	0
 10759  005FE0  0101               	movlb	1	; () banked
 10760  005FE2  6F04               	movwf	___ftpack@sign& (0+255),b
 10761  005FE4  ECBA  F021         	call	___ftpack	;wreg free
 10762  005FE8  C100  F108         	movff	?___ftpack,?___lltoft
 10763  005FEC  C101  F109         	movff	?___ftpack+1,?___lltoft+1
 10764  005FF0  C102  F10A         	movff	?___ftpack+2,?___lltoft+2
 10765  005FF4  0012               	return	
 10766  005FF6                     __end_of___lltoft:
 10767                           	opt stack 0
 10768                           tblptru	equ	0xFF8
 10769                           tblptrh	equ	0xFF7
 10770                           tblptrl	equ	0xFF6
 10771                           tablat	equ	0xFF5
 10772                           prodh	equ	0xFF4
 10773                           prodl	equ	0xFF3
 10774                           intcon	equ	0xFF2
 10775                           postinc0	equ	0xFEE
 10776                           wreg	equ	0xFE8
 10777                           postdec1	equ	0xFE5
 10778                           fsr1l	equ	0xFE1
 10779                           indf2	equ	0xFDF
 10780                           postinc2	equ	0xFDE
 10781                           postdec2	equ	0xFDD
 10782                           fsr2h	equ	0xFDA
 10783                           fsr2l	equ	0xFD9
 10784                           status	equ	0xFD8
 10785                           
 10786 ;; *************** function ___llmod *****************
 10787 ;; Defined at:
 10788 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
 10789 ;; Parameters:    Size  Location     Type
 10790 ;;  dividend        4   13[BANK1 ] unsigned long 
 10791 ;;  divisor         4   17[BANK1 ] unsigned long 
 10792 ;; Auto vars:     Size  Location     Type
 10793 ;;  counter         1   21[BANK1 ] unsigned char 
 10794 ;; Return value:  Size  Location     Type
 10795 ;;                  4   13[BANK1 ] unsigned long 
 10796 ;; Registers used:
 10797 ;;		wreg, status,2, status,0
 10798 ;; Tracked objects:
 10799 ;;		On entry : 0/0
 10800 ;;		On exit  : 0/0
 10801 ;;		Unchanged: 0/0
 10802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10803 ;;      Params:         0       0       8       0       0       0       0
 10804 ;;      Locals:         0       0       1       0       0       0       0
 10805 ;;      Temps:          0       0       0       0       0       0       0
 10806 ;;      Totals:         0       0       9       0       0       0       0
 10807 ;;Total ram usage:        9 bytes
 10808 ;; Hardware stack levels used:    1
 10809 ;; Hardware stack levels required when called:   12
 10810 ;; This function calls:
 10811 ;;		Nothing
 10812 ;; This function is called by:
 10813 ;;		_printf
 10814 ;; This function uses a non-reentrant model
 10815 ;;
 10816                           
 10817                           	psect	text38
 10818  005A60                     __ptext38:
 10819                           	opt stack 0
 10820  005A60                     ___llmod:
 10821                           	opt stack 15
 10822                           
 10823                           ;incstack = 0
 10824  005A60  0101               	movlb	1	; () banked
 10825  005A62  5111               	movf	___llmod@divisor& (0+255),w,b
 10826  005A64  0101               	movlb	1	; () banked
 10827  005A66  1112               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 10828  005A68  0101               	movlb	1	; () banked
 10829  005A6A  1113               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 10830  005A6C  0101               	movlb	1	; () banked
 10831  005A6E  1114               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 10832  005A70  B4D8               	btfsc	status,2,c
 10833  005A72  D03A               	goto	l1421
 10834                           
 10835                           ; BSR set to: 1
 10836  005A74  0E01               	movlw	1
 10837  005A76  0101               	movlb	1	; () banked
 10838  005A78  6F15               	movwf	___llmod@counter& (0+255),b
 10839  005A7A  D008               	goto	l9901
 10840  005A7C                     l9899:
 10841                           
 10842                           ; BSR set to: 1
 10843  005A7C  0101               	movlb	1	; () banked
 10844  005A7E  90D8               	bcf	status,0,c
 10845  005A80  3711               	rlcf	___llmod@divisor& (0+255),f,b
 10846  005A82  3712               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 10847  005A84  3713               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 10848  005A86  3714               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 10849  005A88  0101               	movlb	1	; () banked
 10850  005A8A  2B15               	incf	___llmod@counter& (0+255),f,b
 10851  005A8C                     l9901:
 10852                           
 10853                           ; BSR set to: 1
 10854  005A8C  0101               	movlb	1	; () banked
 10855  005A8E  AF14               	btfss	(___llmod@divisor+3)& (0+255),7,b
 10856  005A90  D7F5               	goto	l9899
 10857  005A92                     l9903:
 10858                           
 10859                           ; BSR set to: 1
 10860  005A92  0101               	movlb	1	; () banked
 10861  005A94  5111               	movf	___llmod@divisor& (0+255),w,b
 10862  005A96  0101               	movlb	1	; () banked
 10863  005A98  5D0D               	subwf	___llmod@dividend& (0+255),w,b
 10864  005A9A  0101               	movlb	1	; () banked
 10865  005A9C  5112               	movf	(___llmod@divisor+1)& (0+255),w,b
 10866  005A9E  0101               	movlb	1	; () banked
 10867  005AA0  590E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 10868  005AA2  0101               	movlb	1	; () banked
 10869  005AA4  5113               	movf	(___llmod@divisor+2)& (0+255),w,b
 10870  005AA6  0101               	movlb	1	; () banked
 10871  005AA8  590F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 10872  005AAA  0101               	movlb	1	; () banked
 10873  005AAC  5114               	movf	(___llmod@divisor+3)& (0+255),w,b
 10874  005AAE  0101               	movlb	1	; () banked
 10875  005AB0  5910               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 10876  005AB2  A0D8               	btfss	status,0,c
 10877  005AB4  D010               	goto	l9907
 10878                           
 10879                           ; BSR set to: 1
 10880  005AB6  0101               	movlb	1	; () banked
 10881  005AB8  5111               	movf	___llmod@divisor& (0+255),w,b
 10882  005ABA  0101               	movlb	1	; () banked
 10883  005ABC  5F0D               	subwf	___llmod@dividend& (0+255),f,b
 10884  005ABE  0101               	movlb	1	; () banked
 10885  005AC0  5112               	movf	(___llmod@divisor+1)& (0+255),w,b
 10886  005AC2  0101               	movlb	1	; () banked
 10887  005AC4  5B0E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 10888  005AC6  0101               	movlb	1	; () banked
 10889  005AC8  5113               	movf	(___llmod@divisor+2)& (0+255),w,b
 10890  005ACA  0101               	movlb	1	; () banked
 10891  005ACC  5B0F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 10892  005ACE  0101               	movlb	1	; () banked
 10893  005AD0  5114               	movf	(___llmod@divisor+3)& (0+255),w,b
 10894  005AD2  0101               	movlb	1	; () banked
 10895  005AD4  5B10               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 10896  005AD6                     l9907:
 10897                           
 10898                           ; BSR set to: 1
 10899  005AD6  0101               	movlb	1	; () banked
 10900  005AD8  90D8               	bcf	status,0,c
 10901  005ADA  3314               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 10902  005ADC  3313               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 10903  005ADE  3312               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 10904  005AE0  3311               	rrcf	___llmod@divisor& (0+255),f,b
 10905                           
 10906                           ; BSR set to: 1
 10907  005AE2  0101               	movlb	1	; () banked
 10908  005AE4  2F15               	decfsz	___llmod@counter& (0+255),f,b
 10909  005AE6  D7D5               	goto	l9903
 10910  005AE8                     l1421:
 10911                           
 10912                           ; BSR set to: 1
 10913  005AE8  C10D  F10D         	movff	___llmod@dividend,?___llmod
 10914  005AEC  C10E  F10E         	movff	___llmod@dividend+1,?___llmod+1
 10915  005AF0  C10F  F10F         	movff	___llmod@dividend+2,?___llmod+2
 10916  005AF4  C110  F110         	movff	___llmod@dividend+3,?___llmod+3
 10917                           
 10918                           ; BSR set to: 1
 10919  005AF8  0012               	return		;funcret
 10920  005AFA                     __end_of___llmod:
 10921                           	opt stack 0
 10922                           tblptru	equ	0xFF8
 10923                           tblptrh	equ	0xFF7
 10924                           tblptrl	equ	0xFF6
 10925                           tablat	equ	0xFF5
 10926                           prodh	equ	0xFF4
 10927                           prodl	equ	0xFF3
 10928                           intcon	equ	0xFF2
 10929                           postinc0	equ	0xFEE
 10930                           wreg	equ	0xFE8
 10931                           postdec1	equ	0xFE5
 10932                           fsr1l	equ	0xFE1
 10933                           indf2	equ	0xFDF
 10934                           postinc2	equ	0xFDE
 10935                           postdec2	equ	0xFDD
 10936                           fsr2h	equ	0xFDA
 10937                           fsr2l	equ	0xFD9
 10938                           status	equ	0xFD8
 10939                           
 10940 ;; *************** function ___lldiv *****************
 10941 ;; Defined at:
 10942 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
 10943 ;; Parameters:    Size  Location     Type
 10944 ;;  dividend        4    0[BANK1 ] unsigned long 
 10945 ;;  divisor         4    4[BANK1 ] unsigned long 
 10946 ;; Auto vars:     Size  Location     Type
 10947 ;;  quotient        4    8[BANK1 ] unsigned long 
 10948 ;;  counter         1   12[BANK1 ] unsigned char 
 10949 ;; Return value:  Size  Location     Type
 10950 ;;                  4    0[BANK1 ] unsigned long 
 10951 ;; Registers used:
 10952 ;;		wreg, status,2, status,0
 10953 ;; Tracked objects:
 10954 ;;		On entry : 0/0
 10955 ;;		On exit  : 0/0
 10956 ;;		Unchanged: 0/0
 10957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10958 ;;      Params:         0       0       8       0       0       0       0
 10959 ;;      Locals:         0       0       5       0       0       0       0
 10960 ;;      Temps:          0       0       0       0       0       0       0
 10961 ;;      Totals:         0       0      13       0       0       0       0
 10962 ;;Total ram usage:       13 bytes
 10963 ;; Hardware stack levels used:    1
 10964 ;; Hardware stack levels required when called:   12
 10965 ;; This function calls:
 10966 ;;		Nothing
 10967 ;; This function is called by:
 10968 ;;		_printf
 10969 ;; This function uses a non-reentrant model
 10970 ;;
 10971                           
 10972                           	psect	text39
 10973  005266                     __ptext39:
 10974                           	opt stack 0
 10975  005266                     ___lldiv:
 10976                           	opt stack 15
 10977                           
 10978                           ; BSR set to: 1
 10979                           ;incstack = 0
 10980  005266  0E00               	movlw	0
 10981  005268  0101               	movlb	1	; () banked
 10982  00526A  6F08               	movwf	___lldiv@quotient& (0+255),b
 10983  00526C  0E00               	movlw	0
 10984  00526E  6F09               	movwf	(___lldiv@quotient+1)& (0+255),b
 10985  005270  0E00               	movlw	0
 10986  005272  6F0A               	movwf	(___lldiv@quotient+2)& (0+255),b
 10987  005274  0E00               	movlw	0
 10988  005276  6F0B               	movwf	(___lldiv@quotient+3)& (0+255),b
 10989                           
 10990                           ; BSR set to: 1
 10991  005278  0101               	movlb	1	; () banked
 10992  00527A  5104               	movf	___lldiv@divisor& (0+255),w,b
 10993  00527C  0101               	movlb	1	; () banked
 10994  00527E  1105               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 10995  005280  0101               	movlb	1	; () banked
 10996  005282  1106               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 10997  005284  0101               	movlb	1	; () banked
 10998  005286  1107               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 10999  005288  B4D8               	btfsc	status,2,c
 11000  00528A  D042               	goto	l1411
 11001                           
 11002                           ; BSR set to: 1
 11003  00528C  0E01               	movlw	1
 11004  00528E  0101               	movlb	1	; () banked
 11005  005290  6F0C               	movwf	___lldiv@counter& (0+255),b
 11006  005292  D008               	goto	l9881
 11007  005294                     l9879:
 11008                           
 11009                           ; BSR set to: 1
 11010  005294  0101               	movlb	1	; () banked
 11011  005296  90D8               	bcf	status,0,c
 11012  005298  3704               	rlcf	___lldiv@divisor& (0+255),f,b
 11013  00529A  3705               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 11014  00529C  3706               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 11015  00529E  3707               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 11016  0052A0  0101               	movlb	1	; () banked
 11017  0052A2  2B0C               	incf	___lldiv@counter& (0+255),f,b
 11018  0052A4                     l9881:
 11019                           
 11020                           ; BSR set to: 1
 11021  0052A4  0101               	movlb	1	; () banked
 11022  0052A6  AF07               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 11023  0052A8  D7F5               	goto	l9879
 11024  0052AA                     l9883:
 11025                           
 11026                           ; BSR set to: 1
 11027  0052AA  0101               	movlb	1	; () banked
 11028  0052AC  90D8               	bcf	status,0,c
 11029  0052AE  3708               	rlcf	___lldiv@quotient& (0+255),f,b
 11030  0052B0  3709               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 11031  0052B2  370A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 11032  0052B4  370B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 11033                           
 11034                           ; BSR set to: 1
 11035  0052B6  0101               	movlb	1	; () banked
 11036  0052B8  5104               	movf	___lldiv@divisor& (0+255),w,b
 11037  0052BA  0101               	movlb	1	; () banked
 11038  0052BC  5D00               	subwf	___lldiv@dividend& (0+255),w,b
 11039  0052BE  0101               	movlb	1	; () banked
 11040  0052C0  5105               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11041  0052C2  0101               	movlb	1	; () banked
 11042  0052C4  5901               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 11043  0052C6  0101               	movlb	1	; () banked
 11044  0052C8  5106               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11045  0052CA  0101               	movlb	1	; () banked
 11046  0052CC  5902               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 11047  0052CE  0101               	movlb	1	; () banked
 11048  0052D0  5107               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11049  0052D2  0101               	movlb	1	; () banked
 11050  0052D4  5903               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 11051  0052D6  A0D8               	btfss	status,0,c
 11052  0052D8  D012               	goto	l9891
 11053                           
 11054                           ; BSR set to: 1
 11055  0052DA  0101               	movlb	1	; () banked
 11056  0052DC  5104               	movf	___lldiv@divisor& (0+255),w,b
 11057  0052DE  0101               	movlb	1	; () banked
 11058  0052E0  5F00               	subwf	___lldiv@dividend& (0+255),f,b
 11059  0052E2  0101               	movlb	1	; () banked
 11060  0052E4  5105               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11061  0052E6  0101               	movlb	1	; () banked
 11062  0052E8  5B01               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 11063  0052EA  0101               	movlb	1	; () banked
 11064  0052EC  5106               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11065  0052EE  0101               	movlb	1	; () banked
 11066  0052F0  5B02               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 11067  0052F2  0101               	movlb	1	; () banked
 11068  0052F4  5107               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11069  0052F6  0101               	movlb	1	; () banked
 11070  0052F8  5B03               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 11071                           
 11072                           ; BSR set to: 1
 11073  0052FA  0101               	movlb	1	; () banked
 11074  0052FC  8108               	bsf	___lldiv@quotient& (0+255),0,b
 11075  0052FE                     l9891:
 11076                           
 11077                           ; BSR set to: 1
 11078  0052FE  0101               	movlb	1	; () banked
 11079  005300  90D8               	bcf	status,0,c
 11080  005302  3307               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 11081  005304  3306               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 11082  005306  3305               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 11083  005308  3304               	rrcf	___lldiv@divisor& (0+255),f,b
 11084                           
 11085                           ; BSR set to: 1
 11086  00530A  0101               	movlb	1	; () banked
 11087  00530C  2F0C               	decfsz	___lldiv@counter& (0+255),f,b
 11088  00530E  D7CD               	goto	l9883
 11089  005310                     l1411:
 11090                           
 11091                           ; BSR set to: 1
 11092  005310  C108  F100         	movff	___lldiv@quotient,?___lldiv
 11093  005314  C109  F101         	movff	___lldiv@quotient+1,?___lldiv+1
 11094  005318  C10A  F102         	movff	___lldiv@quotient+2,?___lldiv+2
 11095  00531C  C10B  F103         	movff	___lldiv@quotient+3,?___lldiv+3
 11096                           
 11097                           ; BSR set to: 1
 11098  005320  0012               	return		;funcret
 11099  005322                     __end_of___lldiv:
 11100                           	opt stack 0
 11101                           tblptru	equ	0xFF8
 11102                           tblptrh	equ	0xFF7
 11103                           tblptrl	equ	0xFF6
 11104                           tablat	equ	0xFF5
 11105                           prodh	equ	0xFF4
 11106                           prodl	equ	0xFF3
 11107                           intcon	equ	0xFF2
 11108                           postinc0	equ	0xFEE
 11109                           wreg	equ	0xFE8
 11110                           postdec1	equ	0xFE5
 11111                           fsr1l	equ	0xFE1
 11112                           indf2	equ	0xFDF
 11113                           postinc2	equ	0xFDE
 11114                           postdec2	equ	0xFDD
 11115                           fsr2h	equ	0xFDA
 11116                           fsr2l	equ	0xFD9
 11117                           status	equ	0xFD8
 11118                           
 11119 ;; *************** function ___ftsub *****************
 11120 ;; Defined at:
 11121 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
 11122 ;; Parameters:    Size  Location     Type
 11123 ;;  f1              3   57[BANK1 ] float 
 11124 ;;  f2              3   60[BANK1 ] float 
 11125 ;; Auto vars:     Size  Location     Type
 11126 ;;		None
 11127 ;; Return value:  Size  Location     Type
 11128 ;;                  3   57[BANK1 ] float 
 11129 ;; Registers used:
 11130 ;;		wreg, status,2, status,0, cstack
 11131 ;; Tracked objects:
 11132 ;;		On entry : 0/0
 11133 ;;		On exit  : 0/0
 11134 ;;		Unchanged: 0/0
 11135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11136 ;;      Params:         0       0       6       0       0       0       0
 11137 ;;      Locals:         0       0       0       0       0       0       0
 11138 ;;      Temps:          0       0       0       0       0       0       0
 11139 ;;      Totals:         0       0       6       0       0       0       0
 11140 ;;Total ram usage:        6 bytes
 11141 ;; Hardware stack levels used:    1
 11142 ;; Hardware stack levels required when called:   14
 11143 ;; This function calls:
 11144 ;;		___ftadd
 11145 ;; This function is called by:
 11146 ;;		_printf
 11147 ;; This function uses a non-reentrant model
 11148 ;;
 11149                           
 11150                           	psect	text40
 11151  00675C                     __ptext40:
 11152                           	opt stack 0
 11153  00675C                     ___ftsub:
 11154                           	opt stack 13
 11155                           
 11156                           ; BSR set to: 1
 11157                           ;incstack = 0
 11158  00675C  0101               	movlb	1	; () banked
 11159  00675E  513C               	movf	___ftsub@f2& (0+255),w,b
 11160  006760  0101               	movlb	1	; () banked
 11161  006762  113D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 11162  006764  0101               	movlb	1	; () banked
 11163  006766  113E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 11164  006768  B4D8               	btfsc	status,2,c
 11165  00676A  D009               	goto	l9847
 11166                           
 11167                           ; BSR set to: 1
 11168  00676C  0E00               	movlw	0
 11169  00676E  0101               	movlb	1	; () banked
 11170  006770  1B3C               	xorwf	___ftsub@f2& (0+255),f,b
 11171  006772  0E00               	movlw	0
 11172  006774  0101               	movlb	1	; () banked
 11173  006776  1B3D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 11174  006778  0E80               	movlw	128
 11175  00677A  0101               	movlb	1	; () banked
 11176  00677C  1B3E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 11177  00677E                     l9847:
 11178                           
 11179                           ; BSR set to: 1
 11180  00677E  C139  F12D         	movff	___ftsub@f1,___ftadd@f1
 11181  006782  C13A  F12E         	movff	___ftsub@f1+1,___ftadd@f1+1
 11182  006786  C13B  F12F         	movff	___ftsub@f1+2,___ftadd@f1+2
 11183  00678A  C13C  F130         	movff	___ftsub@f2,___ftadd@f2
 11184  00678E  C13D  F131         	movff	___ftsub@f2+1,___ftadd@f2+1
 11185  006792  C13E  F132         	movff	___ftsub@f2+2,___ftadd@f2+2
 11186  006796  EC7C  F012         	call	___ftadd	;wreg free
 11187  00679A  C12D  F139         	movff	?___ftadd,?___ftsub
 11188  00679E  C12E  F13A         	movff	?___ftadd+1,?___ftsub+1
 11189  0067A2  C12F  F13B         	movff	?___ftadd+2,?___ftsub+2
 11190  0067A6  0012               	return	
 11191  0067A8                     __end_of___ftsub:
 11192                           	opt stack 0
 11193                           tblptru	equ	0xFF8
 11194                           tblptrh	equ	0xFF7
 11195                           tblptrl	equ	0xFF6
 11196                           tablat	equ	0xFF5
 11197                           prodh	equ	0xFF4
 11198                           prodl	equ	0xFF3
 11199                           intcon	equ	0xFF2
 11200                           postinc0	equ	0xFEE
 11201                           wreg	equ	0xFE8
 11202                           postdec1	equ	0xFE5
 11203                           fsr1l	equ	0xFE1
 11204                           indf2	equ	0xFDF
 11205                           postinc2	equ	0xFDE
 11206                           postdec2	equ	0xFDD
 11207                           fsr2h	equ	0xFDA
 11208                           fsr2l	equ	0xFD9
 11209                           status	equ	0xFD8
 11210                           
 11211 ;; *************** function ___ftneg *****************
 11212 ;; Defined at:
 11213 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
 11214 ;; Parameters:    Size  Location     Type
 11215 ;;  f1              3    0[BANK1 ] float 
 11216 ;; Auto vars:     Size  Location     Type
 11217 ;;		None
 11218 ;; Return value:  Size  Location     Type
 11219 ;;                  3    0[BANK1 ] float 
 11220 ;; Registers used:
 11221 ;;		wreg, status,2, status,0
 11222 ;; Tracked objects:
 11223 ;;		On entry : 0/0
 11224 ;;		On exit  : 0/0
 11225 ;;		Unchanged: 0/0
 11226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11227 ;;      Params:         0       0       3       0       0       0       0
 11228 ;;      Locals:         0       0       0       0       0       0       0
 11229 ;;      Temps:          0       0       0       0       0       0       0
 11230 ;;      Totals:         0       0       3       0       0       0       0
 11231 ;;Total ram usage:        3 bytes
 11232 ;; Hardware stack levels used:    1
 11233 ;; Hardware stack levels required when called:   12
 11234 ;; This function calls:
 11235 ;;		Nothing
 11236 ;; This function is called by:
 11237 ;;		_printf
 11238 ;; This function uses a non-reentrant model
 11239 ;;
 11240                           
 11241                           	psect	text41
 11242  006A44                     __ptext41:
 11243                           	opt stack 0
 11244  006A44                     ___ftneg:
 11245                           	opt stack 15
 11246                           
 11247                           ;incstack = 0
 11248  006A44  0101               	movlb	1	; () banked
 11249  006A46  5100               	movf	___ftneg@f1& (0+255),w,b
 11250  006A48  0101               	movlb	1	; () banked
 11251  006A4A  1101               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 11252  006A4C  0101               	movlb	1	; () banked
 11253  006A4E  1102               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 11254  006A50  B4D8               	btfsc	status,2,c
 11255  006A52  D009               	goto	l1361
 11256                           
 11257                           ; BSR set to: 1
 11258  006A54  0E00               	movlw	0
 11259  006A56  0101               	movlb	1	; () banked
 11260  006A58  1B00               	xorwf	___ftneg@f1& (0+255),f,b
 11261  006A5A  0E00               	movlw	0
 11262  006A5C  0101               	movlb	1	; () banked
 11263  006A5E  1B01               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 11264  006A60  0E80               	movlw	128
 11265  006A62  0101               	movlb	1	; () banked
 11266  006A64  1B02               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 11267  006A66                     l1361:
 11268                           
 11269                           ; BSR set to: 1
 11270  006A66  C100  F100         	movff	___ftneg@f1,?___ftneg
 11271  006A6A  C101  F101         	movff	___ftneg@f1+1,?___ftneg+1
 11272  006A6E  C102  F102         	movff	___ftneg@f1+2,?___ftneg+2
 11273                           
 11274                           ; BSR set to: 1
 11275  006A72  0012               	return		;funcret
 11276  006A74                     __end_of___ftneg:
 11277                           	opt stack 0
 11278                           tblptru	equ	0xFF8
 11279                           tblptrh	equ	0xFF7
 11280                           tblptrl	equ	0xFF6
 11281                           tablat	equ	0xFF5
 11282                           prodh	equ	0xFF4
 11283                           prodl	equ	0xFF3
 11284                           intcon	equ	0xFF2
 11285                           postinc0	equ	0xFEE
 11286                           wreg	equ	0xFE8
 11287                           postdec1	equ	0xFE5
 11288                           fsr1l	equ	0xFE1
 11289                           indf2	equ	0xFDF
 11290                           postinc2	equ	0xFDE
 11291                           postdec2	equ	0xFDD
 11292                           fsr2h	equ	0xFDA
 11293                           fsr2l	equ	0xFD9
 11294                           status	equ	0xFD8
 11295                           
 11296 ;; *************** function ___ftge *****************
 11297 ;; Defined at:
 11298 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 11299 ;; Parameters:    Size  Location     Type
 11300 ;;  ff1             3    0[BANK1 ] float 
 11301 ;;  ff2             3    3[BANK1 ] float 
 11302 ;; Auto vars:     Size  Location     Type
 11303 ;;		None
 11304 ;; Return value:  Size  Location     Type
 11305 ;;		None               void
 11306 ;; Registers used:
 11307 ;;		wreg, status,2, status,0
 11308 ;; Tracked objects:
 11309 ;;		On entry : 0/0
 11310 ;;		On exit  : 0/0
 11311 ;;		Unchanged: 0/0
 11312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11313 ;;      Params:         0       0       6       0       0       0       0
 11314 ;;      Locals:         0       0       0       0       0       0       0
 11315 ;;      Temps:          0       0       3       0       0       0       0
 11316 ;;      Totals:         0       0       9       0       0       0       0
 11317 ;;Total ram usage:        9 bytes
 11318 ;; Hardware stack levels used:    1
 11319 ;; Hardware stack levels required when called:   12
 11320 ;; This function calls:
 11321 ;;		Nothing
 11322 ;; This function is called by:
 11323 ;;		_printf
 11324 ;; This function uses a non-reentrant model
 11325 ;;
 11326                           
 11327                           	psect	text42
 11328  004EA0                     __ptext42:
 11329                           	opt stack 0
 11330  004EA0                     ___ftge:
 11331                           	opt stack 15
 11332                           
 11333                           ; BSR set to: 1
 11334                           ;incstack = 0
 11335  004EA0  0101               	movlb	1	; () banked
 11336  004EA2  AF02               	btfss	(___ftge@ff1+2)& (0+255),7,b
 11337  004EA4  D01D               	goto	l9855
 11338                           
 11339                           ; BSR set to: 1
 11340  004EA6  C100  F106         	movff	___ftge@ff1,??___ftge
 11341  004EAA  C101  F107         	movff	___ftge@ff1+1,??___ftge+1
 11342  004EAE  C102  F108         	movff	___ftge@ff1+2,??___ftge+2
 11343  004EB2  0101               	movlb	1	; () banked
 11344  004EB4  1F06               	comf	??___ftge& (0+255),f,b
 11345  004EB6  1F07               	comf	(??___ftge+1)& (0+255),f,b
 11346  004EB8  1F08               	comf	(??___ftge+2)& (0+255),f,b
 11347  004EBA  2B06               	incf	??___ftge& (0+255),f,b
 11348  004EBC  0E00               	movlw	0
 11349  004EBE  2307               	addwfc	(??___ftge+1)& (0+255),f,b
 11350  004EC0  2308               	addwfc	(??___ftge+2)& (0+255),f,b
 11351  004EC2  0E00               	movlw	0
 11352  004EC4  0101               	movlb	1	; () banked
 11353  004EC6  2506               	addwf	??___ftge& (0+255),w,b
 11354  004EC8  0101               	movlb	1	; () banked
 11355  004ECA  6F00               	movwf	___ftge@ff1& (0+255),b
 11356  004ECC  0E00               	movlw	0
 11357  004ECE  0101               	movlb	1	; () banked
 11358  004ED0  2107               	addwfc	(??___ftge+1)& (0+255),w,b
 11359  004ED2  0101               	movlb	1	; () banked
 11360  004ED4  6F01               	movwf	(___ftge@ff1+1)& (0+255),b
 11361  004ED6  0E80               	movlw	128
 11362  004ED8  0101               	movlb	1	; () banked
 11363  004EDA  2108               	addwfc	(??___ftge+2)& (0+255),w,b
 11364  004EDC  0101               	movlb	1	; () banked
 11365  004EDE  6F02               	movwf	(___ftge@ff1+2)& (0+255),b
 11366  004EE0                     l9855:
 11367                           
 11368                           ; BSR set to: 1
 11369  004EE0  0101               	movlb	1	; () banked
 11370  004EE2  AF05               	btfss	(___ftge@ff2+2)& (0+255),7,b
 11371  004EE4  D01D               	goto	l9859
 11372                           
 11373                           ; BSR set to: 1
 11374  004EE6  C103  F106         	movff	___ftge@ff2,??___ftge
 11375  004EEA  C104  F107         	movff	___ftge@ff2+1,??___ftge+1
 11376  004EEE  C105  F108         	movff	___ftge@ff2+2,??___ftge+2
 11377  004EF2  0101               	movlb	1	; () banked
 11378  004EF4  1F06               	comf	??___ftge& (0+255),f,b
 11379  004EF6  1F07               	comf	(??___ftge+1)& (0+255),f,b
 11380  004EF8  1F08               	comf	(??___ftge+2)& (0+255),f,b
 11381  004EFA  2B06               	incf	??___ftge& (0+255),f,b
 11382  004EFC  0E00               	movlw	0
 11383  004EFE  2307               	addwfc	(??___ftge+1)& (0+255),f,b
 11384  004F00  2308               	addwfc	(??___ftge+2)& (0+255),f,b
 11385  004F02  0E00               	movlw	0
 11386  004F04  0101               	movlb	1	; () banked
 11387  004F06  2506               	addwf	??___ftge& (0+255),w,b
 11388  004F08  0101               	movlb	1	; () banked
 11389  004F0A  6F03               	movwf	___ftge@ff2& (0+255),b
 11390  004F0C  0E00               	movlw	0
 11391  004F0E  0101               	movlb	1	; () banked
 11392  004F10  2107               	addwfc	(??___ftge+1)& (0+255),w,b
 11393  004F12  0101               	movlb	1	; () banked
 11394  004F14  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
 11395  004F16  0E80               	movlw	128
 11396  004F18  0101               	movlb	1	; () banked
 11397  004F1A  2108               	addwfc	(??___ftge+2)& (0+255),w,b
 11398  004F1C  0101               	movlb	1	; () banked
 11399  004F1E  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
 11400  004F20                     l9859:
 11401                           
 11402                           ; BSR set to: 1
 11403  004F20  0E00               	movlw	0
 11404  004F22  0101               	movlb	1	; () banked
 11405  004F24  1B00               	xorwf	___ftge@ff1& (0+255),f,b
 11406  004F26  0E00               	movlw	0
 11407  004F28  0101               	movlb	1	; () banked
 11408  004F2A  1B01               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 11409  004F2C  0E80               	movlw	128
 11410  004F2E  0101               	movlb	1	; () banked
 11411  004F30  1B02               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 11412                           
 11413                           ; BSR set to: 1
 11414  004F32  0E00               	movlw	0
 11415  004F34  0101               	movlb	1	; () banked
 11416  004F36  1B03               	xorwf	___ftge@ff2& (0+255),f,b
 11417  004F38  0E00               	movlw	0
 11418  004F3A  0101               	movlb	1	; () banked
 11419  004F3C  1B04               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 11420  004F3E  0E80               	movlw	128
 11421  004F40  0101               	movlb	1	; () banked
 11422  004F42  1B05               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 11423  004F44  0101               	movlb	1	; () banked
 11424  004F46  5103               	movf	___ftge@ff2& (0+255),w,b
 11425  004F48  0101               	movlb	1	; () banked
 11426  004F4A  5D00               	subwf	___ftge@ff1& (0+255),w,b
 11427  004F4C  0101               	movlb	1	; () banked
 11428  004F4E  5104               	movf	(___ftge@ff2+1)& (0+255),w,b
 11429  004F50  0101               	movlb	1	; () banked
 11430  004F52  5901               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 11431  004F54  0101               	movlb	1	; () banked
 11432  004F56  5105               	movf	(___ftge@ff2+2)& (0+255),w,b
 11433  004F58  0101               	movlb	1	; () banked
 11434  004F5A  5902               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 11435  004F5C  B0D8               	btfsc	status,0,c
 11436  004F5E  D002               	goto	l9865
 11437                           
 11438                           ; BSR set to: 1
 11439  004F60  90D8               	bcf	status,0,c
 11440  004F62  0012               	return	
 11441  004F64                     l9865:
 11442                           
 11443                           ; BSR set to: 1
 11444  004F64  80D8               	bsf	status,0,c
 11445                           
 11446                           ; BSR set to: 1
 11447  004F66  0012               	return	
 11448  004F68                     __end_of___ftge:
 11449                           	opt stack 0
 11450                           tblptru	equ	0xFF8
 11451                           tblptrh	equ	0xFF7
 11452                           tblptrl	equ	0xFF6
 11453                           tablat	equ	0xFF5
 11454                           prodh	equ	0xFF4
 11455                           prodl	equ	0xFF3
 11456                           intcon	equ	0xFF2
 11457                           postinc0	equ	0xFEE
 11458                           wreg	equ	0xFE8
 11459                           postdec1	equ	0xFE5
 11460                           fsr1l	equ	0xFE1
 11461                           indf2	equ	0xFDF
 11462                           postinc2	equ	0xFDE
 11463                           postdec2	equ	0xFDD
 11464                           fsr2h	equ	0xFDA
 11465                           fsr2l	equ	0xFD9
 11466                           status	equ	0xFD8
 11467                           
 11468 ;; *************** function _clockConfig *****************
 11469 ;; Defined at:
 11470 ;;		line 76 in file "source/SYSConfig.h"
 11471 ;; Parameters:    Size  Location     Type
 11472 ;;		None
 11473 ;; Auto vars:     Size  Location     Type
 11474 ;;		None
 11475 ;; Return value:  Size  Location     Type
 11476 ;;                  1    wreg      void 
 11477 ;; Registers used:
 11478 ;;		wreg, status,2
 11479 ;; Tracked objects:
 11480 ;;		On entry : 0/0
 11481 ;;		On exit  : 0/0
 11482 ;;		Unchanged: 0/0
 11483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11484 ;;      Params:         0       0       0       0       0       0       0
 11485 ;;      Locals:         0       0       0       0       0       0       0
 11486 ;;      Temps:          0       0       0       0       0       0       0
 11487 ;;      Totals:         0       0       0       0       0       0       0
 11488 ;;Total ram usage:        0 bytes
 11489 ;; Hardware stack levels used:    1
 11490 ;; Hardware stack levels required when called:   12
 11491 ;; This function calls:
 11492 ;;		Nothing
 11493 ;; This function is called by:
 11494 ;;		_main
 11495 ;; This function uses a non-reentrant model
 11496 ;;
 11497                           
 11498                           	psect	text43
 11499  006B46                     __ptext43:
 11500                           	opt stack 0
 11501  006B46                     _clockConfig:
 11502                           	opt stack 18
 11503                           
 11504                           ;SYSConfig.h: 77: OSCCONbits.IDLEN = 1;
 11505                           
 11506                           ; BSR set to: 1
 11507                           ;incstack = 0
 11508  006B46  8ED3               	bsf	4051,7,c	;volatile
 11509                           
 11510                           ;SYSConfig.h: 78: OSCCONbits.IRCF = 0b111;
 11511  006B48  88D3               	bsf	4051,4,c	;volatile
 11512  006B4A  8AD3               	bsf	4051,5,c	;volatile
 11513  006B4C  8CD3               	bsf	4051,6,c	;volatile
 11514  006B4E                     l91:
 11515  006B4E  A4D3               	btfss	4051,2,c	;volatile
 11516  006B50  D7FE               	goto	l91
 11517                           
 11518                           ;SYSConfig.h: 80: OSCCONbits.SCS = 0b11;
 11519  006B52  0E03               	movlw	3
 11520  006B54  12D3               	iorwf	4051,f,c	;volatile
 11521                           
 11522                           ;SYSConfig.h: 81: OSCCON2bits.MFIOSEL = 0;
 11523  006B56  98D2               	bcf	4050,4,c	;volatile
 11524                           
 11525                           ;SYSConfig.h: 82: OSCCON2bits.SOSCGO = 0;
 11526  006B58  96D2               	bcf	4050,3,c	;volatile
 11527                           
 11528                           ;SYSConfig.h: 83: OSCTUNEbits.INTSRC = 0;
 11529  006B5A  9E9B               	bcf	3995,7,c	;volatile
 11530                           
 11531                           ;SYSConfig.h: 84: OSCTUNEbits.TUN = 0b011111;
 11532  006B5C  809B               	bsf	3995,0,c	;volatile
 11533  006B5E  829B               	bsf	3995,1,c	;volatile
 11534  006B60  849B               	bsf	3995,2,c	;volatile
 11535  006B62  869B               	bsf	3995,3,c	;volatile
 11536  006B64  889B               	bsf	3995,4,c	;volatile
 11537  006B66  9A9B               	bcf	3995,5,c	;volatile
 11538                           
 11539                           ;SYSConfig.h: 85: OSCTUNEbits.PLLEN = 1;
 11540  006B68  8C9B               	bsf	3995,6,c	;volatile
 11541  006B6A  0012               	return		;funcret
 11542  006B6C                     __end_of_clockConfig:
 11543                           	opt stack 0
 11544                           tblptru	equ	0xFF8
 11545                           tblptrh	equ	0xFF7
 11546                           tblptrl	equ	0xFF6
 11547                           tablat	equ	0xFF5
 11548                           prodh	equ	0xFF4
 11549                           prodl	equ	0xFF3
 11550                           intcon	equ	0xFF2
 11551                           postinc0	equ	0xFEE
 11552                           wreg	equ	0xFE8
 11553                           postdec1	equ	0xFE5
 11554                           fsr1l	equ	0xFE1
 11555                           indf2	equ	0xFDF
 11556                           postinc2	equ	0xFDE
 11557                           postdec2	equ	0xFDD
 11558                           fsr2h	equ	0xFDA
 11559                           fsr2l	equ	0xFD9
 11560                           status	equ	0xFD8
 11561                           
 11562 ;; *************** function _buttonChecking *****************
 11563 ;; Defined at:
 11564 ;;		line 9 in file "source/ButtonController.h"
 11565 ;; Parameters:    Size  Location     Type
 11566 ;;		None
 11567 ;; Auto vars:     Size  Location     Type
 11568 ;;		None
 11569 ;; Return value:  Size  Location     Type
 11570 ;;                  1    wreg      void 
 11571 ;; Registers used:
 11572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11573 ;; Tracked objects:
 11574 ;;		On entry : 0/0
 11575 ;;		On exit  : 0/0
 11576 ;;		Unchanged: 0/0
 11577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11578 ;;      Params:         0       0       0       0       0       0       0
 11579 ;;      Locals:         0       0       0       0       0       0       0
 11580 ;;      Temps:          0       0       0       0       0       0       0
 11581 ;;      Totals:         0       0       0       0       0       0       0
 11582 ;;Total ram usage:        0 bytes
 11583 ;; Hardware stack levels used:    1
 11584 ;; Hardware stack levels required when called:   18
 11585 ;; This function calls:
 11586 ;;		_delay_ms
 11587 ;;		_longPressDOWN
 11588 ;;		_longPressENTER
 11589 ;;		_longPressRETRO
 11590 ;;		_longPressUP
 11591 ;;		_pressDOWN
 11592 ;;		_pressENTER
 11593 ;;		_pressRETRO
 11594 ;;		_pressUP
 11595 ;;		_releaseDOWN
 11596 ;;		_releaseENTER
 11597 ;;		_releaseRETRO
 11598 ;;		_releaseUP
 11599 ;; This function is called by:
 11600 ;;		_main
 11601 ;; This function uses a non-reentrant model
 11602 ;;
 11603                           
 11604                           	psect	text44
 11605  001F9A                     __ptext44:
 11606                           	opt stack 0
 11607  001F9A                     _buttonChecking:
 11608                           	opt stack 12
 11609                           
 11610                           ;ButtonController.h: 10: if(!PORTAbits.RA2 && lastSttUP) {
 11611                           
 11612                           ;incstack = 0
 11613  001F9A  B480               	btfsc	3968,2,c	;volatile
 11614  001F9C  D010               	goto	l824
 11615  001F9E  0101               	movlb	1	; () banked
 11616  001FA0  5199               	movf	_lastSttUP& (0+255),w,b
 11617  001FA2  0101               	movlb	1	; () banked
 11618  001FA4  B4D8               	btfsc	status,2,c
 11619  001FA6  D00B               	goto	l824
 11620                           
 11621                           ; BSR set to: 1
 11622                           ;ButtonController.h: 11: lastSttUP = 0;
 11623  001FA8  0E00               	movlw	0
 11624  001FAA  0101               	movlb	1	; () banked
 11625  001FAC  6F99               	movwf	_lastSttUP& (0+255),b
 11626                           
 11627                           ; BSR set to: 1
 11628                           ;ButtonController.h: 12: delay_ms(200);
 11629  001FAE  0E00               	movlw	0
 11630  001FB0  0101               	movlb	1	; () banked
 11631  001FB2  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11632  001FB4  0EC8               	movlw	200
 11633  001FB6  6F00               	movwf	delay_ms@del& (0+255),b
 11634  001FB8  EC1C  F034         	call	_delay_ms	;wreg free
 11635                           
 11636                           ;ButtonController.h: 13: }else if(PORTAbits.RA2 && !lastSttUP) {
 11637  001FBC  D044               	goto	l12427
 11638  001FBE                     l824:
 11639  001FBE  A480               	btfss	3968,2,c	;volatile
 11640  001FC0  D016               	goto	l12405
 11641  001FC2  0101               	movlb	1	; () banked
 11642  001FC4  5199               	movf	_lastSttUP& (0+255),w,b
 11643  001FC6  0101               	movlb	1	; () banked
 11644  001FC8  A4D8               	btfss	status,2,c
 11645  001FCA  D011               	goto	l12405
 11646                           
 11647                           ; BSR set to: 1
 11648                           ;ButtonController.h: 14: lastSttUP = 1;
 11649  001FCC  0E01               	movlw	1
 11650  001FCE  0101               	movlb	1	; () banked
 11651  001FD0  6F99               	movwf	_lastSttUP& (0+255),b
 11652                           
 11653                           ; BSR set to: 1
 11654                           ;ButtonController.h: 15: if(holdUPcont < 10)
 11655  001FD2  0E0A               	movlw	10
 11656  001FD4  0101               	movlb	1	; () banked
 11657  001FD6  61C0               	cpfslt	_holdUPcont& (0+255),b
 11658  001FD8  D002               	goto	l12403
 11659                           
 11660                           ; BSR set to: 1
 11661                           ;ButtonController.h: 16: pressUP();
 11662  001FDA  ECA8  F020         	call	_pressUP	;wreg free
 11663  001FDE                     l12403:
 11664                           
 11665                           ;ButtonController.h: 17: delay_ms(50);
 11666  001FDE  0E00               	movlw	0
 11667  001FE0  0101               	movlb	1	; () banked
 11668  001FE2  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11669  001FE4  0E32               	movlw	50
 11670  001FE6  6F00               	movwf	delay_ms@del& (0+255),b
 11671  001FE8  EC1C  F034         	call	_delay_ms	;wreg free
 11672                           
 11673                           ;ButtonController.h: 18: }else if(PORTAbits.RA2 == lastSttUP) {
 11674  001FEC  D02C               	goto	l12427
 11675  001FEE                     l12405:
 11676  001FEE  A480               	btfss	3968,2,c	;volatile
 11677  001FF0  D002               	goto	u18440
 11678  001FF2  0E01               	movlw	1
 11679  001FF4  D001               	goto	u18446
 11680  001FF6                     u18440:
 11681  001FF6  0E00               	movlw	0
 11682  001FF8                     u18446:
 11683  001FF8  0101               	movlb	1	; () banked
 11684  001FFA  1999               	xorwf	_lastSttUP& (0+255),w,b
 11685  001FFC  A4D8               	btfss	status,2,c
 11686  001FFE  D023               	goto	l12427
 11687                           
 11688                           ; BSR set to: 1
 11689                           ;ButtonController.h: 19: if(PORTAbits.RA2) {
 11690  002000  A480               	btfss	3968,2,c	;volatile
 11691  002002  D006               	goto	l12413
 11692                           
 11693                           ; BSR set to: 1
 11694                           ;ButtonController.h: 20: holdUPcont = 0;
 11695  002004  0E00               	movlw	0
 11696  002006  0101               	movlb	1	; () banked
 11697  002008  6FC0               	movwf	_holdUPcont& (0+255),b
 11698                           
 11699                           ; BSR set to: 1
 11700                           ;ButtonController.h: 21: releaseUP();
 11701  00200A  EC46  F036         	call	_releaseUP	;wreg free
 11702                           
 11703                           ;ButtonController.h: 22: }else {
 11704  00200E  D01B               	goto	l12427
 11705  002010                     l12413:
 11706                           
 11707                           ;ButtonController.h: 23: if(!UPsecurLock)
 11708  002010  0101               	movlb	1	; () banked
 11709  002012  51B9               	movf	_UPsecurLock& (0+255),w,b
 11710  002014  A4D8               	btfss	status,2,c
 11711  002016  D002               	goto	l12417
 11712                           
 11713                           ; BSR set to: 1
 11714                           ;ButtonController.h: 24: holdUPcont++;
 11715  002018  0101               	movlb	1	; () banked
 11716  00201A  2BC0               	incf	_holdUPcont& (0+255),f,b
 11717  00201C                     l12417:
 11718                           
 11719                           ; BSR set to: 1
 11720                           ;ButtonController.h: 25: if(holdUPcont > 9) {
 11721  00201C  0E09               	movlw	9
 11722  00201E  0101               	movlb	1	; () banked
 11723  002020  65C0               	cpfsgt	_holdUPcont& (0+255),b
 11724  002022  D00A               	goto	l12425
 11725                           
 11726                           ; BSR set to: 1
 11727                           ;ButtonController.h: 26: if(holdUPcont < 26)
 11728  002024  0E1A               	movlw	26
 11729  002026  0101               	movlb	1	; () banked
 11730  002028  61C0               	cpfslt	_holdUPcont& (0+255),b
 11731  00202A  D003               	goto	l12423
 11732                           
 11733                           ; BSR set to: 1
 11734                           ;ButtonController.h: 27: longPressUP();
 11735  00202C  EC63  F031         	call	_longPressUP	;wreg free
 11736  002030  D003               	goto	l12425
 11737  002032                     l12423:
 11738                           
 11739                           ;ButtonController.h: 28: else
 11740                           ;ButtonController.h: 29: UPsecurLock = 1;
 11741  002032  0E01               	movlw	1
 11742  002034  0101               	movlb	1	; () banked
 11743  002036  6FB9               	movwf	_UPsecurLock& (0+255),b
 11744  002038                     l12425:
 11745                           
 11746                           ;ButtonController.h: 30: }
 11747                           ;ButtonController.h: 31: delay_ms(200);
 11748  002038  0E00               	movlw	0
 11749  00203A  0101               	movlb	1	; () banked
 11750  00203C  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11751  00203E  0EC8               	movlw	200
 11752  002040  6F00               	movwf	delay_ms@del& (0+255),b
 11753  002042  EC1C  F034         	call	_delay_ms	;wreg free
 11754  002046                     l12427:
 11755                           
 11756                           ;ButtonController.h: 32: }
 11757                           ;ButtonController.h: 33: }
 11758                           ;ButtonController.h: 34: if(!PORTAbits.RA3 && lastSttDOWN) {
 11759  002046  B680               	btfsc	3968,3,c	;volatile
 11760  002048  D010               	goto	l836
 11761  00204A  0101               	movlb	1	; () banked
 11762  00204C  5196               	movf	_lastSttDOWN& (0+255),w,b
 11763  00204E  0101               	movlb	1	; () banked
 11764  002050  B4D8               	btfsc	status,2,c
 11765  002052  D00B               	goto	l836
 11766                           
 11767                           ; BSR set to: 1
 11768                           ;ButtonController.h: 35: lastSttDOWN = 0;
 11769  002054  0E00               	movlw	0
 11770  002056  0101               	movlb	1	; () banked
 11771  002058  6F96               	movwf	_lastSttDOWN& (0+255),b
 11772                           
 11773                           ; BSR set to: 1
 11774                           ;ButtonController.h: 36: delay_ms(200);
 11775  00205A  0E00               	movlw	0
 11776  00205C  0101               	movlb	1	; () banked
 11777  00205E  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11778  002060  0EC8               	movlw	200
 11779  002062  6F00               	movwf	delay_ms@del& (0+255),b
 11780  002064  EC1C  F034         	call	_delay_ms	;wreg free
 11781                           
 11782                           ;ButtonController.h: 37: }else if(PORTAbits.RA3 && !lastSttDOWN) {
 11783  002068  D044               	goto	l12467
 11784  00206A                     l836:
 11785  00206A  A680               	btfss	3968,3,c	;volatile
 11786  00206C  D016               	goto	l12445
 11787  00206E  0101               	movlb	1	; () banked
 11788  002070  5196               	movf	_lastSttDOWN& (0+255),w,b
 11789  002072  0101               	movlb	1	; () banked
 11790  002074  A4D8               	btfss	status,2,c
 11791  002076  D011               	goto	l12445
 11792                           
 11793                           ; BSR set to: 1
 11794                           ;ButtonController.h: 38: lastSttDOWN = 1;
 11795  002078  0E01               	movlw	1
 11796  00207A  0101               	movlb	1	; () banked
 11797  00207C  6F96               	movwf	_lastSttDOWN& (0+255),b
 11798                           
 11799                           ; BSR set to: 1
 11800                           ;ButtonController.h: 39: if(holdDOWNcont < 10)
 11801  00207E  0E0A               	movlw	10
 11802  002080  0101               	movlb	1	; () banked
 11803  002082  61BD               	cpfslt	_holdDOWNcont& (0+255),b
 11804  002084  D002               	goto	l12443
 11805                           
 11806                           ; BSR set to: 1
 11807                           ;ButtonController.h: 40: pressDOWN();
 11808  002086  ECC6  F022         	call	_pressDOWN	;wreg free
 11809  00208A                     l12443:
 11810                           
 11811                           ;ButtonController.h: 41: delay_ms(50);
 11812  00208A  0E00               	movlw	0
 11813  00208C  0101               	movlb	1	; () banked
 11814  00208E  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11815  002090  0E32               	movlw	50
 11816  002092  6F00               	movwf	delay_ms@del& (0+255),b
 11817  002094  EC1C  F034         	call	_delay_ms	;wreg free
 11818                           
 11819                           ;ButtonController.h: 42: }else if(PORTAbits.RA3 == lastSttDOWN) {
 11820  002098  D02C               	goto	l12467
 11821  00209A                     l12445:
 11822  00209A  A680               	btfss	3968,3,c	;volatile
 11823  00209C  D002               	goto	u18550
 11824  00209E  0E01               	movlw	1
 11825  0020A0  D001               	goto	u18556
 11826  0020A2                     u18550:
 11827  0020A2  0E00               	movlw	0
 11828  0020A4                     u18556:
 11829  0020A4  0101               	movlb	1	; () banked
 11830  0020A6  1996               	xorwf	_lastSttDOWN& (0+255),w,b
 11831  0020A8  A4D8               	btfss	status,2,c
 11832  0020AA  D023               	goto	l12467
 11833                           
 11834                           ; BSR set to: 1
 11835                           ;ButtonController.h: 43: if(PORTAbits.RA3) {
 11836  0020AC  A680               	btfss	3968,3,c	;volatile
 11837  0020AE  D006               	goto	l12453
 11838                           
 11839                           ; BSR set to: 1
 11840                           ;ButtonController.h: 44: holdDOWNcont = 0;
 11841  0020B0  0E00               	movlw	0
 11842  0020B2  0101               	movlb	1	; () banked
 11843  0020B4  6FBD               	movwf	_holdDOWNcont& (0+255),b
 11844                           
 11845                           ; BSR set to: 1
 11846                           ;ButtonController.h: 45: releaseDOWN();
 11847  0020B6  EC52  F036         	call	_releaseDOWN	;wreg free
 11848                           
 11849                           ;ButtonController.h: 46: }else {
 11850  0020BA  D01B               	goto	l12467
 11851  0020BC                     l12453:
 11852                           
 11853                           ;ButtonController.h: 47: if(!DOWNsecurLock)
 11854  0020BC  0101               	movlb	1	; () banked
 11855  0020BE  51B5               	movf	_DOWNsecurLock& (0+255),w,b
 11856  0020C0  A4D8               	btfss	status,2,c
 11857  0020C2  D002               	goto	l12457
 11858                           
 11859                           ; BSR set to: 1
 11860                           ;ButtonController.h: 48: holdDOWNcont++;
 11861  0020C4  0101               	movlb	1	; () banked
 11862  0020C6  2BBD               	incf	_holdDOWNcont& (0+255),f,b
 11863  0020C8                     l12457:
 11864                           
 11865                           ; BSR set to: 1
 11866                           ;ButtonController.h: 49: if(holdDOWNcont > 9) {
 11867  0020C8  0E09               	movlw	9
 11868  0020CA  0101               	movlb	1	; () banked
 11869  0020CC  65BD               	cpfsgt	_holdDOWNcont& (0+255),b
 11870  0020CE  D00A               	goto	l12465
 11871                           
 11872                           ; BSR set to: 1
 11873                           ;ButtonController.h: 50: if(holdDOWNcont < 26)
 11874  0020D0  0E1A               	movlw	26
 11875  0020D2  0101               	movlb	1	; () banked
 11876  0020D4  61BD               	cpfslt	_holdDOWNcont& (0+255),b
 11877  0020D6  D003               	goto	l12463
 11878                           
 11879                           ; BSR set to: 1
 11880                           ;ButtonController.h: 51: longPressDOWN();
 11881  0020D8  EC64  F035         	call	_longPressDOWN	;wreg free
 11882  0020DC  D003               	goto	l12465
 11883  0020DE                     l12463:
 11884                           
 11885                           ;ButtonController.h: 52: else
 11886                           ;ButtonController.h: 53: DOWNsecurLock = 1;
 11887  0020DE  0E01               	movlw	1
 11888  0020E0  0101               	movlb	1	; () banked
 11889  0020E2  6FB5               	movwf	_DOWNsecurLock& (0+255),b
 11890  0020E4                     l12465:
 11891                           
 11892                           ;ButtonController.h: 54: }
 11893                           ;ButtonController.h: 55: delay_ms(200);
 11894  0020E4  0E00               	movlw	0
 11895  0020E6  0101               	movlb	1	; () banked
 11896  0020E8  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11897  0020EA  0EC8               	movlw	200
 11898  0020EC  6F00               	movwf	delay_ms@del& (0+255),b
 11899  0020EE  EC1C  F034         	call	_delay_ms	;wreg free
 11900  0020F2                     l12467:
 11901                           
 11902                           ;ButtonController.h: 56: }
 11903                           ;ButtonController.h: 57: }
 11904                           ;ButtonController.h: 58: if(!PORTAbits.RA4 && lastSttRETRO) {
 11905  0020F2  B880               	btfsc	3968,4,c	;volatile
 11906  0020F4  D010               	goto	l848
 11907  0020F6  0101               	movlb	1	; () banked
 11908  0020F8  5198               	movf	_lastSttRETRO& (0+255),w,b
 11909  0020FA  0101               	movlb	1	; () banked
 11910  0020FC  B4D8               	btfsc	status,2,c
 11911  0020FE  D00B               	goto	l848
 11912                           
 11913                           ; BSR set to: 1
 11914                           ;ButtonController.h: 59: lastSttRETRO = 0;
 11915  002100  0E00               	movlw	0
 11916  002102  0101               	movlb	1	; () banked
 11917  002104  6F98               	movwf	_lastSttRETRO& (0+255),b
 11918                           
 11919                           ; BSR set to: 1
 11920                           ;ButtonController.h: 60: delay_ms(200);
 11921  002106  0E00               	movlw	0
 11922  002108  0101               	movlb	1	; () banked
 11923  00210A  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11924  00210C  0EC8               	movlw	200
 11925  00210E  6F00               	movwf	delay_ms@del& (0+255),b
 11926  002110  EC1C  F034         	call	_delay_ms	;wreg free
 11927                           
 11928                           ;ButtonController.h: 61: }else if(PORTAbits.RA4 && !lastSttRETRO) {
 11929  002114  D044               	goto	l12505
 11930  002116                     l848:
 11931  002116  A880               	btfss	3968,4,c	;volatile
 11932  002118  D016               	goto	l12483
 11933  00211A  0101               	movlb	1	; () banked
 11934  00211C  5198               	movf	_lastSttRETRO& (0+255),w,b
 11935  00211E  0101               	movlb	1	; () banked
 11936  002120  A4D8               	btfss	status,2,c
 11937  002122  D011               	goto	l12483
 11938                           
 11939                           ; BSR set to: 1
 11940                           ;ButtonController.h: 62: lastSttRETRO = 1;
 11941  002124  0E01               	movlw	1
 11942  002126  0101               	movlb	1	; () banked
 11943  002128  6F98               	movwf	_lastSttRETRO& (0+255),b
 11944                           
 11945                           ; BSR set to: 1
 11946                           ;ButtonController.h: 63: if(holdRETROcont < 10)
 11947  00212A  0E0A               	movlw	10
 11948  00212C  0101               	movlb	1	; () banked
 11949  00212E  61BF               	cpfslt	_holdRETROcont& (0+255),b
 11950  002130  D002               	goto	l851
 11951                           
 11952                           ; BSR set to: 1
 11953                           ;ButtonController.h: 64: pressRETRO();
 11954  002132  EC94  F02C         	call	_pressRETRO	;wreg free
 11955  002136                     l851:
 11956                           
 11957                           ;ButtonController.h: 65: delay_ms(50);
 11958  002136  0E00               	movlw	0
 11959  002138  0101               	movlb	1	; () banked
 11960  00213A  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11961  00213C  0E32               	movlw	50
 11962  00213E  6F00               	movwf	delay_ms@del& (0+255),b
 11963  002140  EC1C  F034         	call	_delay_ms	;wreg free
 11964                           
 11965                           ;ButtonController.h: 66: }else if(PORTAbits.RA4 == lastSttRETRO) {
 11966  002144  D02C               	goto	l12505
 11967  002146                     l12483:
 11968  002146  A880               	btfss	3968,4,c	;volatile
 11969  002148  D002               	goto	u18660
 11970  00214A  0E01               	movlw	1
 11971  00214C  D001               	goto	u18666
 11972  00214E                     u18660:
 11973  00214E  0E00               	movlw	0
 11974  002150                     u18666:
 11975  002150  0101               	movlb	1	; () banked
 11976  002152  1998               	xorwf	_lastSttRETRO& (0+255),w,b
 11977  002154  A4D8               	btfss	status,2,c
 11978  002156  D023               	goto	l12505
 11979                           
 11980                           ; BSR set to: 1
 11981                           ;ButtonController.h: 67: if(PORTAbits.RA4) {
 11982  002158  A880               	btfss	3968,4,c	;volatile
 11983  00215A  D006               	goto	l12491
 11984                           
 11985                           ; BSR set to: 1
 11986                           ;ButtonController.h: 68: holdRETROcont = 0;
 11987  00215C  0E00               	movlw	0
 11988  00215E  0101               	movlb	1	; () banked
 11989  002160  6FBF               	movwf	_holdRETROcont& (0+255),b
 11990                           
 11991                           ; BSR set to: 1
 11992                           ;ButtonController.h: 69: releaseRETRO();
 11993  002162  EC4C  F036         	call	_releaseRETRO	;wreg free
 11994                           
 11995                           ;ButtonController.h: 70: }else {
 11996  002166  D01B               	goto	l12505
 11997  002168                     l12491:
 11998                           
 11999                           ;ButtonController.h: 71: if(!RETROsecurLock)
 12000  002168  0101               	movlb	1	; () banked
 12001  00216A  51B8               	movf	_RETROsecurLock& (0+255),w,b
 12002  00216C  A4D8               	btfss	status,2,c
 12003  00216E  D002               	goto	l12495
 12004                           
 12005                           ; BSR set to: 1
 12006                           ;ButtonController.h: 72: holdRETROcont++;
 12007  002170  0101               	movlb	1	; () banked
 12008  002172  2BBF               	incf	_holdRETROcont& (0+255),f,b
 12009  002174                     l12495:
 12010                           
 12011                           ; BSR set to: 1
 12012                           ;ButtonController.h: 73: if(holdRETROcont > 9) {
 12013  002174  0E09               	movlw	9
 12014  002176  0101               	movlb	1	; () banked
 12015  002178  65BF               	cpfsgt	_holdRETROcont& (0+255),b
 12016  00217A  D00A               	goto	l12503
 12017                           
 12018                           ; BSR set to: 1
 12019                           ;ButtonController.h: 74: if(holdRETROcont < 26)
 12020  00217C  0E1A               	movlw	26
 12021  00217E  0101               	movlb	1	; () banked
 12022  002180  61BF               	cpfslt	_holdRETROcont& (0+255),b
 12023  002182  D003               	goto	l12501
 12024                           
 12025                           ; BSR set to: 1
 12026                           ;ButtonController.h: 75: longPressRETRO();
 12027  002184  ECAC  F032         	call	_longPressRETRO	;wreg free
 12028  002188  D003               	goto	l12503
 12029  00218A                     l12501:
 12030                           
 12031                           ;ButtonController.h: 76: else
 12032                           ;ButtonController.h: 77: RETROsecurLock = 1;
 12033  00218A  0E01               	movlw	1
 12034  00218C  0101               	movlb	1	; () banked
 12035  00218E  6FB8               	movwf	_RETROsecurLock& (0+255),b
 12036  002190                     l12503:
 12037                           
 12038                           ;ButtonController.h: 78: }
 12039                           ;ButtonController.h: 79: delay_ms(200);
 12040  002190  0E00               	movlw	0
 12041  002192  0101               	movlb	1	; () banked
 12042  002194  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12043  002196  0EC8               	movlw	200
 12044  002198  6F00               	movwf	delay_ms@del& (0+255),b
 12045  00219A  EC1C  F034         	call	_delay_ms	;wreg free
 12046  00219E                     l12505:
 12047                           
 12048                           ;ButtonController.h: 80: }
 12049                           ;ButtonController.h: 81: }
 12050                           ;ButtonController.h: 82: if(!PORTAbits.RA5 && lastSttENTER) {
 12051  00219E  BA80               	btfsc	3968,5,c	;volatile
 12052  0021A0  D010               	goto	l860
 12053  0021A2  0101               	movlb	1	; () banked
 12054  0021A4  5197               	movf	_lastSttENTER& (0+255),w,b
 12055  0021A6  0101               	movlb	1	; () banked
 12056  0021A8  B4D8               	btfsc	status,2,c
 12057  0021AA  D00B               	goto	l860
 12058                           
 12059                           ; BSR set to: 1
 12060                           ;ButtonController.h: 83: lastSttENTER = 0;
 12061  0021AC  0E00               	movlw	0
 12062  0021AE  0101               	movlb	1	; () banked
 12063  0021B0  6F97               	movwf	_lastSttENTER& (0+255),b
 12064                           
 12065                           ; BSR set to: 1
 12066                           ;ButtonController.h: 84: delay_ms(200);
 12067  0021B2  0E00               	movlw	0
 12068  0021B4  0101               	movlb	1	; () banked
 12069  0021B6  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12070  0021B8  0EC8               	movlw	200
 12071  0021BA  6F00               	movwf	delay_ms@del& (0+255),b
 12072  0021BC  EC1C  F034         	call	_delay_ms	;wreg free
 12073                           
 12074                           ;ButtonController.h: 85: }else if(PORTAbits.RA5 && !lastSttENTER) {
 12075  0021C0  0012               	return	
 12076  0021C2                     l860:
 12077  0021C2  AA80               	btfss	3968,5,c	;volatile
 12078  0021C4  D016               	goto	l12523
 12079  0021C6  0101               	movlb	1	; () banked
 12080  0021C8  5197               	movf	_lastSttENTER& (0+255),w,b
 12081  0021CA  0101               	movlb	1	; () banked
 12082  0021CC  A4D8               	btfss	status,2,c
 12083  0021CE  D011               	goto	l12523
 12084                           
 12085                           ; BSR set to: 1
 12086                           ;ButtonController.h: 86: lastSttENTER = 1;
 12087  0021D0  0E01               	movlw	1
 12088  0021D2  0101               	movlb	1	; () banked
 12089  0021D4  6F97               	movwf	_lastSttENTER& (0+255),b
 12090                           
 12091                           ; BSR set to: 1
 12092                           ;ButtonController.h: 87: if(holdENTERcont < 10)
 12093  0021D6  0E0A               	movlw	10
 12094  0021D8  0101               	movlb	1	; () banked
 12095  0021DA  61BE               	cpfslt	_holdENTERcont& (0+255),b
 12096  0021DC  D002               	goto	l12521
 12097                           
 12098                           ; BSR set to: 1
 12099                           ;ButtonController.h: 88: pressENTER();
 12100  0021DE  EC19  F00D         	call	_pressENTER	;wreg free
 12101  0021E2                     l12521:
 12102                           
 12103                           ;ButtonController.h: 89: delay_ms(50);
 12104  0021E2  0E00               	movlw	0
 12105  0021E4  0101               	movlb	1	; () banked
 12106  0021E6  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12107  0021E8  0E32               	movlw	50
 12108  0021EA  6F00               	movwf	delay_ms@del& (0+255),b
 12109  0021EC  EC1C  F034         	call	_delay_ms	;wreg free
 12110                           
 12111                           ;ButtonController.h: 90: }else if(PORTAbits.RA5 == lastSttENTER) {
 12112  0021F0  0012               	return	
 12113  0021F2                     l12523:
 12114  0021F2  AA80               	btfss	3968,5,c	;volatile
 12115  0021F4  D002               	goto	u18770
 12116  0021F6  0E01               	movlw	1
 12117  0021F8  D001               	goto	u18776
 12118  0021FA                     u18770:
 12119  0021FA  0E00               	movlw	0
 12120  0021FC                     u18776:
 12121  0021FC  0101               	movlb	1	; () banked
 12122  0021FE  1997               	xorwf	_lastSttENTER& (0+255),w,b
 12123  002200  A4D8               	btfss	status,2,c
 12124  002202  0012               	return	
 12125                           
 12126                           ; BSR set to: 1
 12127                           ;ButtonController.h: 91: if(PORTAbits.RA5) {
 12128  002204  AA80               	btfss	3968,5,c	;volatile
 12129  002206  D006               	goto	l12531
 12130                           
 12131                           ; BSR set to: 1
 12132                           ;ButtonController.h: 92: holdENTERcont = 0;
 12133  002208  0E00               	movlw	0
 12134  00220A  0101               	movlb	1	; () banked
 12135  00220C  6FBE               	movwf	_holdENTERcont& (0+255),b
 12136                           
 12137                           ; BSR set to: 1
 12138                           ;ButtonController.h: 93: releaseENTER();
 12139  00220E  EC38  F036         	call	_releaseENTER	;wreg free
 12140                           
 12141                           ;ButtonController.h: 94: }else {
 12142  002212  0012               	return	
 12143  002214                     l12531:
 12144                           
 12145                           ;ButtonController.h: 95: if(!ENTERsecurLock)
 12146  002214  0101               	movlb	1	; () banked
 12147  002216  51B7               	movf	_ENTERsecurLock& (0+255),w,b
 12148  002218  A4D8               	btfss	status,2,c
 12149  00221A  D002               	goto	l12535
 12150                           
 12151                           ; BSR set to: 1
 12152                           ;ButtonController.h: 96: holdENTERcont++;
 12153  00221C  0101               	movlb	1	; () banked
 12154  00221E  2BBE               	incf	_holdENTERcont& (0+255),f,b
 12155  002220                     l12535:
 12156                           
 12157                           ; BSR set to: 1
 12158                           ;ButtonController.h: 97: if(holdENTERcont > 9) {
 12159  002220  0E09               	movlw	9
 12160  002222  0101               	movlb	1	; () banked
 12161  002224  65BE               	cpfsgt	_holdENTERcont& (0+255),b
 12162  002226  D00A               	goto	l12543
 12163                           
 12164                           ; BSR set to: 1
 12165                           ;ButtonController.h: 98: if(holdENTERcont < 26)
 12166  002228  0E1A               	movlw	26
 12167  00222A  0101               	movlb	1	; () banked
 12168  00222C  61BE               	cpfslt	_holdENTERcont& (0+255),b
 12169  00222E  D003               	goto	l12541
 12170                           
 12171                           ; BSR set to: 1
 12172                           ;ButtonController.h: 99: longPressENTER();
 12173  002230  ECD1  F008         	call	_longPressENTER	;wreg free
 12174  002234  D003               	goto	l12543
 12175  002236                     l12541:
 12176                           
 12177                           ;ButtonController.h: 100: else
 12178                           ;ButtonController.h: 101: ENTERsecurLock = 1;
 12179  002236  0E01               	movlw	1
 12180  002238  0101               	movlb	1	; () banked
 12181  00223A  6FB7               	movwf	_ENTERsecurLock& (0+255),b
 12182  00223C                     l12543:
 12183                           
 12184                           ;ButtonController.h: 102: }
 12185                           ;ButtonController.h: 103: delay_ms(200);
 12186  00223C  0E00               	movlw	0
 12187  00223E  0101               	movlb	1	; () banked
 12188  002240  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12189  002242  0EC8               	movlw	200
 12190  002244  6F00               	movwf	delay_ms@del& (0+255),b
 12191  002246  EC1C  F034         	call	_delay_ms	;wreg free
 12192  00224A  0012               	return	
 12193  00224C                     __end_of_buttonChecking:
 12194                           	opt stack 0
 12195                           tblptru	equ	0xFF8
 12196                           tblptrh	equ	0xFF7
 12197                           tblptrl	equ	0xFF6
 12198                           tablat	equ	0xFF5
 12199                           prodh	equ	0xFF4
 12200                           prodl	equ	0xFF3
 12201                           intcon	equ	0xFF2
 12202                           postinc0	equ	0xFEE
 12203                           wreg	equ	0xFE8
 12204                           postdec1	equ	0xFE5
 12205                           fsr1l	equ	0xFE1
 12206                           indf2	equ	0xFDF
 12207                           postinc2	equ	0xFDE
 12208                           postdec2	equ	0xFDD
 12209                           fsr2h	equ	0xFDA
 12210                           fsr2l	equ	0xFD9
 12211                           status	equ	0xFD8
 12212                           
 12213 ;; *************** function _releaseUP *****************
 12214 ;; Defined at:
 12215 ;;		line 176 in file "source/DisplayProtocol.h"
 12216 ;; Parameters:    Size  Location     Type
 12217 ;;		None
 12218 ;; Auto vars:     Size  Location     Type
 12219 ;;		None
 12220 ;; Return value:  Size  Location     Type
 12221 ;;                  1    wreg      void 
 12222 ;; Registers used:
 12223 ;;		wreg, status,2
 12224 ;; Tracked objects:
 12225 ;;		On entry : 0/0
 12226 ;;		On exit  : 0/0
 12227 ;;		Unchanged: 0/0
 12228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12229 ;;      Params:         0       0       0       0       0       0       0
 12230 ;;      Locals:         0       0       0       0       0       0       0
 12231 ;;      Temps:          0       0       0       0       0       0       0
 12232 ;;      Totals:         0       0       0       0       0       0       0
 12233 ;;Total ram usage:        0 bytes
 12234 ;; Hardware stack levels used:    1
 12235 ;; Hardware stack levels required when called:   12
 12236 ;; This function calls:
 12237 ;;		Nothing
 12238 ;; This function is called by:
 12239 ;;		_buttonChecking
 12240 ;; This function uses a non-reentrant model
 12241 ;;
 12242                           
 12243                           	psect	text45
 12244  006C8C                     __ptext45:
 12245                           	opt stack 0
 12246  006C8C                     _releaseUP:
 12247                           	opt stack 17
 12248                           
 12249                           ;DisplayProtocol.h: 177: UPisLP = 0;
 12250                           
 12251                           ;incstack = 0
 12252  006C8C  0E00               	movlw	0
 12253  006C8E  6E3C               	movwf	_UPisLP,c
 12254                           
 12255                           ;DisplayProtocol.h: 178: UPsecurLock = 0;
 12256  006C90  0E00               	movlw	0
 12257  006C92  0101               	movlb	1	; () banked
 12258  006C94  6FB9               	movwf	_UPsecurLock& (0+255),b
 12259                           
 12260                           ; BSR set to: 1
 12261  006C96  0012               	return		;funcret
 12262  006C98                     __end_of_releaseUP:
 12263                           	opt stack 0
 12264                           tblptru	equ	0xFF8
 12265                           tblptrh	equ	0xFF7
 12266                           tblptrl	equ	0xFF6
 12267                           tablat	equ	0xFF5
 12268                           prodh	equ	0xFF4
 12269                           prodl	equ	0xFF3
 12270                           intcon	equ	0xFF2
 12271                           postinc0	equ	0xFEE
 12272                           wreg	equ	0xFE8
 12273                           postdec1	equ	0xFE5
 12274                           fsr1l	equ	0xFE1
 12275                           indf2	equ	0xFDF
 12276                           postinc2	equ	0xFDE
 12277                           postdec2	equ	0xFDD
 12278                           fsr2h	equ	0xFDA
 12279                           fsr2l	equ	0xFD9
 12280                           status	equ	0xFD8
 12281                           
 12282 ;; *************** function _releaseRETRO *****************
 12283 ;; Defined at:
 12284 ;;		line 268 in file "source/DisplayProtocol.h"
 12285 ;; Parameters:    Size  Location     Type
 12286 ;;		None
 12287 ;; Auto vars:     Size  Location     Type
 12288 ;;		None
 12289 ;; Return value:  Size  Location     Type
 12290 ;;                  1    wreg      void 
 12291 ;; Registers used:
 12292 ;;		wreg, status,2
 12293 ;; Tracked objects:
 12294 ;;		On entry : 0/0
 12295 ;;		On exit  : 0/0
 12296 ;;		Unchanged: 0/0
 12297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12298 ;;      Params:         0       0       0       0       0       0       0
 12299 ;;      Locals:         0       0       0       0       0       0       0
 12300 ;;      Temps:          0       0       0       0       0       0       0
 12301 ;;      Totals:         0       0       0       0       0       0       0
 12302 ;;Total ram usage:        0 bytes
 12303 ;; Hardware stack levels used:    1
 12304 ;; Hardware stack levels required when called:   12
 12305 ;; This function calls:
 12306 ;;		Nothing
 12307 ;; This function is called by:
 12308 ;;		_buttonChecking
 12309 ;; This function uses a non-reentrant model
 12310 ;;
 12311                           
 12312                           	psect	text46
 12313  006C98                     __ptext46:
 12314                           	opt stack 0
 12315  006C98                     _releaseRETRO:
 12316                           	opt stack 17
 12317                           
 12318                           ;DisplayProtocol.h: 269: RETROisLP = 0;
 12319                           
 12320                           ; BSR set to: 1
 12321                           ;incstack = 0
 12322  006C98  0E00               	movlw	0
 12323  006C9A  6E3B               	movwf	_RETROisLP,c
 12324                           
 12325                           ;DisplayProtocol.h: 270: RETROsecurLock = 0;
 12326  006C9C  0E00               	movlw	0
 12327  006C9E  0101               	movlb	1	; () banked
 12328  006CA0  6FB8               	movwf	_RETROsecurLock& (0+255),b
 12329                           
 12330                           ; BSR set to: 1
 12331  006CA2  0012               	return		;funcret
 12332  006CA4                     __end_of_releaseRETRO:
 12333                           	opt stack 0
 12334                           tblptru	equ	0xFF8
 12335                           tblptrh	equ	0xFF7
 12336                           tblptrl	equ	0xFF6
 12337                           tablat	equ	0xFF5
 12338                           prodh	equ	0xFF4
 12339                           prodl	equ	0xFF3
 12340                           intcon	equ	0xFF2
 12341                           postinc0	equ	0xFEE
 12342                           wreg	equ	0xFE8
 12343                           postdec1	equ	0xFE5
 12344                           fsr1l	equ	0xFE1
 12345                           indf2	equ	0xFDF
 12346                           postinc2	equ	0xFDE
 12347                           postdec2	equ	0xFDD
 12348                           fsr2h	equ	0xFDA
 12349                           fsr2l	equ	0xFD9
 12350                           status	equ	0xFD8
 12351                           
 12352 ;; *************** function _releaseENTER *****************
 12353 ;; Defined at:
 12354 ;;		line 440 in file "source/DisplayProtocol.h"
 12355 ;; Parameters:    Size  Location     Type
 12356 ;;		None
 12357 ;; Auto vars:     Size  Location     Type
 12358 ;;		None
 12359 ;; Return value:  Size  Location     Type
 12360 ;;                  1    wreg      void 
 12361 ;; Registers used:
 12362 ;;		wreg, status,2
 12363 ;; Tracked objects:
 12364 ;;		On entry : 0/0
 12365 ;;		On exit  : 0/0
 12366 ;;		Unchanged: 0/0
 12367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12368 ;;      Params:         0       0       0       0       0       0       0
 12369 ;;      Locals:         0       0       0       0       0       0       0
 12370 ;;      Temps:          0       0       0       0       0       0       0
 12371 ;;      Totals:         0       0       0       0       0       0       0
 12372 ;;Total ram usage:        0 bytes
 12373 ;; Hardware stack levels used:    1
 12374 ;; Hardware stack levels required when called:   12
 12375 ;; This function calls:
 12376 ;;		Nothing
 12377 ;; This function is called by:
 12378 ;;		_buttonChecking
 12379 ;; This function uses a non-reentrant model
 12380 ;;
 12381                           
 12382                           	psect	text47
 12383  006C70                     __ptext47:
 12384                           	opt stack 0
 12385  006C70                     _releaseENTER:
 12386                           	opt stack 17
 12387                           
 12388                           ;DisplayProtocol.h: 441: ENTERisLP = 0;
 12389                           
 12390                           ; BSR set to: 1
 12391                           ;incstack = 0
 12392  006C70  0E00               	movlw	0
 12393  006C72  0101               	movlb	1	; () banked
 12394  006C74  6FB6               	movwf	_ENTERisLP& (0+255),b
 12395                           
 12396                           ;DisplayProtocol.h: 442: ENTERsecurLock = 0;
 12397  006C76  0E00               	movlw	0
 12398  006C78  0101               	movlb	1	; () banked
 12399  006C7A  6FB7               	movwf	_ENTERsecurLock& (0+255),b
 12400                           
 12401                           ; BSR set to: 1
 12402  006C7C  0012               	return		;funcret
 12403  006C7E                     __end_of_releaseENTER:
 12404                           	opt stack 0
 12405                           tblptru	equ	0xFF8
 12406                           tblptrh	equ	0xFF7
 12407                           tblptrl	equ	0xFF6
 12408                           tablat	equ	0xFF5
 12409                           prodh	equ	0xFF4
 12410                           prodl	equ	0xFF3
 12411                           intcon	equ	0xFF2
 12412                           postinc0	equ	0xFEE
 12413                           wreg	equ	0xFE8
 12414                           postdec1	equ	0xFE5
 12415                           fsr1l	equ	0xFE1
 12416                           indf2	equ	0xFDF
 12417                           postinc2	equ	0xFDE
 12418                           postdec2	equ	0xFDD
 12419                           fsr2h	equ	0xFDA
 12420                           fsr2l	equ	0xFD9
 12421                           status	equ	0xFD8
 12422                           
 12423 ;; *************** function _releaseDOWN *****************
 12424 ;; Defined at:
 12425 ;;		line 224 in file "source/DisplayProtocol.h"
 12426 ;; Parameters:    Size  Location     Type
 12427 ;;		None
 12428 ;; Auto vars:     Size  Location     Type
 12429 ;;		None
 12430 ;; Return value:  Size  Location     Type
 12431 ;;                  1    wreg      void 
 12432 ;; Registers used:
 12433 ;;		wreg, status,2
 12434 ;; Tracked objects:
 12435 ;;		On entry : 0/0
 12436 ;;		On exit  : 0/0
 12437 ;;		Unchanged: 0/0
 12438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12439 ;;      Params:         0       0       0       0       0       0       0
 12440 ;;      Locals:         0       0       0       0       0       0       0
 12441 ;;      Temps:          0       0       0       0       0       0       0
 12442 ;;      Totals:         0       0       0       0       0       0       0
 12443 ;;Total ram usage:        0 bytes
 12444 ;; Hardware stack levels used:    1
 12445 ;; Hardware stack levels required when called:   12
 12446 ;; This function calls:
 12447 ;;		Nothing
 12448 ;; This function is called by:
 12449 ;;		_buttonChecking
 12450 ;; This function uses a non-reentrant model
 12451 ;;
 12452                           
 12453                           	psect	text48
 12454  006CA4                     __ptext48:
 12455                           	opt stack 0
 12456  006CA4                     _releaseDOWN:
 12457                           	opt stack 17
 12458                           
 12459                           ;DisplayProtocol.h: 225: DOWNisLP = 0;
 12460                           
 12461                           ; BSR set to: 1
 12462                           ;incstack = 0
 12463  006CA4  0E00               	movlw	0
 12464  006CA6  6E37               	movwf	_DOWNisLP,c
 12465                           
 12466                           ;DisplayProtocol.h: 226: DOWNsecurLock = 0;
 12467  006CA8  0E00               	movlw	0
 12468  006CAA  0101               	movlb	1	; () banked
 12469  006CAC  6FB5               	movwf	_DOWNsecurLock& (0+255),b
 12470                           
 12471                           ; BSR set to: 1
 12472  006CAE  0012               	return		;funcret
 12473  006CB0                     __end_of_releaseDOWN:
 12474                           	opt stack 0
 12475                           tblptru	equ	0xFF8
 12476                           tblptrh	equ	0xFF7
 12477                           tblptrl	equ	0xFF6
 12478                           tablat	equ	0xFF5
 12479                           prodh	equ	0xFF4
 12480                           prodl	equ	0xFF3
 12481                           intcon	equ	0xFF2
 12482                           postinc0	equ	0xFEE
 12483                           wreg	equ	0xFE8
 12484                           postdec1	equ	0xFE5
 12485                           fsr1l	equ	0xFE1
 12486                           indf2	equ	0xFDF
 12487                           postinc2	equ	0xFDE
 12488                           postdec2	equ	0xFDD
 12489                           fsr2h	equ	0xFDA
 12490                           fsr2l	equ	0xFD9
 12491                           status	equ	0xFD8
 12492                           
 12493 ;; *************** function _pressUP *****************
 12494 ;; Defined at:
 12495 ;;		line 124 in file "source/DisplayProtocol.h"
 12496 ;; Parameters:    Size  Location     Type
 12497 ;;		None
 12498 ;; Auto vars:     Size  Location     Type
 12499 ;;		None
 12500 ;; Return value:  Size  Location     Type
 12501 ;;                  1    wreg      void 
 12502 ;; Registers used:
 12503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12504 ;; Tracked objects:
 12505 ;;		On entry : 0/0
 12506 ;;		On exit  : 0/0
 12507 ;;		Unchanged: 0/0
 12508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12509 ;;      Params:         0       0       0       0       0       0       0
 12510 ;;      Locals:         0       0       0       0       0       0       0
 12511 ;;      Temps:          0       0       1       0       0       0       0
 12512 ;;      Totals:         0       0       1       0       0       0       0
 12513 ;;Total ram usage:        1 bytes
 12514 ;; Hardware stack levels used:    1
 12515 ;; Hardware stack levels required when called:   13
 12516 ;; This function calls:
 12517 ;;		_chanValDigUP
 12518 ;; This function is called by:
 12519 ;;		_buttonChecking
 12520 ;; This function uses a non-reentrant model
 12521 ;;
 12522                           
 12523                           	psect	text49
 12524  004150                     __ptext49:
 12525                           	opt stack 0
 12526  004150                     _pressUP:
 12527                           	opt stack 16
 12528                           
 12529                           ;DisplayProtocol.h: 125: if (actualScreen == 0 || actualScreen == 4) {
 12530                           
 12531                           ; BSR set to: 1
 12532                           ;incstack = 0
 12533  004150  0101               	movlb	1	; () banked
 12534  004152  51BA               	movf	_actualScreen& (0+255),w,b
 12535  004154  B4D8               	btfsc	status,2,c
 12536  004156  D005               	goto	l11139
 12537                           
 12538                           ; BSR set to: 1
 12539  004158  0E04               	movlw	4
 12540  00415A  0101               	movlb	1	; () banked
 12541  00415C  19BA               	xorwf	_actualScreen& (0+255),w,b
 12542  00415E  A4D8               	btfss	status,2,c
 12543  004160  D00C               	goto	l11145
 12544  004162                     l11139:
 12545                           
 12546                           ; BSR set to: 1
 12547                           ;DisplayProtocol.h: 126: menuSection++;
 12548  004162  0101               	movlb	1	; () banked
 12549  004164  2BC1               	incf	_menuSection& (0+255),f,b
 12550                           
 12551                           ; BSR set to: 1
 12552                           ;DisplayProtocol.h: 127: if (menuSection > 4)
 12553  004166  0101               	movlb	1	; () banked
 12554  004168  51C1               	movf	_menuSection& (0+255),w,b
 12555  00416A  0A80               	xorlw	128
 12556  00416C  0F7B               	addlw	-133
 12557  00416E  A0D8               	btfss	status,0,c
 12558  004170  0012               	return	
 12559                           
 12560                           ; BSR set to: 1
 12561                           ;DisplayProtocol.h: 128: menuSection = 0;
 12562  004172  0E00               	movlw	0
 12563  004174  0101               	movlb	1	; () banked
 12564  004176  6FC1               	movwf	_menuSection& (0+255),b
 12565                           
 12566                           ; BSR set to: 1
 12567                           ;DisplayProtocol.h: 129: } else if (actualScreen == 1) {
 12568  004178  0012               	return	
 12569  00417A                     l11145:
 12570                           
 12571                           ; BSR set to: 1
 12572  00417A  0101               	movlb	1	; () banked
 12573  00417C  05BA               	decf	_actualScreen& (0+255),w,b
 12574  00417E  A4D8               	btfss	status,2,c
 12575  004180  D024               	goto	l11151
 12576                           
 12577                           ; BSR set to: 1
 12578                           ;DisplayProtocol.h: 130: introducido[passSection]++;
 12579  004182  0101               	movlb	1	; () banked
 12580  004184  51C2               	movf	_passSection& (0+255),w,b
 12581  004186  0D01               	mullw	1
 12582  004188  0EA6               	movlw	low _introducido
 12583  00418A  24F3               	addwf	prodl,w,c
 12584  00418C  6ED9               	movwf	fsr2l,c
 12585  00418E  0E01               	movlw	high _introducido
 12586  004190  20F4               	addwfc	prodh,w,c
 12587  004192  6EDA               	movwf	fsr2h,c
 12588  004194  2ADF               	incf	indf2,f,c
 12589                           
 12590                           ;DisplayProtocol.h: 131: if (introducido[passSection] > 9)
 12591  004196  0101               	movlb	1	; () banked
 12592  004198  51C2               	movf	_passSection& (0+255),w,b
 12593  00419A  0D01               	mullw	1
 12594  00419C  0EA6               	movlw	low _introducido
 12595  00419E  24F3               	addwf	prodl,w,c
 12596  0041A0  6ED9               	movwf	fsr2l,c
 12597  0041A2  0E01               	movlw	high _introducido
 12598  0041A4  20F4               	addwfc	prodh,w,c
 12599  0041A6  6EDA               	movwf	fsr2h,c
 12600  0041A8  50DF               	movf	indf2,w,c
 12601  0041AA  0A80               	xorlw	128
 12602  0041AC  0F76               	addlw	-138
 12603  0041AE  A0D8               	btfss	status,0,c
 12604  0041B0  0012               	return	
 12605                           
 12606                           ; BSR set to: 1
 12607                           ;DisplayProtocol.h: 132: introducido[passSection] = 0;
 12608  0041B2  0101               	movlb	1	; () banked
 12609  0041B4  51C2               	movf	_passSection& (0+255),w,b
 12610  0041B6  0D01               	mullw	1
 12611  0041B8  0EA6               	movlw	low _introducido
 12612  0041BA  24F3               	addwf	prodl,w,c
 12613  0041BC  6ED9               	movwf	fsr2l,c
 12614  0041BE  0E01               	movlw	high _introducido
 12615  0041C0  20F4               	addwfc	prodh,w,c
 12616  0041C2  6EDA               	movwf	fsr2h,c
 12617  0041C4  0E00               	movlw	0
 12618  0041C6  6EDF               	movwf	indf2,c
 12619                           
 12620                           ; BSR set to: 1
 12621                           ;DisplayProtocol.h: 133: } else if (actualScreen == 2 || actualScreen == 3
 12622  0041C8  0012               	return	
 12623  0041CA                     l11151:
 12624                           
 12625                           ; BSR set to: 1
 12626                           ;DisplayProtocol.h: 134: || actualScreen == 10 || actualScreen == 11) {
 12627  0041CA  0E02               	movlw	2
 12628  0041CC  0101               	movlb	1	; () banked
 12629  0041CE  19BA               	xorwf	_actualScreen& (0+255),w,b
 12630  0041D0  B4D8               	btfsc	status,2,c
 12631  0041D2  D00F               	goto	l11159
 12632                           
 12633                           ; BSR set to: 1
 12634  0041D4  0E03               	movlw	3
 12635  0041D6  0101               	movlb	1	; () banked
 12636  0041D8  19BA               	xorwf	_actualScreen& (0+255),w,b
 12637  0041DA  B4D8               	btfsc	status,2,c
 12638  0041DC  D00A               	goto	l11159
 12639                           
 12640                           ; BSR set to: 1
 12641  0041DE  0E0A               	movlw	10
 12642  0041E0  0101               	movlb	1	; () banked
 12643  0041E2  19BA               	xorwf	_actualScreen& (0+255),w,b
 12644  0041E4  B4D8               	btfsc	status,2,c
 12645  0041E6  D005               	goto	l11159
 12646                           
 12647                           ; BSR set to: 1
 12648  0041E8  0E0B               	movlw	11
 12649  0041EA  0101               	movlb	1	; () banked
 12650  0041EC  19BA               	xorwf	_actualScreen& (0+255),w,b
 12651  0041EE  A4D8               	btfss	status,2,c
 12652  0041F0  D011               	goto	l11165
 12653  0041F2                     l11159:
 12654                           
 12655                           ; BSR set to: 1
 12656                           ;DisplayProtocol.h: 135: selSN = !selSN;
 12657  0041F2  0101               	movlb	1	; () banked
 12658  0041F4  51C3               	movf	_selSN& (0+255),w,b
 12659  0041F6  A4D8               	btfss	status,2,c
 12660  0041F8  D002               	goto	u15920
 12661  0041FA  0E01               	movlw	1
 12662  0041FC  D001               	goto	u15930
 12663  0041FE                     u15920:
 12664  0041FE  0E00               	movlw	0
 12665  004200                     u15930:
 12666  004200  0101               	movlb	1	; () banked
 12667  004202  6FC3               	movwf	_selSN& (0+255),b
 12668                           
 12669                           ; BSR set to: 1
 12670                           ;DisplayProtocol.h: 136: if(selSN > 1)
 12671  004204  0E01               	movlw	1
 12672  004206  0101               	movlb	1	; () banked
 12673  004208  65C3               	cpfsgt	_selSN& (0+255),b
 12674  00420A  0012               	return	
 12675                           
 12676                           ; BSR set to: 1
 12677                           ;DisplayProtocol.h: 137: selSN = 0;
 12678  00420C  0E00               	movlw	0
 12679  00420E  0101               	movlb	1	; () banked
 12680  004210  6FC3               	movwf	_selSN& (0+255),b
 12681                           
 12682                           ; BSR set to: 1
 12683                           ;DisplayProtocol.h: 138: }else if(actualScreen == 5) {
 12684  004212  0012               	return	
 12685  004214                     l11165:
 12686                           
 12687                           ; BSR set to: 1
 12688  004214  0E05               	movlw	5
 12689  004216  0101               	movlb	1	; () banked
 12690  004218  19BA               	xorwf	_actualScreen& (0+255),w,b
 12691  00421A  B4D8               	btfsc	status,2,c
 12692  00421C  D00B               	goto	l11177
 12693  00421E  D019               	goto	l11179
 12694  004220                     l11169:
 12695                           
 12696                           ; BSR set to: 1
 12697                           ;DisplayProtocol.h: 143: chanValDigUP();
 12698  004220  ECB4  F025         	call	_chanValDigUP	;wreg free
 12699                           
 12700                           ;DisplayProtocol.h: 144: break;
 12701  004224  0012               	return	
 12702  004226                     l11171:
 12703                           
 12704                           ;DisplayProtocol.h: 146: chanVals++;
 12705  004226  0101               	movlb	1	; () banked
 12706  004228  4BB1               	infsnz	_chanVals& (0+255),f,b
 12707  00422A  2BB2               	incf	(_chanVals+1)& (0+255),f,b
 12708                           
 12709                           ;DisplayProtocol.h: 147: break;
 12710  00422C  0012               	return	
 12711  00422E                     l11173:
 12712                           
 12713                           ; BSR set to: 1
 12714                           ;DisplayProtocol.h: 149: chanValDigUP();
 12715  00422E  ECB4  F025         	call	_chanValDigUP	;wreg free
 12716                           
 12717                           ;DisplayProtocol.h: 151: }
 12718                           ;DisplayProtocol.h: 152: }
 12719                           
 12720                           ;DisplayProtocol.h: 150: break;
 12721  004232  0012               	return	
 12722  004234                     l11177:
 12723  004234  0101               	movlb	1	; () banked
 12724  004236  51C1               	movf	_menuSection& (0+255),w,b
 12725                           
 12726                           ; Switch size 1, requested type "space"
 12727                           ; Number of cases is 4, Range of values is 0 to 3
 12728                           ; switch strategies available:
 12729                           ; Name         Instructions Cycles
 12730                           ; simple_byte           13     7 (average)
 12731                           ;	Chosen strategy is simple_byte
 12732  004238  0A00               	xorlw	0	; case 0
 12733  00423A  B4D8               	btfsc	status,2,c
 12734  00423C  0012               	return	
 12735  00423E  0A01               	xorlw	1	; case 1
 12736  004240  B4D8               	btfsc	status,2,c
 12737  004242  D7EE               	goto	l11169
 12738  004244  0A03               	xorlw	3	; case 2
 12739  004246  B4D8               	btfsc	status,2,c
 12740  004248  D7EE               	goto	l11171
 12741  00424A  0A01               	xorlw	1	; case 3
 12742  00424C  A4D8               	btfss	status,2,c
 12743                           
 12744                           ; BSR set to: 1
 12745                           ;DisplayProtocol.h: 153: }else if(actualScreen == 12)
 12746  00424E  0012               	return	
 12747  004250  D7EE               	goto	l11173
 12748  004252                     l11179:
 12749                           
 12750                           ; BSR set to: 1
 12751  004252  0E0C               	movlw	12
 12752  004254  0101               	movlb	1	; () banked
 12753  004256  19BA               	xorwf	_actualScreen& (0+255),w,b
 12754  004258  A4D8               	btfss	status,2,c
 12755  00425A  0012               	return	
 12756                           
 12757                           ; BSR set to: 1
 12758                           ;DisplayProtocol.h: 154: chanValDigUP();
 12759  00425C  ECB4  F025         	call	_chanValDigUP	;wreg free
 12760  004260  0012               	return	
 12761  004262                     __end_of_pressUP:
 12762                           	opt stack 0
 12763                           tblptru	equ	0xFF8
 12764                           tblptrh	equ	0xFF7
 12765                           tblptrl	equ	0xFF6
 12766                           tablat	equ	0xFF5
 12767                           prodh	equ	0xFF4
 12768                           prodl	equ	0xFF3
 12769                           intcon	equ	0xFF2
 12770                           postinc0	equ	0xFEE
 12771                           wreg	equ	0xFE8
 12772                           postdec1	equ	0xFE5
 12773                           fsr1l	equ	0xFE1
 12774                           indf2	equ	0xFDF
 12775                           postinc2	equ	0xFDE
 12776                           postdec2	equ	0xFDD
 12777                           fsr2h	equ	0xFDA
 12778                           fsr2l	equ	0xFD9
 12779                           status	equ	0xFD8
 12780                           
 12781 ;; *************** function _chanValDigUP *****************
 12782 ;; Defined at:
 12783 ;;		line 28 in file "source/DisplayProtocol.h"
 12784 ;; Parameters:    Size  Location     Type
 12785 ;;		None
 12786 ;; Auto vars:     Size  Location     Type
 12787 ;;		None
 12788 ;; Return value:  Size  Location     Type
 12789 ;;                  1    wreg      void 
 12790 ;; Registers used:
 12791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12792 ;; Tracked objects:
 12793 ;;		On entry : 0/0
 12794 ;;		On exit  : 0/0
 12795 ;;		Unchanged: 0/0
 12796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12797 ;;      Params:         0       0       0       0       0       0       0
 12798 ;;      Locals:         0       0       0       0       0       0       0
 12799 ;;      Temps:          0       0       5       0       0       0       0
 12800 ;;      Totals:         0       0       5       0       0       0       0
 12801 ;;Total ram usage:        5 bytes
 12802 ;; Hardware stack levels used:    1
 12803 ;; Hardware stack levels required when called:   12
 12804 ;; This function calls:
 12805 ;;		Nothing
 12806 ;; This function is called by:
 12807 ;;		_pressUP
 12808 ;; This function uses a non-reentrant model
 12809 ;;
 12810                           
 12811                           	psect	text50
 12812  004B68                     __ptext50:
 12813                           	opt stack 0
 12814  004B68                     _chanValDigUP:
 12815                           	opt stack 16
 12816                           
 12817                           ;DisplayProtocol.h: 29: chanValdig[chanValSection]++;
 12818                           
 12819                           ;incstack = 0
 12820  004B68  0101               	movlb	1	; () banked
 12821  004B6A  5194               	movf	_chanValSection& (0+255),w,b
 12822  004B6C  0D01               	mullw	1
 12823  004B6E  0EA0               	movlw	low _chanValdig
 12824  004B70  24F3               	addwf	prodl,w,c
 12825  004B72  6ED9               	movwf	fsr2l,c
 12826  004B74  0E01               	movlw	high _chanValdig
 12827  004B76  20F4               	addwfc	prodh,w,c
 12828  004B78  6EDA               	movwf	fsr2h,c
 12829  004B7A  2ADF               	incf	indf2,f,c
 12830                           
 12831                           ;DisplayProtocol.h: 30: if(chanValdig[chanValSection] > 9) {
 12832  004B7C  0101               	movlb	1	; () banked
 12833  004B7E  5194               	movf	_chanValSection& (0+255),w,b
 12834  004B80  0D01               	mullw	1
 12835  004B82  0EA0               	movlw	low _chanValdig
 12836  004B84  24F3               	addwf	prodl,w,c
 12837  004B86  6ED9               	movwf	fsr2l,c
 12838  004B88  0E01               	movlw	high _chanValdig
 12839  004B8A  20F4               	addwfc	prodh,w,c
 12840  004B8C  6EDA               	movwf	fsr2h,c
 12841  004B8E  50DF               	movf	indf2,w,c
 12842  004B90  0A80               	xorlw	128
 12843  004B92  0F76               	addlw	-138
 12844  004B94  A0D8               	btfss	status,0,c
 12845  004B96  0012               	return	
 12846                           
 12847                           ; BSR set to: 1
 12848                           ;DisplayProtocol.h: 31: chanValdig[chanValSection] = 0;
 12849  004B98  0101               	movlb	1	; () banked
 12850  004B9A  5194               	movf	_chanValSection& (0+255),w,b
 12851  004B9C  0D01               	mullw	1
 12852  004B9E  0EA0               	movlw	low _chanValdig
 12853  004BA0  24F3               	addwf	prodl,w,c
 12854  004BA2  6ED9               	movwf	fsr2l,c
 12855  004BA4  0E01               	movlw	high _chanValdig
 12856  004BA6  20F4               	addwfc	prodh,w,c
 12857  004BA8  6EDA               	movwf	fsr2h,c
 12858  004BAA  0E00               	movlw	0
 12859  004BAC  6EDF               	movwf	indf2,c
 12860                           
 12861                           ; BSR set to: 1
 12862                           ;DisplayProtocol.h: 32: if(chanValSection > 1 && chanValdig[chanValSection - 1] < 9)
 12863  004BAE  0101               	movlb	1	; () banked
 12864  004BB0  5194               	movf	_chanValSection& (0+255),w,b
 12865  004BB2  0A80               	xorlw	128
 12866  004BB4  0F7E               	addlw	-130
 12867  004BB6  A0D8               	btfss	status,0,c
 12868  004BB8  0012               	return	
 12869                           
 12870                           ; BSR set to: 1
 12871  004BBA  0EFF               	movlw	255
 12872  004BBC  0101               	movlb	1	; () banked
 12873  004BBE  6F00               	movwf	??_chanValDigUP& (0+255),b
 12874  004BC0  0EFF               	movlw	255
 12875  004BC2  0101               	movlb	1	; () banked
 12876  004BC4  6F01               	movwf	(??_chanValDigUP+1)& (0+255),b
 12877  004BC6  C194  F102         	movff	_chanValSection,??_chanValDigUP+2
 12878  004BCA  0101               	movlb	1	; () banked
 12879  004BCC  6B03               	clrf	(??_chanValDigUP+3)& (0+255),b
 12880  004BCE  BF02               	btfsc	(??_chanValDigUP+2)& (0+255),7,b
 12881  004BD0  0703               	decf	(??_chanValDigUP+3)& (0+255),f,b
 12882  004BD2  0101               	movlb	1	; () banked
 12883  004BD4  5100               	movf	??_chanValDigUP& (0+255),w,b
 12884  004BD6  0101               	movlb	1	; () banked
 12885  004BD8  2702               	addwf	(??_chanValDigUP+2)& (0+255),f,b
 12886  004BDA  0101               	movlb	1	; () banked
 12887  004BDC  5101               	movf	(??_chanValDigUP+1)& (0+255),w,b
 12888  004BDE  0101               	movlb	1	; () banked
 12889  004BE0  2303               	addwfc	(??_chanValDigUP+3)& (0+255),f,b
 12890  004BE2  0EA0               	movlw	low _chanValdig
 12891  004BE4  0101               	movlb	1	; () banked
 12892  004BE6  2502               	addwf	(??_chanValDigUP+2)& (0+255),w,b
 12893  004BE8  6ED9               	movwf	fsr2l,c
 12894  004BEA  0E01               	movlw	high _chanValdig
 12895  004BEC  0101               	movlb	1	; () banked
 12896  004BEE  2103               	addwfc	(??_chanValDigUP+3)& (0+255),w,b
 12897  004BF0  6EDA               	movwf	fsr2h,c
 12898  004BF2  50DF               	movf	indf2,w,c
 12899  004BF4  0A80               	xorlw	128
 12900  004BF6  0F77               	addlw	-137
 12901  004BF8  B0D8               	btfsc	status,0,c
 12902  004BFA  0012               	return	
 12903                           
 12904                           ; BSR set to: 1
 12905                           ;DisplayProtocol.h: 33: chanValdig[chanValSection - 1]++;
 12906  004BFC  0EFF               	movlw	255
 12907  004BFE  0101               	movlb	1	; () banked
 12908  004C00  6F00               	movwf	??_chanValDigUP& (0+255),b
 12909  004C02  0EFF               	movlw	255
 12910  004C04  0101               	movlb	1	; () banked
 12911  004C06  6F01               	movwf	(??_chanValDigUP+1)& (0+255),b
 12912  004C08  C194  F102         	movff	_chanValSection,??_chanValDigUP+2
 12913  004C0C  0101               	movlb	1	; () banked
 12914  004C0E  6B03               	clrf	(??_chanValDigUP+3)& (0+255),b
 12915  004C10  BF02               	btfsc	(??_chanValDigUP+2)& (0+255),7,b
 12916  004C12  0703               	decf	(??_chanValDigUP+3)& (0+255),f,b
 12917  004C14  0101               	movlb	1	; () banked
 12918  004C16  5100               	movf	??_chanValDigUP& (0+255),w,b
 12919  004C18  0101               	movlb	1	; () banked
 12920  004C1A  2702               	addwf	(??_chanValDigUP+2)& (0+255),f,b
 12921  004C1C  0101               	movlb	1	; () banked
 12922  004C1E  5101               	movf	(??_chanValDigUP+1)& (0+255),w,b
 12923  004C20  0101               	movlb	1	; () banked
 12924  004C22  2303               	addwfc	(??_chanValDigUP+3)& (0+255),f,b
 12925  004C24  0EA0               	movlw	low _chanValdig
 12926  004C26  0101               	movlb	1	; () banked
 12927  004C28  2502               	addwf	(??_chanValDigUP+2)& (0+255),w,b
 12928  004C2A  6ED9               	movwf	fsr2l,c
 12929  004C2C  0E01               	movlw	high _chanValdig
 12930  004C2E  0101               	movlb	1	; () banked
 12931  004C30  2103               	addwfc	(??_chanValDigUP+3)& (0+255),w,b
 12932  004C32  6EDA               	movwf	fsr2h,c
 12933  004C34  2ADF               	incf	indf2,f,c
 12934                           
 12935                           ; BSR set to: 1
 12936  004C36  0012               	return	
 12937  004C38                     __end_of_chanValDigUP:
 12938                           	opt stack 0
 12939                           tblptru	equ	0xFF8
 12940                           tblptrh	equ	0xFF7
 12941                           tblptrl	equ	0xFF6
 12942                           tablat	equ	0xFF5
 12943                           prodh	equ	0xFF4
 12944                           prodl	equ	0xFF3
 12945                           intcon	equ	0xFF2
 12946                           postinc0	equ	0xFEE
 12947                           wreg	equ	0xFE8
 12948                           postdec1	equ	0xFE5
 12949                           fsr1l	equ	0xFE1
 12950                           indf2	equ	0xFDF
 12951                           postinc2	equ	0xFDE
 12952                           postdec2	equ	0xFDD
 12953                           fsr2h	equ	0xFDA
 12954                           fsr2l	equ	0xFD9
 12955                           status	equ	0xFD8
 12956                           
 12957 ;; *************** function _pressRETRO *****************
 12958 ;; Defined at:
 12959 ;;		line 229 in file "source/DisplayProtocol.h"
 12960 ;; Parameters:    Size  Location     Type
 12961 ;;		None
 12962 ;; Auto vars:     Size  Location     Type
 12963 ;;		None
 12964 ;; Return value:  Size  Location     Type
 12965 ;;                  1    wreg      void 
 12966 ;; Registers used:
 12967 ;;		wreg, status,2, status,0
 12968 ;; Tracked objects:
 12969 ;;		On entry : 0/0
 12970 ;;		On exit  : 0/0
 12971 ;;		Unchanged: 0/0
 12972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12973 ;;      Params:         0       0       0       0       0       0       0
 12974 ;;      Locals:         0       0       0       0       0       0       0
 12975 ;;      Temps:          0       0       0       0       0       0       0
 12976 ;;      Totals:         0       0       0       0       0       0       0
 12977 ;;Total ram usage:        0 bytes
 12978 ;; Hardware stack levels used:    1
 12979 ;; Hardware stack levels required when called:   12
 12980 ;; This function calls:
 12981 ;;		Nothing
 12982 ;; This function is called by:
 12983 ;;		_buttonChecking
 12984 ;; This function uses a non-reentrant model
 12985 ;;
 12986                           
 12987                           	psect	text51
 12988  005928                     __ptext51:
 12989                           	opt stack 0
 12990  005928                     _pressRETRO:
 12991                           	opt stack 17
 12992                           
 12993                           ;DisplayProtocol.h: 230: if (actualScreen == 1) {
 12994                           
 12995                           ; BSR set to: 1
 12996                           ;incstack = 0
 12997  005928  0101               	movlb	1	; () banked
 12998  00592A  05BA               	decf	_actualScreen& (0+255),w,b
 12999  00592C  A4D8               	btfss	status,2,c
 13000  00592E  D004               	goto	l11273
 13001                           
 13002                           ; BSR set to: 1
 13003                           ;DisplayProtocol.h: 231: actualScreen = 0;
 13004  005930  0E00               	movlw	0
 13005  005932  0101               	movlb	1	; () banked
 13006  005934  6FBA               	movwf	_actualScreen& (0+255),b
 13007                           
 13008                           ;DisplayProtocol.h: 232: }else if (actualScreen == 2 || actualScreen == 3
 13009  005936  0012               	return	
 13010  005938                     l11273:
 13011                           
 13012                           ; BSR set to: 1
 13013                           ;DisplayProtocol.h: 233: || actualScreen == 10) {
 13014  005938  0E02               	movlw	2
 13015  00593A  0101               	movlb	1	; () banked
 13016  00593C  19BA               	xorwf	_actualScreen& (0+255),w,b
 13017  00593E  B4D8               	btfsc	status,2,c
 13018  005940  D00A               	goto	l644
 13019                           
 13020                           ; BSR set to: 1
 13021  005942  0E03               	movlw	3
 13022  005944  0101               	movlb	1	; () banked
 13023  005946  19BA               	xorwf	_actualScreen& (0+255),w,b
 13024  005948  B4D8               	btfsc	status,2,c
 13025  00594A  D005               	goto	l644
 13026                           
 13027                           ; BSR set to: 1
 13028  00594C  0E0A               	movlw	10
 13029  00594E  0101               	movlb	1	; () banked
 13030  005950  19BA               	xorwf	_actualScreen& (0+255),w,b
 13031  005952  A4D8               	btfss	status,2,c
 13032  005954  D003               	goto	l11279
 13033  005956                     l644:
 13034                           
 13035                           ; BSR set to: 1
 13036                           ;DisplayProtocol.h: 234: actualScreen = tempLastScreen;
 13037  005956  C0CA  F1BA         	movff	_tempLastScreen,_actualScreen
 13038                           
 13039                           ;DisplayProtocol.h: 235: }else if(actualScreen == 5) {
 13040  00595A  0012               	return	
 13041  00595C                     l11279:
 13042                           
 13043                           ; BSR set to: 1
 13044  00595C  0E05               	movlw	5
 13045  00595E  0101               	movlb	1	; () banked
 13046  005960  19BA               	xorwf	_actualScreen& (0+255),w,b
 13047  005962  A4D8               	btfss	status,2,c
 13048  005964  D015               	goto	l11291
 13049                           
 13050                           ; BSR set to: 1
 13051                           ;DisplayProtocol.h: 236: if(menuSection != 2) {
 13052  005966  0E02               	movlw	2
 13053  005968  0101               	movlb	1	; () banked
 13054  00596A  19C1               	xorwf	_menuSection& (0+255),w,b
 13055  00596C  B4D8               	btfsc	status,2,c
 13056  00596E  D00C               	goto	l11289
 13057                           
 13058                           ; BSR set to: 1
 13059                           ;DisplayProtocol.h: 237: chanValSection++;
 13060  005970  0101               	movlb	1	; () banked
 13061  005972  2B94               	incf	_chanValSection& (0+255),f,b
 13062                           
 13063                           ; BSR set to: 1
 13064                           ;DisplayProtocol.h: 238: if(chanValSection > 5)
 13065  005974  0101               	movlb	1	; () banked
 13066  005976  5194               	movf	_chanValSection& (0+255),w,b
 13067  005978  0A80               	xorlw	128
 13068  00597A  0F7A               	addlw	-134
 13069  00597C  A0D8               	btfss	status,0,c
 13070  00597E  0012               	return	
 13071                           
 13072                           ; BSR set to: 1
 13073                           ;DisplayProtocol.h: 239: chanValSection = 0;
 13074  005980  0E00               	movlw	0
 13075  005982  0101               	movlb	1	; () banked
 13076  005984  6F94               	movwf	_chanValSection& (0+255),b
 13077                           
 13078                           ; BSR set to: 1
 13079                           ;DisplayProtocol.h: 240: }else
 13080  005986  0012               	return	
 13081  005988                     l11289:
 13082                           
 13083                           ; BSR set to: 1
 13084                           ;DisplayProtocol.h: 241: actualScreen = 4;
 13085  005988  0E04               	movlw	4
 13086  00598A  0101               	movlb	1	; () banked
 13087  00598C  6FBA               	movwf	_actualScreen& (0+255),b
 13088                           
 13089                           ; BSR set to: 1
 13090                           ;DisplayProtocol.h: 242: }else if(actualScreen == 11)
 13091  00598E  0012               	return	
 13092  005990                     l11291:
 13093                           
 13094                           ; BSR set to: 1
 13095  005990  0E0B               	movlw	11
 13096  005992  0101               	movlb	1	; () banked
 13097  005994  19BA               	xorwf	_actualScreen& (0+255),w,b
 13098  005996  A4D8               	btfss	status,2,c
 13099  005998  D004               	goto	l11295
 13100                           
 13101                           ; BSR set to: 1
 13102                           ;DisplayProtocol.h: 243: actualScreen = 4;
 13103  00599A  0E04               	movlw	4
 13104  00599C  0101               	movlb	1	; () banked
 13105  00599E  6FBA               	movwf	_actualScreen& (0+255),b
 13106  0059A0  0012               	return	
 13107  0059A2                     l11295:
 13108                           
 13109                           ; BSR set to: 1
 13110                           ;DisplayProtocol.h: 244: else if(actualScreen == 12) {
 13111  0059A2  0E0C               	movlw	12
 13112  0059A4  0101               	movlb	1	; () banked
 13113  0059A6  19BA               	xorwf	_actualScreen& (0+255),w,b
 13114  0059A8  A4D8               	btfss	status,2,c
 13115  0059AA  0012               	return	
 13116                           
 13117                           ; BSR set to: 1
 13118                           ;DisplayProtocol.h: 245: chanValSection++;
 13119  0059AC  0101               	movlb	1	; () banked
 13120  0059AE  2B94               	incf	_chanValSection& (0+255),f,b
 13121                           
 13122                           ; BSR set to: 1
 13123                           ;DisplayProtocol.h: 246: if(chanValSection > 5)
 13124  0059B0  0101               	movlb	1	; () banked
 13125  0059B2  5194               	movf	_chanValSection& (0+255),w,b
 13126  0059B4  0A80               	xorlw	128
 13127  0059B6  0F7A               	addlw	-134
 13128  0059B8  A0D8               	btfss	status,0,c
 13129  0059BA  0012               	return	
 13130                           
 13131                           ; BSR set to: 1
 13132                           ;DisplayProtocol.h: 247: chanValSection = 0;
 13133  0059BC  0E00               	movlw	0
 13134  0059BE  0101               	movlb	1	; () banked
 13135  0059C0  6F94               	movwf	_chanValSection& (0+255),b
 13136                           
 13137                           ; BSR set to: 1
 13138                           
 13139                           ; BSR set to: 1
 13140                           
 13141                           ; BSR set to: 1
 13142                           
 13143                           ; BSR set to: 1
 13144                           
 13145                           ; BSR set to: 1
 13146  0059C2  0012               	return	
 13147  0059C4                     __end_of_pressRETRO:
 13148                           	opt stack 0
 13149                           tblptru	equ	0xFF8
 13150                           tblptrh	equ	0xFF7
 13151                           tblptrl	equ	0xFF6
 13152                           tablat	equ	0xFF5
 13153                           prodh	equ	0xFF4
 13154                           prodl	equ	0xFF3
 13155                           intcon	equ	0xFF2
 13156                           postinc0	equ	0xFEE
 13157                           wreg	equ	0xFE8
 13158                           postdec1	equ	0xFE5
 13159                           fsr1l	equ	0xFE1
 13160                           indf2	equ	0xFDF
 13161                           postinc2	equ	0xFDE
 13162                           postdec2	equ	0xFDD
 13163                           fsr2h	equ	0xFDA
 13164                           fsr2l	equ	0xFD9
 13165                           status	equ	0xFD8
 13166                           
 13167 ;; *************** function _pressENTER *****************
 13168 ;; Defined at:
 13169 ;;		line 273 in file "source/DisplayProtocol.h"
 13170 ;; Parameters:    Size  Location     Type
 13171 ;;		None
 13172 ;; Auto vars:     Size  Location     Type
 13173 ;;		None
 13174 ;; Return value:  Size  Location     Type
 13175 ;;                  1    wreg      void 
 13176 ;; Registers used:
 13177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13178 ;; Tracked objects:
 13179 ;;		On entry : 0/0
 13180 ;;		On exit  : 0/0
 13181 ;;		Unchanged: 0/0
 13182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13183 ;;      Params:         0       0       0       0       0       0       0
 13184 ;;      Locals:         0       0       0       0       0       0       0
 13185 ;;      Temps:          0       0       0       0       0       0       0
 13186 ;;      Totals:         0       0       0       0       0       0       0
 13187 ;;Total ram usage:        0 bytes
 13188 ;; Hardware stack levels used:    1
 13189 ;; Hardware stack levels required when called:   17
 13190 ;; This function calls:
 13191 ;;		_checkPass
 13192 ;;		_confirmEdition
 13193 ;;		_desintegrator
 13194 ;;		_setPWM2duty
 13195 ;; This function is called by:
 13196 ;;		_buttonChecking
 13197 ;; This function uses a non-reentrant model
 13198 ;;
 13199                           
 13200                           	psect	text52
 13201  001A32                     __ptext52:
 13202                           	opt stack 0
 13203  001A32                     _pressENTER:
 13204                           	opt stack 12
 13205                           
 13206                           ;DisplayProtocol.h: 274: if (actualScreen == 1) {
 13207                           
 13208                           ; BSR set to: 1
 13209                           ;incstack = 0
 13210  001A32  0101               	movlb	1	; () banked
 13211  001A34  05BA               	decf	_actualScreen& (0+255),w,b
 13212  001A36  A4D8               	btfss	status,2,c
 13213  001A38  D018               	goto	l11339
 13214                           
 13215                           ; BSR set to: 1
 13216                           ;DisplayProtocol.h: 275: passSection++;
 13217  001A3A  0101               	movlb	1	; () banked
 13218  001A3C  2BC2               	incf	_passSection& (0+255),f,b
 13219                           
 13220                           ; BSR set to: 1
 13221                           ;DisplayProtocol.h: 276: if (passSection > 3) {
 13222  001A3E  0101               	movlb	1	; () banked
 13223  001A40  51C2               	movf	_passSection& (0+255),w,b
 13224  001A42  0A80               	xorlw	128
 13225  001A44  0F7C               	addlw	-132
 13226  001A46  A0D8               	btfss	status,0,c
 13227  001A48  0012               	return	
 13228                           
 13229                           ; BSR set to: 1
 13230                           ;DisplayProtocol.h: 277: passSection = 0;
 13231  001A4A  0E00               	movlw	0
 13232  001A4C  0101               	movlb	1	; () banked
 13233  001A4E  6FC2               	movwf	_passSection& (0+255),b
 13234                           
 13235                           ; BSR set to: 1
 13236                           ;DisplayProtocol.h: 278: if (checkPass())
 13237  001A50  ECE9  F02E         	call	_checkPass	;wreg free
 13238  001A54  0900               	iorlw	0
 13239  001A56  B4D8               	btfsc	status,2,c
 13240  001A58  D004               	goto	l11337
 13241                           
 13242                           ;DisplayProtocol.h: 279: actualScreen = 8;
 13243  001A5A  0E08               	movlw	8
 13244  001A5C  0101               	movlb	1	; () banked
 13245  001A5E  6FBA               	movwf	_actualScreen& (0+255),b
 13246  001A60  0012               	return	
 13247  001A62                     l11337:
 13248                           
 13249                           ;DisplayProtocol.h: 280: else
 13250                           ;DisplayProtocol.h: 281: actualScreen = 7;
 13251  001A62  0E07               	movlw	7
 13252  001A64  0101               	movlb	1	; () banked
 13253  001A66  6FBA               	movwf	_actualScreen& (0+255),b
 13254                           
 13255                           ; BSR set to: 1
 13256                           ;DisplayProtocol.h: 282: }
 13257                           ;DisplayProtocol.h: 283: }else if(actualScreen == 4) {
 13258                           
 13259                           ; BSR set to: 1
 13260  001A68  0012               	return	
 13261  001A6A                     l11339:
 13262                           
 13263                           ; BSR set to: 1
 13264  001A6A  0E04               	movlw	4
 13265  001A6C  0101               	movlb	1	; () banked
 13266  001A6E  19BA               	xorwf	_actualScreen& (0+255),w,b
 13267  001A70  B4D8               	btfsc	status,2,c
 13268  001A72  D042               	goto	l11367
 13269  001A74  D053               	goto	l11369
 13270  001A76                     l680:
 13271                           
 13272                           ; BSR set to: 1
 13273                           ;DisplayProtocol.h: 286: tempLastScreen = actualScreen;
 13274  001A76  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 13275                           
 13276                           ; BSR set to: 1
 13277                           ;DisplayProtocol.h: 287: if(ProcessStarted) {
 13278  001A7A  503A               	movf	_ProcessStarted,w,c
 13279  001A7C  B4D8               	btfsc	status,2,c
 13280  001A7E  D007               	goto	l11347
 13281                           
 13282                           ; BSR set to: 1
 13283                           ;DisplayProtocol.h: 288: actualScreen = 3;
 13284  001A80  0E03               	movlw	3
 13285  001A82  0101               	movlb	1	; () banked
 13286  001A84  6FBA               	movwf	_actualScreen& (0+255),b
 13287                           
 13288                           ;DisplayProtocol.h: 289: selSN = 0;
 13289  001A86  0E00               	movlw	0
 13290  001A88  0101               	movlb	1	; () banked
 13291  001A8A  6FC3               	movwf	_selSN& (0+255),b
 13292                           
 13293                           ;DisplayProtocol.h: 290: }else {
 13294  001A8C  0012               	return	
 13295  001A8E                     l11347:
 13296                           
 13297                           ; BSR set to: 1
 13298                           ;DisplayProtocol.h: 291: actualScreen = 2;
 13299  001A8E  0E02               	movlw	2
 13300  001A90  0101               	movlb	1	; () banked
 13301  001A92  6FBA               	movwf	_actualScreen& (0+255),b
 13302                           
 13303                           ;DisplayProtocol.h: 292: selSN = 1;
 13304  001A94  0E01               	movlw	1
 13305  001A96  0101               	movlb	1	; () banked
 13306  001A98  6FC3               	movwf	_selSN& (0+255),b
 13307                           
 13308                           ; BSR set to: 1
 13309                           ;DisplayProtocol.h: 293: }
 13310                           ;DisplayProtocol.h: 294: break;
 13311  001A9A  0012               	return	
 13312  001A9C                     l684:
 13313                           
 13314                           ; BSR set to: 1
 13315                           ;DisplayProtocol.h: 296: chanValf = kgXcorte;
 13316  001A9C  C0AC  F1AE         	movff	_kgXcorte,_chanValf
 13317  001AA0  C0AD  F1AF         	movff	_kgXcorte+1,_chanValf+1
 13318  001AA4  C0AE  F1B0         	movff	_kgXcorte+2,_chanValf+2
 13319                           
 13320                           ; BSR set to: 1
 13321                           ;DisplayProtocol.h: 297: desintegrator();
 13322  001AA8  ECF0  F015         	call	_desintegrator	;wreg free
 13323                           
 13324                           ;DisplayProtocol.h: 298: actualScreen = 5;
 13325  001AAC  0E05               	movlw	5
 13326  001AAE  0101               	movlb	1	; () banked
 13327  001AB0  6FBA               	movwf	_actualScreen& (0+255),b
 13328                           
 13329                           ;DisplayProtocol.h: 299: break;
 13330  001AB2  0012               	return	
 13331  001AB4                     l685:
 13332                           
 13333                           ; BSR set to: 1
 13334                           ;DisplayProtocol.h: 301: tempLastScreen = actualScreen;
 13335  001AB4  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 13336                           
 13337                           ;DisplayProtocol.h: 302: chanVals = numCortes;
 13338  001AB8  C0B8  F1B1         	movff	_numCortes,_chanVals
 13339  001ABC  C0B9  F1B2         	movff	_numCortes+1,_chanVals+1
 13340                           
 13341                           ; BSR set to: 1
 13342                           ;DisplayProtocol.h: 303: actualScreen = 5;
 13343  001AC0  0E05               	movlw	5
 13344  001AC2  0101               	movlb	1	; () banked
 13345  001AC4  6FBA               	movwf	_actualScreen& (0+255),b
 13346                           
 13347                           ;DisplayProtocol.h: 304: break;
 13348  001AC6  0012               	return	
 13349  001AC8                     l686:
 13350                           
 13351                           ; BSR set to: 1
 13352                           ;DisplayProtocol.h: 306: chanValf = diamTubo;
 13353  001AC8  C0A9  F1AE         	movff	_diamTubo,_chanValf
 13354  001ACC  C0AA  F1AF         	movff	_diamTubo+1,_chanValf+1
 13355  001AD0  C0AB  F1B0         	movff	_diamTubo+2,_chanValf+2
 13356                           
 13357                           ; BSR set to: 1
 13358                           ;DisplayProtocol.h: 307: desintegrator();
 13359  001AD4  ECF0  F015         	call	_desintegrator	;wreg free
 13360                           
 13361                           ;DisplayProtocol.h: 308: actualScreen = 5;
 13362  001AD8  0E05               	movlw	5
 13363  001ADA  0101               	movlb	1	; () banked
 13364  001ADC  6FBA               	movwf	_actualScreen& (0+255),b
 13365                           
 13366                           ;DisplayProtocol.h: 309: break;
 13367  001ADE  0012               	return	
 13368  001AE0                     l11359:
 13369                           
 13370                           ; BSR set to: 1
 13371                           ;DisplayProtocol.h: 311: if(!ProcessStarted) {
 13372  001AE0  503A               	movf	_ProcessStarted,w,c
 13373  001AE2  A4D8               	btfss	status,2,c
 13374  001AE4  0012               	return	
 13375                           
 13376                           ; BSR set to: 1
 13377                           ;DisplayProtocol.h: 312: tempLastScreen = actualScreen;
 13378  001AE6  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 13379                           
 13380                           ; BSR set to: 1
 13381                           ;DisplayProtocol.h: 313: selSN = 1;
 13382  001AEA  0E01               	movlw	1
 13383  001AEC  0101               	movlb	1	; () banked
 13384  001AEE  6FC3               	movwf	_selSN& (0+255),b
 13385                           
 13386                           ;DisplayProtocol.h: 314: actualScreen = 11;
 13387  001AF0  0E0B               	movlw	11
 13388  001AF2  0101               	movlb	1	; () banked
 13389  001AF4  6FBA               	movwf	_actualScreen& (0+255),b
 13390                           
 13391                           ; BSR set to: 1
 13392                           ;DisplayProtocol.h: 317: }
 13393                           ;DisplayProtocol.h: 318: }
 13394                           
 13395                           ; BSR set to: 1
 13396                           ;DisplayProtocol.h: 315: }
 13397                           ;DisplayProtocol.h: 316: break;
 13398  001AF6  0012               	return	
 13399  001AF8                     l11367:
 13400                           
 13401                           ; BSR set to: 1
 13402  001AF8  0101               	movlb	1	; () banked
 13403  001AFA  51C1               	movf	_menuSection& (0+255),w,b
 13404                           
 13405                           ; Switch size 1, requested type "space"
 13406                           ; Number of cases is 5, Range of values is 0 to 4
 13407                           ; switch strategies available:
 13408                           ; Name         Instructions Cycles
 13409                           ; simple_byte           16     9 (average)
 13410                           ;	Chosen strategy is simple_byte
 13411  001AFC  0A00               	xorlw	0	; case 0
 13412  001AFE  B4D8               	btfsc	status,2,c
 13413  001B00  D7BA               	goto	l680
 13414  001B02  0A01               	xorlw	1	; case 1
 13415  001B04  B4D8               	btfsc	status,2,c
 13416  001B06  D7CA               	goto	l684
 13417  001B08  0A03               	xorlw	3	; case 2
 13418  001B0A  B4D8               	btfsc	status,2,c
 13419  001B0C  D7D3               	goto	l685
 13420  001B0E  0A01               	xorlw	1	; case 3
 13421  001B10  B4D8               	btfsc	status,2,c
 13422  001B12  D7DA               	goto	l686
 13423  001B14  0A07               	xorlw	7	; case 4
 13424  001B16  A4D8               	btfss	status,2,c
 13425                           
 13426                           ; BSR set to: 1
 13427                           ;DisplayProtocol.h: 319: }else if(actualScreen == 7)
 13428  001B18  0012               	return	
 13429  001B1A  D7E2               	goto	l11359
 13430  001B1C                     l11369:
 13431                           
 13432                           ; BSR set to: 1
 13433  001B1C  0E07               	movlw	7
 13434  001B1E  0101               	movlb	1	; () banked
 13435  001B20  19BA               	xorwf	_actualScreen& (0+255),w,b
 13436  001B22  A4D8               	btfss	status,2,c
 13437  001B24  D004               	goto	l11373
 13438                           
 13439                           ; BSR set to: 1
 13440                           ;DisplayProtocol.h: 320: actualScreen = 1;
 13441  001B26  0E01               	movlw	1
 13442  001B28  0101               	movlb	1	; () banked
 13443  001B2A  6FBA               	movwf	_actualScreen& (0+255),b
 13444  001B2C  0012               	return	
 13445  001B2E                     l11373:
 13446                           
 13447                           ; BSR set to: 1
 13448                           ;DisplayProtocol.h: 321: else if(actualScreen == 6) {
 13449  001B2E  0E06               	movlw	6
 13450  001B30  0101               	movlb	1	; () banked
 13451  001B32  19BA               	xorwf	_actualScreen& (0+255),w,b
 13452  001B34  B4D8               	btfsc	status,2,c
 13453  001B36  0012               	return	
 13454                           
 13455                           ; BSR set to: 1
 13456                           
 13457                           ; BSR set to: 1
 13458                           
 13459                           ; BSR set to: 1
 13460                           ;DisplayProtocol.h: 323: }else if(actualScreen == 5) {
 13461  001B38  0E05               	movlw	5
 13462  001B3A  0101               	movlb	1	; () banked
 13463  001B3C  19BA               	xorwf	_actualScreen& (0+255),w,b
 13464  001B3E  A4D8               	btfss	status,2,c
 13465  001B40  D017               	goto	l11389
 13466                           
 13467                           ; BSR set to: 1
 13468                           ;DisplayProtocol.h: 324: if(menuSection != 2) {
 13469  001B42  0E02               	movlw	2
 13470  001B44  0101               	movlb	1	; () banked
 13471  001B46  19C1               	xorwf	_menuSection& (0+255),w,b
 13472  001B48  B4D8               	btfsc	status,2,c
 13473  001B4A  D009               	goto	l11387
 13474                           
 13475                           ; BSR set to: 1
 13476                           ;DisplayProtocol.h: 325: chanValSection--;
 13477  001B4C  0101               	movlb	1	; () banked
 13478  001B4E  0794               	decf	_chanValSection& (0+255),f,b
 13479                           
 13480                           ; BSR set to: 1
 13481                           ;DisplayProtocol.h: 326: if(chanValSection < 0)
 13482  001B50  0101               	movlb	1	; () banked
 13483  001B52  AF94               	btfss	_chanValSection& (0+255),7,b
 13484  001B54  0012               	return	
 13485                           
 13486                           ; BSR set to: 1
 13487                           ;DisplayProtocol.h: 327: chanValSection = 5;
 13488  001B56  0E05               	movlw	5
 13489  001B58  0101               	movlb	1	; () banked
 13490  001B5A  6F94               	movwf	_chanValSection& (0+255),b
 13491                           
 13492                           ; BSR set to: 1
 13493                           ;DisplayProtocol.h: 328: }else
 13494  001B5C  0012               	return	
 13495  001B5E                     l11387:
 13496                           
 13497                           ; BSR set to: 1
 13498                           ;DisplayProtocol.h: 329: confirmEdition(!ProcessStarted);
 13499  001B5E  503A               	movf	_ProcessStarted,w,c
 13500  001B60  A4D8               	btfss	status,2,c
 13501  001B62  D002               	goto	u16490
 13502  001B64  0E01               	movlw	1
 13503  001B66  D001               	goto	u16500
 13504  001B68                     u16490:
 13505  001B68  0E00               	movlw	0
 13506  001B6A                     u16500:
 13507  001B6A  ECD0  F023         	call	_confirmEdition
 13508                           
 13509                           ;DisplayProtocol.h: 330: }else if(actualScreen == 2) {
 13510  001B6E  0012               	return	
 13511  001B70                     l11389:
 13512  001B70  0E02               	movlw	2
 13513  001B72  0101               	movlb	1	; () banked
 13514  001B74  19BA               	xorwf	_actualScreen& (0+255),w,b
 13515  001B76  A4D8               	btfss	status,2,c
 13516  001B78  D01E               	goto	l11401
 13517                           
 13518                           ; BSR set to: 1
 13519                           ;DisplayProtocol.h: 331: ProcessStarted = !selSN;
 13520  001B7A  0101               	movlb	1	; () banked
 13521  001B7C  51C3               	movf	_selSN& (0+255),w,b
 13522  001B7E  A4D8               	btfss	status,2,c
 13523  001B80  D002               	goto	u16520
 13524  001B82  0E01               	movlw	1
 13525  001B84  D001               	goto	u16530
 13526  001B86                     u16520:
 13527  001B86  0E00               	movlw	0
 13528  001B88                     u16530:
 13529  001B88  6E3A               	movwf	_ProcessStarted,c
 13530                           
 13531                           ;DisplayProtocol.h: 332: bladeIsUP = 2;
 13532  001B8A  0E02               	movlw	2
 13533  001B8C  6E50               	movwf	_bladeIsUP,c
 13534                           
 13535                           ;DisplayProtocol.h: 333: if(ProcessStarted && bladeIsUP != 1) {
 13536  001B8E  503A               	movf	_ProcessStarted,w,c
 13537  001B90  B4D8               	btfsc	status,2,c
 13538  001B92  D00E               	goto	l11399
 13539                           
 13540                           ; BSR set to: 1
 13541  001B94  0450               	decf	_bladeIsUP,w,c
 13542  001B96  B4D8               	btfsc	status,2,c
 13543  001B98  D00B               	goto	l11399
 13544                           
 13545                           ; BSR set to: 1
 13546                           ;DisplayProtocol.h: 334: processState = 0;
 13547  001B9A  0E00               	movlw	0
 13548  001B9C  6E36               	movwf	_processState+1,c
 13549  001B9E  0E00               	movlw	0
 13550  001BA0  6E35               	movwf	_processState,c
 13551                           
 13552                           ; BSR set to: 1
 13553                           ;DisplayProtocol.h: 335: setPWM2duty(-400);
 13554  001BA2  0EFE               	movlw	254
 13555  001BA4  0101               	movlb	1	; () banked
 13556  001BA6  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 13557  001BA8  0E70               	movlw	112
 13558  001BAA  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 13559  001BAC  EC7D  F02D         	call	_setPWM2duty	;wreg free
 13560  001BB0                     l11399:
 13561                           
 13562                           ;DisplayProtocol.h: 336: }
 13563                           ;DisplayProtocol.h: 337: actualScreen = tempLastScreen;
 13564  001BB0  C0CA  F1BA         	movff	_tempLastScreen,_actualScreen
 13565                           
 13566                           ;DisplayProtocol.h: 338: }else if(actualScreen == 3) {
 13567  001BB4  0012               	return	
 13568  001BB6                     l11401:
 13569  001BB6  0E03               	movlw	3
 13570  001BB8  0101               	movlb	1	; () banked
 13571  001BBA  19BA               	xorwf	_actualScreen& (0+255),w,b
 13572  001BBC  A4D8               	btfss	status,2,c
 13573  001BBE  D005               	goto	l11405
 13574                           
 13575                           ; BSR set to: 1
 13576                           ;DisplayProtocol.h: 339: ProcessStarted = selSN;
 13577  001BC0  C1C3  F03A         	movff	_selSN,_ProcessStarted
 13578                           
 13579                           ;DisplayProtocol.h: 340: actualScreen = tempLastScreen;
 13580  001BC4  C0CA  F1BA         	movff	_tempLastScreen,_actualScreen
 13581                           
 13582                           ;DisplayProtocol.h: 341: }else if(actualScreen == 10) {
 13583  001BC8  0012               	return	
 13584  001BCA                     l11405:
 13585                           
 13586                           ; BSR set to: 1
 13587  001BCA  0E0A               	movlw	10
 13588  001BCC  0101               	movlb	1	; () banked
 13589  001BCE  19BA               	xorwf	_actualScreen& (0+255),w,b
 13590  001BD0  A4D8               	btfss	status,2,c
 13591  001BD2  D00B               	goto	l11411
 13592                           
 13593                           ; BSR set to: 1
 13594                           ;DisplayProtocol.h: 342: if(!selSN)
 13595  001BD4  0101               	movlb	1	; () banked
 13596  001BD6  51C3               	movf	_selSN& (0+255),w,b
 13597  001BD8  A4D8               	btfss	status,2,c
 13598  001BDA  D004               	goto	l705
 13599                           
 13600                           ; BSR set to: 1
 13601                           ;DisplayProtocol.h: 343: confirmEdition(1);
 13602  001BDC  0E01               	movlw	1
 13603  001BDE  ECD0  F023         	call	_confirmEdition
 13604  001BE2  0012               	return	
 13605  001BE4                     l705:
 13606                           
 13607                           ; BSR set to: 1
 13608                           ;DisplayProtocol.h: 344: else
 13609                           ;DisplayProtocol.h: 345: actualScreen = tempLastScreen;
 13610  001BE4  C0CA  F1BA         	movff	_tempLastScreen,_actualScreen
 13611                           
 13612                           ; BSR set to: 1
 13613                           ;DisplayProtocol.h: 346: }else if(actualScreen == 8)
 13614  001BE8  0012               	return	
 13615  001BEA                     l11411:
 13616                           
 13617                           ; BSR set to: 1
 13618  001BEA  0E08               	movlw	8
 13619  001BEC  0101               	movlb	1	; () banked
 13620  001BEE  19BA               	xorwf	_actualScreen& (0+255),w,b
 13621  001BF0  A4D8               	btfss	status,2,c
 13622  001BF2  D004               	goto	l11415
 13623                           
 13624                           ; BSR set to: 1
 13625                           ;DisplayProtocol.h: 347: actualScreen = 4;
 13626  001BF4  0E04               	movlw	4
 13627  001BF6  0101               	movlb	1	; () banked
 13628  001BF8  6FBA               	movwf	_actualScreen& (0+255),b
 13629  001BFA  0012               	return	
 13630  001BFC                     l11415:
 13631                           
 13632                           ; BSR set to: 1
 13633                           ;DisplayProtocol.h: 348: else if(actualScreen == 9)
 13634  001BFC  0E09               	movlw	9
 13635  001BFE  0101               	movlb	1	; () banked
 13636  001C00  19BA               	xorwf	_actualScreen& (0+255),w,b
 13637  001C02  A4D8               	btfss	status,2,c
 13638  001C04  D004               	goto	l11419
 13639                           
 13640                           ; BSR set to: 1
 13641                           ;DisplayProtocol.h: 349: actualScreen = 0;
 13642  001C06  0E00               	movlw	0
 13643  001C08  0101               	movlb	1	; () banked
 13644  001C0A  6FBA               	movwf	_actualScreen& (0+255),b
 13645  001C0C  0012               	return	
 13646  001C0E                     l11419:
 13647                           
 13648                           ; BSR set to: 1
 13649                           ;DisplayProtocol.h: 350: else if(actualScreen == 11) {
 13650  001C0E  0E0B               	movlw	11
 13651  001C10  0101               	movlb	1	; () banked
 13652  001C12  19BA               	xorwf	_actualScreen& (0+255),w,b
 13653  001C14  A4D8               	btfss	status,2,c
 13654  001C16  D059               	goto	l11459
 13655                           
 13656                           ; BSR set to: 1
 13657                           ;DisplayProtocol.h: 351: if(!selSN) {
 13658  001C18  0101               	movlb	1	; () banked
 13659  001C1A  51C3               	movf	_selSN& (0+255),w,b
 13660  001C1C  A4D8               	btfss	status,2,c
 13661  001C1E  D051               	goto	l11457
 13662                           
 13663                           ; BSR set to: 1
 13664                           ;DisplayProtocol.h: 352: chanValf = 0;
 13665  001C20  0E00               	movlw	0
 13666  001C22  0101               	movlb	1	; () banked
 13667  001C24  6FAE               	movwf	_chanValf& (0+255),b
 13668  001C26  0E00               	movlw	0
 13669  001C28  0101               	movlb	1	; () banked
 13670  001C2A  6FAF               	movwf	(_chanValf+1)& (0+255),b
 13671  001C2C  0E00               	movlw	0
 13672  001C2E  0101               	movlb	1	; () banked
 13673  001C30  6FB0               	movwf	(_chanValf+2)& (0+255),b
 13674                           
 13675                           ; BSR set to: 1
 13676                           ;DisplayProtocol.h: 353: desintegrator();
 13677  001C32  ECF0  F015         	call	_desintegrator	;wreg free
 13678                           
 13679                           ;DisplayProtocol.h: 354: temptiXcorte = tiXcorte;
 13680  001C36  C0B2  F0AF         	movff	_tiXcorte,_temptiXcorte
 13681  001C3A  C0B3  F0B0         	movff	_tiXcorte+1,_temptiXcorte+1
 13682  001C3E  C0B4  F0B1         	movff	_tiXcorte+2,_temptiXcorte+2
 13683                           
 13684                           ;DisplayProtocol.h: 355: tiXcorte = 5.0f;
 13685  001C42  0E00               	movlw	0
 13686  001C44  0100               	movlb	0	; () banked
 13687  001C46  6FB2               	movwf	_tiXcorte& (0+255),b
 13688  001C48  0EA0               	movlw	160
 13689  001C4A  0100               	movlb	0	; () banked
 13690  001C4C  6FB3               	movwf	(_tiXcorte+1)& (0+255),b
 13691  001C4E  0E40               	movlw	64
 13692  001C50  0100               	movlb	0	; () banked
 13693  001C52  6FB4               	movwf	(_tiXcorte+2)& (0+255),b
 13694                           
 13695                           ; BSR set to: 0
 13696                           ;DisplayProtocol.h: 356: timsXcorte = 5000.0f;
 13697  001C54  0E40               	movlw	64
 13698  001C56  6E4D               	movwf	_timsXcorte,c
 13699  001C58  0E9C               	movlw	156
 13700  001C5A  6E4E               	movwf	_timsXcorte+1,c
 13701  001C5C  0E45               	movlw	69
 13702  001C5E  6E4F               	movwf	_timsXcorte+2,c
 13703                           
 13704                           ; BSR set to: 0
 13705                           ;DisplayProtocol.h: 357: tempNumCortes = numCortes;
 13706  001C60  C0B8  F192         	movff	_numCortes,_tempNumCortes
 13707  001C64  C0B9  F193         	movff	_numCortes+1,_tempNumCortes+1
 13708                           
 13709                           ; BSR set to: 0
 13710                           ;DisplayProtocol.h: 358: numCortes = 1;
 13711  001C68  0E00               	movlw	0
 13712  001C6A  0100               	movlb	0	; () banked
 13713  001C6C  6FB9               	movwf	(_numCortes+1)& (0+255),b
 13714  001C6E  0E01               	movlw	1
 13715  001C70  6FB8               	movwf	_numCortes& (0+255),b
 13716                           
 13717                           ; BSR set to: 0
 13718                           ;DisplayProtocol.h: 359: processState = 0;
 13719  001C72  0E00               	movlw	0
 13720  001C74  6E36               	movwf	_processState+1,c
 13721  001C76  0E00               	movlw	0
 13722  001C78  6E35               	movwf	_processState,c
 13723                           
 13724                           ; BSR set to: 0
 13725                           ;DisplayProtocol.h: 360: processTimer = 0;
 13726  001C7A  0E00               	movlw	0
 13727  001C7C  6E2B               	movwf	_processTimer,c
 13728  001C7E  0E00               	movlw	0
 13729  001C80  6E2C               	movwf	_processTimer+1,c
 13730  001C82  0E00               	movlw	0
 13731  001C84  6E2D               	movwf	_processTimer+2,c
 13732  001C86  0E00               	movlw	0
 13733  001C88  6E2E               	movwf	_processTimer+3,c
 13734                           
 13735                           ; BSR set to: 0
 13736                           ;DisplayProtocol.h: 361: bladeIsUP = 2;
 13737  001C8A  0E02               	movlw	2
 13738  001C8C  6E50               	movwf	_bladeIsUP,c
 13739                           
 13740                           ; BSR set to: 0
 13741                           ;DisplayProtocol.h: 362: ProcessStarted = 1;
 13742  001C8E  0E01               	movlw	1
 13743  001C90  6E3A               	movwf	_ProcessStarted,c
 13744                           
 13745                           ; BSR set to: 0
 13746                           ;DisplayProtocol.h: 363: if(ProcessStarted && bladeIsUP != 1) {
 13747  001C92  503A               	movf	_ProcessStarted,w,c
 13748  001C94  B4D8               	btfsc	status,2,c
 13749  001C96  D00E               	goto	l11453
 13750                           
 13751                           ; BSR set to: 0
 13752  001C98  0450               	decf	_bladeIsUP,w,c
 13753  001C9A  B4D8               	btfsc	status,2,c
 13754  001C9C  D00B               	goto	l11453
 13755                           
 13756                           ; BSR set to: 0
 13757                           ;DisplayProtocol.h: 364: processState = 0;
 13758  001C9E  0E00               	movlw	0
 13759  001CA0  6E36               	movwf	_processState+1,c
 13760  001CA2  0E00               	movlw	0
 13761  001CA4  6E35               	movwf	_processState,c
 13762                           
 13763                           ; BSR set to: 0
 13764                           ;DisplayProtocol.h: 365: setPWM2duty(-400);
 13765  001CA6  0EFE               	movlw	254
 13766  001CA8  0101               	movlb	1	; () banked
 13767  001CAA  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 13768  001CAC  0E70               	movlw	112
 13769  001CAE  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 13770  001CB0  EC7D  F02D         	call	_setPWM2duty	;wreg free
 13771  001CB4                     l11453:
 13772                           
 13773                           ;DisplayProtocol.h: 366: }
 13774                           ;DisplayProtocol.h: 367: calibLevel = 0;
 13775  001CB4  0E00               	movlw	0
 13776  001CB6  0101               	movlb	1	; () banked
 13777  001CB8  6FBB               	movwf	_calibLevel& (0+255),b
 13778                           
 13779                           ; BSR set to: 1
 13780                           ;DisplayProtocol.h: 368: actualScreen = 6;
 13781  001CBA  0E06               	movlw	6
 13782  001CBC  0101               	movlb	1	; () banked
 13783  001CBE  6FBA               	movwf	_actualScreen& (0+255),b
 13784                           
 13785                           ;DisplayProtocol.h: 369: }else
 13786  001CC0  0012               	return	
 13787  001CC2                     l11457:
 13788                           
 13789                           ; BSR set to: 1
 13790                           ;DisplayProtocol.h: 370: actualScreen = 4;
 13791  001CC2  0E04               	movlw	4
 13792  001CC4  0101               	movlb	1	; () banked
 13793  001CC6  6FBA               	movwf	_actualScreen& (0+255),b
 13794                           
 13795                           ; BSR set to: 1
 13796                           ;DisplayProtocol.h: 371: }else if(actualScreen == 12) {
 13797  001CC8  0012               	return	
 13798  001CCA                     l11459:
 13799                           
 13800                           ; BSR set to: 1
 13801  001CCA  0E0C               	movlw	12
 13802  001CCC  0101               	movlb	1	; () banked
 13803  001CCE  19BA               	xorwf	_actualScreen& (0+255),w,b
 13804  001CD0  A4D8               	btfss	status,2,c
 13805  001CD2  0012               	return	
 13806                           
 13807                           ; BSR set to: 1
 13808                           ;DisplayProtocol.h: 372: chanValSection--;
 13809  001CD4  0101               	movlb	1	; () banked
 13810  001CD6  0794               	decf	_chanValSection& (0+255),f,b
 13811                           
 13812                           ; BSR set to: 1
 13813                           ;DisplayProtocol.h: 373: if(chanValSection < 0)
 13814  001CD8  0101               	movlb	1	; () banked
 13815  001CDA  AF94               	btfss	_chanValSection& (0+255),7,b
 13816  001CDC  0012               	return	
 13817                           
 13818                           ; BSR set to: 1
 13819                           ;DisplayProtocol.h: 374: chanValSection = 5;
 13820  001CDE  0E05               	movlw	5
 13821  001CE0  0101               	movlb	1	; () banked
 13822  001CE2  6F94               	movwf	_chanValSection& (0+255),b
 13823                           
 13824                           ; BSR set to: 1
 13825                           
 13826                           ; BSR set to: 1
 13827                           
 13828                           ; BSR set to: 1
 13829                           
 13830                           ; BSR set to: 1
 13831                           
 13832                           ; BSR set to: 1
 13833                           
 13834                           ; BSR set to: 1
 13835                           
 13836                           ; BSR set to: 1
 13837                           
 13838                           ; BSR set to: 1
 13839                           
 13840                           ; BSR set to: 1
 13841                           
 13842                           ; BSR set to: 1
 13843                           
 13844                           ; BSR set to: 1
 13845                           
 13846                           ; BSR set to: 1
 13847  001CE4  0012               	return	
 13848  001CE6                     __end_of_pressENTER:
 13849                           	opt stack 0
 13850                           tblptru	equ	0xFF8
 13851                           tblptrh	equ	0xFF7
 13852                           tblptrl	equ	0xFF6
 13853                           tablat	equ	0xFF5
 13854                           prodh	equ	0xFF4
 13855                           prodl	equ	0xFF3
 13856                           intcon	equ	0xFF2
 13857                           postinc0	equ	0xFEE
 13858                           wreg	equ	0xFE8
 13859                           postdec1	equ	0xFE5
 13860                           fsr1l	equ	0xFE1
 13861                           indf2	equ	0xFDF
 13862                           postinc2	equ	0xFDE
 13863                           postdec2	equ	0xFDD
 13864                           fsr2h	equ	0xFDA
 13865                           fsr2l	equ	0xFD9
 13866                           status	equ	0xFD8
 13867                           
 13868 ;; *************** function _desintegrator *****************
 13869 ;; Defined at:
 13870 ;;		line 46 in file "source/DisplayProtocol.h"
 13871 ;; Parameters:    Size  Location     Type
 13872 ;;		None
 13873 ;; Auto vars:     Size  Location     Type
 13874 ;;  temp2           4   70[BANK1 ] long 
 13875 ;;  temp3           4   66[BANK1 ] long 
 13876 ;;  tempL           4   62[BANK1 ] long 
 13877 ;;  temp            3   59[BANK1 ] float 
 13878 ;;  i               2   74[BANK1 ] int 
 13879 ;; Return value:  Size  Location     Type
 13880 ;;                  1    wreg      void 
 13881 ;; Registers used:
 13882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13883 ;; Tracked objects:
 13884 ;;		On entry : 0/0
 13885 ;;		On exit  : 0/0
 13886 ;;		Unchanged: 0/0
 13887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13888 ;;      Params:         0       0       0       0       0       0       0
 13889 ;;      Locals:         0       0      17       0       0       0       0
 13890 ;;      Temps:          0       0       2       0       0       0       0
 13891 ;;      Totals:         0       0      19       0       0       0       0
 13892 ;;Total ram usage:       19 bytes
 13893 ;; Hardware stack levels used:    1
 13894 ;; Hardware stack levels required when called:   14
 13895 ;; This function calls:
 13896 ;;		___aldiv
 13897 ;;		___ftmul
 13898 ;;		___fttol
 13899 ;;		___lmul
 13900 ;; This function is called by:
 13901 ;;		_pressENTER
 13902 ;; This function uses a non-reentrant model
 13903 ;;
 13904                           
 13905                           	psect	text53
 13906  002BE0                     __ptext53:
 13907                           	opt stack 0
 13908  002BE0                     _desintegrator:
 13909                           	opt stack 14
 13910                           
 13911                           ;DisplayProtocol.h: 47: chanValSection = 5;
 13912                           
 13913                           ;incstack = 0
 13914  002BE0  0E05               	movlw	5
 13915  002BE2  0101               	movlb	1	; () banked
 13916  002BE4  6F94               	movwf	_chanValSection& (0+255),b
 13917                           
 13918                           ; BSR set to: 1
 13919                           ;DisplayProtocol.h: 48: float temp = (float)chanValf*1000;
 13920  002BE6  C1AE  F114         	movff	_chanValf,___ftmul@f1
 13921  002BEA  C1AF  F115         	movff	_chanValf+1,___ftmul@f1+1
 13922  002BEE  C1B0  F116         	movff	_chanValf+2,___ftmul@f1+2
 13923  002BF2  0E00               	movlw	0
 13924  002BF4  0101               	movlb	1	; () banked
 13925  002BF6  6F17               	movwf	___ftmul@f2& (0+255),b
 13926  002BF8  0E7A               	movlw	122
 13927  002BFA  0101               	movlb	1	; () banked
 13928  002BFC  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 13929  002BFE  0E44               	movlw	68
 13930  002C00  0101               	movlb	1	; () banked
 13931  002C02  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 13932  002C04  ECF4  F019         	call	___ftmul	;wreg free
 13933  002C08  C114  F13B         	movff	?___ftmul,desintegrator@temp
 13934  002C0C  C115  F13C         	movff	?___ftmul+1,desintegrator@temp+1
 13935  002C10  C116  F13D         	movff	?___ftmul+2,desintegrator@temp+2
 13936                           
 13937                           ;DisplayProtocol.h: 49: long tempL = (long)temp;
 13938  002C14  C13B  F12A         	movff	desintegrator@temp,___fttol@f1
 13939  002C18  C13C  F12B         	movff	desintegrator@temp+1,___fttol@f1+1
 13940  002C1C  C13D  F12C         	movff	desintegrator@temp+2,___fttol@f1+2
 13941  002C20  EC9E  F01C         	call	___fttol	;wreg free
 13942  002C24  C12A  F13E         	movff	?___fttol,desintegrator@tempL
 13943  002C28  C12B  F13F         	movff	?___fttol+1,desintegrator@tempL+1
 13944  002C2C  C12C  F140         	movff	?___fttol+2,desintegrator@tempL+2
 13945  002C30  C12D  F141         	movff	?___fttol+3,desintegrator@tempL+3
 13946                           
 13947                           ;DisplayProtocol.h: 50: long temp2 = 0;
 13948  002C34  0E00               	movlw	0
 13949  002C36  0101               	movlb	1	; () banked
 13950  002C38  6F46               	movwf	desintegrator@temp2& (0+255),b
 13951  002C3A  0E00               	movlw	0
 13952  002C3C  6F47               	movwf	(desintegrator@temp2+1)& (0+255),b
 13953  002C3E  0E00               	movlw	0
 13954  002C40  6F48               	movwf	(desintegrator@temp2+2)& (0+255),b
 13955  002C42  0E00               	movlw	0
 13956  002C44  6F49               	movwf	(desintegrator@temp2+3)& (0+255),b
 13957                           
 13958                           ;DisplayProtocol.h: 51: long temp3 = 0;
 13959  002C46  0E00               	movlw	0
 13960  002C48  0101               	movlb	1	; () banked
 13961  002C4A  6F42               	movwf	desintegrator@temp3& (0+255),b
 13962  002C4C  0E00               	movlw	0
 13963  002C4E  6F43               	movwf	(desintegrator@temp3+1)& (0+255),b
 13964  002C50  0E00               	movlw	0
 13965  002C52  6F44               	movwf	(desintegrator@temp3+2)& (0+255),b
 13966  002C54  0E00               	movlw	0
 13967  002C56  6F45               	movwf	(desintegrator@temp3+3)& (0+255),b
 13968                           
 13969                           ;DisplayProtocol.h: 52: int i;
 13970                           ;DisplayProtocol.h: 53: for(i = 0; i < 6; i++) {
 13971  002C58  0E00               	movlw	0
 13972  002C5A  0101               	movlb	1	; () banked
 13973  002C5C  6F4B               	movwf	(desintegrator@i+1)& (0+255),b
 13974  002C5E  0E00               	movlw	0
 13975  002C60  6F4A               	movwf	desintegrator@i& (0+255),b
 13976                           
 13977                           ; BSR set to: 1
 13978  002C62  0101               	movlb	1	; () banked
 13979  002C64  BF4B               	btfsc	(desintegrator@i+1)& (0+255),7,b
 13980  002C66  D00A               	goto	l10601
 13981  002C68  0101               	movlb	1	; () banked
 13982  002C6A  514B               	movf	(desintegrator@i+1)& (0+255),w,b
 13983  002C6C  E106               	bnz	u15110
 13984  002C6E  0E06               	movlw	6
 13985  002C70  0101               	movlb	1	; () banked
 13986  002C72  5D4A               	subwf	desintegrator@i& (0+255),w,b
 13987  002C74  B0D8               	btfsc	status,0,c
 13988  002C76  0012               	return	
 13989  002C78  D001               	goto	l10601
 13990  002C7A                     u15110:
 13991                           
 13992                           ; BSR set to: 1
 13993  002C7A  0012               	return	
 13994  002C7C                     l10601:
 13995                           
 13996                           ; BSR set to: 1
 13997                           ;DisplayProtocol.h: 54: temp2 = tempL/exp10[i];
 13998  002C7C  C13E  F100         	movff	desintegrator@tempL,___aldiv@dividend
 13999  002C80  C13F  F101         	movff	desintegrator@tempL+1,___aldiv@dividend+1
 14000  002C84  C140  F102         	movff	desintegrator@tempL+2,___aldiv@dividend+2
 14001  002C88  C141  F103         	movff	desintegrator@tempL+3,___aldiv@dividend+3
 14002  002C8C  0E77               	movlw	low _exp10
 14003  002C8E  0101               	movlb	1	; () banked
 14004  002C90  6F39               	movwf	??_desintegrator& (0+255),b
 14005  002C92  0E01               	movlw	high _exp10
 14006  002C94  0101               	movlb	1	; () banked
 14007  002C96  6F3A               	movwf	(??_desintegrator+1)& (0+255),b
 14008  002C98  90D8               	bcf	status,0,c
 14009  002C9A  0101               	movlb	1	; () banked
 14010  002C9C  354A               	rlcf	desintegrator@i& (0+255),w,b
 14011  002C9E  6ED9               	movwf	fsr2l,c
 14012  002CA0  0101               	movlb	1	; () banked
 14013  002CA2  354B               	rlcf	(desintegrator@i+1)& (0+255),w,b
 14014  002CA4  6EDA               	movwf	fsr2h,c
 14015  002CA6  90D8               	bcf	status,0,c
 14016  002CA8  36D9               	rlcf	fsr2l,f,c
 14017  002CAA  36DA               	rlcf	fsr2h,f,c
 14018  002CAC  0101               	movlb	1	; () banked
 14019  002CAE  5139               	movf	??_desintegrator& (0+255),w,b
 14020  002CB0  26D9               	addwf	fsr2l,f,c
 14021  002CB2  0101               	movlb	1	; () banked
 14022  002CB4  513A               	movf	(??_desintegrator+1)& (0+255),w,b
 14023  002CB6  22DA               	addwfc	fsr2h,f,c
 14024  002CB8  CFDE F104          	movff	postinc2,___aldiv@divisor
 14025  002CBC  CFDE F105          	movff	postinc2,___aldiv@divisor+1
 14026  002CC0  CFDE F106          	movff	postinc2,___aldiv@divisor+2
 14027  002CC4  CFDE F107          	movff	postinc2,___aldiv@divisor+3
 14028  002CC8  EC04  F01F         	call	___aldiv	;wreg free
 14029  002CCC  C100  F146         	movff	?___aldiv,desintegrator@temp2
 14030  002CD0  C101  F147         	movff	?___aldiv+1,desintegrator@temp2+1
 14031  002CD4  C102  F148         	movff	?___aldiv+2,desintegrator@temp2+2
 14032  002CD8  C103  F149         	movff	?___aldiv+3,desintegrator@temp2+3
 14033                           
 14034                           ;DisplayProtocol.h: 55: temp3 = temp2*exp10[i];
 14035  002CDC  0E77               	movlw	low _exp10
 14036  002CDE  0101               	movlb	1	; () banked
 14037  002CE0  6F39               	movwf	??_desintegrator& (0+255),b
 14038  002CE2  0E01               	movlw	high _exp10
 14039  002CE4  0101               	movlb	1	; () banked
 14040  002CE6  6F3A               	movwf	(??_desintegrator+1)& (0+255),b
 14041  002CE8  90D8               	bcf	status,0,c
 14042  002CEA  0101               	movlb	1	; () banked
 14043  002CEC  354A               	rlcf	desintegrator@i& (0+255),w,b
 14044  002CEE  6ED9               	movwf	fsr2l,c
 14045  002CF0  0101               	movlb	1	; () banked
 14046  002CF2  354B               	rlcf	(desintegrator@i+1)& (0+255),w,b
 14047  002CF4  6EDA               	movwf	fsr2h,c
 14048  002CF6  90D8               	bcf	status,0,c
 14049  002CF8  36D9               	rlcf	fsr2l,f,c
 14050  002CFA  36DA               	rlcf	fsr2h,f,c
 14051  002CFC  0101               	movlb	1	; () banked
 14052  002CFE  5139               	movf	??_desintegrator& (0+255),w,b
 14053  002D00  26D9               	addwf	fsr2l,f,c
 14054  002D02  0101               	movlb	1	; () banked
 14055  002D04  513A               	movf	(??_desintegrator+1)& (0+255),w,b
 14056  002D06  22DA               	addwfc	fsr2h,f,c
 14057  002D08  CFDE F100          	movff	postinc2,___lmul@multiplier
 14058  002D0C  CFDE F101          	movff	postinc2,___lmul@multiplier+1
 14059  002D10  CFDE F102          	movff	postinc2,___lmul@multiplier+2
 14060  002D14  CFDE F103          	movff	postinc2,___lmul@multiplier+3
 14061  002D18  C146  F104         	movff	desintegrator@temp2,___lmul@multiplicand
 14062  002D1C  C147  F105         	movff	desintegrator@temp2+1,___lmul@multiplicand+1
 14063  002D20  C148  F106         	movff	desintegrator@temp2+2,___lmul@multiplicand+2
 14064  002D24  C149  F107         	movff	desintegrator@temp2+3,___lmul@multiplicand+3
 14065  002D28  ECED  F030         	call	___lmul	;wreg free
 14066  002D2C  C100  F142         	movff	?___lmul,desintegrator@temp3
 14067  002D30  C101  F143         	movff	?___lmul+1,desintegrator@temp3+1
 14068  002D34  C102  F144         	movff	?___lmul+2,desintegrator@temp3+2
 14069  002D38  C103  F145         	movff	?___lmul+3,desintegrator@temp3+3
 14070                           
 14071                           ;DisplayProtocol.h: 56: chanValdig[i] = temp2;
 14072  002D3C  0EA0               	movlw	low _chanValdig
 14073  002D3E  0101               	movlb	1	; () banked
 14074  002D40  254A               	addwf	desintegrator@i& (0+255),w,b
 14075  002D42  6ED9               	movwf	fsr2l,c
 14076  002D44  0E01               	movlw	high _chanValdig
 14077  002D46  0101               	movlb	1	; () banked
 14078  002D48  214B               	addwfc	(desintegrator@i+1)& (0+255),w,b
 14079  002D4A  6EDA               	movwf	fsr2h,c
 14080  002D4C  C146  FFDF         	movff	desintegrator@temp2,indf2
 14081                           
 14082                           ; BSR set to: 1
 14083                           ;DisplayProtocol.h: 57: tempL -= temp3;
 14084  002D50  0101               	movlb	1	; () banked
 14085  002D52  5142               	movf	desintegrator@temp3& (0+255),w,b
 14086  002D54  0101               	movlb	1	; () banked
 14087  002D56  5F3E               	subwf	desintegrator@tempL& (0+255),f,b
 14088  002D58  0101               	movlb	1	; () banked
 14089  002D5A  5143               	movf	(desintegrator@temp3+1)& (0+255),w,b
 14090  002D5C  0101               	movlb	1	; () banked
 14091  002D5E  5B3F               	subwfb	(desintegrator@tempL+1)& (0+255),f,b
 14092  002D60  0101               	movlb	1	; () banked
 14093  002D62  5144               	movf	(desintegrator@temp3+2)& (0+255),w,b
 14094  002D64  0101               	movlb	1	; () banked
 14095  002D66  5B40               	subwfb	(desintegrator@tempL+2)& (0+255),f,b
 14096  002D68  0101               	movlb	1	; () banked
 14097  002D6A  5145               	movf	(desintegrator@temp3+3)& (0+255),w,b
 14098  002D6C  0101               	movlb	1	; () banked
 14099  002D6E  5B41               	subwfb	(desintegrator@tempL+3)& (0+255),f,b
 14100                           
 14101                           ; BSR set to: 1
 14102  002D70  0101               	movlb	1	; () banked
 14103  002D72  4B4A               	infsnz	desintegrator@i& (0+255),f,b
 14104  002D74  2B4B               	incf	(desintegrator@i+1)& (0+255),f,b
 14105                           
 14106                           ; BSR set to: 1
 14107  002D76  0101               	movlb	1	; () banked
 14108  002D78  BF4B               	btfsc	(desintegrator@i+1)& (0+255),7,b
 14109  002D7A  D780               	goto	l10601
 14110  002D7C  0101               	movlb	1	; () banked
 14111  002D7E  514B               	movf	(desintegrator@i+1)& (0+255),w,b
 14112  002D80  E101               	bnz	l537
 14113  002D82  D775               	goto	L6
 14114  002D84                     l537:
 14115                           
 14116                           ; BSR set to: 1
 14117  002D84  0012               	return		;funcret
 14118  002D86                     __end_of_desintegrator:
 14119                           	opt stack 0
 14120                           tblptru	equ	0xFF8
 14121                           tblptrh	equ	0xFF7
 14122                           tblptrl	equ	0xFF6
 14123                           tablat	equ	0xFF5
 14124                           prodh	equ	0xFF4
 14125                           prodl	equ	0xFF3
 14126                           intcon	equ	0xFF2
 14127                           postinc0	equ	0xFEE
 14128                           wreg	equ	0xFE8
 14129                           postdec1	equ	0xFE5
 14130                           fsr1l	equ	0xFE1
 14131                           indf2	equ	0xFDF
 14132                           postinc2	equ	0xFDE
 14133                           postdec2	equ	0xFDD
 14134                           fsr2h	equ	0xFDA
 14135                           fsr2l	equ	0xFD9
 14136                           status	equ	0xFD8
 14137                           
 14138 ;; *************** function ___fttol *****************
 14139 ;; Defined at:
 14140 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 14141 ;; Parameters:    Size  Location     Type
 14142 ;;  f1              3   42[BANK1 ] float 
 14143 ;; Auto vars:     Size  Location     Type
 14144 ;;  lval            4   52[BANK1 ] unsigned long 
 14145 ;;  exp1            1   56[BANK1 ] unsigned char 
 14146 ;;  sign1           1   51[BANK1 ] unsigned char 
 14147 ;; Return value:  Size  Location     Type
 14148 ;;                  4   42[BANK1 ] long 
 14149 ;; Registers used:
 14150 ;;		wreg, status,2, status,0
 14151 ;; Tracked objects:
 14152 ;;		On entry : 0/0
 14153 ;;		On exit  : 0/0
 14154 ;;		Unchanged: 0/0
 14155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14156 ;;      Params:         0       0       4       0       0       0       0
 14157 ;;      Locals:         0       0       6       0       0       0       0
 14158 ;;      Temps:          0       0       5       0       0       0       0
 14159 ;;      Totals:         0       0      15       0       0       0       0
 14160 ;;Total ram usage:       15 bytes
 14161 ;; Hardware stack levels used:    1
 14162 ;; Hardware stack levels required when called:   12
 14163 ;; This function calls:
 14164 ;;		Nothing
 14165 ;; This function is called by:
 14166 ;;		_desintegrator
 14167 ;;		_printf
 14168 ;; This function uses a non-reentrant model
 14169 ;;
 14170                           
 14171                           	psect	text54
 14172  00393C                     __ptext54:
 14173                           	opt stack 0
 14174  00393C                     ___fttol:
 14175                           	opt stack 15
 14176                           
 14177                           ; BSR set to: 1
 14178                           ;incstack = 0
 14179  00393C  C12C  F12E         	movff	___fttol@f1+2,??___fttol
 14180  003940  0101               	movlb	1	; () banked
 14181  003942  6B2F               	clrf	(??___fttol+1)& (0+255),b
 14182  003944  6B30               	clrf	(??___fttol+2)& (0+255),b
 14183  003946  0101               	movlb	1	; () banked
 14184  003948  352B               	rlcf	(___fttol@f1+1)& (0+255),w,b
 14185  00394A  0101               	movlb	1	; () banked
 14186  00394C  372E               	rlcf	??___fttol& (0+255),f,b
 14187  00394E  E301               	bnc	u7601
 14188  003950  812F               	bsf	(??___fttol+1)& (0+255),0,b
 14189  003952                     u7601:
 14190  003952  0101               	movlb	1	; () banked
 14191  003954  512E               	movf	??___fttol& (0+255),w,b
 14192  003956  0101               	movlb	1	; () banked
 14193  003958  6F38               	movwf	___fttol@exp1& (0+255),b
 14194  00395A  0101               	movlb	1	; () banked
 14195  00395C  5138               	movf	___fttol@exp1& (0+255),w,b
 14196  00395E  A4D8               	btfss	status,2,c
 14197  003960  D00A               	goto	l6197
 14198                           
 14199                           ; BSR set to: 1
 14200  003962  0E00               	movlw	0
 14201  003964  0101               	movlb	1	; () banked
 14202  003966  6F2A               	movwf	?___fttol& (0+255),b
 14203  003968  0E00               	movlw	0
 14204  00396A  6F2B               	movwf	(?___fttol+1)& (0+255),b
 14205  00396C  0E00               	movlw	0
 14206  00396E  6F2C               	movwf	(?___fttol+2)& (0+255),b
 14207  003970  0E00               	movlw	0
 14208  003972  6F2D               	movwf	(?___fttol+3)& (0+255),b
 14209                           
 14210                           ; BSR set to: 1
 14211  003974  0012               	return	
 14212  003976                     l6197:
 14213                           
 14214                           ; BSR set to: 1
 14215  003976  0E17               	movlw	23
 14216  003978  0101               	movlb	1	; () banked
 14217  00397A  6F2E               	movwf	??___fttol& (0+255),b
 14218  00397C  C12A  F12F         	movff	___fttol@f1,??___fttol+1
 14219  003980  C12B  F130         	movff	___fttol@f1+1,??___fttol+2
 14220  003984  C12C  F131         	movff	___fttol@f1+2,??___fttol+3
 14221  003988  0101               	movlb	1	; () banked
 14222  00398A  292E               	incf	??___fttol& (0+255),w,b
 14223  00398C  0101               	movlb	1	; () banked
 14224  00398E  6F32               	movwf	(??___fttol+4)& (0+255),b
 14225  003990  D005               	goto	u7620
 14226  003992                     u7625:
 14227  003992  0101               	movlb	1	; () banked
 14228  003994  90D8               	bcf	status,0,c
 14229  003996  3331               	rrcf	(??___fttol+3)& (0+255),f,b
 14230  003998  3330               	rrcf	(??___fttol+2)& (0+255),f,b
 14231  00399A  332F               	rrcf	(??___fttol+1)& (0+255),f,b
 14232  00399C                     u7620:
 14233  00399C  0101               	movlb	1	; () banked
 14234  00399E  2F32               	decfsz	(??___fttol+4)& (0+255),f,b
 14235  0039A0  D7F8               	goto	u7625
 14236  0039A2  0101               	movlb	1	; () banked
 14237  0039A4  512F               	movf	(??___fttol+1)& (0+255),w,b
 14238  0039A6  0101               	movlb	1	; () banked
 14239  0039A8  6F33               	movwf	___fttol@sign1& (0+255),b
 14240                           
 14241                           ; BSR set to: 1
 14242  0039AA  0101               	movlb	1	; () banked
 14243  0039AC  8F2B               	bsf	(___fttol@f1+1)& (0+255),7,b
 14244                           
 14245                           ; BSR set to: 1
 14246  0039AE  0EFF               	movlw	255
 14247  0039B0  0101               	movlb	1	; () banked
 14248  0039B2  172A               	andwf	___fttol@f1& (0+255),f,b
 14249  0039B4  0EFF               	movlw	255
 14250  0039B6  0101               	movlb	1	; () banked
 14251  0039B8  172B               	andwf	(___fttol@f1+1)& (0+255),f,b
 14252  0039BA  0E00               	movlw	0
 14253  0039BC  0101               	movlb	1	; () banked
 14254  0039BE  172C               	andwf	(___fttol@f1+2)& (0+255),f,b
 14255                           
 14256                           ; BSR set to: 1
 14257  0039C0  0101               	movlb	1	; () banked
 14258  0039C2  512A               	movf	___fttol@f1& (0+255),w,b
 14259  0039C4  0101               	movlb	1	; () banked
 14260  0039C6  6F34               	movwf	___fttol@lval& (0+255),b
 14261  0039C8  0101               	movlb	1	; () banked
 14262  0039CA  512B               	movf	(___fttol@f1+1)& (0+255),w,b
 14263  0039CC  0101               	movlb	1	; () banked
 14264  0039CE  6F35               	movwf	(___fttol@lval+1)& (0+255),b
 14265  0039D0  0101               	movlb	1	; () banked
 14266  0039D2  512C               	movf	(___fttol@f1+2)& (0+255),w,b
 14267  0039D4  0101               	movlb	1	; () banked
 14268  0039D6  6F36               	movwf	(___fttol@lval+2)& (0+255),b
 14269  0039D8  0101               	movlb	1	; () banked
 14270  0039DA  6B37               	clrf	(___fttol@lval+3)& (0+255),b
 14271                           
 14272                           ; BSR set to: 1
 14273  0039DC  0E8E               	movlw	142
 14274  0039DE  0101               	movlb	1	; () banked
 14275  0039E0  5F38               	subwf	___fttol@exp1& (0+255),f,b
 14276                           
 14277                           ; BSR set to: 1
 14278  0039E2  0101               	movlb	1	; () banked
 14279  0039E4  AF38               	btfss	___fttol@exp1& (0+255),7,b
 14280  0039E6  D01A               	goto	l6219
 14281                           
 14282                           ; BSR set to: 1
 14283  0039E8  0101               	movlb	1	; () banked
 14284  0039EA  5138               	movf	___fttol@exp1& (0+255),w,b
 14285  0039EC  0A80               	xorlw	128
 14286  0039EE  0F8F               	addlw	143
 14287  0039F0  B0D8               	btfsc	status,0,c
 14288  0039F2  D00A               	goto	l6215
 14289                           
 14290                           ; BSR set to: 1
 14291  0039F4  0E00               	movlw	0
 14292  0039F6  0101               	movlb	1	; () banked
 14293  0039F8  6F2A               	movwf	?___fttol& (0+255),b
 14294  0039FA  0E00               	movlw	0
 14295  0039FC  6F2B               	movwf	(?___fttol+1)& (0+255),b
 14296  0039FE  0E00               	movlw	0
 14297  003A00  6F2C               	movwf	(?___fttol+2)& (0+255),b
 14298  003A02  0E00               	movlw	0
 14299  003A04  6F2D               	movwf	(?___fttol+3)& (0+255),b
 14300                           
 14301                           ; BSR set to: 1
 14302  003A06  0012               	return	
 14303  003A08                     l6215:
 14304                           
 14305                           ; BSR set to: 1
 14306  003A08  0101               	movlb	1	; () banked
 14307  003A0A  90D8               	bcf	status,0,c
 14308  003A0C  3337               	rrcf	(___fttol@lval+3)& (0+255),f,b
 14309  003A0E  3336               	rrcf	(___fttol@lval+2)& (0+255),f,b
 14310  003A10  3335               	rrcf	(___fttol@lval+1)& (0+255),f,b
 14311  003A12  3334               	rrcf	___fttol@lval& (0+255),f,b
 14312                           
 14313                           ; BSR set to: 1
 14314  003A14  0101               	movlb	1	; () banked
 14315  003A16  3F38               	incfsz	___fttol@exp1& (0+255),f,b
 14316  003A18  D7F7               	goto	l6215
 14317                           
 14318                           ; BSR set to: 1
 14319  003A1A  D01B               	goto	l6229
 14320  003A1C                     l6219:
 14321                           
 14322                           ; BSR set to: 1
 14323  003A1C  0E17               	movlw	23
 14324  003A1E  0101               	movlb	1	; () banked
 14325  003A20  6538               	cpfsgt	___fttol@exp1& (0+255),b
 14326  003A22  D012               	goto	l6227
 14327                           
 14328                           ; BSR set to: 1
 14329  003A24  0E00               	movlw	0
 14330  003A26  0101               	movlb	1	; () banked
 14331  003A28  6F2A               	movwf	?___fttol& (0+255),b
 14332  003A2A  0E00               	movlw	0
 14333  003A2C  6F2B               	movwf	(?___fttol+1)& (0+255),b
 14334  003A2E  0E00               	movlw	0
 14335  003A30  6F2C               	movwf	(?___fttol+2)& (0+255),b
 14336  003A32  0E00               	movlw	0
 14337  003A34  6F2D               	movwf	(?___fttol+3)& (0+255),b
 14338                           
 14339                           ; BSR set to: 1
 14340  003A36  0012               	return	
 14341  003A38                     l6225:
 14342                           
 14343                           ; BSR set to: 1
 14344  003A38  0101               	movlb	1	; () banked
 14345  003A3A  90D8               	bcf	status,0,c
 14346  003A3C  3734               	rlcf	___fttol@lval& (0+255),f,b
 14347  003A3E  3735               	rlcf	(___fttol@lval+1)& (0+255),f,b
 14348  003A40  3736               	rlcf	(___fttol@lval+2)& (0+255),f,b
 14349  003A42  3737               	rlcf	(___fttol@lval+3)& (0+255),f,b
 14350  003A44  0101               	movlb	1	; () banked
 14351  003A46  0738               	decf	___fttol@exp1& (0+255),f,b
 14352  003A48                     l6227:
 14353                           
 14354                           ; BSR set to: 1
 14355  003A48  0101               	movlb	1	; () banked
 14356  003A4A  5138               	movf	___fttol@exp1& (0+255),w,b
 14357  003A4C  0101               	movlb	1	; () banked
 14358  003A4E  A4D8               	btfss	status,2,c
 14359  003A50  D7F3               	goto	l6225
 14360  003A52                     l6229:
 14361                           
 14362                           ; BSR set to: 1
 14363  003A52  0101               	movlb	1	; () banked
 14364  003A54  5133               	movf	___fttol@sign1& (0+255),w,b
 14365  003A56  0101               	movlb	1	; () banked
 14366  003A58  B4D8               	btfsc	status,2,c
 14367  003A5A  D009               	goto	l6233
 14368                           
 14369                           ; BSR set to: 1
 14370  003A5C  0101               	movlb	1	; () banked
 14371  003A5E  1F37               	comf	(___fttol@lval+3)& (0+255),f,b
 14372  003A60  1F36               	comf	(___fttol@lval+2)& (0+255),f,b
 14373  003A62  1F35               	comf	(___fttol@lval+1)& (0+255),f,b
 14374  003A64  6D34               	negf	___fttol@lval& (0+255),b
 14375  003A66  0E00               	movlw	0
 14376  003A68  2335               	addwfc	(___fttol@lval+1)& (0+255),f,b
 14377  003A6A  2336               	addwfc	(___fttol@lval+2)& (0+255),f,b
 14378  003A6C  2337               	addwfc	(___fttol@lval+3)& (0+255),f,b
 14379  003A6E                     l6233:
 14380                           
 14381                           ; BSR set to: 1
 14382  003A6E  C134  F12A         	movff	___fttol@lval,?___fttol
 14383  003A72  C135  F12B         	movff	___fttol@lval+1,?___fttol+1
 14384  003A76  C136  F12C         	movff	___fttol@lval+2,?___fttol+2
 14385  003A7A  C137  F12D         	movff	___fttol@lval+3,?___fttol+3
 14386  003A7E  0012               	return	
 14387  003A80                     __end_of___fttol:
 14388                           	opt stack 0
 14389                           tblptru	equ	0xFF8
 14390                           tblptrh	equ	0xFF7
 14391                           tblptrl	equ	0xFF6
 14392                           tablat	equ	0xFF5
 14393                           prodh	equ	0xFF4
 14394                           prodl	equ	0xFF3
 14395                           intcon	equ	0xFF2
 14396                           postinc0	equ	0xFEE
 14397                           wreg	equ	0xFE8
 14398                           postdec1	equ	0xFE5
 14399                           fsr1l	equ	0xFE1
 14400                           indf2	equ	0xFDF
 14401                           postinc2	equ	0xFDE
 14402                           postdec2	equ	0xFDD
 14403                           fsr2h	equ	0xFDA
 14404                           fsr2l	equ	0xFD9
 14405                           status	equ	0xFD8
 14406                           
 14407 ;; *************** function ___aldiv *****************
 14408 ;; Defined at:
 14409 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
 14410 ;; Parameters:    Size  Location     Type
 14411 ;;  dividend        4    0[BANK1 ] long 
 14412 ;;  divisor         4    4[BANK1 ] long 
 14413 ;; Auto vars:     Size  Location     Type
 14414 ;;  quotient        4   10[BANK1 ] long 
 14415 ;;  sign            1    9[BANK1 ] unsigned char 
 14416 ;;  counter         1    8[BANK1 ] unsigned char 
 14417 ;; Return value:  Size  Location     Type
 14418 ;;                  4    0[BANK1 ] long 
 14419 ;; Registers used:
 14420 ;;		wreg, status,2, status,0
 14421 ;; Tracked objects:
 14422 ;;		On entry : 0/0
 14423 ;;		On exit  : 0/0
 14424 ;;		Unchanged: 0/0
 14425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14426 ;;      Params:         0       0       8       0       0       0       0
 14427 ;;      Locals:         0       0       6       0       0       0       0
 14428 ;;      Temps:          0       0       0       0       0       0       0
 14429 ;;      Totals:         0       0      14       0       0       0       0
 14430 ;;Total ram usage:       14 bytes
 14431 ;; Hardware stack levels used:    1
 14432 ;; Hardware stack levels required when called:   12
 14433 ;; This function calls:
 14434 ;;		Nothing
 14435 ;; This function is called by:
 14436 ;;		_desintegrator
 14437 ;; This function uses a non-reentrant model
 14438 ;;
 14439                           
 14440                           	psect	text55
 14441  003E08                     __ptext55:
 14442                           	opt stack 0
 14443  003E08                     ___aldiv:
 14444                           	opt stack 15
 14445                           
 14446                           ; BSR set to: 1
 14447                           ;incstack = 0
 14448  003E08  0E00               	movlw	0
 14449  003E0A  0101               	movlb	1	; () banked
 14450  003E0C  6F09               	movwf	___aldiv@sign& (0+255),b
 14451                           
 14452                           ; BSR set to: 1
 14453  003E0E  0101               	movlb	1	; () banked
 14454  003E10  AF07               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 14455  003E12  D00C               	goto	l10299
 14456                           
 14457                           ; BSR set to: 1
 14458  003E14  0101               	movlb	1	; () banked
 14459  003E16  1F07               	comf	(___aldiv@divisor+3)& (0+255),f,b
 14460  003E18  1F06               	comf	(___aldiv@divisor+2)& (0+255),f,b
 14461  003E1A  1F05               	comf	(___aldiv@divisor+1)& (0+255),f,b
 14462  003E1C  6D04               	negf	___aldiv@divisor& (0+255),b
 14463  003E1E  0E00               	movlw	0
 14464  003E20  2305               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 14465  003E22  2306               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 14466  003E24  2307               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 14467                           
 14468                           ; BSR set to: 1
 14469  003E26  0E01               	movlw	1
 14470  003E28  0101               	movlb	1	; () banked
 14471  003E2A  6F09               	movwf	___aldiv@sign& (0+255),b
 14472  003E2C                     l10299:
 14473                           
 14474                           ; BSR set to: 1
 14475  003E2C  0101               	movlb	1	; () banked
 14476  003E2E  AF03               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 14477  003E30  D00C               	goto	l10305
 14478                           
 14479                           ; BSR set to: 1
 14480  003E32  0101               	movlb	1	; () banked
 14481  003E34  1F03               	comf	(___aldiv@dividend+3)& (0+255),f,b
 14482  003E36  1F02               	comf	(___aldiv@dividend+2)& (0+255),f,b
 14483  003E38  1F01               	comf	(___aldiv@dividend+1)& (0+255),f,b
 14484  003E3A  6D00               	negf	___aldiv@dividend& (0+255),b
 14485  003E3C  0E00               	movlw	0
 14486  003E3E  2301               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 14487  003E40  2302               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 14488  003E42  2303               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 14489                           
 14490                           ; BSR set to: 1
 14491  003E44  0E01               	movlw	1
 14492  003E46  0101               	movlb	1	; () banked
 14493  003E48  1B09               	xorwf	___aldiv@sign& (0+255),f,b
 14494  003E4A                     l10305:
 14495                           
 14496                           ; BSR set to: 1
 14497  003E4A  0E00               	movlw	0
 14498  003E4C  0101               	movlb	1	; () banked
 14499  003E4E  6F0A               	movwf	___aldiv@quotient& (0+255),b
 14500  003E50  0E00               	movlw	0
 14501  003E52  6F0B               	movwf	(___aldiv@quotient+1)& (0+255),b
 14502  003E54  0E00               	movlw	0
 14503  003E56  6F0C               	movwf	(___aldiv@quotient+2)& (0+255),b
 14504  003E58  0E00               	movlw	0
 14505  003E5A  6F0D               	movwf	(___aldiv@quotient+3)& (0+255),b
 14506                           
 14507                           ; BSR set to: 1
 14508  003E5C  0101               	movlb	1	; () banked
 14509  003E5E  5104               	movf	___aldiv@divisor& (0+255),w,b
 14510  003E60  0101               	movlb	1	; () banked
 14511  003E62  1105               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 14512  003E64  0101               	movlb	1	; () banked
 14513  003E66  1106               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 14514  003E68  0101               	movlb	1	; () banked
 14515  003E6A  1107               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 14516  003E6C  B4D8               	btfsc	status,2,c
 14517  003E6E  D042               	goto	l10327
 14518                           
 14519                           ; BSR set to: 1
 14520  003E70  0E01               	movlw	1
 14521  003E72  0101               	movlb	1	; () banked
 14522  003E74  6F08               	movwf	___aldiv@counter& (0+255),b
 14523  003E76  D008               	goto	l10313
 14524  003E78                     l10311:
 14525                           
 14526                           ; BSR set to: 1
 14527  003E78  0101               	movlb	1	; () banked
 14528  003E7A  90D8               	bcf	status,0,c
 14529  003E7C  3704               	rlcf	___aldiv@divisor& (0+255),f,b
 14530  003E7E  3705               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 14531  003E80  3706               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 14532  003E82  3707               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 14533  003E84  0101               	movlb	1	; () banked
 14534  003E86  2B08               	incf	___aldiv@counter& (0+255),f,b
 14535  003E88                     l10313:
 14536                           
 14537                           ; BSR set to: 1
 14538  003E88  0101               	movlb	1	; () banked
 14539  003E8A  AF07               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 14540  003E8C  D7F5               	goto	l10311
 14541  003E8E                     l10315:
 14542                           
 14543                           ; BSR set to: 1
 14544  003E8E  0101               	movlb	1	; () banked
 14545  003E90  90D8               	bcf	status,0,c
 14546  003E92  370A               	rlcf	___aldiv@quotient& (0+255),f,b
 14547  003E94  370B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 14548  003E96  370C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 14549  003E98  370D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 14550                           
 14551                           ; BSR set to: 1
 14552  003E9A  0101               	movlb	1	; () banked
 14553  003E9C  5104               	movf	___aldiv@divisor& (0+255),w,b
 14554  003E9E  0101               	movlb	1	; () banked
 14555  003EA0  5D00               	subwf	___aldiv@dividend& (0+255),w,b
 14556  003EA2  0101               	movlb	1	; () banked
 14557  003EA4  5105               	movf	(___aldiv@divisor+1)& (0+255),w,b
 14558  003EA6  0101               	movlb	1	; () banked
 14559  003EA8  5901               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 14560  003EAA  0101               	movlb	1	; () banked
 14561  003EAC  5106               	movf	(___aldiv@divisor+2)& (0+255),w,b
 14562  003EAE  0101               	movlb	1	; () banked
 14563  003EB0  5902               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 14564  003EB2  0101               	movlb	1	; () banked
 14565  003EB4  5107               	movf	(___aldiv@divisor+3)& (0+255),w,b
 14566  003EB6  0101               	movlb	1	; () banked
 14567  003EB8  5903               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 14568  003EBA  A0D8               	btfss	status,0,c
 14569  003EBC  D012               	goto	l10323
 14570                           
 14571                           ; BSR set to: 1
 14572  003EBE  0101               	movlb	1	; () banked
 14573  003EC0  5104               	movf	___aldiv@divisor& (0+255),w,b
 14574  003EC2  0101               	movlb	1	; () banked
 14575  003EC4  5F00               	subwf	___aldiv@dividend& (0+255),f,b
 14576  003EC6  0101               	movlb	1	; () banked
 14577  003EC8  5105               	movf	(___aldiv@divisor+1)& (0+255),w,b
 14578  003ECA  0101               	movlb	1	; () banked
 14579  003ECC  5B01               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 14580  003ECE  0101               	movlb	1	; () banked
 14581  003ED0  5106               	movf	(___aldiv@divisor+2)& (0+255),w,b
 14582  003ED2  0101               	movlb	1	; () banked
 14583  003ED4  5B02               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 14584  003ED6  0101               	movlb	1	; () banked
 14585  003ED8  5107               	movf	(___aldiv@divisor+3)& (0+255),w,b
 14586  003EDA  0101               	movlb	1	; () banked
 14587  003EDC  5B03               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 14588                           
 14589                           ; BSR set to: 1
 14590  003EDE  0101               	movlb	1	; () banked
 14591  003EE0  810A               	bsf	___aldiv@quotient& (0+255),0,b
 14592  003EE2                     l10323:
 14593                           
 14594                           ; BSR set to: 1
 14595  003EE2  0101               	movlb	1	; () banked
 14596  003EE4  90D8               	bcf	status,0,c
 14597  003EE6  3307               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 14598  003EE8  3306               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 14599  003EEA  3305               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 14600  003EEC  3304               	rrcf	___aldiv@divisor& (0+255),f,b
 14601                           
 14602                           ; BSR set to: 1
 14603  003EEE  0101               	movlb	1	; () banked
 14604  003EF0  2F08               	decfsz	___aldiv@counter& (0+255),f,b
 14605  003EF2  D7CD               	goto	l10315
 14606  003EF4                     l10327:
 14607                           
 14608                           ; BSR set to: 1
 14609  003EF4  0101               	movlb	1	; () banked
 14610  003EF6  5109               	movf	___aldiv@sign& (0+255),w,b
 14611  003EF8  0101               	movlb	1	; () banked
 14612  003EFA  B4D8               	btfsc	status,2,c
 14613  003EFC  D009               	goto	l10331
 14614                           
 14615                           ; BSR set to: 1
 14616  003EFE  0101               	movlb	1	; () banked
 14617  003F00  1F0D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 14618  003F02  1F0C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 14619  003F04  1F0B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 14620  003F06  6D0A               	negf	___aldiv@quotient& (0+255),b
 14621  003F08  0E00               	movlw	0
 14622  003F0A  230B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 14623  003F0C  230C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 14624  003F0E  230D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 14625  003F10                     l10331:
 14626                           
 14627                           ; BSR set to: 1
 14628  003F10  C10A  F100         	movff	___aldiv@quotient,?___aldiv
 14629  003F14  C10B  F101         	movff	___aldiv@quotient+1,?___aldiv+1
 14630  003F18  C10C  F102         	movff	___aldiv@quotient+2,?___aldiv+2
 14631  003F1C  C10D  F103         	movff	___aldiv@quotient+3,?___aldiv+3
 14632  003F20  0012               	return	
 14633  003F22                     __end_of___aldiv:
 14634                           	opt stack 0
 14635                           tblptru	equ	0xFF8
 14636                           tblptrh	equ	0xFF7
 14637                           tblptrl	equ	0xFF6
 14638                           tablat	equ	0xFF5
 14639                           prodh	equ	0xFF4
 14640                           prodl	equ	0xFF3
 14641                           intcon	equ	0xFF2
 14642                           postinc0	equ	0xFEE
 14643                           wreg	equ	0xFE8
 14644                           postdec1	equ	0xFE5
 14645                           fsr1l	equ	0xFE1
 14646                           indf2	equ	0xFDF
 14647                           postinc2	equ	0xFDE
 14648                           postdec2	equ	0xFDD
 14649                           fsr2h	equ	0xFDA
 14650                           fsr2l	equ	0xFD9
 14651                           status	equ	0xFD8
 14652                           
 14653 ;; *************** function _checkPass *****************
 14654 ;; Defined at:
 14655 ;;		line 14 in file "source/DisplayProtocol.h"
 14656 ;; Parameters:    Size  Location     Type
 14657 ;;		None
 14658 ;; Auto vars:     Size  Location     Type
 14659 ;;  i               2    5[BANK1 ] int 
 14660 ;;  passOK          1    4[BANK1 ] unsigned char 
 14661 ;; Return value:  Size  Location     Type
 14662 ;;                  1    wreg      unsigned char 
 14663 ;; Registers used:
 14664 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14665 ;; Tracked objects:
 14666 ;;		On entry : 0/0
 14667 ;;		On exit  : 0/0
 14668 ;;		Unchanged: 0/0
 14669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14670 ;;      Params:         0       0       0       0       0       0       0
 14671 ;;      Locals:         0       0       3       0       0       0       0
 14672 ;;      Temps:          0       0       4       0       0       0       0
 14673 ;;      Totals:         0       0       7       0       0       0       0
 14674 ;;Total ram usage:        7 bytes
 14675 ;; Hardware stack levels used:    1
 14676 ;; Hardware stack levels required when called:   12
 14677 ;; This function calls:
 14678 ;;		Nothing
 14679 ;; This function is called by:
 14680 ;;		_pressENTER
 14681 ;; This function uses a non-reentrant model
 14682 ;;
 14683                           
 14684                           	psect	text56
 14685  005DD2                     __ptext56:
 14686                           	opt stack 0
 14687  005DD2                     _checkPass:
 14688                           	opt stack 16
 14689                           
 14690                           ;DisplayProtocol.h: 15: int i;
 14691                           ;DisplayProtocol.h: 16: char passOK = 0;
 14692                           
 14693                           ; BSR set to: 1
 14694                           ;incstack = 0
 14695  005DD2  0E00               	movlw	0
 14696  005DD4  0101               	movlb	1	; () banked
 14697  005DD6  6F04               	movwf	checkPass@passOK& (0+255),b
 14698                           
 14699                           ;DisplayProtocol.h: 17: for (i = 0; i < 4; i++) {
 14700  005DD8  0E00               	movlw	0
 14701  005DDA  0101               	movlb	1	; () banked
 14702  005DDC  6F06               	movwf	(checkPass@i+1)& (0+255),b
 14703  005DDE  0E00               	movlw	0
 14704  005DE0  6F05               	movwf	checkPass@i& (0+255),b
 14705  005DE2                     l10553:
 14706                           
 14707                           ; BSR set to: 1
 14708  005DE2  0101               	movlb	1	; () banked
 14709  005DE4  BF06               	btfsc	(checkPass@i+1)& (0+255),7,b
 14710  005DE6  D008               	goto	l10557
 14711  005DE8  0101               	movlb	1	; () banked
 14712  005DEA  5106               	movf	(checkPass@i+1)& (0+255),w,b
 14713  005DEC  E136               	bnz	l10567
 14714  005DEE  0E04               	movlw	4
 14715  005DF0  0101               	movlb	1	; () banked
 14716  005DF2  5D05               	subwf	checkPass@i& (0+255),w,b
 14717  005DF4  B0D8               	btfsc	status,0,c
 14718  005DF6  D031               	goto	l10567
 14719  005DF8                     l10557:
 14720                           
 14721                           ; BSR set to: 1
 14722                           ;DisplayProtocol.h: 18: if (introducido[i] == contra[i])
 14723  005DF8  0EC0               	movlw	low _contra
 14724  005DFA  0101               	movlb	1	; () banked
 14725  005DFC  2505               	addwf	checkPass@i& (0+255),w,b
 14726  005DFE  6ED9               	movwf	fsr2l,c
 14727  005E00  0E00               	movlw	high _contra
 14728  005E02  0101               	movlb	1	; () banked
 14729  005E04  2106               	addwfc	(checkPass@i+1)& (0+255),w,b
 14730  005E06  6EDA               	movwf	fsr2h,c
 14731  005E08  50DF               	movf	indf2,w,c
 14732  005E0A  0101               	movlb	1	; () banked
 14733  005E0C  6F00               	movwf	??_checkPass& (0+255),b
 14734  005E0E  6B01               	clrf	(??_checkPass+1)& (0+255),b
 14735  005E10  0EA6               	movlw	low _introducido
 14736  005E12  0101               	movlb	1	; () banked
 14737  005E14  2505               	addwf	checkPass@i& (0+255),w,b
 14738  005E16  6ED9               	movwf	fsr2l,c
 14739  005E18  0E01               	movlw	high _introducido
 14740  005E1A  0101               	movlb	1	; () banked
 14741  005E1C  2106               	addwfc	(checkPass@i+1)& (0+255),w,b
 14742  005E1E  6EDA               	movwf	fsr2h,c
 14743  005E20  50DF               	movf	indf2,w,c
 14744  005E22  0101               	movlb	1	; () banked
 14745  005E24  6F02               	movwf	(??_checkPass+2)& (0+255),b
 14746  005E26  6B03               	clrf	(??_checkPass+3)& (0+255),b
 14747  005E28  BF02               	btfsc	(??_checkPass+2)& (0+255),7,b
 14748  005E2A  0703               	decf	(??_checkPass+3)& (0+255),f,b
 14749  005E2C  0101               	movlb	1	; () banked
 14750  005E2E  5100               	movf	??_checkPass& (0+255),w,b
 14751  005E30  0101               	movlb	1	; () banked
 14752  005E32  1902               	xorwf	(??_checkPass+2)& (0+255),w,b
 14753  005E34  E10A               	bnz	l10561
 14754  005E36  0101               	movlb	1	; () banked
 14755  005E38  5101               	movf	(??_checkPass+1)& (0+255),w,b
 14756  005E3A  0101               	movlb	1	; () banked
 14757  005E3C  1903               	xorwf	(??_checkPass+3)& (0+255),w,b
 14758  005E3E  A4D8               	btfss	status,2,c
 14759  005E40  D004               	goto	l10561
 14760                           
 14761                           ; BSR set to: 1
 14762                           ;DisplayProtocol.h: 19: passOK = 1;
 14763  005E42  0E01               	movlw	1
 14764  005E44  0101               	movlb	1	; () banked
 14765  005E46  6F04               	movwf	checkPass@passOK& (0+255),b
 14766  005E48  D004               	goto	l10563
 14767  005E4A                     l10561:
 14768                           
 14769                           ; BSR set to: 1
 14770                           ;DisplayProtocol.h: 20: else {
 14771                           ;DisplayProtocol.h: 21: passOK = 0;
 14772  005E4A  0E00               	movlw	0
 14773  005E4C  0101               	movlb	1	; () banked
 14774  005E4E  6F04               	movwf	checkPass@passOK& (0+255),b
 14775                           
 14776                           ;DisplayProtocol.h: 22: break;
 14777  005E50  D004               	goto	l10567
 14778  005E52                     l10563:
 14779                           
 14780                           ; BSR set to: 1
 14781  005E52  0101               	movlb	1	; () banked
 14782  005E54  4B05               	infsnz	checkPass@i& (0+255),f,b
 14783  005E56  2B06               	incf	(checkPass@i+1)& (0+255),f,b
 14784  005E58  D7C4               	goto	l10553
 14785  005E5A                     l10567:
 14786                           
 14787                           ; BSR set to: 1
 14788                           ;DisplayProtocol.h: 23: }
 14789                           ;DisplayProtocol.h: 24: }
 14790                           ;DisplayProtocol.h: 25: return passOK;
 14791  005E5A  0101               	movlb	1	; () banked
 14792  005E5C  5104               	movf	checkPass@passOK& (0+255),w,b
 14793  005E5E  0012               	return	
 14794  005E60                     __end_of_checkPass:
 14795                           	opt stack 0
 14796                           tblptru	equ	0xFF8
 14797                           tblptrh	equ	0xFF7
 14798                           tblptrl	equ	0xFF6
 14799                           tablat	equ	0xFF5
 14800                           prodh	equ	0xFF4
 14801                           prodl	equ	0xFF3
 14802                           intcon	equ	0xFF2
 14803                           postinc0	equ	0xFEE
 14804                           wreg	equ	0xFE8
 14805                           postdec1	equ	0xFE5
 14806                           fsr1l	equ	0xFE1
 14807                           indf2	equ	0xFDF
 14808                           postinc2	equ	0xFDE
 14809                           postdec2	equ	0xFDD
 14810                           fsr2h	equ	0xFDA
 14811                           fsr2l	equ	0xFD9
 14812                           status	equ	0xFD8
 14813                           
 14814 ;; *************** function _pressDOWN *****************
 14815 ;; Defined at:
 14816 ;;		line 181 in file "source/DisplayProtocol.h"
 14817 ;; Parameters:    Size  Location     Type
 14818 ;;		None
 14819 ;; Auto vars:     Size  Location     Type
 14820 ;;		None
 14821 ;; Return value:  Size  Location     Type
 14822 ;;                  1    wreg      void 
 14823 ;; Registers used:
 14824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14825 ;; Tracked objects:
 14826 ;;		On entry : 0/0
 14827 ;;		On exit  : 0/0
 14828 ;;		Unchanged: 0/0
 14829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14830 ;;      Params:         0       0       0       0       0       0       0
 14831 ;;      Locals:         0       0       0       0       0       0       0
 14832 ;;      Temps:          0       0       1       0       0       0       0
 14833 ;;      Totals:         0       0       1       0       0       0       0
 14834 ;;Total ram usage:        1 bytes
 14835 ;; Hardware stack levels used:    1
 14836 ;; Hardware stack levels required when called:   13
 14837 ;; This function calls:
 14838 ;;		_chanValDigDOWN
 14839 ;; This function is called by:
 14840 ;;		_buttonChecking
 14841 ;; This function uses a non-reentrant model
 14842 ;;
 14843                           
 14844                           	psect	text57
 14845  00458C                     __ptext57:
 14846                           	opt stack 0
 14847  00458C                     _pressDOWN:
 14848                           	opt stack 16
 14849                           
 14850                           ;DisplayProtocol.h: 182: if (actualScreen == 0 || actualScreen == 4) {
 14851                           
 14852                           ; BSR set to: 1
 14853                           ;incstack = 0
 14854  00458C  0101               	movlb	1	; () banked
 14855  00458E  51BA               	movf	_actualScreen& (0+255),w,b
 14856  004590  B4D8               	btfsc	status,2,c
 14857  004592  D005               	goto	l11213
 14858                           
 14859                           ; BSR set to: 1
 14860  004594  0E04               	movlw	4
 14861  004596  0101               	movlb	1	; () banked
 14862  004598  19BA               	xorwf	_actualScreen& (0+255),w,b
 14863  00459A  A4D8               	btfss	status,2,c
 14864  00459C  D009               	goto	l11219
 14865  00459E                     l11213:
 14866                           
 14867                           ; BSR set to: 1
 14868                           ;DisplayProtocol.h: 183: menuSection--;
 14869  00459E  0101               	movlb	1	; () banked
 14870  0045A0  07C1               	decf	_menuSection& (0+255),f,b
 14871                           
 14872                           ; BSR set to: 1
 14873                           ;DisplayProtocol.h: 184: if (menuSection < 0)
 14874  0045A2  0101               	movlb	1	; () banked
 14875  0045A4  AFC1               	btfss	_menuSection& (0+255),7,b
 14876  0045A6  0012               	return	
 14877                           
 14878                           ; BSR set to: 1
 14879                           ;DisplayProtocol.h: 185: menuSection = 4;
 14880  0045A8  0E04               	movlw	4
 14881  0045AA  0101               	movlb	1	; () banked
 14882  0045AC  6FC1               	movwf	_menuSection& (0+255),b
 14883                           
 14884                           ; BSR set to: 1
 14885                           ;DisplayProtocol.h: 186: } else if (actualScreen == 1) {
 14886  0045AE  0012               	return	
 14887  0045B0                     l11219:
 14888                           
 14889                           ; BSR set to: 1
 14890  0045B0  0101               	movlb	1	; () banked
 14891  0045B2  05BA               	decf	_actualScreen& (0+255),w,b
 14892  0045B4  A4D8               	btfss	status,2,c
 14893  0045B6  D022               	goto	l11225
 14894                           
 14895                           ; BSR set to: 1
 14896                           ;DisplayProtocol.h: 187: introducido[passSection]--;
 14897  0045B8  0101               	movlb	1	; () banked
 14898  0045BA  51C2               	movf	_passSection& (0+255),w,b
 14899  0045BC  0D01               	mullw	1
 14900  0045BE  0EA6               	movlw	low _introducido
 14901  0045C0  24F3               	addwf	prodl,w,c
 14902  0045C2  6ED9               	movwf	fsr2l,c
 14903  0045C4  0E01               	movlw	high _introducido
 14904  0045C6  20F4               	addwfc	prodh,w,c
 14905  0045C8  6EDA               	movwf	fsr2h,c
 14906  0045CA  06DF               	decf	indf2,f,c
 14907                           
 14908                           ;DisplayProtocol.h: 188: if (introducido[passSection] < 0)
 14909  0045CC  0101               	movlb	1	; () banked
 14910  0045CE  51C2               	movf	_passSection& (0+255),w,b
 14911  0045D0  0D01               	mullw	1
 14912  0045D2  0EA6               	movlw	low _introducido
 14913  0045D4  24F3               	addwf	prodl,w,c
 14914  0045D6  6ED9               	movwf	fsr2l,c
 14915  0045D8  0E01               	movlw	high _introducido
 14916  0045DA  20F4               	addwfc	prodh,w,c
 14917  0045DC  6EDA               	movwf	fsr2h,c
 14918  0045DE  0E00               	movlw	0
 14919  0045E0  AEDB               	btfss	plusw2,7,c
 14920  0045E2  0012               	return	
 14921                           
 14922                           ; BSR set to: 1
 14923                           ;DisplayProtocol.h: 189: introducido[passSection] = 9;
 14924  0045E4  0101               	movlb	1	; () banked
 14925  0045E6  51C2               	movf	_passSection& (0+255),w,b
 14926  0045E8  0D01               	mullw	1
 14927  0045EA  0EA6               	movlw	low _introducido
 14928  0045EC  24F3               	addwf	prodl,w,c
 14929  0045EE  6ED9               	movwf	fsr2l,c
 14930  0045F0  0E01               	movlw	high _introducido
 14931  0045F2  20F4               	addwfc	prodh,w,c
 14932  0045F4  6EDA               	movwf	fsr2h,c
 14933  0045F6  0E09               	movlw	9
 14934  0045F8  6EDF               	movwf	indf2,c
 14935                           
 14936                           ; BSR set to: 1
 14937                           ;DisplayProtocol.h: 190: } else if (actualScreen == 2 || actualScreen == 3
 14938  0045FA  0012               	return	
 14939  0045FC                     l11225:
 14940                           
 14941                           ; BSR set to: 1
 14942                           ;DisplayProtocol.h: 191: || actualScreen == 10 || actualScreen == 11) {
 14943  0045FC  0E02               	movlw	2
 14944  0045FE  0101               	movlb	1	; () banked
 14945  004600  19BA               	xorwf	_actualScreen& (0+255),w,b
 14946  004602  B4D8               	btfsc	status,2,c
 14947  004604  D00F               	goto	l11233
 14948                           
 14949                           ; BSR set to: 1
 14950  004606  0E03               	movlw	3
 14951  004608  0101               	movlb	1	; () banked
 14952  00460A  19BA               	xorwf	_actualScreen& (0+255),w,b
 14953  00460C  B4D8               	btfsc	status,2,c
 14954  00460E  D00A               	goto	l11233
 14955                           
 14956                           ; BSR set to: 1
 14957  004610  0E0A               	movlw	10
 14958  004612  0101               	movlb	1	; () banked
 14959  004614  19BA               	xorwf	_actualScreen& (0+255),w,b
 14960  004616  B4D8               	btfsc	status,2,c
 14961  004618  D005               	goto	l11233
 14962                           
 14963                           ; BSR set to: 1
 14964  00461A  0E0B               	movlw	11
 14965  00461C  0101               	movlb	1	; () banked
 14966  00461E  19BA               	xorwf	_actualScreen& (0+255),w,b
 14967  004620  A4D8               	btfss	status,2,c
 14968  004622  D011               	goto	l11239
 14969  004624                     l11233:
 14970                           
 14971                           ; BSR set to: 1
 14972                           ;DisplayProtocol.h: 192: selSN = !selSN;
 14973  004624  0101               	movlb	1	; () banked
 14974  004626  51C3               	movf	_selSN& (0+255),w,b
 14975  004628  A4D8               	btfss	status,2,c
 14976  00462A  D002               	goto	u16140
 14977  00462C  0E01               	movlw	1
 14978  00462E  D001               	goto	u16150
 14979  004630                     u16140:
 14980  004630  0E00               	movlw	0
 14981  004632                     u16150:
 14982  004632  0101               	movlb	1	; () banked
 14983  004634  6FC3               	movwf	_selSN& (0+255),b
 14984                           
 14985                           ; BSR set to: 1
 14986                           ;DisplayProtocol.h: 193: if(selSN > 1)
 14987  004636  0E01               	movlw	1
 14988  004638  0101               	movlb	1	; () banked
 14989  00463A  65C3               	cpfsgt	_selSN& (0+255),b
 14990  00463C  0012               	return	
 14991                           
 14992                           ; BSR set to: 1
 14993                           ;DisplayProtocol.h: 194: selSN = 0;
 14994  00463E  0E00               	movlw	0
 14995  004640  0101               	movlb	1	; () banked
 14996  004642  6FC3               	movwf	_selSN& (0+255),b
 14997                           
 14998                           ; BSR set to: 1
 14999                           ;DisplayProtocol.h: 195: }else if(actualScreen == 5) {
 15000  004644  0012               	return	
 15001  004646                     l11239:
 15002                           
 15003                           ; BSR set to: 1
 15004  004646  0E05               	movlw	5
 15005  004648  0101               	movlb	1	; () banked
 15006  00464A  19BA               	xorwf	_actualScreen& (0+255),w,b
 15007  00464C  B4D8               	btfsc	status,2,c
 15008  00464E  D00C               	goto	l11251
 15009  004650  D01A               	goto	l11253
 15010  004652                     l11243:
 15011                           
 15012                           ; BSR set to: 1
 15013                           ;DisplayProtocol.h: 200: chanValDigDOWN();
 15014  004652  EC84  F026         	call	_chanValDigDOWN	;wreg free
 15015                           
 15016                           ;DisplayProtocol.h: 201: break;
 15017  004656  0012               	return	
 15018  004658                     l11245:
 15019                           
 15020                           ;DisplayProtocol.h: 203: chanVals--;
 15021  004658  0101               	movlb	1	; () banked
 15022  00465A  07B1               	decf	_chanVals& (0+255),f,b
 15023  00465C  A0D8               	btfss	status,0,c
 15024  00465E  07B2               	decf	(_chanVals+1)& (0+255),f,b
 15025                           
 15026                           ;DisplayProtocol.h: 204: break;
 15027  004660  0012               	return	
 15028  004662                     l11247:
 15029                           
 15030                           ; BSR set to: 1
 15031                           ;DisplayProtocol.h: 206: chanValDigDOWN();
 15032  004662  EC84  F026         	call	_chanValDigDOWN	;wreg free
 15033                           
 15034                           ;DisplayProtocol.h: 208: }
 15035                           ;DisplayProtocol.h: 209: }
 15036                           
 15037                           ;DisplayProtocol.h: 207: break;
 15038  004666  0012               	return	
 15039  004668                     l11251:
 15040  004668  0101               	movlb	1	; () banked
 15041  00466A  51C1               	movf	_menuSection& (0+255),w,b
 15042                           
 15043                           ; Switch size 1, requested type "space"
 15044                           ; Number of cases is 4, Range of values is 0 to 3
 15045                           ; switch strategies available:
 15046                           ; Name         Instructions Cycles
 15047                           ; simple_byte           13     7 (average)
 15048                           ;	Chosen strategy is simple_byte
 15049  00466C  0A00               	xorlw	0	; case 0
 15050  00466E  B4D8               	btfsc	status,2,c
 15051  004670  0012               	return	
 15052  004672  0A01               	xorlw	1	; case 1
 15053  004674  B4D8               	btfsc	status,2,c
 15054  004676  D7ED               	goto	l11243
 15055  004678  0A03               	xorlw	3	; case 2
 15056  00467A  B4D8               	btfsc	status,2,c
 15057  00467C  D7ED               	goto	l11245
 15058  00467E  0A01               	xorlw	1	; case 3
 15059  004680  A4D8               	btfss	status,2,c
 15060                           
 15061                           ; BSR set to: 1
 15062                           ;DisplayProtocol.h: 210: }else if(actualScreen == 12)
 15063  004682  0012               	return	
 15064  004684  D7EE               	goto	l11247
 15065  004686                     l11253:
 15066                           
 15067                           ; BSR set to: 1
 15068  004686  0E0C               	movlw	12
 15069  004688  0101               	movlb	1	; () banked
 15070  00468A  19BA               	xorwf	_actualScreen& (0+255),w,b
 15071  00468C  A4D8               	btfss	status,2,c
 15072  00468E  0012               	return	
 15073                           
 15074                           ; BSR set to: 1
 15075                           ;DisplayProtocol.h: 211: chanValDigDOWN();
 15076  004690  EC84  F026         	call	_chanValDigDOWN	;wreg free
 15077  004694  0012               	return	
 15078  004696                     __end_of_pressDOWN:
 15079                           	opt stack 0
 15080                           tblptru	equ	0xFF8
 15081                           tblptrh	equ	0xFF7
 15082                           tblptrl	equ	0xFF6
 15083                           tablat	equ	0xFF5
 15084                           prodh	equ	0xFF4
 15085                           prodl	equ	0xFF3
 15086                           intcon	equ	0xFF2
 15087                           postinc0	equ	0xFEE
 15088                           wreg	equ	0xFE8
 15089                           postdec1	equ	0xFE5
 15090                           fsr1l	equ	0xFE1
 15091                           indf2	equ	0xFDF
 15092                           postinc2	equ	0xFDE
 15093                           postdec2	equ	0xFDD
 15094                           plusw2	equ	0xFDB
 15095                           fsr2h	equ	0xFDA
 15096                           fsr2l	equ	0xFD9
 15097                           status	equ	0xFD8
 15098                           
 15099 ;; *************** function _chanValDigDOWN *****************
 15100 ;; Defined at:
 15101 ;;		line 37 in file "source/DisplayProtocol.h"
 15102 ;; Parameters:    Size  Location     Type
 15103 ;;		None
 15104 ;; Auto vars:     Size  Location     Type
 15105 ;;		None
 15106 ;; Return value:  Size  Location     Type
 15107 ;;                  1    wreg      void 
 15108 ;; Registers used:
 15109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15110 ;; Tracked objects:
 15111 ;;		On entry : 0/0
 15112 ;;		On exit  : 0/0
 15113 ;;		Unchanged: 0/0
 15114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15115 ;;      Params:         0       0       0       0       0       0       0
 15116 ;;      Locals:         0       0       0       0       0       0       0
 15117 ;;      Temps:          0       0       5       0       0       0       0
 15118 ;;      Totals:         0       0       5       0       0       0       0
 15119 ;;Total ram usage:        5 bytes
 15120 ;; Hardware stack levels used:    1
 15121 ;; Hardware stack levels required when called:   12
 15122 ;; This function calls:
 15123 ;;		Nothing
 15124 ;; This function is called by:
 15125 ;;		_pressDOWN
 15126 ;; This function uses a non-reentrant model
 15127 ;;
 15128                           
 15129                           	psect	text58
 15130  004D08                     __ptext58:
 15131                           	opt stack 0
 15132  004D08                     _chanValDigDOWN:
 15133                           	opt stack 16
 15134                           
 15135                           ;DisplayProtocol.h: 38: chanValdig[chanValSection]--;
 15136                           
 15137                           ;incstack = 0
 15138  004D08  0101               	movlb	1	; () banked
 15139  004D0A  5194               	movf	_chanValSection& (0+255),w,b
 15140  004D0C  0D01               	mullw	1
 15141  004D0E  0EA0               	movlw	low _chanValdig
 15142  004D10  24F3               	addwf	prodl,w,c
 15143  004D12  6ED9               	movwf	fsr2l,c
 15144  004D14  0E01               	movlw	high _chanValdig
 15145  004D16  20F4               	addwfc	prodh,w,c
 15146  004D18  6EDA               	movwf	fsr2h,c
 15147  004D1A  06DF               	decf	indf2,f,c
 15148                           
 15149                           ;DisplayProtocol.h: 39: if(chanValdig[chanValSection] < 0) {
 15150  004D1C  0101               	movlb	1	; () banked
 15151  004D1E  5194               	movf	_chanValSection& (0+255),w,b
 15152  004D20  0D01               	mullw	1
 15153  004D22  0EA0               	movlw	low _chanValdig
 15154  004D24  24F3               	addwf	prodl,w,c
 15155  004D26  6ED9               	movwf	fsr2l,c
 15156  004D28  0E01               	movlw	high _chanValdig
 15157  004D2A  20F4               	addwfc	prodh,w,c
 15158  004D2C  6EDA               	movwf	fsr2h,c
 15159  004D2E  0E00               	movlw	0
 15160  004D30  AEDB               	btfss	plusw2,7,c
 15161  004D32  0012               	return	
 15162                           
 15163                           ; BSR set to: 1
 15164                           ;DisplayProtocol.h: 40: chanValdig[chanValSection] = 9;
 15165  004D34  0101               	movlb	1	; () banked
 15166  004D36  5194               	movf	_chanValSection& (0+255),w,b
 15167  004D38  0D01               	mullw	1
 15168  004D3A  0EA0               	movlw	low _chanValdig
 15169  004D3C  24F3               	addwf	prodl,w,c
 15170  004D3E  6ED9               	movwf	fsr2l,c
 15171  004D40  0E01               	movlw	high _chanValdig
 15172  004D42  20F4               	addwfc	prodh,w,c
 15173  004D44  6EDA               	movwf	fsr2h,c
 15174  004D46  0E09               	movlw	9
 15175  004D48  6EDF               	movwf	indf2,c
 15176                           
 15177                           ; BSR set to: 1
 15178                           ;DisplayProtocol.h: 41: if(chanValSection > 1 && chanValdig[chanValSection - 1] > 0)
 15179  004D4A  0101               	movlb	1	; () banked
 15180  004D4C  5194               	movf	_chanValSection& (0+255),w,b
 15181  004D4E  0A80               	xorlw	128
 15182  004D50  0F7E               	addlw	-130
 15183  004D52  A0D8               	btfss	status,0,c
 15184  004D54  0012               	return	
 15185                           
 15186                           ; BSR set to: 1
 15187  004D56  0EFF               	movlw	255
 15188  004D58  0101               	movlb	1	; () banked
 15189  004D5A  6F00               	movwf	??_chanValDigDOWN& (0+255),b
 15190  004D5C  0EFF               	movlw	255
 15191  004D5E  0101               	movlb	1	; () banked
 15192  004D60  6F01               	movwf	(??_chanValDigDOWN+1)& (0+255),b
 15193  004D62  C194  F102         	movff	_chanValSection,??_chanValDigDOWN+2
 15194  004D66  0101               	movlb	1	; () banked
 15195  004D68  6B03               	clrf	(??_chanValDigDOWN+3)& (0+255),b
 15196  004D6A  BF02               	btfsc	(??_chanValDigDOWN+2)& (0+255),7,b
 15197  004D6C  0703               	decf	(??_chanValDigDOWN+3)& (0+255),f,b
 15198  004D6E  0101               	movlb	1	; () banked
 15199  004D70  5100               	movf	??_chanValDigDOWN& (0+255),w,b
 15200  004D72  0101               	movlb	1	; () banked
 15201  004D74  2702               	addwf	(??_chanValDigDOWN+2)& (0+255),f,b
 15202  004D76  0101               	movlb	1	; () banked
 15203  004D78  5101               	movf	(??_chanValDigDOWN+1)& (0+255),w,b
 15204  004D7A  0101               	movlb	1	; () banked
 15205  004D7C  2303               	addwfc	(??_chanValDigDOWN+3)& (0+255),f,b
 15206  004D7E  0EA0               	movlw	low _chanValdig
 15207  004D80  0101               	movlb	1	; () banked
 15208  004D82  2502               	addwf	(??_chanValDigDOWN+2)& (0+255),w,b
 15209  004D84  6ED9               	movwf	fsr2l,c
 15210  004D86  0E01               	movlw	high _chanValdig
 15211  004D88  0101               	movlb	1	; () banked
 15212  004D8A  2103               	addwfc	(??_chanValDigDOWN+3)& (0+255),w,b
 15213  004D8C  6EDA               	movwf	fsr2h,c
 15214  004D8E  50DF               	movf	indf2,w,c
 15215  004D90  0A80               	xorlw	128
 15216  004D92  0F7F               	addlw	-129
 15217  004D94  A0D8               	btfss	status,0,c
 15218  004D96  0012               	return	
 15219                           
 15220                           ; BSR set to: 1
 15221                           ;DisplayProtocol.h: 42: chanValdig[chanValSection - 1]--;
 15222  004D98  0EFF               	movlw	255
 15223  004D9A  0101               	movlb	1	; () banked
 15224  004D9C  6F00               	movwf	??_chanValDigDOWN& (0+255),b
 15225  004D9E  0EFF               	movlw	255
 15226  004DA0  0101               	movlb	1	; () banked
 15227  004DA2  6F01               	movwf	(??_chanValDigDOWN+1)& (0+255),b
 15228  004DA4  C194  F102         	movff	_chanValSection,??_chanValDigDOWN+2
 15229  004DA8  0101               	movlb	1	; () banked
 15230  004DAA  6B03               	clrf	(??_chanValDigDOWN+3)& (0+255),b
 15231  004DAC  BF02               	btfsc	(??_chanValDigDOWN+2)& (0+255),7,b
 15232  004DAE  0703               	decf	(??_chanValDigDOWN+3)& (0+255),f,b
 15233  004DB0  0101               	movlb	1	; () banked
 15234  004DB2  5100               	movf	??_chanValDigDOWN& (0+255),w,b
 15235  004DB4  0101               	movlb	1	; () banked
 15236  004DB6  2702               	addwf	(??_chanValDigDOWN+2)& (0+255),f,b
 15237  004DB8  0101               	movlb	1	; () banked
 15238  004DBA  5101               	movf	(??_chanValDigDOWN+1)& (0+255),w,b
 15239  004DBC  0101               	movlb	1	; () banked
 15240  004DBE  2303               	addwfc	(??_chanValDigDOWN+3)& (0+255),f,b
 15241  004DC0  0EA0               	movlw	low _chanValdig
 15242  004DC2  0101               	movlb	1	; () banked
 15243  004DC4  2502               	addwf	(??_chanValDigDOWN+2)& (0+255),w,b
 15244  004DC6  6ED9               	movwf	fsr2l,c
 15245  004DC8  0E01               	movlw	high _chanValdig
 15246  004DCA  0101               	movlb	1	; () banked
 15247  004DCC  2103               	addwfc	(??_chanValDigDOWN+3)& (0+255),w,b
 15248  004DCE  6EDA               	movwf	fsr2h,c
 15249  004DD0  06DF               	decf	indf2,f,c
 15250                           
 15251                           ; BSR set to: 1
 15252  004DD2  0012               	return	
 15253  004DD4                     __end_of_chanValDigDOWN:
 15254                           	opt stack 0
 15255                           tblptru	equ	0xFF8
 15256                           tblptrh	equ	0xFF7
 15257                           tblptrl	equ	0xFF6
 15258                           tablat	equ	0xFF5
 15259                           prodh	equ	0xFF4
 15260                           prodl	equ	0xFF3
 15261                           intcon	equ	0xFF2
 15262                           postinc0	equ	0xFEE
 15263                           wreg	equ	0xFE8
 15264                           postdec1	equ	0xFE5
 15265                           fsr1l	equ	0xFE1
 15266                           indf2	equ	0xFDF
 15267                           postinc2	equ	0xFDE
 15268                           postdec2	equ	0xFDD
 15269                           plusw2	equ	0xFDB
 15270                           fsr2h	equ	0xFDA
 15271                           fsr2l	equ	0xFD9
 15272                           status	equ	0xFD8
 15273                           
 15274 ;; *************** function _longPressUP *****************
 15275 ;; Defined at:
 15276 ;;		line 157 in file "source/DisplayProtocol.h"
 15277 ;; Parameters:    Size  Location     Type
 15278 ;;		None
 15279 ;; Auto vars:     Size  Location     Type
 15280 ;;		None
 15281 ;; Return value:  Size  Location     Type
 15282 ;;                  1    wreg      void 
 15283 ;; Registers used:
 15284 ;;		wreg, status,2, status,0
 15285 ;; Tracked objects:
 15286 ;;		On entry : 0/0
 15287 ;;		On exit  : 0/0
 15288 ;;		Unchanged: 0/0
 15289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15290 ;;      Params:         0       0       0       0       0       0       0
 15291 ;;      Locals:         0       0       0       0       0       0       0
 15292 ;;      Temps:          0       0       0       0       0       0       0
 15293 ;;      Totals:         0       0       0       0       0       0       0
 15294 ;;Total ram usage:        0 bytes
 15295 ;; Hardware stack levels used:    1
 15296 ;; Hardware stack levels required when called:   12
 15297 ;; This function calls:
 15298 ;;		Nothing
 15299 ;; This function is called by:
 15300 ;;		_buttonChecking
 15301 ;; This function uses a non-reentrant model
 15302 ;;
 15303                           
 15304                           	psect	text59
 15305  0062C6                     __ptext59:
 15306                           	opt stack 0
 15307  0062C6                     _longPressUP:
 15308                           	opt stack 17
 15309                           
 15310                           ;DisplayProtocol.h: 158: if (!UPisLP) {
 15311                           
 15312                           ; BSR set to: 1
 15313                           ;incstack = 0
 15314  0062C6  503C               	movf	_UPisLP,w,c
 15315  0062C8  A4D8               	btfss	status,2,c
 15316  0062CA  0012               	return	
 15317                           
 15318                           ;DisplayProtocol.h: 159: UPisLP = 1;
 15319  0062CC  0E01               	movlw	1
 15320  0062CE  6E3C               	movwf	_UPisLP,c
 15321                           
 15322                           ;DisplayProtocol.h: 160: if (actualScreen == 0 || actualScreen == 4) {
 15323  0062D0  0101               	movlb	1	; () banked
 15324  0062D2  51BA               	movf	_actualScreen& (0+255),w,b
 15325  0062D4  B4D8               	btfsc	status,2,c
 15326  0062D6  D005               	goto	l11189
 15327                           
 15328                           ; BSR set to: 1
 15329  0062D8  0E04               	movlw	4
 15330  0062DA  0101               	movlb	1	; () banked
 15331  0062DC  19BA               	xorwf	_actualScreen& (0+255),w,b
 15332  0062DE  A4D8               	btfss	status,2,c
 15333  0062E0  D01C               	goto	l11201
 15334  0062E2                     l11189:
 15335                           
 15336                           ; BSR set to: 1
 15337                           ;DisplayProtocol.h: 161: if (holdENTERcont > 5) {
 15338  0062E2  0E05               	movlw	5
 15339  0062E4  0101               	movlb	1	; () banked
 15340  0062E6  65BE               	cpfsgt	_holdENTERcont& (0+255),b
 15341  0062E8  D014               	goto	l11199
 15342                           
 15343                           ; BSR set to: 1
 15344                           ;DisplayProtocol.h: 162: if (actualScreen == 0) {
 15345  0062EA  0101               	movlb	1	; () banked
 15346  0062EC  51BA               	movf	_actualScreen& (0+255),w,b
 15347  0062EE  A4D8               	btfss	status,2,c
 15348  0062F0  D007               	goto	l11195
 15349                           
 15350                           ; BSR set to: 1
 15351                           ;DisplayProtocol.h: 163: actualScreen = 1;
 15352  0062F2  0E01               	movlw	1
 15353  0062F4  0101               	movlb	1	; () banked
 15354  0062F6  6FBA               	movwf	_actualScreen& (0+255),b
 15355                           
 15356                           ;DisplayProtocol.h: 164: fd = 0;
 15357  0062F8  0E00               	movlw	0
 15358  0062FA  0101               	movlb	1	; () banked
 15359  0062FC  6FBC               	movwf	_fd& (0+255),b
 15360                           
 15361                           ;DisplayProtocol.h: 165: } else if (actualScreen == 4)
 15362  0062FE  0012               	return	
 15363  006300                     l11195:
 15364                           
 15365                           ; BSR set to: 1
 15366  006300  0E04               	movlw	4
 15367  006302  0101               	movlb	1	; () banked
 15368  006304  19BA               	xorwf	_actualScreen& (0+255),w,b
 15369  006306  A4D8               	btfss	status,2,c
 15370  006308  0012               	return	
 15371                           
 15372                           ; BSR set to: 1
 15373                           ;DisplayProtocol.h: 166: actualScreen = 9;
 15374  00630A  0E09               	movlw	9
 15375  00630C  0101               	movlb	1	; () banked
 15376  00630E  6FBA               	movwf	_actualScreen& (0+255),b
 15377                           
 15378                           ; BSR set to: 1
 15379                           ;DisplayProtocol.h: 167: } else
 15380                           
 15381                           ; BSR set to: 1
 15382  006310  0012               	return	
 15383  006312                     l11199:
 15384                           
 15385                           ; BSR set to: 1
 15386                           ;DisplayProtocol.h: 168: menuSection = 0;
 15387  006312  0E00               	movlw	0
 15388  006314  0101               	movlb	1	; () banked
 15389  006316  6FC1               	movwf	_menuSection& (0+255),b
 15390                           
 15391                           ; BSR set to: 1
 15392                           ;DisplayProtocol.h: 169: }else if(actualScreen == 5) {
 15393  006318  0012               	return	
 15394  00631A                     l11201:
 15395                           
 15396                           ; BSR set to: 1
 15397  00631A  0E05               	movlw	5
 15398  00631C  0101               	movlb	1	; () banked
 15399  00631E  19BA               	xorwf	_actualScreen& (0+255),w,b
 15400  006320  A4D8               	btfss	status,2,c
 15401  006322  0012               	return	
 15402                           
 15403                           ; BSR set to: 1
 15404                           ;DisplayProtocol.h: 170: if(menuSection == 2)
 15405  006324  0E02               	movlw	2
 15406  006326  0101               	movlb	1	; () banked
 15407  006328  19C1               	xorwf	_menuSection& (0+255),w,b
 15408  00632A  A4D8               	btfss	status,2,c
 15409  00632C  0012               	return	
 15410                           
 15411                           ; BSR set to: 1
 15412                           ;DisplayProtocol.h: 171: chanVals += 10;
 15413  00632E  0E0A               	movlw	10
 15414  006330  0101               	movlb	1	; () banked
 15415  006332  27B1               	addwf	_chanVals& (0+255),f,b
 15416  006334  0E00               	movlw	0
 15417  006336  23B2               	addwfc	(_chanVals+1)& (0+255),f,b
 15418                           
 15419                           ; BSR set to: 1
 15420                           
 15421                           ; BSR set to: 1
 15422                           
 15423                           ; BSR set to: 1
 15424  006338  0012               	return	
 15425  00633A                     __end_of_longPressUP:
 15426                           	opt stack 0
 15427                           tblptru	equ	0xFF8
 15428                           tblptrh	equ	0xFF7
 15429                           tblptrl	equ	0xFF6
 15430                           tablat	equ	0xFF5
 15431                           prodh	equ	0xFF4
 15432                           prodl	equ	0xFF3
 15433                           intcon	equ	0xFF2
 15434                           postinc0	equ	0xFEE
 15435                           wreg	equ	0xFE8
 15436                           postdec1	equ	0xFE5
 15437                           fsr1l	equ	0xFE1
 15438                           indf2	equ	0xFDF
 15439                           postinc2	equ	0xFDE
 15440                           postdec2	equ	0xFDD
 15441                           plusw2	equ	0xFDB
 15442                           fsr2h	equ	0xFDA
 15443                           fsr2l	equ	0xFD9
 15444                           status	equ	0xFD8
 15445                           
 15446 ;; *************** function _longPressRETRO *****************
 15447 ;; Defined at:
 15448 ;;		line 252 in file "source/DisplayProtocol.h"
 15449 ;; Parameters:    Size  Location     Type
 15450 ;;		None
 15451 ;; Auto vars:     Size  Location     Type
 15452 ;;		None
 15453 ;; Return value:  Size  Location     Type
 15454 ;;                  1    wreg      void 
 15455 ;; Registers used:
 15456 ;;		wreg, status,2, status,0
 15457 ;; Tracked objects:
 15458 ;;		On entry : 0/0
 15459 ;;		On exit  : 0/0
 15460 ;;		Unchanged: 0/0
 15461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15462 ;;      Params:         0       0       0       0       0       0       0
 15463 ;;      Locals:         0       0       0       0       0       0       0
 15464 ;;      Temps:          0       0       0       0       0       0       0
 15465 ;;      Totals:         0       0       0       0       0       0       0
 15466 ;;Total ram usage:        0 bytes
 15467 ;; Hardware stack levels used:    1
 15468 ;; Hardware stack levels required when called:   12
 15469 ;; This function calls:
 15470 ;;		Nothing
 15471 ;; This function is called by:
 15472 ;;		_buttonChecking
 15473 ;; This function uses a non-reentrant model
 15474 ;;
 15475                           
 15476                           	psect	text60
 15477  006558                     __ptext60:
 15478                           	opt stack 0
 15479  006558                     _longPressRETRO:
 15480                           	opt stack 17
 15481                           
 15482                           ;DisplayProtocol.h: 253: if (!RETROisLP) {
 15483                           
 15484                           ;incstack = 0
 15485  006558  503B               	movf	_RETROisLP,w,c
 15486  00655A  A4D8               	btfss	status,2,c
 15487  00655C  0012               	return	
 15488                           
 15489                           ;DisplayProtocol.h: 254: RETROisLP = 1;
 15490  00655E  0E01               	movlw	1
 15491  006560  6E3B               	movwf	_RETROisLP,c
 15492                           
 15493                           ;DisplayProtocol.h: 255: if(actualScreen == 0 || actualScreen == 4) {
 15494  006562  0101               	movlb	1	; () banked
 15495  006564  51BA               	movf	_actualScreen& (0+255),w,b
 15496  006566  B4D8               	btfsc	status,2,c
 15497  006568  D005               	goto	l11309
 15498                           
 15499                           ; BSR set to: 1
 15500  00656A  0E04               	movlw	4
 15501  00656C  0101               	movlb	1	; () banked
 15502  00656E  19BA               	xorwf	_actualScreen& (0+255),w,b
 15503  006570  A4D8               	btfss	status,2,c
 15504  006572  D00C               	goto	l11315
 15505  006574                     l11309:
 15506                           
 15507                           ; BSR set to: 1
 15508                           ;DisplayProtocol.h: 256: if(ProcessStarted) {
 15509  006574  503A               	movf	_ProcessStarted,w,c
 15510  006576  B4D8               	btfsc	status,2,c
 15511  006578  0012               	return	
 15512                           
 15513                           ; BSR set to: 1
 15514                           ;DisplayProtocol.h: 257: tempLastScreen = actualScreen;
 15515  00657A  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 15516                           
 15517                           ; BSR set to: 1
 15518                           ;DisplayProtocol.h: 258: actualScreen = 3;
 15519  00657E  0E03               	movlw	3
 15520  006580  0101               	movlb	1	; () banked
 15521  006582  6FBA               	movwf	_actualScreen& (0+255),b
 15522                           
 15523                           ;DisplayProtocol.h: 259: selSN = 0;
 15524  006584  0E00               	movlw	0
 15525  006586  0101               	movlb	1	; () banked
 15526  006588  6FC3               	movwf	_selSN& (0+255),b
 15527                           
 15528                           ; BSR set to: 1
 15529                           ;DisplayProtocol.h: 260: }
 15530                           ;DisplayProtocol.h: 261: }else if(actualScreen == 5)
 15531  00658A  0012               	return	
 15532  00658C                     l11315:
 15533                           
 15534                           ; BSR set to: 1
 15535  00658C  0E05               	movlw	5
 15536  00658E  0101               	movlb	1	; () banked
 15537  006590  19BA               	xorwf	_actualScreen& (0+255),w,b
 15538  006592  A4D8               	btfss	status,2,c
 15539  006594  D004               	goto	l11319
 15540                           
 15541                           ; BSR set to: 1
 15542                           ;DisplayProtocol.h: 262: actualScreen = 4;
 15543  006596  0E04               	movlw	4
 15544  006598  0101               	movlb	1	; () banked
 15545  00659A  6FBA               	movwf	_actualScreen& (0+255),b
 15546  00659C  0012               	return	
 15547  00659E                     l11319:
 15548                           
 15549                           ; BSR set to: 1
 15550                           ;DisplayProtocol.h: 263: else if(actualScreen == 12)
 15551  00659E  0E0C               	movlw	12
 15552  0065A0  0101               	movlb	1	; () banked
 15553  0065A2  19BA               	xorwf	_actualScreen& (0+255),w,b
 15554  0065A4  A4D8               	btfss	status,2,c
 15555  0065A6  0012               	return	
 15556                           
 15557                           ; BSR set to: 1
 15558                           ;DisplayProtocol.h: 264: actualScreen = 4;
 15559  0065A8  0E04               	movlw	4
 15560  0065AA  0101               	movlb	1	; () banked
 15561  0065AC  6FBA               	movwf	_actualScreen& (0+255),b
 15562                           
 15563                           ; BSR set to: 1
 15564                           
 15565                           ; BSR set to: 1
 15566                           
 15567                           ; BSR set to: 1
 15568  0065AE  0012               	return	
 15569  0065B0                     __end_of_longPressRETRO:
 15570                           	opt stack 0
 15571                           tblptru	equ	0xFF8
 15572                           tblptrh	equ	0xFF7
 15573                           tblptrl	equ	0xFF6
 15574                           tablat	equ	0xFF5
 15575                           prodh	equ	0xFF4
 15576                           prodl	equ	0xFF3
 15577                           intcon	equ	0xFF2
 15578                           postinc0	equ	0xFEE
 15579                           wreg	equ	0xFE8
 15580                           postdec1	equ	0xFE5
 15581                           fsr1l	equ	0xFE1
 15582                           indf2	equ	0xFDF
 15583                           postinc2	equ	0xFDE
 15584                           postdec2	equ	0xFDD
 15585                           plusw2	equ	0xFDB
 15586                           fsr2h	equ	0xFDA
 15587                           fsr2l	equ	0xFD9
 15588                           status	equ	0xFD8
 15589                           
 15590 ;; *************** function _longPressENTER *****************
 15591 ;; Defined at:
 15592 ;;		line 379 in file "source/DisplayProtocol.h"
 15593 ;; Parameters:    Size  Location     Type
 15594 ;;		None
 15595 ;; Auto vars:     Size  Location     Type
 15596 ;;  temp            3   57[BANK1 ] float 
 15597 ;; Return value:  Size  Location     Type
 15598 ;;                  1    wreg      void 
 15599 ;; Registers used:
 15600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15601 ;; Tracked objects:
 15602 ;;		On entry : 0/0
 15603 ;;		On exit  : 0/0
 15604 ;;		Unchanged: 0/0
 15605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15606 ;;      Params:         0       0       0       0       0       0       0
 15607 ;;      Locals:         0       0       6       0       0       0       0
 15608 ;;      Temps:          0       0       0       0       0       0       0
 15609 ;;      Totals:         0       0       6       0       0       0       0
 15610 ;;Total ram usage:        6 bytes
 15611 ;; Hardware stack levels used:    1
 15612 ;; Hardware stack levels required when called:   17
 15613 ;; This function calls:
 15614 ;;		___ftadd
 15615 ;;		___ftdiv
 15616 ;;		_calcVars2ti
 15617 ;;		_confirmEdition
 15618 ;;		_integrator
 15619 ;;		_setPWM2duty
 15620 ;; This function is called by:
 15621 ;;		_buttonChecking
 15622 ;; This function uses a non-reentrant model
 15623 ;;
 15624                           
 15625                           	psect	text61
 15626  0011A2                     __ptext61:
 15627                           	opt stack 0
 15628  0011A2                     _longPressENTER:
 15629                           	opt stack 12
 15630                           
 15631                           ;DisplayProtocol.h: 380: if (!ENTERisLP) {
 15632                           
 15633                           ;incstack = 0
 15634  0011A2  0101               	movlb	1	; () banked
 15635  0011A4  51B6               	movf	_ENTERisLP& (0+255),w,b
 15636  0011A6  A4D8               	btfss	status,2,c
 15637  0011A8  0012               	return	
 15638                           
 15639                           ; BSR set to: 1
 15640                           ;DisplayProtocol.h: 381: ENTERisLP = 1;
 15641  0011AA  0E01               	movlw	1
 15642  0011AC  0101               	movlb	1	; () banked
 15643  0011AE  6FB6               	movwf	_ENTERisLP& (0+255),b
 15644                           
 15645                           ;DisplayProtocol.h: 382: if(actualScreen == 0 || actualScreen == 4) {
 15646  0011B0  0101               	movlb	1	; () banked
 15647  0011B2  51BA               	movf	_actualScreen& (0+255),w,b
 15648  0011B4  B4D8               	btfsc	status,2,c
 15649  0011B6  D005               	goto	l11473
 15650                           
 15651                           ; BSR set to: 1
 15652  0011B8  0E04               	movlw	4
 15653  0011BA  0101               	movlb	1	; () banked
 15654  0011BC  19BA               	xorwf	_actualScreen& (0+255),w,b
 15655  0011BE  A4D8               	btfss	status,2,c
 15656  0011C0  D024               	goto	l11489
 15657  0011C2                     l11473:
 15658                           
 15659                           ; BSR set to: 1
 15660                           ;DisplayProtocol.h: 383: if (holdUPcont > 5) {
 15661  0011C2  0E05               	movlw	5
 15662  0011C4  0101               	movlb	1	; () banked
 15663  0011C6  65C0               	cpfsgt	_holdUPcont& (0+255),b
 15664  0011C8  D014               	goto	l11483
 15665                           
 15666                           ; BSR set to: 1
 15667                           ;DisplayProtocol.h: 384: if (actualScreen == 0) {
 15668  0011CA  0101               	movlb	1	; () banked
 15669  0011CC  51BA               	movf	_actualScreen& (0+255),w,b
 15670  0011CE  A4D8               	btfss	status,2,c
 15671  0011D0  D007               	goto	l11479
 15672                           
 15673                           ; BSR set to: 1
 15674                           ;DisplayProtocol.h: 385: actualScreen = 1;
 15675  0011D2  0E01               	movlw	1
 15676  0011D4  0101               	movlb	1	; () banked
 15677  0011D6  6FBA               	movwf	_actualScreen& (0+255),b
 15678                           
 15679                           ;DisplayProtocol.h: 386: fd = 0;
 15680  0011D8  0E00               	movlw	0
 15681  0011DA  0101               	movlb	1	; () banked
 15682  0011DC  6FBC               	movwf	_fd& (0+255),b
 15683                           
 15684                           ;DisplayProtocol.h: 387: } else if (actualScreen == 4)
 15685  0011DE  0012               	return	
 15686  0011E0                     l11479:
 15687                           
 15688                           ; BSR set to: 1
 15689  0011E0  0E04               	movlw	4
 15690  0011E2  0101               	movlb	1	; () banked
 15691  0011E4  19BA               	xorwf	_actualScreen& (0+255),w,b
 15692  0011E6  A4D8               	btfss	status,2,c
 15693  0011E8  0012               	return	
 15694                           
 15695                           ; BSR set to: 1
 15696                           ;DisplayProtocol.h: 388: actualScreen = 9;
 15697  0011EA  0E09               	movlw	9
 15698  0011EC  0101               	movlb	1	; () banked
 15699  0011EE  6FBA               	movwf	_actualScreen& (0+255),b
 15700                           
 15701                           ; BSR set to: 1
 15702                           ;DisplayProtocol.h: 389: } else if(!ProcessStarted) {
 15703                           
 15704                           ; BSR set to: 1
 15705  0011F0  0012               	return	
 15706  0011F2                     l11483:
 15707                           
 15708                           ; BSR set to: 1
 15709  0011F2  503A               	movf	_ProcessStarted,w,c
 15710  0011F4  A4D8               	btfss	status,2,c
 15711  0011F6  0012               	return	
 15712                           
 15713                           ; BSR set to: 1
 15714                           ;DisplayProtocol.h: 390: tempLastScreen = actualScreen;
 15715  0011F8  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 15716                           
 15717                           ; BSR set to: 1
 15718                           ;DisplayProtocol.h: 391: actualScreen = 2;
 15719  0011FC  0E02               	movlw	2
 15720  0011FE  0101               	movlb	1	; () banked
 15721  001200  6FBA               	movwf	_actualScreen& (0+255),b
 15722                           
 15723                           ;DisplayProtocol.h: 392: selSN = 1;
 15724  001202  0E01               	movlw	1
 15725  001204  0101               	movlb	1	; () banked
 15726  001206  6FC3               	movwf	_selSN& (0+255),b
 15727                           
 15728                           ; BSR set to: 1
 15729                           ;DisplayProtocol.h: 393: }
 15730                           ;DisplayProtocol.h: 394: }else if(actualScreen == 5) {
 15731                           
 15732                           ; BSR set to: 1
 15733  001208  0012               	return	
 15734  00120A                     l11489:
 15735                           
 15736                           ; BSR set to: 1
 15737  00120A  0E05               	movlw	5
 15738  00120C  0101               	movlb	1	; () banked
 15739  00120E  19BA               	xorwf	_actualScreen& (0+255),w,b
 15740  001210  A4D8               	btfss	status,2,c
 15741  001212  D00F               	goto	l11497
 15742                           
 15743                           ; BSR set to: 1
 15744                           ;DisplayProtocol.h: 395: if(menuSection != 2)
 15745  001214  0E02               	movlw	2
 15746  001216  0101               	movlb	1	; () banked
 15747  001218  19C1               	xorwf	_menuSection& (0+255),w,b
 15748  00121A  A4D8               	btfss	status,2,c
 15749                           
 15750                           ; BSR set to: 1
 15751                           ;DisplayProtocol.h: 396: integrator();
 15752  00121C  ECE2  F01D         	call	_integrator	;wreg free
 15753                           
 15754                           ;DisplayProtocol.h: 397: confirmEdition(!ProcessStarted);
 15755  001220  503A               	movf	_ProcessStarted,w,c
 15756  001222  A4D8               	btfss	status,2,c
 15757  001224  D002               	goto	u16760
 15758  001226  0E01               	movlw	1
 15759  001228  D001               	goto	u16770
 15760  00122A                     u16760:
 15761  00122A  0E00               	movlw	0
 15762  00122C                     u16770:
 15763  00122C  ECD0  F023         	call	_confirmEdition
 15764                           
 15765                           ;DisplayProtocol.h: 398: }else if(actualScreen == 12) {
 15766  001230  0012               	return	
 15767  001232                     l11497:
 15768  001232  0E0C               	movlw	12
 15769  001234  0101               	movlb	1	; () banked
 15770  001236  19BA               	xorwf	_actualScreen& (0+255),w,b
 15771  001238  A4D8               	btfss	status,2,c
 15772  00123A  0012               	return	
 15773                           
 15774                           ; BSR set to: 1
 15775                           ;DisplayProtocol.h: 399: integrator();
 15776  00123C  ECE2  F01D         	call	_integrator	;wreg free
 15777                           
 15778                           ;DisplayProtocol.h: 400: if(calibLevel == 0) {
 15779  001240  0101               	movlb	1	; () banked
 15780  001242  51BB               	movf	_calibLevel& (0+255),w,b
 15781  001244  A4D8               	btfss	status,2,c
 15782  001246  D058               	goto	l11527
 15783                           
 15784                           ; BSR set to: 1
 15785                           ;DisplayProtocol.h: 401: tempVelocidadMasa1 = (float)chanValf / tiXcorte;
 15786  001248  C1AE  F112         	movff	_chanValf,___ftdiv@f1
 15787  00124C  C1AF  F113         	movff	_chanValf+1,___ftdiv@f1+1
 15788  001250  C1B0  F114         	movff	_chanValf+2,___ftdiv@f1+2
 15789  001254  C0B2  F115         	movff	_tiXcorte,___ftdiv@f2
 15790  001258  C0B3  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 15791  00125C  C0B4  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 15792  001260  EC52  F01B         	call	___ftdiv	;wreg free
 15793  001264  C112  F19A         	movff	?___ftdiv,_tempVelocidadMasa1
 15794  001268  C113  F19B         	movff	?___ftdiv+1,_tempVelocidadMasa1+1
 15795  00126C  C114  F19C         	movff	?___ftdiv+2,_tempVelocidadMasa1+2
 15796                           
 15797                           ;DisplayProtocol.h: 402: tiXcorte = (float)0.5 / tempVelocidadMasa1;
 15798  001270  0E00               	movlw	0
 15799  001272  0101               	movlb	1	; () banked
 15800  001274  6F12               	movwf	___ftdiv@f1& (0+255),b
 15801  001276  0E00               	movlw	0
 15802  001278  0101               	movlb	1	; () banked
 15803  00127A  6F13               	movwf	(___ftdiv@f1+1)& (0+255),b
 15804  00127C  0E3F               	movlw	63
 15805  00127E  0101               	movlb	1	; () banked
 15806  001280  6F14               	movwf	(___ftdiv@f1+2)& (0+255),b
 15807  001282  C19A  F115         	movff	_tempVelocidadMasa1,___ftdiv@f2
 15808  001286  C19B  F116         	movff	_tempVelocidadMasa1+1,___ftdiv@f2+1
 15809  00128A  C19C  F117         	movff	_tempVelocidadMasa1+2,___ftdiv@f2+2
 15810  00128E  EC52  F01B         	call	___ftdiv	;wreg free
 15811  001292  C112  F0B2         	movff	?___ftdiv,_tiXcorte
 15812  001296  C113  F0B3         	movff	?___ftdiv+1,_tiXcorte+1
 15813  00129A  C114  F0B4         	movff	?___ftdiv+2,_tiXcorte+2
 15814                           
 15815                           ;DisplayProtocol.h: 403: calibLevel = 1;
 15816  00129E  0E01               	movlw	1
 15817  0012A0  0101               	movlb	1	; () banked
 15818  0012A2  6FBB               	movwf	_calibLevel& (0+255),b
 15819                           
 15820                           ; BSR set to: 1
 15821                           ;DisplayProtocol.h: 404: numCortes = 1;
 15822  0012A4  0E00               	movlw	0
 15823  0012A6  0100               	movlb	0	; () banked
 15824  0012A8  6FB9               	movwf	(_numCortes+1)& (0+255),b
 15825  0012AA  0E01               	movlw	1
 15826  0012AC  6FB8               	movwf	_numCortes& (0+255),b
 15827                           
 15828                           ; BSR set to: 0
 15829                           ;DisplayProtocol.h: 405: processState = 0;
 15830  0012AE  0E00               	movlw	0
 15831  0012B0  6E36               	movwf	_processState+1,c
 15832  0012B2  0E00               	movlw	0
 15833  0012B4  6E35               	movwf	_processState,c
 15834                           
 15835                           ; BSR set to: 0
 15836                           ;DisplayProtocol.h: 406: processTimer = 0;
 15837  0012B6  0E00               	movlw	0
 15838  0012B8  6E2B               	movwf	_processTimer,c
 15839  0012BA  0E00               	movlw	0
 15840  0012BC  6E2C               	movwf	_processTimer+1,c
 15841  0012BE  0E00               	movlw	0
 15842  0012C0  6E2D               	movwf	_processTimer+2,c
 15843  0012C2  0E00               	movlw	0
 15844  0012C4  6E2E               	movwf	_processTimer+3,c
 15845                           
 15846                           ; BSR set to: 0
 15847                           ;DisplayProtocol.h: 407: bladeIsUP = 2;
 15848  0012C6  0E02               	movlw	2
 15849  0012C8  6E50               	movwf	_bladeIsUP,c
 15850                           
 15851                           ; BSR set to: 0
 15852                           ;DisplayProtocol.h: 408: ProcessStarted = 1;
 15853  0012CA  0E01               	movlw	1
 15854  0012CC  6E3A               	movwf	_ProcessStarted,c
 15855                           
 15856                           ; BSR set to: 0
 15857                           ;DisplayProtocol.h: 409: if(ProcessStarted && bladeIsUP != 1) {
 15858  0012CE  503A               	movf	_ProcessStarted,w,c
 15859  0012D0  B4D8               	btfsc	status,2,c
 15860  0012D2  D00E               	goto	l11525
 15861                           
 15862                           ; BSR set to: 0
 15863  0012D4  0450               	decf	_bladeIsUP,w,c
 15864  0012D6  B4D8               	btfsc	status,2,c
 15865  0012D8  D00B               	goto	l11525
 15866                           
 15867                           ; BSR set to: 0
 15868                           ;DisplayProtocol.h: 410: processState = 0;
 15869  0012DA  0E00               	movlw	0
 15870  0012DC  6E36               	movwf	_processState+1,c
 15871  0012DE  0E00               	movlw	0
 15872  0012E0  6E35               	movwf	_processState,c
 15873                           
 15874                           ; BSR set to: 0
 15875                           ;DisplayProtocol.h: 411: setPWM2duty(-400);
 15876  0012E2  0EFE               	movlw	254
 15877  0012E4  0101               	movlb	1	; () banked
 15878  0012E6  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 15879  0012E8  0E70               	movlw	112
 15880  0012EA  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 15881  0012EC  EC7D  F02D         	call	_setPWM2duty	;wreg free
 15882  0012F0                     l11525:
 15883                           
 15884                           ;DisplayProtocol.h: 412: }
 15885                           ;DisplayProtocol.h: 413: actualScreen = 6;
 15886  0012F0  0E06               	movlw	6
 15887  0012F2  0101               	movlb	1	; () banked
 15888  0012F4  6FBA               	movwf	_actualScreen& (0+255),b
 15889                           
 15890                           ;DisplayProtocol.h: 414: }else if(calibLevel == 1) {
 15891  0012F6  0012               	return	
 15892  0012F8                     l11527:
 15893                           
 15894                           ; BSR set to: 1
 15895  0012F8  0101               	movlb	1	; () banked
 15896  0012FA  05BB               	decf	_calibLevel& (0+255),w,b
 15897  0012FC  A4D8               	btfss	status,2,c
 15898  0012FE  D058               	goto	l11553
 15899                           
 15900                           ; BSR set to: 1
 15901                           ;DisplayProtocol.h: 415: tempVelocidadMasa2 = (float)chanValf / tiXcorte;
 15902  001300  C1AE  F112         	movff	_chanValf,___ftdiv@f1
 15903  001304  C1AF  F113         	movff	_chanValf+1,___ftdiv@f1+1
 15904  001308  C1B0  F114         	movff	_chanValf+2,___ftdiv@f1+2
 15905  00130C  C0B2  F115         	movff	_tiXcorte,___ftdiv@f2
 15906  001310  C0B3  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 15907  001314  C0B4  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 15908  001318  EC52  F01B         	call	___ftdiv	;wreg free
 15909  00131C  C112  F19D         	movff	?___ftdiv,_tempVelocidadMasa2
 15910  001320  C113  F19E         	movff	?___ftdiv+1,_tempVelocidadMasa2+1
 15911  001324  C114  F19F         	movff	?___ftdiv+2,_tempVelocidadMasa2+2
 15912                           
 15913                           ;DisplayProtocol.h: 416: tiXcorte = (float)0.25 / tempVelocidadMasa2;
 15914  001328  0E00               	movlw	0
 15915  00132A  0101               	movlb	1	; () banked
 15916  00132C  6F12               	movwf	___ftdiv@f1& (0+255),b
 15917  00132E  0E80               	movlw	128
 15918  001330  0101               	movlb	1	; () banked
 15919  001332  6F13               	movwf	(___ftdiv@f1+1)& (0+255),b
 15920  001334  0E3E               	movlw	62
 15921  001336  0101               	movlb	1	; () banked
 15922  001338  6F14               	movwf	(___ftdiv@f1+2)& (0+255),b
 15923  00133A  C19D  F115         	movff	_tempVelocidadMasa2,___ftdiv@f2
 15924  00133E  C19E  F116         	movff	_tempVelocidadMasa2+1,___ftdiv@f2+1
 15925  001342  C19F  F117         	movff	_tempVelocidadMasa2+2,___ftdiv@f2+2
 15926  001346  EC52  F01B         	call	___ftdiv	;wreg free
 15927  00134A  C112  F0B2         	movff	?___ftdiv,_tiXcorte
 15928  00134E  C113  F0B3         	movff	?___ftdiv+1,_tiXcorte+1
 15929  001352  C114  F0B4         	movff	?___ftdiv+2,_tiXcorte+2
 15930                           
 15931                           ;DisplayProtocol.h: 417: calibLevel = 2;
 15932  001356  0E02               	movlw	2
 15933  001358  0101               	movlb	1	; () banked
 15934  00135A  6FBB               	movwf	_calibLevel& (0+255),b
 15935                           
 15936                           ; BSR set to: 1
 15937                           ;DisplayProtocol.h: 418: numCortes = 1;
 15938  00135C  0E00               	movlw	0
 15939  00135E  0100               	movlb	0	; () banked
 15940  001360  6FB9               	movwf	(_numCortes+1)& (0+255),b
 15941  001362  0E01               	movlw	1
 15942  001364  6FB8               	movwf	_numCortes& (0+255),b
 15943                           
 15944                           ; BSR set to: 0
 15945                           ;DisplayProtocol.h: 419: processState = 0;
 15946  001366  0E00               	movlw	0
 15947  001368  6E36               	movwf	_processState+1,c
 15948  00136A  0E00               	movlw	0
 15949  00136C  6E35               	movwf	_processState,c
 15950                           
 15951                           ; BSR set to: 0
 15952                           ;DisplayProtocol.h: 420: processTimer = 0;
 15953  00136E  0E00               	movlw	0
 15954  001370  6E2B               	movwf	_processTimer,c
 15955  001372  0E00               	movlw	0
 15956  001374  6E2C               	movwf	_processTimer+1,c
 15957  001376  0E00               	movlw	0
 15958  001378  6E2D               	movwf	_processTimer+2,c
 15959  00137A  0E00               	movlw	0
 15960  00137C  6E2E               	movwf	_processTimer+3,c
 15961                           
 15962                           ; BSR set to: 0
 15963                           ;DisplayProtocol.h: 421: bladeIsUP = 2;
 15964  00137E  0E02               	movlw	2
 15965  001380  6E50               	movwf	_bladeIsUP,c
 15966                           
 15967                           ; BSR set to: 0
 15968                           ;DisplayProtocol.h: 422: ProcessStarted = 1;
 15969  001382  0E01               	movlw	1
 15970  001384  6E3A               	movwf	_ProcessStarted,c
 15971                           
 15972                           ; BSR set to: 0
 15973                           ;DisplayProtocol.h: 423: if(ProcessStarted && bladeIsUP != 1) {
 15974  001386  503A               	movf	_ProcessStarted,w,c
 15975  001388  B4D8               	btfsc	status,2,c
 15976  00138A  D00E               	goto	l11551
 15977                           
 15978                           ; BSR set to: 0
 15979  00138C  0450               	decf	_bladeIsUP,w,c
 15980  00138E  B4D8               	btfsc	status,2,c
 15981  001390  D00B               	goto	l11551
 15982                           
 15983                           ; BSR set to: 0
 15984                           ;DisplayProtocol.h: 424: processState = 0;
 15985  001392  0E00               	movlw	0
 15986  001394  6E36               	movwf	_processState+1,c
 15987  001396  0E00               	movlw	0
 15988  001398  6E35               	movwf	_processState,c
 15989                           
 15990                           ; BSR set to: 0
 15991                           ;DisplayProtocol.h: 425: setPWM2duty(-400);
 15992  00139A  0EFE               	movlw	254
 15993  00139C  0101               	movlb	1	; () banked
 15994  00139E  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 15995  0013A0  0E70               	movlw	112
 15996  0013A2  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 15997  0013A4  EC7D  F02D         	call	_setPWM2duty	;wreg free
 15998  0013A8                     l11551:
 15999                           
 16000                           ;DisplayProtocol.h: 426: }
 16001                           ;DisplayProtocol.h: 427: actualScreen = 6;
 16002  0013A8  0E06               	movlw	6
 16003  0013AA  0101               	movlb	1	; () banked
 16004  0013AC  6FBA               	movwf	_actualScreen& (0+255),b
 16005                           
 16006                           ;DisplayProtocol.h: 428: }else if(calibLevel == 2) {
 16007  0013AE  0012               	return	
 16008  0013B0                     l11553:
 16009                           
 16010                           ; BSR set to: 1
 16011  0013B0  0E02               	movlw	2
 16012  0013B2  0101               	movlb	1	; () banked
 16013  0013B4  19BB               	xorwf	_calibLevel& (0+255),w,b
 16014  0013B6  A4D8               	btfss	status,2,c
 16015  0013B8  0012               	return	
 16016                           
 16017                           ; BSR set to: 1
 16018                           ;DisplayProtocol.h: 429: tempVelocidadMasa3 = (float)chanValf / tiXcorte;
 16019  0013BA  C1AE  F112         	movff	_chanValf,___ftdiv@f1
 16020  0013BE  C1AF  F113         	movff	_chanValf+1,___ftdiv@f1+1
 16021  0013C2  C1B0  F114         	movff	_chanValf+2,___ftdiv@f1+2
 16022  0013C6  C0B2  F115         	movff	_tiXcorte,___ftdiv@f2
 16023  0013CA  C0B3  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 16024  0013CE  C0B4  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 16025  0013D2  EC52  F01B         	call	___ftdiv	;wreg free
 16026  0013D6  C112  F18F         	movff	?___ftdiv,_tempVelocidadMasa3
 16027  0013DA  C113  F190         	movff	?___ftdiv+1,_tempVelocidadMasa3+1
 16028  0013DE  C114  F191         	movff	?___ftdiv+2,_tempVelocidadMasa3+2
 16029                           
 16030                           ;DisplayProtocol.h: 430: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 16031  0013E2  C19D  F130         	movff	_tempVelocidadMasa2,___ftadd@f2
 16032  0013E6  C19E  F131         	movff	_tempVelocidadMasa2+1,___ftadd@f2+1
 16033  0013EA  C19F  F132         	movff	_tempVelocidadMasa2+2,___ftadd@f2+2
 16034  0013EE  C19A  F12D         	movff	_tempVelocidadMasa1,___ftadd@f1
 16035  0013F2  C19B  F12E         	movff	_tempVelocidadMasa1+1,___ftadd@f1+1
 16036  0013F6  C19C  F12F         	movff	_tempVelocidadMasa1+2,___ftadd@f1+2
 16037  0013FA  EC7C  F012         	call	___ftadd	;wreg free
 16038  0013FE  C12D  F13C         	movff	?___ftadd,_longPressENTER$2991
 16039  001402  C12E  F13D         	movff	?___ftadd+1,_longPressENTER$2991+1
 16040  001406  C12F  F13E         	movff	?___ftadd+2,_longPressENTER$2991+2
 16041                           
 16042                           ;DisplayProtocol.h: 430: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 16043  00140A  C13C  F12D         	movff	_longPressENTER$2991,___ftadd@f1
 16044  00140E  C13D  F12E         	movff	_longPressENTER$2991+1,___ftadd@f1+1
 16045  001412  C13E  F12F         	movff	_longPressENTER$2991+2,___ftadd@f1+2
 16046  001416  C18F  F130         	movff	_tempVelocidadMasa3,___ftadd@f2
 16047  00141A  C190  F131         	movff	_tempVelocidadMasa3+1,___ftadd@f2+1
 16048  00141E  C191  F132         	movff	_tempVelocidadMasa3+2,___ftadd@f2+2
 16049  001422  EC7C  F012         	call	___ftadd	;wreg free
 16050  001426  C12D  F139         	movff	?___ftadd,longPressENTER@temp
 16051  00142A  C12E  F13A         	movff	?___ftadd+1,longPressENTER@temp+1
 16052  00142E  C12F  F13B         	movff	?___ftadd+2,longPressENTER@temp+2
 16053                           
 16054                           ;DisplayProtocol.h: 431: chanValf = (float)temp / 3.0f;
 16055  001432  C139  F112         	movff	longPressENTER@temp,___ftdiv@f1
 16056  001436  C13A  F113         	movff	longPressENTER@temp+1,___ftdiv@f1+1
 16057  00143A  C13B  F114         	movff	longPressENTER@temp+2,___ftdiv@f1+2
 16058  00143E  0E00               	movlw	0
 16059  001440  0101               	movlb	1	; () banked
 16060  001442  6F15               	movwf	___ftdiv@f2& (0+255),b
 16061  001444  0E40               	movlw	64
 16062  001446  0101               	movlb	1	; () banked
 16063  001448  6F16               	movwf	(___ftdiv@f2+1)& (0+255),b
 16064  00144A  0E40               	movlw	64
 16065  00144C  0101               	movlb	1	; () banked
 16066  00144E  6F17               	movwf	(___ftdiv@f2+2)& (0+255),b
 16067  001450  EC52  F01B         	call	___ftdiv	;wreg free
 16068  001454  C112  F1AE         	movff	?___ftdiv,_chanValf
 16069  001458  C113  F1AF         	movff	?___ftdiv+1,_chanValf+1
 16070  00145C  C114  F1B0         	movff	?___ftdiv+2,_chanValf+2
 16071                           
 16072                           ;DisplayProtocol.h: 432: numCortes = tempNumCortes;
 16073  001460  C192  F0B8         	movff	_tempNumCortes,_numCortes
 16074  001464  C193  F0B9         	movff	_tempNumCortes+1,_numCortes+1
 16075                           
 16076                           ;DisplayProtocol.h: 433: calcVars2ti();
 16077  001468  ECD8  F032         	call	_calcVars2ti	;wreg free
 16078                           
 16079                           ;DisplayProtocol.h: 434: confirmEdition(!ProcessStarted);
 16080  00146C  503A               	movf	_ProcessStarted,w,c
 16081  00146E  A4D8               	btfss	status,2,c
 16082  001470  D002               	goto	u16860
 16083  001472  0E01               	movlw	1
 16084  001474  D001               	goto	u16870
 16085  001476                     u16860:
 16086  001476  0E00               	movlw	0
 16087  001478                     u16870:
 16088  001478  ECD0  F023         	call	_confirmEdition
 16089  00147C  0012               	return	
 16090  00147E                     __end_of_longPressENTER:
 16091                           	opt stack 0
 16092                           tblptru	equ	0xFF8
 16093                           tblptrh	equ	0xFF7
 16094                           tblptrl	equ	0xFF6
 16095                           tablat	equ	0xFF5
 16096                           prodh	equ	0xFF4
 16097                           prodl	equ	0xFF3
 16098                           intcon	equ	0xFF2
 16099                           postinc0	equ	0xFEE
 16100                           wreg	equ	0xFE8
 16101                           postdec1	equ	0xFE5
 16102                           fsr1l	equ	0xFE1
 16103                           indf2	equ	0xFDF
 16104                           postinc2	equ	0xFDE
 16105                           postdec2	equ	0xFDD
 16106                           plusw2	equ	0xFDB
 16107                           fsr2h	equ	0xFDA
 16108                           fsr2l	equ	0xFD9
 16109                           status	equ	0xFD8
 16110                           
 16111 ;; *************** function _integrator *****************
 16112 ;; Defined at:
 16113 ;;		line 61 in file "source/DisplayProtocol.h"
 16114 ;; Parameters:    Size  Location     Type
 16115 ;;		None
 16116 ;; Auto vars:     Size  Location     Type
 16117 ;;  temp            4   39[BANK1 ] long 
 16118 ;;  acum            4   35[BANK1 ] long 
 16119 ;;  i               2   43[BANK1 ] int 
 16120 ;; Return value:  Size  Location     Type
 16121 ;;                  1    wreg      void 
 16122 ;; Registers used:
 16123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16124 ;; Tracked objects:
 16125 ;;		On entry : 0/0
 16126 ;;		On exit  : 0/0
 16127 ;;		Unchanged: 0/0
 16128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16129 ;;      Params:         0       0       0       0       0       0       0
 16130 ;;      Locals:         0       0      10       0       0       0       0
 16131 ;;      Temps:          0       0       2       0       0       0       0
 16132 ;;      Totals:         0       0      12       0       0       0       0
 16133 ;;Total ram usage:       12 bytes
 16134 ;; Hardware stack levels used:    1
 16135 ;; Hardware stack levels required when called:   14
 16136 ;; This function calls:
 16137 ;;		___altoft
 16138 ;;		___ftdiv
 16139 ;;		___lmul
 16140 ;; This function is called by:
 16141 ;;		_longPressENTER
 16142 ;; This function uses a non-reentrant model
 16143 ;;
 16144                           
 16145                           	psect	text62
 16146  003BC4                     __ptext62:
 16147                           	opt stack 0
 16148  003BC4                     _integrator:
 16149                           	opt stack 14
 16150                           
 16151                           ;DisplayProtocol.h: 62: long acum = 0;
 16152                           
 16153                           ;incstack = 0
 16154  003BC4  0E00               	movlw	0
 16155  003BC6  0101               	movlb	1	; () banked
 16156  003BC8  6F23               	movwf	integrator@acum& (0+255),b
 16157  003BCA  0E00               	movlw	0
 16158  003BCC  6F24               	movwf	(integrator@acum+1)& (0+255),b
 16159  003BCE  0E00               	movlw	0
 16160  003BD0  6F25               	movwf	(integrator@acum+2)& (0+255),b
 16161  003BD2  0E00               	movlw	0
 16162  003BD4  6F26               	movwf	(integrator@acum+3)& (0+255),b
 16163                           
 16164                           ;DisplayProtocol.h: 63: long temp = 0;
 16165  003BD6  0E00               	movlw	0
 16166  003BD8  0101               	movlb	1	; () banked
 16167  003BDA  6F27               	movwf	integrator@temp& (0+255),b
 16168  003BDC  0E00               	movlw	0
 16169  003BDE  6F28               	movwf	(integrator@temp+1)& (0+255),b
 16170  003BE0  0E00               	movlw	0
 16171  003BE2  6F29               	movwf	(integrator@temp+2)& (0+255),b
 16172  003BE4  0E00               	movlw	0
 16173  003BE6  6F2A               	movwf	(integrator@temp+3)& (0+255),b
 16174                           
 16175                           ;DisplayProtocol.h: 64: int i;
 16176                           ;DisplayProtocol.h: 65: for(i = 0; i < 6; i++) {
 16177  003BE8  0E00               	movlw	0
 16178  003BEA  0101               	movlb	1	; () banked
 16179  003BEC  6F2C               	movwf	(integrator@i+1)& (0+255),b
 16180  003BEE  0E00               	movlw	0
 16181  003BF0  6F2B               	movwf	integrator@i& (0+255),b
 16182  003BF2                     l10613:
 16183                           
 16184                           ; BSR set to: 1
 16185  003BF2  0101               	movlb	1	; () banked
 16186  003BF4  BF2C               	btfsc	(integrator@i+1)& (0+255),7,b
 16187  003BF6  D008               	goto	l10617
 16188  003BF8  0101               	movlb	1	; () banked
 16189  003BFA  512C               	movf	(integrator@i+1)& (0+255),w,b
 16190  003BFC  E152               	bnz	l10625
 16191  003BFE  0E06               	movlw	6
 16192  003C00  0101               	movlb	1	; () banked
 16193  003C02  5D2B               	subwf	integrator@i& (0+255),w,b
 16194  003C04  B0D8               	btfsc	status,0,c
 16195  003C06  D04D               	goto	l10625
 16196  003C08                     l10617:
 16197                           
 16198                           ; BSR set to: 1
 16199                           ;DisplayProtocol.h: 66: temp = (long)chanValdig[i]*exp10[i];
 16200  003C08  0EA0               	movlw	low _chanValdig
 16201  003C0A  0101               	movlb	1	; () banked
 16202  003C0C  252B               	addwf	integrator@i& (0+255),w,b
 16203  003C0E  6ED9               	movwf	fsr2l,c
 16204  003C10  0E01               	movlw	high _chanValdig
 16205  003C12  0101               	movlb	1	; () banked
 16206  003C14  212C               	addwfc	(integrator@i+1)& (0+255),w,b
 16207  003C16  6EDA               	movwf	fsr2h,c
 16208  003C18  50DF               	movf	indf2,w,c
 16209  003C1A  0101               	movlb	1	; () banked
 16210  003C1C  6F00               	movwf	___lmul@multiplier& (0+255),b
 16211  003C1E  0E00               	movlw	0
 16212  003C20  BF00               	btfsc	___lmul@multiplier& (0+255),7,b
 16213  003C22  0EFF               	movlw	-1
 16214  003C24  6F01               	movwf	(___lmul@multiplier+1)& (0+255),b
 16215  003C26  6F02               	movwf	(___lmul@multiplier+2)& (0+255),b
 16216  003C28  6F03               	movwf	(___lmul@multiplier+3)& (0+255),b
 16217  003C2A  0E77               	movlw	low _exp10
 16218  003C2C  0101               	movlb	1	; () banked
 16219  003C2E  6F21               	movwf	??_integrator& (0+255),b
 16220  003C30  0E01               	movlw	high _exp10
 16221  003C32  0101               	movlb	1	; () banked
 16222  003C34  6F22               	movwf	(??_integrator+1)& (0+255),b
 16223  003C36  90D8               	bcf	status,0,c
 16224  003C38  0101               	movlb	1	; () banked
 16225  003C3A  352B               	rlcf	integrator@i& (0+255),w,b
 16226  003C3C  6ED9               	movwf	fsr2l,c
 16227  003C3E  0101               	movlb	1	; () banked
 16228  003C40  352C               	rlcf	(integrator@i+1)& (0+255),w,b
 16229  003C42  6EDA               	movwf	fsr2h,c
 16230  003C44  90D8               	bcf	status,0,c
 16231  003C46  36D9               	rlcf	fsr2l,f,c
 16232  003C48  36DA               	rlcf	fsr2h,f,c
 16233  003C4A  0101               	movlb	1	; () banked
 16234  003C4C  5121               	movf	??_integrator& (0+255),w,b
 16235  003C4E  26D9               	addwf	fsr2l,f,c
 16236  003C50  0101               	movlb	1	; () banked
 16237  003C52  5122               	movf	(??_integrator+1)& (0+255),w,b
 16238  003C54  22DA               	addwfc	fsr2h,f,c
 16239  003C56  CFDE F104          	movff	postinc2,___lmul@multiplicand
 16240  003C5A  CFDE F105          	movff	postinc2,___lmul@multiplicand+1
 16241  003C5E  CFDE F106          	movff	postinc2,___lmul@multiplicand+2
 16242  003C62  CFDE F107          	movff	postinc2,___lmul@multiplicand+3
 16243  003C66  ECED  F030         	call	___lmul	;wreg free
 16244  003C6A  C100  F127         	movff	?___lmul,integrator@temp
 16245  003C6E  C101  F128         	movff	?___lmul+1,integrator@temp+1
 16246  003C72  C102  F129         	movff	?___lmul+2,integrator@temp+2
 16247  003C76  C103  F12A         	movff	?___lmul+3,integrator@temp+3
 16248                           
 16249                           ;DisplayProtocol.h: 67: acum += temp;
 16250  003C7A  0101               	movlb	1	; () banked
 16251  003C7C  5127               	movf	integrator@temp& (0+255),w,b
 16252  003C7E  0101               	movlb	1	; () banked
 16253  003C80  2723               	addwf	integrator@acum& (0+255),f,b
 16254  003C82  0101               	movlb	1	; () banked
 16255  003C84  5128               	movf	(integrator@temp+1)& (0+255),w,b
 16256  003C86  0101               	movlb	1	; () banked
 16257  003C88  2324               	addwfc	(integrator@acum+1)& (0+255),f,b
 16258  003C8A  0101               	movlb	1	; () banked
 16259  003C8C  5129               	movf	(integrator@temp+2)& (0+255),w,b
 16260  003C8E  0101               	movlb	1	; () banked
 16261  003C90  2325               	addwfc	(integrator@acum+2)& (0+255),f,b
 16262  003C92  0101               	movlb	1	; () banked
 16263  003C94  512A               	movf	(integrator@temp+3)& (0+255),w,b
 16264  003C96  0101               	movlb	1	; () banked
 16265  003C98  2326               	addwfc	(integrator@acum+3)& (0+255),f,b
 16266                           
 16267                           ; BSR set to: 1
 16268  003C9A  0101               	movlb	1	; () banked
 16269  003C9C  4B2B               	infsnz	integrator@i& (0+255),f,b
 16270  003C9E  2B2C               	incf	(integrator@i+1)& (0+255),f,b
 16271  003CA0  D7A8               	goto	l10613
 16272  003CA2                     l10625:
 16273                           
 16274                           ; BSR set to: 1
 16275                           ;DisplayProtocol.h: 68: }
 16276                           ;DisplayProtocol.h: 69: chanValf = (float)acum / 1000;
 16277  003CA2  C123  F108         	movff	integrator@acum,___altoft@c
 16278  003CA6  C124  F109         	movff	integrator@acum+1,___altoft@c+1
 16279  003CAA  C125  F10A         	movff	integrator@acum+2,___altoft@c+2
 16280  003CAE  C126  F10B         	movff	integrator@acum+3,___altoft@c+3
 16281  003CB2  ECF6  F02B         	call	___altoft	;wreg free
 16282  003CB6  C108  F112         	movff	?___altoft,___ftdiv@f1
 16283  003CBA  C109  F113         	movff	?___altoft+1,___ftdiv@f1+1
 16284  003CBE  C10A  F114         	movff	?___altoft+2,___ftdiv@f1+2
 16285  003CC2  0E00               	movlw	0
 16286  003CC4  0101               	movlb	1	; () banked
 16287  003CC6  6F15               	movwf	___ftdiv@f2& (0+255),b
 16288  003CC8  0E7A               	movlw	122
 16289  003CCA  0101               	movlb	1	; () banked
 16290  003CCC  6F16               	movwf	(___ftdiv@f2+1)& (0+255),b
 16291  003CCE  0E44               	movlw	68
 16292  003CD0  0101               	movlb	1	; () banked
 16293  003CD2  6F17               	movwf	(___ftdiv@f2+2)& (0+255),b
 16294  003CD4  EC52  F01B         	call	___ftdiv	;wreg free
 16295  003CD8  C112  F1AE         	movff	?___ftdiv,_chanValf
 16296  003CDC  C113  F1AF         	movff	?___ftdiv+1,_chanValf+1
 16297  003CE0  C114  F1B0         	movff	?___ftdiv+2,_chanValf+2
 16298  003CE4  0012               	return		;funcret
 16299  003CE6                     __end_of_integrator:
 16300                           	opt stack 0
 16301                           tblptru	equ	0xFF8
 16302                           tblptrh	equ	0xFF7
 16303                           tblptrl	equ	0xFF6
 16304                           tablat	equ	0xFF5
 16305                           prodh	equ	0xFF4
 16306                           prodl	equ	0xFF3
 16307                           intcon	equ	0xFF2
 16308                           postinc0	equ	0xFEE
 16309                           wreg	equ	0xFE8
 16310                           postdec1	equ	0xFE5
 16311                           fsr1l	equ	0xFE1
 16312                           indf2	equ	0xFDF
 16313                           postinc2	equ	0xFDE
 16314                           postdec2	equ	0xFDD
 16315                           plusw2	equ	0xFDB
 16316                           fsr2h	equ	0xFDA
 16317                           fsr2l	equ	0xFD9
 16318                           status	equ	0xFD8
 16319                           
 16320 ;; *************** function ___lmul *****************
 16321 ;; Defined at:
 16322 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
 16323 ;; Parameters:    Size  Location     Type
 16324 ;;  multiplier      4    0[BANK1 ] unsigned long 
 16325 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 16326 ;; Auto vars:     Size  Location     Type
 16327 ;;  product         4    8[BANK1 ] unsigned long 
 16328 ;; Return value:  Size  Location     Type
 16329 ;;                  4    0[BANK1 ] unsigned long 
 16330 ;; Registers used:
 16331 ;;		wreg, status,2, status,0
 16332 ;; Tracked objects:
 16333 ;;		On entry : 0/0
 16334 ;;		On exit  : 0/0
 16335 ;;		Unchanged: 0/0
 16336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16337 ;;      Params:         0       0       8       0       0       0       0
 16338 ;;      Locals:         0       0       4       0       0       0       0
 16339 ;;      Temps:          0       0       0       0       0       0       0
 16340 ;;      Totals:         0       0      12       0       0       0       0
 16341 ;;Total ram usage:       12 bytes
 16342 ;; Hardware stack levels used:    1
 16343 ;; Hardware stack levels required when called:   12
 16344 ;; This function calls:
 16345 ;;		Nothing
 16346 ;; This function is called by:
 16347 ;;		_desintegrator
 16348 ;;		_integrator
 16349 ;; This function uses a non-reentrant model
 16350 ;;
 16351                           
 16352                           	psect	text63
 16353  0061DA                     __ptext63:
 16354                           	opt stack 0
 16355  0061DA                     ___lmul:
 16356                           	opt stack 15
 16357                           
 16358                           ;incstack = 0
 16359  0061DA  0E00               	movlw	0
 16360  0061DC  0101               	movlb	1	; () banked
 16361  0061DE  6F08               	movwf	___lmul@product& (0+255),b
 16362  0061E0  0E00               	movlw	0
 16363  0061E2  6F09               	movwf	(___lmul@product+1)& (0+255),b
 16364  0061E4  0E00               	movlw	0
 16365  0061E6  6F0A               	movwf	(___lmul@product+2)& (0+255),b
 16366  0061E8  0E00               	movlw	0
 16367  0061EA  6F0B               	movwf	(___lmul@product+3)& (0+255),b
 16368  0061EC                     l10283:
 16369                           
 16370                           ; BSR set to: 1
 16371  0061EC  0101               	movlb	1	; () banked
 16372  0061EE  A100               	btfss	___lmul@multiplier& (0+255),0,b
 16373  0061F0  D010               	goto	l10287
 16374                           
 16375                           ; BSR set to: 1
 16376  0061F2  0101               	movlb	1	; () banked
 16377  0061F4  5104               	movf	___lmul@multiplicand& (0+255),w,b
 16378  0061F6  0101               	movlb	1	; () banked
 16379  0061F8  2708               	addwf	___lmul@product& (0+255),f,b
 16380  0061FA  0101               	movlb	1	; () banked
 16381  0061FC  5105               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 16382  0061FE  0101               	movlb	1	; () banked
 16383  006200  2309               	addwfc	(___lmul@product+1)& (0+255),f,b
 16384  006202  0101               	movlb	1	; () banked
 16385  006204  5106               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 16386  006206  0101               	movlb	1	; () banked
 16387  006208  230A               	addwfc	(___lmul@product+2)& (0+255),f,b
 16388  00620A  0101               	movlb	1	; () banked
 16389  00620C  5107               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 16390  00620E  0101               	movlb	1	; () banked
 16391  006210  230B               	addwfc	(___lmul@product+3)& (0+255),f,b
 16392  006212                     l10287:
 16393                           
 16394                           ; BSR set to: 1
 16395  006212  0101               	movlb	1	; () banked
 16396  006214  90D8               	bcf	status,0,c
 16397  006216  3704               	rlcf	___lmul@multiplicand& (0+255),f,b
 16398  006218  3705               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 16399  00621A  3706               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 16400  00621C  3707               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 16401                           
 16402                           ; BSR set to: 1
 16403  00621E  0101               	movlb	1	; () banked
 16404  006220  90D8               	bcf	status,0,c
 16405  006222  3303               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 16406  006224  3302               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 16407  006226  3301               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 16408  006228  3300               	rrcf	___lmul@multiplier& (0+255),f,b
 16409  00622A  0101               	movlb	1	; () banked
 16410  00622C  5100               	movf	___lmul@multiplier& (0+255),w,b
 16411  00622E  0101               	movlb	1	; () banked
 16412  006230  1101               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 16413  006232  0101               	movlb	1	; () banked
 16414  006234  1102               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 16415  006236  0101               	movlb	1	; () banked
 16416  006238  1103               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 16417  00623A  A4D8               	btfss	status,2,c
 16418  00623C  D7D7               	goto	l10283
 16419                           
 16420                           ; BSR set to: 1
 16421  00623E  C108  F100         	movff	___lmul@product,?___lmul
 16422  006242  C109  F101         	movff	___lmul@product+1,?___lmul+1
 16423  006246  C10A  F102         	movff	___lmul@product+2,?___lmul+2
 16424  00624A  C10B  F103         	movff	___lmul@product+3,?___lmul+3
 16425                           
 16426                           ; BSR set to: 1
 16427  00624E  0012               	return		;funcret
 16428  006250                     __end_of___lmul:
 16429                           	opt stack 0
 16430                           tblptru	equ	0xFF8
 16431                           tblptrh	equ	0xFF7
 16432                           tblptrl	equ	0xFF6
 16433                           tablat	equ	0xFF5
 16434                           prodh	equ	0xFF4
 16435                           prodl	equ	0xFF3
 16436                           intcon	equ	0xFF2
 16437                           postinc0	equ	0xFEE
 16438                           wreg	equ	0xFE8
 16439                           postdec1	equ	0xFE5
 16440                           fsr1l	equ	0xFE1
 16441                           indf2	equ	0xFDF
 16442                           postinc2	equ	0xFDE
 16443                           postdec2	equ	0xFDD
 16444                           plusw2	equ	0xFDB
 16445                           fsr2h	equ	0xFDA
 16446                           fsr2l	equ	0xFD9
 16447                           status	equ	0xFD8
 16448                           
 16449 ;; *************** function ___altoft *****************
 16450 ;; Defined at:
 16451 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
 16452 ;; Parameters:    Size  Location     Type
 16453 ;;  c               4    8[BANK1 ] long 
 16454 ;; Auto vars:     Size  Location     Type
 16455 ;;  sign            1   17[BANK1 ] unsigned char 
 16456 ;;  exp             1   16[BANK1 ] unsigned char 
 16457 ;; Return value:  Size  Location     Type
 16458 ;;                  3    8[BANK1 ] float 
 16459 ;; Registers used:
 16460 ;;		wreg, status,2, status,0, cstack
 16461 ;; Tracked objects:
 16462 ;;		On entry : 0/0
 16463 ;;		On exit  : 0/0
 16464 ;;		Unchanged: 0/0
 16465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16466 ;;      Params:         0       0       4       0       0       0       0
 16467 ;;      Locals:         0       0       2       0       0       0       0
 16468 ;;      Temps:          0       0       4       0       0       0       0
 16469 ;;      Totals:         0       0      10       0       0       0       0
 16470 ;;Total ram usage:       10 bytes
 16471 ;; Hardware stack levels used:    1
 16472 ;; Hardware stack levels required when called:   13
 16473 ;; This function calls:
 16474 ;;		___ftpack
 16475 ;; This function is called by:
 16476 ;;		_integrator
 16477 ;; This function uses a non-reentrant model
 16478 ;;
 16479                           
 16480                           	psect	text64
 16481  0057EC                     __ptext64:
 16482                           	opt stack 0
 16483  0057EC                     ___altoft:
 16484                           	opt stack 14
 16485                           
 16486                           ; BSR set to: 1
 16487                           ;incstack = 0
 16488  0057EC  0E00               	movlw	0
 16489  0057EE  0101               	movlb	1	; () banked
 16490  0057F0  6F11               	movwf	___altoft@sign& (0+255),b
 16491  0057F2  0E8E               	movlw	142
 16492  0057F4  0101               	movlb	1	; () banked
 16493  0057F6  6F10               	movwf	___altoft@exp& (0+255),b
 16494                           
 16495                           ; BSR set to: 1
 16496  0057F8  0101               	movlb	1	; () banked
 16497  0057FA  AF0B               	btfss	(___altoft@c+3)& (0+255),7,b
 16498  0057FC  D015               	goto	l10345
 16499                           
 16500                           ; BSR set to: 1
 16501  0057FE  0101               	movlb	1	; () banked
 16502  005800  1F0B               	comf	(___altoft@c+3)& (0+255),f,b
 16503  005802  1F0A               	comf	(___altoft@c+2)& (0+255),f,b
 16504  005804  1F09               	comf	(___altoft@c+1)& (0+255),f,b
 16505  005806  6D08               	negf	___altoft@c& (0+255),b
 16506  005808  0E00               	movlw	0
 16507  00580A  2309               	addwfc	(___altoft@c+1)& (0+255),f,b
 16508  00580C  230A               	addwfc	(___altoft@c+2)& (0+255),f,b
 16509  00580E  230B               	addwfc	(___altoft@c+3)& (0+255),f,b
 16510                           
 16511                           ; BSR set to: 1
 16512  005810  0E01               	movlw	1
 16513  005812  0101               	movlb	1	; () banked
 16514  005814  6F11               	movwf	___altoft@sign& (0+255),b
 16515                           
 16516                           ; BSR set to: 1
 16517  005816  D008               	goto	l10345
 16518  005818                     l10343:
 16519                           
 16520                           ; BSR set to: 1
 16521  005818  0101               	movlb	1	; () banked
 16522  00581A  90D8               	bcf	status,0,c
 16523  00581C  330B               	rrcf	(___altoft@c+3)& (0+255),f,b
 16524  00581E  330A               	rrcf	(___altoft@c+2)& (0+255),f,b
 16525  005820  3309               	rrcf	(___altoft@c+1)& (0+255),f,b
 16526  005822  3308               	rrcf	___altoft@c& (0+255),f,b
 16527  005824  0101               	movlb	1	; () banked
 16528  005826  2B10               	incf	___altoft@exp& (0+255),f,b
 16529  005828                     l10345:
 16530                           
 16531                           ; BSR set to: 1
 16532  005828  0E00               	movlw	0
 16533  00582A  0101               	movlb	1	; () banked
 16534  00582C  1508               	andwf	___altoft@c& (0+255),w,b
 16535  00582E  0101               	movlb	1	; () banked
 16536  005830  6F0C               	movwf	??___altoft& (0+255),b
 16537  005832  0E00               	movlw	0
 16538  005834  0101               	movlb	1	; () banked
 16539  005836  1509               	andwf	(___altoft@c+1)& (0+255),w,b
 16540  005838  0101               	movlb	1	; () banked
 16541  00583A  6F0D               	movwf	(??___altoft+1)& (0+255),b
 16542  00583C  0E00               	movlw	0
 16543  00583E  0101               	movlb	1	; () banked
 16544  005840  150A               	andwf	(___altoft@c+2)& (0+255),w,b
 16545  005842  0101               	movlb	1	; () banked
 16546  005844  6F0E               	movwf	(??___altoft+2)& (0+255),b
 16547  005846  0EFF               	movlw	255
 16548  005848  0101               	movlb	1	; () banked
 16549  00584A  150B               	andwf	(___altoft@c+3)& (0+255),w,b
 16550  00584C  0101               	movlb	1	; () banked
 16551  00584E  6F0F               	movwf	(??___altoft+3)& (0+255),b
 16552  005850  0101               	movlb	1	; () banked
 16553  005852  510C               	movf	??___altoft& (0+255),w,b
 16554  005854  0101               	movlb	1	; () banked
 16555  005856  110D               	iorwf	(??___altoft+1)& (0+255),w,b
 16556  005858  0101               	movlb	1	; () banked
 16557  00585A  110E               	iorwf	(??___altoft+2)& (0+255),w,b
 16558  00585C  0101               	movlb	1	; () banked
 16559  00585E  110F               	iorwf	(??___altoft+3)& (0+255),w,b
 16560  005860  A4D8               	btfss	status,2,c
 16561  005862  D7DA               	goto	l10343
 16562                           
 16563                           ; BSR set to: 1
 16564                           
 16565                           ; BSR set to: 1
 16566  005864  C108  F100         	movff	___altoft@c,___ftpack@arg
 16567  005868  C109  F101         	movff	___altoft@c+1,___ftpack@arg+1
 16568  00586C  C10A  F102         	movff	___altoft@c+2,___ftpack@arg+2
 16569  005870  C110  F103         	movff	___altoft@exp,___ftpack@exp
 16570  005874  C111  F104         	movff	___altoft@sign,___ftpack@sign
 16571  005878  ECBA  F021         	call	___ftpack	;wreg free
 16572  00587C  C100  F108         	movff	?___ftpack,?___altoft
 16573  005880  C101  F109         	movff	?___ftpack+1,?___altoft+1
 16574  005884  C102  F10A         	movff	?___ftpack+2,?___altoft+2
 16575  005888  0012               	return	
 16576  00588A                     __end_of___altoft:
 16577                           	opt stack 0
 16578                           tblptru	equ	0xFF8
 16579                           tblptrh	equ	0xFF7
 16580                           tblptrl	equ	0xFF6
 16581                           tablat	equ	0xFF5
 16582                           prodh	equ	0xFF4
 16583                           prodl	equ	0xFF3
 16584                           intcon	equ	0xFF2
 16585                           postinc0	equ	0xFEE
 16586                           wreg	equ	0xFE8
 16587                           postdec1	equ	0xFE5
 16588                           fsr1l	equ	0xFE1
 16589                           indf2	equ	0xFDF
 16590                           postinc2	equ	0xFDE
 16591                           postdec2	equ	0xFDD
 16592                           plusw2	equ	0xFDB
 16593                           fsr2h	equ	0xFDA
 16594                           fsr2l	equ	0xFD9
 16595                           status	equ	0xFD8
 16596                           
 16597 ;; *************** function _confirmEdition *****************
 16598 ;; Defined at:
 16599 ;;		line 72 in file "source/DisplayProtocol.h"
 16600 ;; Parameters:    Size  Location     Type
 16601 ;;  yes             1    wreg     unsigned char 
 16602 ;; Auto vars:     Size  Location     Type
 16603 ;;  yes             1   35[BANK1 ] unsigned char 
 16604 ;; Return value:  Size  Location     Type
 16605 ;;                  1    wreg      void 
 16606 ;; Registers used:
 16607 ;;		wreg, status,2, status,0, cstack
 16608 ;; Tracked objects:
 16609 ;;		On entry : 0/0
 16610 ;;		On exit  : 0/0
 16611 ;;		Unchanged: 0/0
 16612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16613 ;;      Params:         0       0       0       0       0       0       0
 16614 ;;      Locals:         0       0       1       0       0       0       0
 16615 ;;      Temps:          0       0       0       0       0       0       0
 16616 ;;      Totals:         0       0       1       0       0       0       0
 16617 ;;Total ram usage:        1 bytes
 16618 ;; Hardware stack levels used:    1
 16619 ;; Hardware stack levels required when called:   16
 16620 ;; This function calls:
 16621 ;;		_saveSysParams
 16622 ;; This function is called by:
 16623 ;;		_pressENTER
 16624 ;;		_longPressENTER
 16625 ;; This function uses a non-reentrant model
 16626 ;;
 16627                           
 16628                           	psect	text65
 16629  0047A0                     __ptext65:
 16630                           	opt stack 0
 16631  0047A0                     _confirmEdition:
 16632                           	opt stack 12
 16633                           
 16634                           ;incstack = 0
 16635                           ;confirmEdition@yes stored from wreg
 16636  0047A0  0101               	movlb	1	; () banked
 16637  0047A2  6F23               	movwf	confirmEdition@yes& (0+255),b
 16638                           
 16639                           ;DisplayProtocol.h: 73: switch (menuSection) {
 16640  0047A4  D066               	goto	l10671
 16641  0047A6                     l10629:
 16642                           
 16643                           ;DisplayProtocol.h: 77: if(yes) {
 16644  0047A6  0101               	movlb	1	; () banked
 16645  0047A8  5123               	movf	confirmEdition@yes& (0+255),w,b
 16646  0047AA  0101               	movlb	1	; () banked
 16647  0047AC  B4D8               	btfsc	status,2,c
 16648  0047AE  D00C               	goto	l549
 16649                           
 16650                           ; BSR set to: 1
 16651                           ;DisplayProtocol.h: 78: kgXcorte = chanValf;
 16652  0047B0  C1AE  F0AC         	movff	_chanValf,_kgXcorte
 16653  0047B4  C1AF  F0AD         	movff	_chanValf+1,_kgXcorte+1
 16654  0047B8  C1B0  F0AE         	movff	_chanValf+2,_kgXcorte+2
 16655                           
 16656                           ; BSR set to: 1
 16657                           ;DisplayProtocol.h: 79: actualScreen = 4;
 16658  0047BC  0E04               	movlw	4
 16659  0047BE  0101               	movlb	1	; () banked
 16660  0047C0  6FBA               	movwf	_actualScreen& (0+255),b
 16661                           
 16662                           ; BSR set to: 1
 16663                           ;DisplayProtocol.h: 80: saveSysParams();
 16664  0047C2  EC91  F029         	call	_saveSysParams	;wreg free
 16665                           
 16666                           ;DisplayProtocol.h: 81: }else {
 16667  0047C6  0012               	return	
 16668  0047C8                     l549:
 16669                           
 16670                           ; BSR set to: 1
 16671                           ;DisplayProtocol.h: 82: tempLastScreen = actualScreen;
 16672  0047C8  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 16673                           
 16674                           ; BSR set to: 1
 16675                           ;DisplayProtocol.h: 83: selSN = 1;
 16676  0047CC  0E01               	movlw	1
 16677  0047CE  0101               	movlb	1	; () banked
 16678  0047D0  6FC3               	movwf	_selSN& (0+255),b
 16679                           
 16680                           ;DisplayProtocol.h: 84: actualScreen = 10;
 16681  0047D2  0E0A               	movlw	10
 16682  0047D4  0101               	movlb	1	; () banked
 16683  0047D6  6FBA               	movwf	_actualScreen& (0+255),b
 16684                           
 16685                           ; BSR set to: 1
 16686                           ;DisplayProtocol.h: 85: }
 16687                           ;DisplayProtocol.h: 86: break;
 16688  0047D8  0012               	return	
 16689  0047DA                     l10639:
 16690                           
 16691                           ; BSR set to: 1
 16692                           ;DisplayProtocol.h: 88: if(yes) {
 16693  0047DA  0101               	movlb	1	; () banked
 16694  0047DC  5123               	movf	confirmEdition@yes& (0+255),w,b
 16695  0047DE  0101               	movlb	1	; () banked
 16696  0047E0  B4D8               	btfsc	status,2,c
 16697  0047E2  D00A               	goto	l552
 16698                           
 16699                           ; BSR set to: 1
 16700                           ;DisplayProtocol.h: 89: numCortes = chanVals;
 16701  0047E4  C1B1  F0B8         	movff	_chanVals,_numCortes
 16702  0047E8  C1B2  F0B9         	movff	_chanVals+1,_numCortes+1
 16703                           
 16704                           ; BSR set to: 1
 16705                           ;DisplayProtocol.h: 90: actualScreen = 4;
 16706  0047EC  0E04               	movlw	4
 16707  0047EE  0101               	movlb	1	; () banked
 16708  0047F0  6FBA               	movwf	_actualScreen& (0+255),b
 16709                           
 16710                           ; BSR set to: 1
 16711                           ;DisplayProtocol.h: 91: saveSysParams();
 16712  0047F2  EC91  F029         	call	_saveSysParams	;wreg free
 16713                           
 16714                           ;DisplayProtocol.h: 92: }else {
 16715  0047F6  0012               	return	
 16716  0047F8                     l552:
 16717                           
 16718                           ; BSR set to: 1
 16719                           ;DisplayProtocol.h: 93: tempLastScreen = actualScreen;
 16720  0047F8  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 16721                           
 16722                           ; BSR set to: 1
 16723                           ;DisplayProtocol.h: 94: selSN = 1;
 16724  0047FC  0E01               	movlw	1
 16725  0047FE  0101               	movlb	1	; () banked
 16726  004800  6FC3               	movwf	_selSN& (0+255),b
 16727                           
 16728                           ;DisplayProtocol.h: 95: actualScreen = 10;
 16729  004802  0E0A               	movlw	10
 16730  004804  0101               	movlb	1	; () banked
 16731  004806  6FBA               	movwf	_actualScreen& (0+255),b
 16732                           
 16733                           ; BSR set to: 1
 16734                           ;DisplayProtocol.h: 96: }
 16735                           ;DisplayProtocol.h: 97: break;
 16736  004808  0012               	return	
 16737  00480A                     l10649:
 16738                           
 16739                           ; BSR set to: 1
 16740                           ;DisplayProtocol.h: 99: if(yes) {
 16741  00480A  0101               	movlb	1	; () banked
 16742  00480C  5123               	movf	confirmEdition@yes& (0+255),w,b
 16743  00480E  0101               	movlb	1	; () banked
 16744  004810  B4D8               	btfsc	status,2,c
 16745  004812  D00C               	goto	l555
 16746                           
 16747                           ; BSR set to: 1
 16748                           ;DisplayProtocol.h: 100: diamTubo = chanValf;
 16749  004814  C1AE  F0A9         	movff	_chanValf,_diamTubo
 16750  004818  C1AF  F0AA         	movff	_chanValf+1,_diamTubo+1
 16751  00481C  C1B0  F0AB         	movff	_chanValf+2,_diamTubo+2
 16752                           
 16753                           ; BSR set to: 1
 16754                           ;DisplayProtocol.h: 101: actualScreen = 4;
 16755  004820  0E04               	movlw	4
 16756  004822  0101               	movlb	1	; () banked
 16757  004824  6FBA               	movwf	_actualScreen& (0+255),b
 16758                           
 16759                           ; BSR set to: 1
 16760                           ;DisplayProtocol.h: 102: saveSysParams();
 16761  004826  EC91  F029         	call	_saveSysParams	;wreg free
 16762                           
 16763                           ;DisplayProtocol.h: 103: }else {
 16764  00482A  0012               	return	
 16765  00482C                     l555:
 16766                           
 16767                           ; BSR set to: 1
 16768                           ;DisplayProtocol.h: 104: tempLastScreen = actualScreen;
 16769  00482C  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 16770                           
 16771                           ; BSR set to: 1
 16772                           ;DisplayProtocol.h: 105: selSN = 1;
 16773  004830  0E01               	movlw	1
 16774  004832  0101               	movlb	1	; () banked
 16775  004834  6FC3               	movwf	_selSN& (0+255),b
 16776                           
 16777                           ;DisplayProtocol.h: 106: actualScreen = 10;
 16778  004836  0E0A               	movlw	10
 16779  004838  0101               	movlb	1	; () banked
 16780  00483A  6FBA               	movwf	_actualScreen& (0+255),b
 16781                           
 16782                           ; BSR set to: 1
 16783                           ;DisplayProtocol.h: 107: }
 16784                           ;DisplayProtocol.h: 108: break;
 16785  00483C  0012               	return	
 16786  00483E                     l10659:
 16787                           
 16788                           ; BSR set to: 1
 16789                           ;DisplayProtocol.h: 110: if(yes) {
 16790  00483E  0101               	movlb	1	; () banked
 16791  004840  5123               	movf	confirmEdition@yes& (0+255),w,b
 16792  004842  0101               	movlb	1	; () banked
 16793  004844  B4D8               	btfsc	status,2,c
 16794  004846  D00C               	goto	l558
 16795                           
 16796                           ; BSR set to: 1
 16797                           ;DisplayProtocol.h: 111: velocidadMasa = chanValf;
 16798  004848  C1AE  F0B5         	movff	_chanValf,_velocidadMasa
 16799  00484C  C1AF  F0B6         	movff	_chanValf+1,_velocidadMasa+1
 16800  004850  C1B0  F0B7         	movff	_chanValf+2,_velocidadMasa+2
 16801                           
 16802                           ; BSR set to: 1
 16803                           ;DisplayProtocol.h: 112: actualScreen = 4;
 16804  004854  0E04               	movlw	4
 16805  004856  0101               	movlb	1	; () banked
 16806  004858  6FBA               	movwf	_actualScreen& (0+255),b
 16807                           
 16808                           ; BSR set to: 1
 16809                           ;DisplayProtocol.h: 113: saveSysParams();
 16810  00485A  EC91  F029         	call	_saveSysParams	;wreg free
 16811                           
 16812                           ;DisplayProtocol.h: 114: }else {
 16813  00485E  0012               	return	
 16814  004860                     l558:
 16815                           
 16816                           ; BSR set to: 1
 16817                           ;DisplayProtocol.h: 115: tempLastScreen = actualScreen;
 16818  004860  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 16819                           
 16820                           ; BSR set to: 1
 16821                           ;DisplayProtocol.h: 116: selSN = 1;
 16822  004864  0E01               	movlw	1
 16823  004866  0101               	movlb	1	; () banked
 16824  004868  6FC3               	movwf	_selSN& (0+255),b
 16825                           
 16826                           ;DisplayProtocol.h: 117: actualScreen = 10;
 16827  00486A  0E0A               	movlw	10
 16828  00486C  0101               	movlb	1	; () banked
 16829  00486E  6FBA               	movwf	_actualScreen& (0+255),b
 16830                           
 16831                           ; BSR set to: 1
 16832                           ;DisplayProtocol.h: 120: }
 16833                           ;DisplayProtocol.h: 121: }
 16834                           
 16835                           ; BSR set to: 1
 16836                           ;DisplayProtocol.h: 118: }
 16837                           ;DisplayProtocol.h: 119: break;
 16838  004870  0012               	return	
 16839  004872                     l10671:
 16840  004872  0101               	movlb	1	; () banked
 16841  004874  51C1               	movf	_menuSection& (0+255),w,b
 16842                           
 16843                           ; Switch size 1, requested type "space"
 16844                           ; Number of cases is 5, Range of values is 0 to 4
 16845                           ; switch strategies available:
 16846                           ; Name         Instructions Cycles
 16847                           ; simple_byte           16     9 (average)
 16848                           ;	Chosen strategy is simple_byte
 16849  004876  0A00               	xorlw	0	; case 0
 16850  004878  B4D8               	btfsc	status,2,c
 16851  00487A  0012               	return	
 16852  00487C  0A01               	xorlw	1	; case 1
 16853  00487E  B4D8               	btfsc	status,2,c
 16854  004880  D792               	goto	l10629
 16855  004882  0A03               	xorlw	3	; case 2
 16856  004884  B4D8               	btfsc	status,2,c
 16857  004886  D7A9               	goto	l10639
 16858  004888  0A01               	xorlw	1	; case 3
 16859  00488A  B4D8               	btfsc	status,2,c
 16860  00488C  D7BE               	goto	l10649
 16861  00488E  0A07               	xorlw	7	; case 4
 16862  004890  A4D8               	btfss	status,2,c
 16863  004892  0012               	return	
 16864  004894  D7D4               	goto	l10659
 16865  004896                     __end_of_confirmEdition:
 16866                           	opt stack 0
 16867                           tblptru	equ	0xFF8
 16868                           tblptrh	equ	0xFF7
 16869                           tblptrl	equ	0xFF6
 16870                           tablat	equ	0xFF5
 16871                           prodh	equ	0xFF4
 16872                           prodl	equ	0xFF3
 16873                           intcon	equ	0xFF2
 16874                           postinc0	equ	0xFEE
 16875                           wreg	equ	0xFE8
 16876                           postdec1	equ	0xFE5
 16877                           fsr1l	equ	0xFE1
 16878                           indf2	equ	0xFDF
 16879                           postinc2	equ	0xFDE
 16880                           postdec2	equ	0xFDD
 16881                           plusw2	equ	0xFDB
 16882                           fsr2h	equ	0xFDA
 16883                           fsr2l	equ	0xFD9
 16884                           status	equ	0xFD8
 16885                           
 16886 ;; *************** function _saveSysParams *****************
 16887 ;; Defined at:
 16888 ;;		line 110 in file "source/sysParams.h"
 16889 ;; Parameters:    Size  Location     Type
 16890 ;;		None
 16891 ;; Auto vars:     Size  Location     Type
 16892 ;;		None
 16893 ;; Return value:  Size  Location     Type
 16894 ;;                  1    wreg      void 
 16895 ;; Registers used:
 16896 ;;		wreg, status,2, status,0, cstack
 16897 ;; Tracked objects:
 16898 ;;		On entry : 0/0
 16899 ;;		On exit  : 0/0
 16900 ;;		Unchanged: 0/0
 16901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16902 ;;      Params:         0       0       0       0       0       0       0
 16903 ;;      Locals:         0       0       0       0       0       0       0
 16904 ;;      Temps:          0       0       0       0       0       0       0
 16905 ;;      Totals:         0       0       0       0       0       0       0
 16906 ;;Total ram usage:        0 bytes
 16907 ;; Hardware stack levels used:    1
 16908 ;; Hardware stack levels required when called:   15
 16909 ;; This function calls:
 16910 ;;		_calcVars2ti
 16911 ;;		_writeEEPROM
 16912 ;; This function is called by:
 16913 ;;		_confirmEdition
 16914 ;; This function uses a non-reentrant model
 16915 ;;
 16916                           
 16917                           	psect	text66
 16918  005322                     __ptext66:
 16919                           	opt stack 0
 16920  005322                     _saveSysParams:
 16921                           	opt stack 12
 16922                           
 16923                           ;sysParams.h: 111: calcVars2ti();
 16924                           
 16925                           ;incstack = 0
 16926  005322  ECD8  F032         	call	_calcVars2ti	;wreg free
 16927                           
 16928                           ;sysParams.h: 112: EECON1bits.WREN = 1;
 16929  005326  84A6               	bsf	4006,2,c	;volatile
 16930                           
 16931                           ;sysParams.h: 113: ie = INTCONbits.GIE;
 16932  005328  0E00               	movlw	0
 16933  00532A  BEF2               	btfsc	intcon,7,c	;volatile
 16934  00532C  0E01               	movlw	1
 16935  00532E  0100               	movlb	0	; () banked
 16936  005330  6FC9               	movwf	_ie& (0+255),b
 16937                           
 16938                           ; BSR set to: 0
 16939                           ;sysParams.h: 114: INTCONbits.GIE = 0;
 16940  005332  9EF2               	bcf	intcon,7,c	;volatile
 16941                           
 16942                           ; BSR set to: 0
 16943                           ;sysParams.h: 116: fData.floatdat = tiXcorte;
 16944  005334  C0B2  F0C4         	movff	_tiXcorte,_fData
 16945  005338  C0B3  F0C5         	movff	_tiXcorte+1,_fData+1
 16946  00533C  C0B4  F0C6         	movff	_tiXcorte+2,_fData+2
 16947                           
 16948                           ; BSR set to: 0
 16949                           ;sysParams.h: 118: writeEEPROM(3, fData.floatUB);
 16950  005340  C0C6  F100         	movff	_fData+2,writeEEPROM@data
 16951  005344  0E03               	movlw	3
 16952  005346  ECB6  F035         	call	_writeEEPROM
 16953                           
 16954                           ;sysParams.h: 119: writeEEPROM(4, fData.floatHB);
 16955  00534A  C0C5  F100         	movff	_fData+1,writeEEPROM@data
 16956  00534E  0E04               	movlw	4
 16957  005350  ECB6  F035         	call	_writeEEPROM
 16958                           
 16959                           ;sysParams.h: 120: writeEEPROM(5, fData.floatLB);
 16960  005354  C0C4  F100         	movff	_fData,writeEEPROM@data
 16961  005358  0E05               	movlw	5
 16962  00535A  ECB6  F035         	call	_writeEEPROM
 16963                           
 16964                           ;sysParams.h: 121: i16Data.int16dat = numCortes;
 16965  00535E  C0B8  F0C7         	movff	_numCortes,_i16Data
 16966  005362  C0B9  F0C8         	movff	_numCortes+1,_i16Data+1
 16967                           
 16968                           ;sysParams.h: 122: writeEEPROM(6, i16Data.int16HB);
 16969  005366  C0C8  F100         	movff	_i16Data+1,writeEEPROM@data
 16970  00536A  0E06               	movlw	6
 16971  00536C  ECB6  F035         	call	_writeEEPROM
 16972                           
 16973                           ;sysParams.h: 123: writeEEPROM(7, i16Data.int16LB);
 16974  005370  C0C7  F100         	movff	_i16Data,writeEEPROM@data
 16975  005374  0E07               	movlw	7
 16976  005376  ECB6  F035         	call	_writeEEPROM
 16977                           
 16978                           ;sysParams.h: 124: fData.floatdat = diamTubo;
 16979  00537A  C0A9  F0C4         	movff	_diamTubo,_fData
 16980  00537E  C0AA  F0C5         	movff	_diamTubo+1,_fData+1
 16981  005382  C0AB  F0C6         	movff	_diamTubo+2,_fData+2
 16982                           
 16983                           ;sysParams.h: 126: writeEEPROM(9, fData.floatUB);
 16984  005386  C0C6  F100         	movff	_fData+2,writeEEPROM@data
 16985  00538A  0E09               	movlw	9
 16986  00538C  ECB6  F035         	call	_writeEEPROM
 16987                           
 16988                           ;sysParams.h: 127: writeEEPROM(10, fData.floatHB);
 16989  005390  C0C5  F100         	movff	_fData+1,writeEEPROM@data
 16990  005394  0E0A               	movlw	10
 16991  005396  ECB6  F035         	call	_writeEEPROM
 16992                           
 16993                           ;sysParams.h: 128: writeEEPROM(11, fData.floatLB);
 16994  00539A  C0C4  F100         	movff	_fData,writeEEPROM@data
 16995  00539E  0E0B               	movlw	11
 16996  0053A0  ECB6  F035         	call	_writeEEPROM
 16997                           
 16998                           ;sysParams.h: 134: fData.floatdat = velocidadMasa;
 16999  0053A4  C0B5  F0C4         	movff	_velocidadMasa,_fData
 17000  0053A8  C0B6  F0C5         	movff	_velocidadMasa+1,_fData+1
 17001  0053AC  C0B7  F0C6         	movff	_velocidadMasa+2,_fData+2
 17002                           
 17003                           ;sysParams.h: 136: writeEEPROM(17, fData.floatUB);
 17004  0053B0  C0C6  F100         	movff	_fData+2,writeEEPROM@data
 17005  0053B4  0E11               	movlw	17
 17006  0053B6  ECB6  F035         	call	_writeEEPROM
 17007                           
 17008                           ;sysParams.h: 137: writeEEPROM(18, fData.floatHB);
 17009  0053BA  C0C5  F100         	movff	_fData+1,writeEEPROM@data
 17010  0053BE  0E12               	movlw	18
 17011  0053C0  ECB6  F035         	call	_writeEEPROM
 17012                           
 17013                           ;sysParams.h: 138: writeEEPROM(19, fData.floatLB);
 17014  0053C4  C0C4  F100         	movff	_fData,writeEEPROM@data
 17015  0053C8  0E13               	movlw	19
 17016  0053CA  ECB6  F035         	call	_writeEEPROM
 17017                           
 17018                           ;sysParams.h: 139: EECON1bits.WREN = 0;
 17019  0053CE  94A6               	bcf	4006,2,c	;volatile
 17020                           
 17021                           ;sysParams.h: 140: INTCONbits.GIE = ie;
 17022  0053D0  0100               	movlb	0	; () banked
 17023  0053D2  B1C9               	btfsc	_ie& (0+255),0,b
 17024  0053D4  D002               	bra	u14085
 17025  0053D6  9EF2               	bcf	intcon,7,c	;volatile
 17026  0053D8  D001               	bra	u14086
 17027  0053DA                     u14085:
 17028  0053DA  8EF2               	bsf	intcon,7,c	;volatile
 17029  0053DC                     u14086:
 17030  0053DC  0012               	return		;funcret
 17031  0053DE                     __end_of_saveSysParams:
 17032                           	opt stack 0
 17033                           tblptru	equ	0xFF8
 17034                           tblptrh	equ	0xFF7
 17035                           tblptrl	equ	0xFF6
 17036                           tablat	equ	0xFF5
 17037                           prodh	equ	0xFF4
 17038                           prodl	equ	0xFF3
 17039                           intcon	equ	0xFF2
 17040                           postinc0	equ	0xFEE
 17041                           wreg	equ	0xFE8
 17042                           postdec1	equ	0xFE5
 17043                           fsr1l	equ	0xFE1
 17044                           indf2	equ	0xFDF
 17045                           postinc2	equ	0xFDE
 17046                           postdec2	equ	0xFDD
 17047                           plusw2	equ	0xFDB
 17048                           fsr2h	equ	0xFDA
 17049                           fsr2l	equ	0xFD9
 17050                           status	equ	0xFD8
 17051                           
 17052 ;; *************** function _writeEEPROM *****************
 17053 ;; Defined at:
 17054 ;;		line 50 in file "source/sysParams.h"
 17055 ;; Parameters:    Size  Location     Type
 17056 ;;  adr             1    wreg     unsigned char 
 17057 ;;  data            1    0[BANK1 ] unsigned char 
 17058 ;; Auto vars:     Size  Location     Type
 17059 ;;  adr             1    1[BANK1 ] unsigned char 
 17060 ;; Return value:  Size  Location     Type
 17061 ;;                  1    wreg      void 
 17062 ;; Registers used:
 17063 ;;		wreg, status,2
 17064 ;; Tracked objects:
 17065 ;;		On entry : 0/0
 17066 ;;		On exit  : 0/0
 17067 ;;		Unchanged: 0/0
 17068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17069 ;;      Params:         0       0       1       0       0       0       0
 17070 ;;      Locals:         0       0       1       0       0       0       0
 17071 ;;      Temps:          0       0       0       0       0       0       0
 17072 ;;      Totals:         0       0       2       0       0       0       0
 17073 ;;Total ram usage:        2 bytes
 17074 ;; Hardware stack levels used:    1
 17075 ;; Hardware stack levels required when called:   12
 17076 ;; This function calls:
 17077 ;;		Nothing
 17078 ;; This function is called by:
 17079 ;;		_saveSysParams
 17080 ;; This function uses a non-reentrant model
 17081 ;;
 17082                           
 17083                           	psect	text67
 17084  006B6C                     __ptext67:
 17085                           	opt stack 0
 17086  006B6C                     _writeEEPROM:
 17087                           	opt stack 14
 17088                           
 17089                           ;incstack = 0
 17090                           ;writeEEPROM@adr stored from wreg
 17091  006B6C  0101               	movlb	1	; () banked
 17092  006B6E  6F01               	movwf	writeEEPROM@adr& (0+255),b
 17093                           
 17094                           ;sysParams.h: 51: EEADR = adr;
 17095  006B70  C101  FFA9         	movff	writeEEPROM@adr,4009	;volatile
 17096                           
 17097                           ;sysParams.h: 52: EEDATA = data;
 17098  006B74  C100  FFA8         	movff	writeEEPROM@data,4008	;volatile
 17099                           
 17100                           ;sysParams.h: 53: EECON1bits.EEPGD = 0;
 17101  006B78  9EA6               	bcf	4006,7,c	;volatile
 17102                           
 17103                           ;sysParams.h: 54: EECON1bits.CFGS = 0;
 17104  006B7A  9CA6               	bcf	4006,6,c	;volatile
 17105                           
 17106                           ;sysParams.h: 55: EECON2 = 0x55;
 17107  006B7C  0E55               	movlw	85
 17108  006B7E  6EA7               	movwf	4007,c	;volatile
 17109                           
 17110                           ;sysParams.h: 56: EECON2 = 0xAA;
 17111  006B80  0EAA               	movlw	170
 17112  006B82  6EA7               	movwf	4007,c	;volatile
 17113                           
 17114                           ;sysParams.h: 57: EECON1bits.WR = 1;
 17115  006B84  82A6               	bsf	4006,1,c	;volatile
 17116  006B86                     l277:
 17117  006B86  A2A6               	btfss	4006,1,c	;volatile
 17118  006B88  0012               	return	
 17119  006B8A  D7FD               	goto	l277
 17120  006B8C                     __end_of_writeEEPROM:
 17121                           	opt stack 0
 17122                           tblptru	equ	0xFF8
 17123                           tblptrh	equ	0xFF7
 17124                           tblptrl	equ	0xFF6
 17125                           tablat	equ	0xFF5
 17126                           prodh	equ	0xFF4
 17127                           prodl	equ	0xFF3
 17128                           intcon	equ	0xFF2
 17129                           postinc0	equ	0xFEE
 17130                           wreg	equ	0xFE8
 17131                           postdec1	equ	0xFE5
 17132                           fsr1l	equ	0xFE1
 17133                           indf2	equ	0xFDF
 17134                           postinc2	equ	0xFDE
 17135                           postdec2	equ	0xFDD
 17136                           plusw2	equ	0xFDB
 17137                           fsr2h	equ	0xFDA
 17138                           fsr2l	equ	0xFD9
 17139                           status	equ	0xFD8
 17140                           
 17141 ;; *************** function _calcVars2ti *****************
 17142 ;; Defined at:
 17143 ;;		line 86 in file "source/sysParams.h"
 17144 ;; Parameters:    Size  Location     Type
 17145 ;;		None
 17146 ;; Auto vars:     Size  Location     Type
 17147 ;;		None
 17148 ;; Return value:  Size  Location     Type
 17149 ;;                  1    wreg      void 
 17150 ;; Registers used:
 17151 ;;		wreg, status,2, status,0, cstack
 17152 ;; Tracked objects:
 17153 ;;		On entry : 0/0
 17154 ;;		On exit  : 0/0
 17155 ;;		Unchanged: 0/0
 17156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17157 ;;      Params:         0       0       0       0       0       0       0
 17158 ;;      Locals:         0       0       0       0       0       0       0
 17159 ;;      Temps:          0       0       0       0       0       0       0
 17160 ;;      Totals:         0       0       0       0       0       0       0
 17161 ;;Total ram usage:        0 bytes
 17162 ;; Hardware stack levels used:    1
 17163 ;; Hardware stack levels required when called:   14
 17164 ;; This function calls:
 17165 ;;		___ftdiv
 17166 ;;		___ftmul
 17167 ;; This function is called by:
 17168 ;;		_saveSysParams
 17169 ;;		_longPressENTER
 17170 ;; This function uses a non-reentrant model
 17171 ;;
 17172                           
 17173                           	psect	text68
 17174  0065B0                     __ptext68:
 17175                           	opt stack 0
 17176  0065B0                     _calcVars2ti:
 17177                           	opt stack 12
 17178                           
 17179                           ;sysParams.h: 94: tiXcorte = (float)kgXcorte / velocidadMasa;
 17180                           
 17181                           ;incstack = 0
 17182  0065B0  C0AC  F112         	movff	_kgXcorte,___ftdiv@f1
 17183  0065B4  C0AD  F113         	movff	_kgXcorte+1,___ftdiv@f1+1
 17184  0065B8  C0AE  F114         	movff	_kgXcorte+2,___ftdiv@f1+2
 17185  0065BC  C0B5  F115         	movff	_velocidadMasa,___ftdiv@f2
 17186  0065C0  C0B6  F116         	movff	_velocidadMasa+1,___ftdiv@f2+1
 17187  0065C4  C0B7  F117         	movff	_velocidadMasa+2,___ftdiv@f2+2
 17188  0065C8  EC52  F01B         	call	___ftdiv	;wreg free
 17189  0065CC  C112  F0B2         	movff	?___ftdiv,_tiXcorte
 17190  0065D0  C113  F0B3         	movff	?___ftdiv+1,_tiXcorte+1
 17191  0065D4  C114  F0B4         	movff	?___ftdiv+2,_tiXcorte+2
 17192                           
 17193                           ;sysParams.h: 95: timsXcorte = (float)tiXcorte * 1000;
 17194  0065D8  C0B2  F114         	movff	_tiXcorte,___ftmul@f1
 17195  0065DC  C0B3  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 17196  0065E0  C0B4  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 17197  0065E4  0E00               	movlw	0
 17198  0065E6  0101               	movlb	1	; () banked
 17199  0065E8  6F17               	movwf	___ftmul@f2& (0+255),b
 17200  0065EA  0E7A               	movlw	122
 17201  0065EC  0101               	movlb	1	; () banked
 17202  0065EE  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 17203  0065F0  0E44               	movlw	68
 17204  0065F2  0101               	movlb	1	; () banked
 17205  0065F4  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 17206  0065F6  ECF4  F019         	call	___ftmul	;wreg free
 17207  0065FA  C114  F04D         	movff	?___ftmul,_timsXcorte
 17208  0065FE  C115  F04E         	movff	?___ftmul+1,_timsXcorte+1
 17209  006602  C116  F04F         	movff	?___ftmul+2,_timsXcorte+2
 17210  006606  0012               	return		;funcret
 17211  006608                     __end_of_calcVars2ti:
 17212                           	opt stack 0
 17213                           tblptru	equ	0xFF8
 17214                           tblptrh	equ	0xFF7
 17215                           tblptrl	equ	0xFF6
 17216                           tablat	equ	0xFF5
 17217                           prodh	equ	0xFF4
 17218                           prodl	equ	0xFF3
 17219                           intcon	equ	0xFF2
 17220                           postinc0	equ	0xFEE
 17221                           wreg	equ	0xFE8
 17222                           postdec1	equ	0xFE5
 17223                           fsr1l	equ	0xFE1
 17224                           indf2	equ	0xFDF
 17225                           postinc2	equ	0xFDE
 17226                           postdec2	equ	0xFDD
 17227                           plusw2	equ	0xFDB
 17228                           fsr2h	equ	0xFDA
 17229                           fsr2l	equ	0xFD9
 17230                           status	equ	0xFD8
 17231                           
 17232 ;; *************** function ___ftmul *****************
 17233 ;; Defined at:
 17234 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 17235 ;; Parameters:    Size  Location     Type
 17236 ;;  f1              3   20[BANK1 ] float 
 17237 ;;  f2              3   23[BANK1 ] float 
 17238 ;; Auto vars:     Size  Location     Type
 17239 ;;  f3_as_produc    3   30[BANK1 ] unsigned um
 17240 ;;  sign            1   34[BANK1 ] unsigned char 
 17241 ;;  cntr            1   33[BANK1 ] unsigned char 
 17242 ;;  exp             1   29[BANK1 ] unsigned char 
 17243 ;; Return value:  Size  Location     Type
 17244 ;;                  3   20[BANK1 ] float 
 17245 ;; Registers used:
 17246 ;;		wreg, status,2, status,0, cstack
 17247 ;; Tracked objects:
 17248 ;;		On entry : 0/0
 17249 ;;		On exit  : 0/0
 17250 ;;		Unchanged: 0/0
 17251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17252 ;;      Params:         0       0       6       0       0       0       0
 17253 ;;      Locals:         0       0       6       0       0       0       0
 17254 ;;      Temps:          0       0       3       0       0       0       0
 17255 ;;      Totals:         0       0      15       0       0       0       0
 17256 ;;Total ram usage:       15 bytes
 17257 ;; Hardware stack levels used:    1
 17258 ;; Hardware stack levels required when called:   13
 17259 ;; This function calls:
 17260 ;;		___ftpack
 17261 ;; This function is called by:
 17262 ;;		_calcSysVars
 17263 ;;		_calcVars2ti
 17264 ;;		_desintegrator
 17265 ;;		_fround
 17266 ;;		_scale
 17267 ;;		_printf
 17268 ;; This function uses a non-reentrant model
 17269 ;;
 17270                           
 17271                           	psect	text69
 17272  0033E8                     __ptext69:
 17273                           	opt stack 0
 17274  0033E8                     ___ftmul:
 17275                           	opt stack 15
 17276                           
 17277                           ;incstack = 0
 17278  0033E8  C116  F11A         	movff	___ftmul@f1+2,??___ftmul
 17279  0033EC  0101               	movlb	1	; () banked
 17280  0033EE  6B1B               	clrf	(??___ftmul+1)& (0+255),b
 17281  0033F0  6B1C               	clrf	(??___ftmul+2)& (0+255),b
 17282  0033F2  0101               	movlb	1	; () banked
 17283  0033F4  3515               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 17284  0033F6  0101               	movlb	1	; () banked
 17285  0033F8  371A               	rlcf	??___ftmul& (0+255),f,b
 17286  0033FA  E301               	bnc	u13401
 17287  0033FC  811B               	bsf	(??___ftmul+1)& (0+255),0,b
 17288  0033FE                     u13401:
 17289  0033FE  0101               	movlb	1	; () banked
 17290  003400  511A               	movf	??___ftmul& (0+255),w,b
 17291  003402  0101               	movlb	1	; () banked
 17292  003404  6F1D               	movwf	___ftmul@exp& (0+255),b
 17293  003406  0101               	movlb	1	; () banked
 17294  003408  511D               	movf	___ftmul@exp& (0+255),w,b
 17295  00340A  A4D8               	btfss	status,2,c
 17296  00340C  D00A               	goto	l9421
 17297                           
 17298                           ; BSR set to: 1
 17299  00340E  0E00               	movlw	0
 17300  003410  0101               	movlb	1	; () banked
 17301  003412  6F14               	movwf	?___ftmul& (0+255),b
 17302  003414  0E00               	movlw	0
 17303  003416  0101               	movlb	1	; () banked
 17304  003418  6F15               	movwf	(?___ftmul+1)& (0+255),b
 17305  00341A  0E00               	movlw	0
 17306  00341C  0101               	movlb	1	; () banked
 17307  00341E  6F16               	movwf	(?___ftmul+2)& (0+255),b
 17308                           
 17309                           ; BSR set to: 1
 17310  003420  0012               	return	
 17311  003422                     l9421:
 17312                           
 17313                           ; BSR set to: 1
 17314  003422  C119  F11A         	movff	___ftmul@f2+2,??___ftmul
 17315  003426  0101               	movlb	1	; () banked
 17316  003428  6B1B               	clrf	(??___ftmul+1)& (0+255),b
 17317  00342A  6B1C               	clrf	(??___ftmul+2)& (0+255),b
 17318  00342C  0101               	movlb	1	; () banked
 17319  00342E  3518               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 17320  003430  0101               	movlb	1	; () banked
 17321  003432  371A               	rlcf	??___ftmul& (0+255),f,b
 17322  003434  E301               	bnc	u13421
 17323  003436  811B               	bsf	(??___ftmul+1)& (0+255),0,b
 17324  003438                     u13421:
 17325  003438  0101               	movlb	1	; () banked
 17326  00343A  511A               	movf	??___ftmul& (0+255),w,b
 17327  00343C  0101               	movlb	1	; () banked
 17328  00343E  6F22               	movwf	___ftmul@sign& (0+255),b
 17329  003440  0101               	movlb	1	; () banked
 17330  003442  5122               	movf	___ftmul@sign& (0+255),w,b
 17331  003444  A4D8               	btfss	status,2,c
 17332  003446  D00A               	goto	l9427
 17333                           
 17334                           ; BSR set to: 1
 17335  003448  0E00               	movlw	0
 17336  00344A  0101               	movlb	1	; () banked
 17337  00344C  6F14               	movwf	?___ftmul& (0+255),b
 17338  00344E  0E00               	movlw	0
 17339  003450  0101               	movlb	1	; () banked
 17340  003452  6F15               	movwf	(?___ftmul+1)& (0+255),b
 17341  003454  0E00               	movlw	0
 17342  003456  0101               	movlb	1	; () banked
 17343  003458  6F16               	movwf	(?___ftmul+2)& (0+255),b
 17344                           
 17345                           ; BSR set to: 1
 17346  00345A  0012               	return	
 17347  00345C                     l9427:
 17348                           
 17349                           ; BSR set to: 1
 17350  00345C  0101               	movlb	1	; () banked
 17351  00345E  5122               	movf	___ftmul@sign& (0+255),w,b
 17352  003460  0F7B               	addlw	123
 17353  003462  0101               	movlb	1	; () banked
 17354  003464  271D               	addwf	___ftmul@exp& (0+255),f,b
 17355                           
 17356                           ; BSR set to: 1
 17357  003466  C116  F122         	movff	___ftmul@f1+2,___ftmul@sign
 17358  00346A  0101               	movlb	1	; () banked
 17359  00346C  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 17360  00346E  0101               	movlb	1	; () banked
 17361  003470  1B22               	xorwf	___ftmul@sign& (0+255),f,b
 17362  003472  0E80               	movlw	128
 17363  003474  0101               	movlb	1	; () banked
 17364  003476  1722               	andwf	___ftmul@sign& (0+255),f,b
 17365                           
 17366                           ; BSR set to: 1
 17367  003478  0101               	movlb	1	; () banked
 17368  00347A  8F15               	bsf	(___ftmul@f1+1)& (0+255),7,b
 17369                           
 17370                           ; BSR set to: 1
 17371  00347C  0101               	movlb	1	; () banked
 17372  00347E  8F18               	bsf	(___ftmul@f2+1)& (0+255),7,b
 17373                           
 17374                           ; BSR set to: 1
 17375  003480  0EFF               	movlw	255
 17376  003482  0101               	movlb	1	; () banked
 17377  003484  1717               	andwf	___ftmul@f2& (0+255),f,b
 17378  003486  0EFF               	movlw	255
 17379  003488  0101               	movlb	1	; () banked
 17380  00348A  1718               	andwf	(___ftmul@f2+1)& (0+255),f,b
 17381  00348C  0E00               	movlw	0
 17382  00348E  0101               	movlb	1	; () banked
 17383  003490  1719               	andwf	(___ftmul@f2+2)& (0+255),f,b
 17384                           
 17385                           ; BSR set to: 1
 17386  003492  0E00               	movlw	0
 17387  003494  0101               	movlb	1	; () banked
 17388  003496  6F1E               	movwf	___ftmul@f3_as_product& (0+255),b
 17389  003498  0E00               	movlw	0
 17390  00349A  0101               	movlb	1	; () banked
 17391  00349C  6F1F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 17392  00349E  0E00               	movlw	0
 17393  0034A0  0101               	movlb	1	; () banked
 17394  0034A2  6F20               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 17395                           
 17396                           ; BSR set to: 1
 17397  0034A4  0E07               	movlw	7
 17398  0034A6  0101               	movlb	1	; () banked
 17399  0034A8  6F21               	movwf	___ftmul@cntr& (0+255),b
 17400  0034AA                     l9441:
 17401                           
 17402                           ; BSR set to: 1
 17403  0034AA  0101               	movlb	1	; () banked
 17404  0034AC  A114               	btfss	___ftmul@f1& (0+255),0,b
 17405  0034AE  D00C               	goto	l9445
 17406                           
 17407                           ; BSR set to: 1
 17408  0034B0  0101               	movlb	1	; () banked
 17409  0034B2  5117               	movf	___ftmul@f2& (0+255),w,b
 17410  0034B4  0101               	movlb	1	; () banked
 17411  0034B6  271E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 17412  0034B8  0101               	movlb	1	; () banked
 17413  0034BA  5118               	movf	(___ftmul@f2+1)& (0+255),w,b
 17414  0034BC  0101               	movlb	1	; () banked
 17415  0034BE  231F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 17416  0034C0  0101               	movlb	1	; () banked
 17417  0034C2  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 17418  0034C4  0101               	movlb	1	; () banked
 17419  0034C6  2320               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 17420  0034C8                     l9445:
 17421                           
 17422                           ; BSR set to: 1
 17423  0034C8  0101               	movlb	1	; () banked
 17424  0034CA  90D8               	bcf	status,0,c
 17425  0034CC  3316               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 17426  0034CE  3315               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 17427  0034D0  3314               	rrcf	___ftmul@f1& (0+255),f,b
 17428  0034D2  0101               	movlb	1	; () banked
 17429  0034D4  90D8               	bcf	status,0,c
 17430  0034D6  3717               	rlcf	___ftmul@f2& (0+255),f,b
 17431  0034D8  3718               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 17432  0034DA  3719               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 17433                           
 17434                           ; BSR set to: 1
 17435  0034DC  0101               	movlb	1	; () banked
 17436  0034DE  2F21               	decfsz	___ftmul@cntr& (0+255),f,b
 17437  0034E0  D7E4               	goto	l9441
 17438                           
 17439                           ; BSR set to: 1
 17440                           
 17441                           ; BSR set to: 1
 17442  0034E2  0E09               	movlw	9
 17443  0034E4  0101               	movlb	1	; () banked
 17444  0034E6  6F21               	movwf	___ftmul@cntr& (0+255),b
 17445  0034E8                     l9451:
 17446                           
 17447                           ; BSR set to: 1
 17448  0034E8  0101               	movlb	1	; () banked
 17449  0034EA  A114               	btfss	___ftmul@f1& (0+255),0,b
 17450  0034EC  D00C               	goto	l9455
 17451                           
 17452                           ; BSR set to: 1
 17453  0034EE  0101               	movlb	1	; () banked
 17454  0034F0  5117               	movf	___ftmul@f2& (0+255),w,b
 17455  0034F2  0101               	movlb	1	; () banked
 17456  0034F4  271E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 17457  0034F6  0101               	movlb	1	; () banked
 17458  0034F8  5118               	movf	(___ftmul@f2+1)& (0+255),w,b
 17459  0034FA  0101               	movlb	1	; () banked
 17460  0034FC  231F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 17461  0034FE  0101               	movlb	1	; () banked
 17462  003500  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 17463  003502  0101               	movlb	1	; () banked
 17464  003504  2320               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 17465  003506                     l9455:
 17466                           
 17467                           ; BSR set to: 1
 17468  003506  0101               	movlb	1	; () banked
 17469  003508  90D8               	bcf	status,0,c
 17470  00350A  3316               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 17471  00350C  3315               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 17472  00350E  3314               	rrcf	___ftmul@f1& (0+255),f,b
 17473  003510  0101               	movlb	1	; () banked
 17474  003512  90D8               	bcf	status,0,c
 17475  003514  3320               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 17476  003516  331F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 17477  003518  331E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 17478                           
 17479                           ; BSR set to: 1
 17480  00351A  0101               	movlb	1	; () banked
 17481  00351C  2F21               	decfsz	___ftmul@cntr& (0+255),f,b
 17482  00351E  D7E4               	goto	l9451
 17483                           
 17484                           ; BSR set to: 1
 17485                           
 17486                           ; BSR set to: 1
 17487  003520  C11E  F100         	movff	___ftmul@f3_as_product,___ftpack@arg
 17488  003524  C11F  F101         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 17489  003528  C120  F102         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 17490  00352C  C11D  F103         	movff	___ftmul@exp,___ftpack@exp
 17491  003530  C122  F104         	movff	___ftmul@sign,___ftpack@sign
 17492  003534  ECBA  F021         	call	___ftpack	;wreg free
 17493  003538  C100  F114         	movff	?___ftpack,?___ftmul
 17494  00353C  C101  F115         	movff	?___ftpack+1,?___ftmul+1
 17495  003540  C102  F116         	movff	?___ftpack+2,?___ftmul+2
 17496  003544  0012               	return	
 17497  003546                     __end_of___ftmul:
 17498                           	opt stack 0
 17499                           tblptru	equ	0xFF8
 17500                           tblptrh	equ	0xFF7
 17501                           tblptrl	equ	0xFF6
 17502                           tablat	equ	0xFF5
 17503                           prodh	equ	0xFF4
 17504                           prodl	equ	0xFF3
 17505                           intcon	equ	0xFF2
 17506                           postinc0	equ	0xFEE
 17507                           wreg	equ	0xFE8
 17508                           postdec1	equ	0xFE5
 17509                           fsr1l	equ	0xFE1
 17510                           indf2	equ	0xFDF
 17511                           postinc2	equ	0xFDE
 17512                           postdec2	equ	0xFDD
 17513                           plusw2	equ	0xFDB
 17514                           fsr2h	equ	0xFDA
 17515                           fsr2l	equ	0xFD9
 17516                           status	equ	0xFD8
 17517                           
 17518 ;; *************** function ___ftdiv *****************
 17519 ;; Defined at:
 17520 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 17521 ;; Parameters:    Size  Location     Type
 17522 ;;  f1              3   18[BANK1 ] float 
 17523 ;;  f2              3   21[BANK1 ] float 
 17524 ;; Auto vars:     Size  Location     Type
 17525 ;;  f3              3   28[BANK1 ] float 
 17526 ;;  sign            1   32[BANK1 ] unsigned char 
 17527 ;;  exp             1   31[BANK1 ] unsigned char 
 17528 ;;  cntr            1   27[BANK1 ] unsigned char 
 17529 ;; Return value:  Size  Location     Type
 17530 ;;                  3   18[BANK1 ] float 
 17531 ;; Registers used:
 17532 ;;		wreg, status,2, status,0, cstack
 17533 ;; Tracked objects:
 17534 ;;		On entry : 0/0
 17535 ;;		On exit  : 0/0
 17536 ;;		Unchanged: 0/0
 17537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17538 ;;      Params:         0       0       6       0       0       0       0
 17539 ;;      Locals:         0       0       6       0       0       0       0
 17540 ;;      Temps:          0       0       3       0       0       0       0
 17541 ;;      Totals:         0       0      15       0       0       0       0
 17542 ;;Total ram usage:       15 bytes
 17543 ;; Hardware stack levels used:    1
 17544 ;; Hardware stack levels required when called:   13
 17545 ;; This function calls:
 17546 ;;		___ftpack
 17547 ;; This function is called by:
 17548 ;;		_calcVars2ti
 17549 ;;		_integrator
 17550 ;;		_longPressENTER
 17551 ;; This function uses a non-reentrant model
 17552 ;;
 17553                           
 17554                           	psect	text70
 17555  0036A4                     __ptext70:
 17556                           	opt stack 0
 17557  0036A4                     ___ftdiv:
 17558                           	opt stack 12
 17559                           
 17560                           ;incstack = 0
 17561  0036A4  C114  F118         	movff	___ftdiv@f1+2,??___ftdiv
 17562  0036A8  0101               	movlb	1	; () banked
 17563  0036AA  6B19               	clrf	(??___ftdiv+1)& (0+255),b
 17564  0036AC  6B1A               	clrf	(??___ftdiv+2)& (0+255),b
 17565  0036AE  0101               	movlb	1	; () banked
 17566  0036B0  3513               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 17567  0036B2  0101               	movlb	1	; () banked
 17568  0036B4  3718               	rlcf	??___ftdiv& (0+255),f,b
 17569  0036B6  E301               	bnc	u13351
 17570  0036B8  8119               	bsf	(??___ftdiv+1)& (0+255),0,b
 17571  0036BA                     u13351:
 17572  0036BA  0101               	movlb	1	; () banked
 17573  0036BC  5118               	movf	??___ftdiv& (0+255),w,b
 17574  0036BE  0101               	movlb	1	; () banked
 17575  0036C0  6F1F               	movwf	___ftdiv@exp& (0+255),b
 17576  0036C2  0101               	movlb	1	; () banked
 17577  0036C4  511F               	movf	___ftdiv@exp& (0+255),w,b
 17578  0036C6  A4D8               	btfss	status,2,c
 17579  0036C8  D00A               	goto	l9375
 17580                           
 17581                           ; BSR set to: 1
 17582  0036CA  0E00               	movlw	0
 17583  0036CC  0101               	movlb	1	; () banked
 17584  0036CE  6F12               	movwf	?___ftdiv& (0+255),b
 17585  0036D0  0E00               	movlw	0
 17586  0036D2  0101               	movlb	1	; () banked
 17587  0036D4  6F13               	movwf	(?___ftdiv+1)& (0+255),b
 17588  0036D6  0E00               	movlw	0
 17589  0036D8  0101               	movlb	1	; () banked
 17590  0036DA  6F14               	movwf	(?___ftdiv+2)& (0+255),b
 17591                           
 17592                           ; BSR set to: 1
 17593  0036DC  0012               	return	
 17594  0036DE                     l9375:
 17595                           
 17596                           ; BSR set to: 1
 17597  0036DE  C117  F118         	movff	___ftdiv@f2+2,??___ftdiv
 17598  0036E2  0101               	movlb	1	; () banked
 17599  0036E4  6B19               	clrf	(??___ftdiv+1)& (0+255),b
 17600  0036E6  6B1A               	clrf	(??___ftdiv+2)& (0+255),b
 17601  0036E8  0101               	movlb	1	; () banked
 17602  0036EA  3516               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 17603  0036EC  0101               	movlb	1	; () banked
 17604  0036EE  3718               	rlcf	??___ftdiv& (0+255),f,b
 17605  0036F0  E301               	bnc	u13371
 17606  0036F2  8119               	bsf	(??___ftdiv+1)& (0+255),0,b
 17607  0036F4                     u13371:
 17608  0036F4  0101               	movlb	1	; () banked
 17609  0036F6  5118               	movf	??___ftdiv& (0+255),w,b
 17610  0036F8  0101               	movlb	1	; () banked
 17611  0036FA  6F20               	movwf	___ftdiv@sign& (0+255),b
 17612  0036FC  0101               	movlb	1	; () banked
 17613  0036FE  5120               	movf	___ftdiv@sign& (0+255),w,b
 17614  003700  A4D8               	btfss	status,2,c
 17615  003702  D00A               	goto	l9381
 17616                           
 17617                           ; BSR set to: 1
 17618  003704  0E00               	movlw	0
 17619  003706  0101               	movlb	1	; () banked
 17620  003708  6F12               	movwf	?___ftdiv& (0+255),b
 17621  00370A  0E00               	movlw	0
 17622  00370C  0101               	movlb	1	; () banked
 17623  00370E  6F13               	movwf	(?___ftdiv+1)& (0+255),b
 17624  003710  0E00               	movlw	0
 17625  003712  0101               	movlb	1	; () banked
 17626  003714  6F14               	movwf	(?___ftdiv+2)& (0+255),b
 17627                           
 17628                           ; BSR set to: 1
 17629  003716  0012               	return	
 17630  003718                     l9381:
 17631                           
 17632                           ; BSR set to: 1
 17633  003718  0E00               	movlw	0
 17634  00371A  0101               	movlb	1	; () banked
 17635  00371C  6F1C               	movwf	___ftdiv@f3& (0+255),b
 17636  00371E  0E00               	movlw	0
 17637  003720  0101               	movlb	1	; () banked
 17638  003722  6F1D               	movwf	(___ftdiv@f3+1)& (0+255),b
 17639  003724  0E00               	movlw	0
 17640  003726  0101               	movlb	1	; () banked
 17641  003728  6F1E               	movwf	(___ftdiv@f3+2)& (0+255),b
 17642                           
 17643                           ; BSR set to: 1
 17644  00372A  0101               	movlb	1	; () banked
 17645  00372C  5120               	movf	___ftdiv@sign& (0+255),w,b
 17646  00372E  0F89               	addlw	137
 17647  003730  0101               	movlb	1	; () banked
 17648  003732  5F1F               	subwf	___ftdiv@exp& (0+255),f,b
 17649                           
 17650                           ; BSR set to: 1
 17651  003734  C114  F120         	movff	___ftdiv@f1+2,___ftdiv@sign
 17652                           
 17653                           ; BSR set to: 1
 17654  003738  0101               	movlb	1	; () banked
 17655  00373A  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 17656  00373C  0101               	movlb	1	; () banked
 17657  00373E  1B20               	xorwf	___ftdiv@sign& (0+255),f,b
 17658                           
 17659                           ; BSR set to: 1
 17660  003740  0E80               	movlw	128
 17661  003742  0101               	movlb	1	; () banked
 17662  003744  1720               	andwf	___ftdiv@sign& (0+255),f,b
 17663                           
 17664                           ; BSR set to: 1
 17665  003746  0101               	movlb	1	; () banked
 17666  003748  8F13               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 17667                           
 17668                           ; BSR set to: 1
 17669  00374A  0EFF               	movlw	255
 17670  00374C  0101               	movlb	1	; () banked
 17671  00374E  1712               	andwf	___ftdiv@f1& (0+255),f,b
 17672  003750  0EFF               	movlw	255
 17673  003752  0101               	movlb	1	; () banked
 17674  003754  1713               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 17675  003756  0E00               	movlw	0
 17676  003758  0101               	movlb	1	; () banked
 17677  00375A  1714               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 17678                           
 17679                           ; BSR set to: 1
 17680  00375C  0101               	movlb	1	; () banked
 17681  00375E  8F16               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 17682                           
 17683                           ; BSR set to: 1
 17684  003760  0EFF               	movlw	255
 17685  003762  0101               	movlb	1	; () banked
 17686  003764  1715               	andwf	___ftdiv@f2& (0+255),f,b
 17687  003766  0EFF               	movlw	255
 17688  003768  0101               	movlb	1	; () banked
 17689  00376A  1716               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 17690  00376C  0E00               	movlw	0
 17691  00376E  0101               	movlb	1	; () banked
 17692  003770  1717               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 17693                           
 17694                           ; BSR set to: 1
 17695  003772  0E18               	movlw	24
 17696  003774  0101               	movlb	1	; () banked
 17697  003776  6F1B               	movwf	___ftdiv@cntr& (0+255),b
 17698  003778                     l9401:
 17699                           
 17700                           ; BSR set to: 1
 17701  003778  0101               	movlb	1	; () banked
 17702  00377A  90D8               	bcf	status,0,c
 17703  00377C  371C               	rlcf	___ftdiv@f3& (0+255),f,b
 17704  00377E  371D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 17705  003780  371E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 17706                           
 17707                           ; BSR set to: 1
 17708  003782  0101               	movlb	1	; () banked
 17709  003784  5115               	movf	___ftdiv@f2& (0+255),w,b
 17710  003786  0101               	movlb	1	; () banked
 17711  003788  5D12               	subwf	___ftdiv@f1& (0+255),w,b
 17712  00378A  0101               	movlb	1	; () banked
 17713  00378C  5116               	movf	(___ftdiv@f2+1)& (0+255),w,b
 17714  00378E  0101               	movlb	1	; () banked
 17715  003790  5913               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 17716  003792  0101               	movlb	1	; () banked
 17717  003794  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 17718  003796  0101               	movlb	1	; () banked
 17719  003798  5914               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 17720  00379A  A0D8               	btfss	status,0,c
 17721  00379C  D00E               	goto	l1322
 17722                           
 17723                           ; BSR set to: 1
 17724  00379E  0101               	movlb	1	; () banked
 17725  0037A0  5115               	movf	___ftdiv@f2& (0+255),w,b
 17726  0037A2  0101               	movlb	1	; () banked
 17727  0037A4  5F12               	subwf	___ftdiv@f1& (0+255),f,b
 17728  0037A6  0101               	movlb	1	; () banked
 17729  0037A8  5116               	movf	(___ftdiv@f2+1)& (0+255),w,b
 17730  0037AA  0101               	movlb	1	; () banked
 17731  0037AC  5B13               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 17732  0037AE  0101               	movlb	1	; () banked
 17733  0037B0  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 17734  0037B2  0101               	movlb	1	; () banked
 17735  0037B4  5B14               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 17736                           
 17737                           ; BSR set to: 1
 17738  0037B6  0101               	movlb	1	; () banked
 17739  0037B8  811C               	bsf	___ftdiv@f3& (0+255),0,b
 17740  0037BA                     l1322:
 17741                           
 17742                           ; BSR set to: 1
 17743  0037BA  0101               	movlb	1	; () banked
 17744  0037BC  90D8               	bcf	status,0,c
 17745  0037BE  3712               	rlcf	___ftdiv@f1& (0+255),f,b
 17746  0037C0  3713               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 17747  0037C2  3714               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 17748                           
 17749                           ; BSR set to: 1
 17750  0037C4  0101               	movlb	1	; () banked
 17751  0037C6  2F1B               	decfsz	___ftdiv@cntr& (0+255),f,b
 17752  0037C8  D7D7               	goto	l9401
 17753                           
 17754                           ; BSR set to: 1
 17755                           
 17756                           ; BSR set to: 1
 17757  0037CA  C11C  F100         	movff	___ftdiv@f3,___ftpack@arg
 17758  0037CE  C11D  F101         	movff	___ftdiv@f3+1,___ftpack@arg+1
 17759  0037D2  C11E  F102         	movff	___ftdiv@f3+2,___ftpack@arg+2
 17760  0037D6  C11F  F103         	movff	___ftdiv@exp,___ftpack@exp
 17761  0037DA  C120  F104         	movff	___ftdiv@sign,___ftpack@sign
 17762  0037DE  ECBA  F021         	call	___ftpack	;wreg free
 17763  0037E2  C100  F112         	movff	?___ftpack,?___ftdiv
 17764  0037E6  C101  F113         	movff	?___ftpack+1,?___ftdiv+1
 17765  0037EA  C102  F114         	movff	?___ftpack+2,?___ftdiv+2
 17766  0037EE  0012               	return	
 17767  0037F0                     __end_of___ftdiv:
 17768                           	opt stack 0
 17769                           tblptru	equ	0xFF8
 17770                           tblptrh	equ	0xFF7
 17771                           tblptrl	equ	0xFF6
 17772                           tablat	equ	0xFF5
 17773                           prodh	equ	0xFF4
 17774                           prodl	equ	0xFF3
 17775                           intcon	equ	0xFF2
 17776                           postinc0	equ	0xFEE
 17777                           wreg	equ	0xFE8
 17778                           postdec1	equ	0xFE5
 17779                           fsr1l	equ	0xFE1
 17780                           indf2	equ	0xFDF
 17781                           postinc2	equ	0xFDE
 17782                           postdec2	equ	0xFDD
 17783                           plusw2	equ	0xFDB
 17784                           fsr2h	equ	0xFDA
 17785                           fsr2l	equ	0xFD9
 17786                           status	equ	0xFD8
 17787                           
 17788 ;; *************** function ___ftadd *****************
 17789 ;; Defined at:
 17790 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 17791 ;; Parameters:    Size  Location     Type
 17792 ;;  f1              3   45[BANK1 ] float 
 17793 ;;  f2              3   48[BANK1 ] float 
 17794 ;; Auto vars:     Size  Location     Type
 17795 ;;  exp1            1   56[BANK1 ] unsigned char 
 17796 ;;  exp2            1   55[BANK1 ] unsigned char 
 17797 ;;  sign            1   54[BANK1 ] unsigned char 
 17798 ;; Return value:  Size  Location     Type
 17799 ;;                  3   45[BANK1 ] float 
 17800 ;; Registers used:
 17801 ;;		wreg, status,2, status,0, cstack
 17802 ;; Tracked objects:
 17803 ;;		On entry : 0/0
 17804 ;;		On exit  : 0/0
 17805 ;;		Unchanged: 0/0
 17806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17807 ;;      Params:         0       0       6       0       0       0       0
 17808 ;;      Locals:         0       0       3       0       0       0       0
 17809 ;;      Temps:          0       0       3       0       0       0       0
 17810 ;;      Totals:         0       0      12       0       0       0       0
 17811 ;;Total ram usage:       12 bytes
 17812 ;; Hardware stack levels used:    1
 17813 ;; Hardware stack levels required when called:   13
 17814 ;; This function calls:
 17815 ;;		___ftpack
 17816 ;; This function is called by:
 17817 ;;		_longPressENTER
 17818 ;;		_printf
 17819 ;;		___ftsub
 17820 ;; This function uses a non-reentrant model
 17821 ;;
 17822                           
 17823                           	psect	text71
 17824  0024F8                     __ptext71:
 17825                           	opt stack 0
 17826  0024F8                     ___ftadd:
 17827                           	opt stack 13
 17828                           
 17829                           ;incstack = 0
 17830  0024F8  C12F  F133         	movff	___ftadd@f1+2,??___ftadd
 17831  0024FC  0101               	movlb	1	; () banked
 17832  0024FE  6B34               	clrf	(??___ftadd+1)& (0+255),b
 17833  002500  6B35               	clrf	(??___ftadd+2)& (0+255),b
 17834  002502  0101               	movlb	1	; () banked
 17835  002504  352E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 17836  002506  0101               	movlb	1	; () banked
 17837  002508  3733               	rlcf	??___ftadd& (0+255),f,b
 17838  00250A  E301               	bnc	u13141
 17839  00250C  8134               	bsf	(??___ftadd+1)& (0+255),0,b
 17840  00250E                     u13141:
 17841  00250E  0101               	movlb	1	; () banked
 17842  002510  5133               	movf	??___ftadd& (0+255),w,b
 17843  002512  0101               	movlb	1	; () banked
 17844  002514  6F38               	movwf	___ftadd@exp1& (0+255),b
 17845  002516  C132  F133         	movff	___ftadd@f2+2,??___ftadd
 17846  00251A  0101               	movlb	1	; () banked
 17847  00251C  6B34               	clrf	(??___ftadd+1)& (0+255),b
 17848  00251E  6B35               	clrf	(??___ftadd+2)& (0+255),b
 17849  002520  0101               	movlb	1	; () banked
 17850  002522  3531               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 17851  002524  0101               	movlb	1	; () banked
 17852  002526  3733               	rlcf	??___ftadd& (0+255),f,b
 17853  002528  E301               	bnc	u13151
 17854  00252A  8134               	bsf	(??___ftadd+1)& (0+255),0,b
 17855  00252C                     u13151:
 17856  00252C  0101               	movlb	1	; () banked
 17857  00252E  5133               	movf	??___ftadd& (0+255),w,b
 17858  002530  0101               	movlb	1	; () banked
 17859  002532  6F37               	movwf	___ftadd@exp2& (0+255),b
 17860                           
 17861                           ; BSR set to: 1
 17862  002534  0101               	movlb	1	; () banked
 17863  002536  5138               	movf	___ftadd@exp1& (0+255),w,b
 17864  002538  0101               	movlb	1	; () banked
 17865  00253A  B4D8               	btfsc	status,2,c
 17866  00253C  D011               	goto	l1287
 17867                           
 17868                           ; BSR set to: 1
 17869  00253E  0101               	movlb	1	; () banked
 17870  002540  5137               	movf	___ftadd@exp2& (0+255),w,b
 17871  002542  0101               	movlb	1	; () banked
 17872  002544  5D38               	subwf	___ftadd@exp1& (0+255),w,b
 17873  002546  B0D8               	btfsc	status,0,c
 17874  002548  D012               	goto	l9307
 17875                           
 17876                           ; BSR set to: 1
 17877  00254A  0101               	movlb	1	; () banked
 17878  00254C  5138               	movf	___ftadd@exp1& (0+255),w,b
 17879  00254E  0800               	sublw	0
 17880  002550  0101               	movlb	1	; () banked
 17881  002552  2537               	addwf	___ftadd@exp2& (0+255),w,b
 17882  002554  0101               	movlb	1	; () banked
 17883  002556  6F33               	movwf	??___ftadd& (0+255),b
 17884  002558  0E18               	movlw	24
 17885  00255A  0101               	movlb	1	; () banked
 17886  00255C  6533               	cpfsgt	??___ftadd& (0+255),b
 17887  00255E  D007               	goto	l9307
 17888  002560                     l1287:
 17889                           
 17890                           ; BSR set to: 1
 17891  002560  C130  F12D         	movff	___ftadd@f2,?___ftadd
 17892  002564  C131  F12E         	movff	___ftadd@f2+1,?___ftadd+1
 17893  002568  C132  F12F         	movff	___ftadd@f2+2,?___ftadd+2
 17894  00256C  0012               	return	
 17895  00256E                     l9307:
 17896                           
 17897                           ; BSR set to: 1
 17898  00256E  0101               	movlb	1	; () banked
 17899  002570  5137               	movf	___ftadd@exp2& (0+255),w,b
 17900  002572  0101               	movlb	1	; () banked
 17901  002574  B4D8               	btfsc	status,2,c
 17902  002576  D011               	goto	l1291
 17903                           
 17904                           ; BSR set to: 1
 17905  002578  0101               	movlb	1	; () banked
 17906  00257A  5138               	movf	___ftadd@exp1& (0+255),w,b
 17907  00257C  0101               	movlb	1	; () banked
 17908  00257E  5D37               	subwf	___ftadd@exp2& (0+255),w,b
 17909  002580  B0D8               	btfsc	status,0,c
 17910  002582  D012               	goto	l9313
 17911                           
 17912                           ; BSR set to: 1
 17913  002584  0101               	movlb	1	; () banked
 17914  002586  5137               	movf	___ftadd@exp2& (0+255),w,b
 17915  002588  0800               	sublw	0
 17916  00258A  0101               	movlb	1	; () banked
 17917  00258C  2538               	addwf	___ftadd@exp1& (0+255),w,b
 17918  00258E  0101               	movlb	1	; () banked
 17919  002590  6F33               	movwf	??___ftadd& (0+255),b
 17920  002592  0E18               	movlw	24
 17921  002594  0101               	movlb	1	; () banked
 17922  002596  6533               	cpfsgt	??___ftadd& (0+255),b
 17923  002598  D007               	goto	l9313
 17924  00259A                     l1291:
 17925                           
 17926                           ; BSR set to: 1
 17927  00259A  C12D  F12D         	movff	___ftadd@f1,?___ftadd
 17928  00259E  C12E  F12E         	movff	___ftadd@f1+1,?___ftadd+1
 17929  0025A2  C12F  F12F         	movff	___ftadd@f1+2,?___ftadd+2
 17930  0025A6  0012               	return	
 17931  0025A8                     l9313:
 17932                           
 17933                           ; BSR set to: 1
 17934  0025A8  0E06               	movlw	6
 17935  0025AA  0101               	movlb	1	; () banked
 17936  0025AC  6F36               	movwf	___ftadd@sign& (0+255),b
 17937                           
 17938                           ; BSR set to: 1
 17939  0025AE  0101               	movlb	1	; () banked
 17940  0025B0  AF2F               	btfss	(___ftadd@f1+2)& (0+255),7,b
 17941  0025B2  D002               	goto	l9319
 17942                           
 17943                           ; BSR set to: 1
 17944  0025B4  0101               	movlb	1	; () banked
 17945  0025B6  8F36               	bsf	___ftadd@sign& (0+255),7,b
 17946  0025B8                     l9319:
 17947                           
 17948                           ; BSR set to: 1
 17949  0025B8  0101               	movlb	1	; () banked
 17950  0025BA  AF32               	btfss	(___ftadd@f2+2)& (0+255),7,b
 17951  0025BC  D002               	goto	l1293
 17952                           
 17953                           ; BSR set to: 1
 17954  0025BE  0101               	movlb	1	; () banked
 17955  0025C0  8D36               	bsf	___ftadd@sign& (0+255),6,b
 17956  0025C2                     l1293:
 17957                           
 17958                           ; BSR set to: 1
 17959  0025C2  0101               	movlb	1	; () banked
 17960  0025C4  8F2E               	bsf	(___ftadd@f1+1)& (0+255),7,b
 17961                           
 17962                           ; BSR set to: 1
 17963  0025C6  0EFF               	movlw	255
 17964  0025C8  0101               	movlb	1	; () banked
 17965  0025CA  172D               	andwf	___ftadd@f1& (0+255),f,b
 17966  0025CC  0EFF               	movlw	255
 17967  0025CE  0101               	movlb	1	; () banked
 17968  0025D0  172E               	andwf	(___ftadd@f1+1)& (0+255),f,b
 17969  0025D2  0E00               	movlw	0
 17970  0025D4  0101               	movlb	1	; () banked
 17971  0025D6  172F               	andwf	(___ftadd@f1+2)& (0+255),f,b
 17972  0025D8  0101               	movlb	1	; () banked
 17973  0025DA  8F31               	bsf	(___ftadd@f2+1)& (0+255),7,b
 17974                           
 17975                           ; BSR set to: 1
 17976  0025DC  0EFF               	movlw	255
 17977  0025DE  0101               	movlb	1	; () banked
 17978  0025E0  1730               	andwf	___ftadd@f2& (0+255),f,b
 17979  0025E2  0EFF               	movlw	255
 17980  0025E4  0101               	movlb	1	; () banked
 17981  0025E6  1731               	andwf	(___ftadd@f2+1)& (0+255),f,b
 17982  0025E8  0E00               	movlw	0
 17983  0025EA  0101               	movlb	1	; () banked
 17984  0025EC  1732               	andwf	(___ftadd@f2+2)& (0+255),f,b
 17985                           
 17986                           ; BSR set to: 1
 17987  0025EE  0101               	movlb	1	; () banked
 17988  0025F0  5137               	movf	___ftadd@exp2& (0+255),w,b
 17989  0025F2  0101               	movlb	1	; () banked
 17990  0025F4  5D38               	subwf	___ftadd@exp1& (0+255),w,b
 17991  0025F6  B0D8               	btfsc	status,0,c
 17992  0025F8  D025               	goto	l9339
 17993  0025FA                     l9329:
 17994                           
 17995                           ; BSR set to: 1
 17996  0025FA  0101               	movlb	1	; () banked
 17997  0025FC  90D8               	bcf	status,0,c
 17998  0025FE  3730               	rlcf	___ftadd@f2& (0+255),f,b
 17999  002600  3731               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 18000  002602  3732               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 18001  002604  0101               	movlb	1	; () banked
 18002  002606  0737               	decf	___ftadd@exp2& (0+255),f,b
 18003                           
 18004                           ; BSR set to: 1
 18005  002608  0101               	movlb	1	; () banked
 18006  00260A  5138               	movf	___ftadd@exp1& (0+255),w,b
 18007  00260C  0101               	movlb	1	; () banked
 18008  00260E  1937               	xorwf	___ftadd@exp2& (0+255),w,b
 18009  002610  B4D8               	btfsc	status,2,c
 18010  002612  D011               	goto	l9337
 18011                           
 18012                           ; BSR set to: 1
 18013  002614  0101               	movlb	1	; () banked
 18014  002616  0736               	decf	___ftadd@sign& (0+255),f,b
 18015  002618  C136  F133         	movff	___ftadd@sign,??___ftadd
 18016  00261C  0E07               	movlw	7
 18017  00261E  0101               	movlb	1	; () banked
 18018  002620  1733               	andwf	??___ftadd& (0+255),f,b
 18019  002622  B4D8               	btfsc	status,2,c
 18020  002624  D008               	goto	l9337
 18021  002626  D7E9               	goto	l9329
 18022  002628                     l9335:
 18023                           
 18024                           ; BSR set to: 1
 18025  002628  0101               	movlb	1	; () banked
 18026  00262A  90D8               	bcf	status,0,c
 18027  00262C  332F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 18028  00262E  332E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 18029  002630  332D               	rrcf	___ftadd@f1& (0+255),f,b
 18030  002632  0101               	movlb	1	; () banked
 18031  002634  2B38               	incf	___ftadd@exp1& (0+255),f,b
 18032  002636                     l9337:
 18033                           
 18034                           ; BSR set to: 1
 18035  002636  0101               	movlb	1	; () banked
 18036  002638  5137               	movf	___ftadd@exp2& (0+255),w,b
 18037  00263A  0101               	movlb	1	; () banked
 18038  00263C  1938               	xorwf	___ftadd@exp1& (0+255),w,b
 18039  00263E  B4D8               	btfsc	status,2,c
 18040  002640  D02B               	goto	l1302
 18041  002642  D7F2               	goto	l9335
 18042  002644                     l9339:
 18043                           
 18044                           ; BSR set to: 1
 18045  002644  0101               	movlb	1	; () banked
 18046  002646  5138               	movf	___ftadd@exp1& (0+255),w,b
 18047  002648  0101               	movlb	1	; () banked
 18048  00264A  5D37               	subwf	___ftadd@exp2& (0+255),w,b
 18049  00264C  B0D8               	btfsc	status,0,c
 18050  00264E  D024               	goto	l1302
 18051  002650                     l9341:
 18052                           
 18053                           ; BSR set to: 1
 18054  002650  0101               	movlb	1	; () banked
 18055  002652  90D8               	bcf	status,0,c
 18056  002654  372D               	rlcf	___ftadd@f1& (0+255),f,b
 18057  002656  372E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 18058  002658  372F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 18059  00265A  0101               	movlb	1	; () banked
 18060  00265C  0738               	decf	___ftadd@exp1& (0+255),f,b
 18061                           
 18062                           ; BSR set to: 1
 18063  00265E  0101               	movlb	1	; () banked
 18064  002660  5138               	movf	___ftadd@exp1& (0+255),w,b
 18065  002662  0101               	movlb	1	; () banked
 18066  002664  1937               	xorwf	___ftadd@exp2& (0+255),w,b
 18067  002666  B4D8               	btfsc	status,2,c
 18068  002668  D011               	goto	l9349
 18069                           
 18070                           ; BSR set to: 1
 18071  00266A  0101               	movlb	1	; () banked
 18072  00266C  0736               	decf	___ftadd@sign& (0+255),f,b
 18073  00266E  C136  F133         	movff	___ftadd@sign,??___ftadd
 18074  002672  0E07               	movlw	7
 18075  002674  0101               	movlb	1	; () banked
 18076  002676  1733               	andwf	??___ftadd& (0+255),f,b
 18077  002678  B4D8               	btfsc	status,2,c
 18078  00267A  D008               	goto	l9349
 18079  00267C  D7E9               	goto	l9341
 18080  00267E                     l9347:
 18081                           
 18082                           ; BSR set to: 1
 18083  00267E  0101               	movlb	1	; () banked
 18084  002680  90D8               	bcf	status,0,c
 18085  002682  3332               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 18086  002684  3331               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 18087  002686  3330               	rrcf	___ftadd@f2& (0+255),f,b
 18088  002688  0101               	movlb	1	; () banked
 18089  00268A  2B37               	incf	___ftadd@exp2& (0+255),f,b
 18090  00268C                     l9349:
 18091                           
 18092                           ; BSR set to: 1
 18093  00268C  0101               	movlb	1	; () banked
 18094  00268E  5137               	movf	___ftadd@exp2& (0+255),w,b
 18095  002690  0101               	movlb	1	; () banked
 18096  002692  1938               	xorwf	___ftadd@exp1& (0+255),w,b
 18097  002694  A4D8               	btfss	status,2,c
 18098  002696  D7F3               	goto	l9347
 18099  002698                     l1302:
 18100                           
 18101                           ; BSR set to: 1
 18102  002698  0101               	movlb	1	; () banked
 18103  00269A  AF36               	btfss	___ftadd@sign& (0+255),7,b
 18104  00269C  D012               	goto	l1311
 18105                           
 18106                           ; BSR set to: 1
 18107  00269E  0EFF               	movlw	255
 18108  0026A0  0101               	movlb	1	; () banked
 18109  0026A2  1B2D               	xorwf	___ftadd@f1& (0+255),f,b
 18110  0026A4  0EFF               	movlw	255
 18111  0026A6  0101               	movlb	1	; () banked
 18112  0026A8  1B2E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 18113  0026AA  0EFF               	movlw	255
 18114  0026AC  0101               	movlb	1	; () banked
 18115  0026AE  1B2F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 18116  0026B0  0E01               	movlw	1
 18117  0026B2  0101               	movlb	1	; () banked
 18118  0026B4  272D               	addwf	___ftadd@f1& (0+255),f,b
 18119  0026B6  0E00               	movlw	0
 18120  0026B8  0101               	movlb	1	; () banked
 18121  0026BA  232E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 18122  0026BC  0E00               	movlw	0
 18123  0026BE  0101               	movlb	1	; () banked
 18124  0026C0  232F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 18125  0026C2                     l1311:
 18126                           
 18127                           ; BSR set to: 1
 18128  0026C2  0101               	movlb	1	; () banked
 18129  0026C4  AD36               	btfss	___ftadd@sign& (0+255),6,b
 18130  0026C6  D012               	goto	l9355
 18131                           
 18132                           ; BSR set to: 1
 18133  0026C8  0EFF               	movlw	255
 18134  0026CA  0101               	movlb	1	; () banked
 18135  0026CC  1B30               	xorwf	___ftadd@f2& (0+255),f,b
 18136  0026CE  0EFF               	movlw	255
 18137  0026D0  0101               	movlb	1	; () banked
 18138  0026D2  1B31               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 18139  0026D4  0EFF               	movlw	255
 18140  0026D6  0101               	movlb	1	; () banked
 18141  0026D8  1B32               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 18142  0026DA  0E01               	movlw	1
 18143  0026DC  0101               	movlb	1	; () banked
 18144  0026DE  2730               	addwf	___ftadd@f2& (0+255),f,b
 18145  0026E0  0E00               	movlw	0
 18146  0026E2  0101               	movlb	1	; () banked
 18147  0026E4  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 18148  0026E6  0E00               	movlw	0
 18149  0026E8  0101               	movlb	1	; () banked
 18150  0026EA  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 18151  0026EC                     l9355:
 18152                           
 18153                           ; BSR set to: 1
 18154  0026EC  0E00               	movlw	0
 18155  0026EE  0101               	movlb	1	; () banked
 18156  0026F0  6F36               	movwf	___ftadd@sign& (0+255),b
 18157                           
 18158                           ; BSR set to: 1
 18159  0026F2  0101               	movlb	1	; () banked
 18160  0026F4  512D               	movf	___ftadd@f1& (0+255),w,b
 18161  0026F6  0101               	movlb	1	; () banked
 18162  0026F8  2730               	addwf	___ftadd@f2& (0+255),f,b
 18163  0026FA  0101               	movlb	1	; () banked
 18164  0026FC  512E               	movf	(___ftadd@f1+1)& (0+255),w,b
 18165  0026FE  0101               	movlb	1	; () banked
 18166  002700  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 18167  002702  0101               	movlb	1	; () banked
 18168  002704  512F               	movf	(___ftadd@f1+2)& (0+255),w,b
 18169  002706  0101               	movlb	1	; () banked
 18170  002708  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 18171                           
 18172                           ; BSR set to: 1
 18173  00270A  0101               	movlb	1	; () banked
 18174  00270C  AF32               	btfss	(___ftadd@f2+2)& (0+255),7,b
 18175  00270E  D015               	goto	l9365
 18176                           
 18177                           ; BSR set to: 1
 18178  002710  0EFF               	movlw	255
 18179  002712  0101               	movlb	1	; () banked
 18180  002714  1B30               	xorwf	___ftadd@f2& (0+255),f,b
 18181  002716  0EFF               	movlw	255
 18182  002718  0101               	movlb	1	; () banked
 18183  00271A  1B31               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 18184  00271C  0EFF               	movlw	255
 18185  00271E  0101               	movlb	1	; () banked
 18186  002720  1B32               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 18187  002722  0E01               	movlw	1
 18188  002724  0101               	movlb	1	; () banked
 18189  002726  2730               	addwf	___ftadd@f2& (0+255),f,b
 18190  002728  0E00               	movlw	0
 18191  00272A  0101               	movlb	1	; () banked
 18192  00272C  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 18193  00272E  0E00               	movlw	0
 18194  002730  0101               	movlb	1	; () banked
 18195  002732  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 18196                           
 18197                           ; BSR set to: 1
 18198  002734  0E01               	movlw	1
 18199  002736  0101               	movlb	1	; () banked
 18200  002738  6F36               	movwf	___ftadd@sign& (0+255),b
 18201  00273A                     l9365:
 18202                           
 18203                           ; BSR set to: 1
 18204  00273A  C130  F100         	movff	___ftadd@f2,___ftpack@arg
 18205  00273E  C131  F101         	movff	___ftadd@f2+1,___ftpack@arg+1
 18206  002742  C132  F102         	movff	___ftadd@f2+2,___ftpack@arg+2
 18207  002746  C138  F103         	movff	___ftadd@exp1,___ftpack@exp
 18208  00274A  C136  F104         	movff	___ftadd@sign,___ftpack@sign
 18209  00274E  ECBA  F021         	call	___ftpack	;wreg free
 18210  002752  C100  F12D         	movff	?___ftpack,?___ftadd
 18211  002756  C101  F12E         	movff	?___ftpack+1,?___ftadd+1
 18212  00275A  C102  F12F         	movff	?___ftpack+2,?___ftadd+2
 18213  00275E  0012               	return	
 18214  002760                     __end_of___ftadd:
 18215                           	opt stack 0
 18216                           tblptru	equ	0xFF8
 18217                           tblptrh	equ	0xFF7
 18218                           tblptrl	equ	0xFF6
 18219                           tablat	equ	0xFF5
 18220                           prodh	equ	0xFF4
 18221                           prodl	equ	0xFF3
 18222                           intcon	equ	0xFF2
 18223                           postinc0	equ	0xFEE
 18224                           wreg	equ	0xFE8
 18225                           postdec1	equ	0xFE5
 18226                           fsr1l	equ	0xFE1
 18227                           indf2	equ	0xFDF
 18228                           postinc2	equ	0xFDE
 18229                           postdec2	equ	0xFDD
 18230                           plusw2	equ	0xFDB
 18231                           fsr2h	equ	0xFDA
 18232                           fsr2l	equ	0xFD9
 18233                           status	equ	0xFD8
 18234                           
 18235 ;; *************** function ___ftpack *****************
 18236 ;; Defined at:
 18237 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 18238 ;; Parameters:    Size  Location     Type
 18239 ;;  arg             3    0[BANK1 ] unsigned um
 18240 ;;  exp             1    3[BANK1 ] unsigned char 
 18241 ;;  sign            1    4[BANK1 ] unsigned char 
 18242 ;; Auto vars:     Size  Location     Type
 18243 ;;		None
 18244 ;; Return value:  Size  Location     Type
 18245 ;;                  3    0[BANK1 ] float 
 18246 ;; Registers used:
 18247 ;;		wreg, status,2, status,0
 18248 ;; Tracked objects:
 18249 ;;		On entry : 0/0
 18250 ;;		On exit  : 0/0
 18251 ;;		Unchanged: 0/0
 18252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18253 ;;      Params:         0       0       5       0       0       0       0
 18254 ;;      Locals:         0       0       0       0       0       0       0
 18255 ;;      Temps:          0       0       3       0       0       0       0
 18256 ;;      Totals:         0       0       8       0       0       0       0
 18257 ;;Total ram usage:        8 bytes
 18258 ;; Hardware stack levels used:    1
 18259 ;; Hardware stack levels required when called:   12
 18260 ;; This function calls:
 18261 ;;		Nothing
 18262 ;; This function is called by:
 18263 ;;		___altoft
 18264 ;;		___ftadd
 18265 ;;		___ftdiv
 18266 ;;		___ftmul
 18267 ;;		___lltoft
 18268 ;; This function uses a non-reentrant model
 18269 ;;
 18270                           
 18271                           	psect	text72
 18272  004374                     __ptext72:
 18273                           	opt stack 0
 18274  004374                     ___ftpack:
 18275                           	opt stack 15
 18276                           
 18277                           ;incstack = 0
 18278  004374  0101               	movlb	1	; () banked
 18279  004376  5103               	movf	___ftpack@exp& (0+255),w,b
 18280  004378  0101               	movlb	1	; () banked
 18281  00437A  B4D8               	btfsc	status,2,c
 18282  00437C  D008               	goto	l9207
 18283                           
 18284                           ; BSR set to: 1
 18285  00437E  0101               	movlb	1	; () banked
 18286  004380  5100               	movf	___ftpack@arg& (0+255),w,b
 18287  004382  0101               	movlb	1	; () banked
 18288  004384  1101               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 18289  004386  0101               	movlb	1	; () banked
 18290  004388  1102               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 18291  00438A  A4D8               	btfss	status,2,c
 18292  00438C  D011               	goto	l9213
 18293  00438E                     l9207:
 18294                           
 18295                           ; BSR set to: 1
 18296  00438E  0E00               	movlw	0
 18297  004390  0101               	movlb	1	; () banked
 18298  004392  6F00               	movwf	?___ftpack& (0+255),b
 18299  004394  0E00               	movlw	0
 18300  004396  0101               	movlb	1	; () banked
 18301  004398  6F01               	movwf	(?___ftpack+1)& (0+255),b
 18302  00439A  0E00               	movlw	0
 18303  00439C  0101               	movlb	1	; () banked
 18304  00439E  6F02               	movwf	(?___ftpack+2)& (0+255),b
 18305                           
 18306                           ; BSR set to: 1
 18307  0043A0  0012               	return	
 18308  0043A2                     l9211:
 18309                           
 18310                           ; BSR set to: 1
 18311  0043A2  0101               	movlb	1	; () banked
 18312  0043A4  2B03               	incf	___ftpack@exp& (0+255),f,b
 18313  0043A6  0101               	movlb	1	; () banked
 18314  0043A8  90D8               	bcf	status,0,c
 18315  0043AA  3302               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 18316  0043AC  3301               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 18317  0043AE  3300               	rrcf	___ftpack@arg& (0+255),f,b
 18318  0043B0                     l9213:
 18319                           
 18320                           ; BSR set to: 1
 18321  0043B0  0E00               	movlw	0
 18322  0043B2  0101               	movlb	1	; () banked
 18323  0043B4  1500               	andwf	___ftpack@arg& (0+255),w,b
 18324  0043B6  0101               	movlb	1	; () banked
 18325  0043B8  6F05               	movwf	??___ftpack& (0+255),b
 18326  0043BA  0E00               	movlw	0
 18327  0043BC  0101               	movlb	1	; () banked
 18328  0043BE  1501               	andwf	(___ftpack@arg+1)& (0+255),w,b
 18329  0043C0  0101               	movlb	1	; () banked
 18330  0043C2  6F06               	movwf	(??___ftpack+1)& (0+255),b
 18331  0043C4  0EFE               	movlw	254
 18332  0043C6  0101               	movlb	1	; () banked
 18333  0043C8  1502               	andwf	(___ftpack@arg+2)& (0+255),w,b
 18334  0043CA  0101               	movlb	1	; () banked
 18335  0043CC  6F07               	movwf	(??___ftpack+2)& (0+255),b
 18336  0043CE  0101               	movlb	1	; () banked
 18337  0043D0  5105               	movf	??___ftpack& (0+255),w,b
 18338  0043D2  0101               	movlb	1	; () banked
 18339  0043D4  1106               	iorwf	(??___ftpack+1)& (0+255),w,b
 18340  0043D6  0101               	movlb	1	; () banked
 18341  0043D8  1107               	iorwf	(??___ftpack+2)& (0+255),w,b
 18342  0043DA  B4D8               	btfsc	status,2,c
 18343  0043DC  D011               	goto	l9219
 18344  0043DE  D7E1               	goto	l9211
 18345  0043E0                     l9215:
 18346                           
 18347                           ; BSR set to: 1
 18348  0043E0  0101               	movlb	1	; () banked
 18349  0043E2  2B03               	incf	___ftpack@exp& (0+255),f,b
 18350                           
 18351                           ; BSR set to: 1
 18352  0043E4  0E01               	movlw	1
 18353  0043E6  0101               	movlb	1	; () banked
 18354  0043E8  2700               	addwf	___ftpack@arg& (0+255),f,b
 18355  0043EA  0E00               	movlw	0
 18356  0043EC  0101               	movlb	1	; () banked
 18357  0043EE  2301               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 18358  0043F0  0E00               	movlw	0
 18359  0043F2  0101               	movlb	1	; () banked
 18360  0043F4  2302               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 18361  0043F6  0101               	movlb	1	; () banked
 18362  0043F8  90D8               	bcf	status,0,c
 18363  0043FA  3302               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 18364  0043FC  3301               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 18365  0043FE  3300               	rrcf	___ftpack@arg& (0+255),f,b
 18366  004400                     l9219:
 18367                           
 18368                           ; BSR set to: 1
 18369  004400  0E00               	movlw	0
 18370  004402  0101               	movlb	1	; () banked
 18371  004404  1500               	andwf	___ftpack@arg& (0+255),w,b
 18372  004406  0101               	movlb	1	; () banked
 18373  004408  6F05               	movwf	??___ftpack& (0+255),b
 18374  00440A  0E00               	movlw	0
 18375  00440C  0101               	movlb	1	; () banked
 18376  00440E  1501               	andwf	(___ftpack@arg+1)& (0+255),w,b
 18377  004410  0101               	movlb	1	; () banked
 18378  004412  6F06               	movwf	(??___ftpack+1)& (0+255),b
 18379  004414  0EFF               	movlw	255
 18380  004416  0101               	movlb	1	; () banked
 18381  004418  1502               	andwf	(___ftpack@arg+2)& (0+255),w,b
 18382  00441A  0101               	movlb	1	; () banked
 18383  00441C  6F07               	movwf	(??___ftpack+2)& (0+255),b
 18384  00441E  0101               	movlb	1	; () banked
 18385  004420  5105               	movf	??___ftpack& (0+255),w,b
 18386  004422  0101               	movlb	1	; () banked
 18387  004424  1106               	iorwf	(??___ftpack+1)& (0+255),w,b
 18388  004426  0101               	movlb	1	; () banked
 18389  004428  1107               	iorwf	(??___ftpack+2)& (0+255),w,b
 18390  00442A  B4D8               	btfsc	status,2,c
 18391  00442C  D008               	goto	l9223
 18392  00442E  D7D8               	goto	l9215
 18393  004430                     l9221:
 18394                           
 18395                           ; BSR set to: 1
 18396  004430  0101               	movlb	1	; () banked
 18397  004432  0703               	decf	___ftpack@exp& (0+255),f,b
 18398  004434  0101               	movlb	1	; () banked
 18399  004436  90D8               	bcf	status,0,c
 18400  004438  3700               	rlcf	___ftpack@arg& (0+255),f,b
 18401  00443A  3701               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 18402  00443C  3702               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 18403  00443E                     l9223:
 18404                           
 18405                           ; BSR set to: 1
 18406  00443E  0101               	movlb	1	; () banked
 18407  004440  BF01               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 18408  004442  D004               	goto	l1264
 18409                           
 18410                           ; BSR set to: 1
 18411  004444  0E02               	movlw	2
 18412  004446  0101               	movlb	1	; () banked
 18413  004448  6103               	cpfslt	___ftpack@exp& (0+255),b
 18414  00444A  D7F2               	goto	l9221
 18415  00444C                     l1264:
 18416                           
 18417                           ; BSR set to: 1
 18418  00444C  0101               	movlb	1	; () banked
 18419  00444E  B103               	btfsc	___ftpack@exp& (0+255),0,b
 18420  004450  D002               	goto	l9229
 18421                           
 18422                           ; BSR set to: 1
 18423  004452  0101               	movlb	1	; () banked
 18424  004454  9F01               	bcf	(___ftpack@arg+1)& (0+255),7,b
 18425  004456                     l9229:
 18426                           
 18427                           ; BSR set to: 1
 18428  004456  0101               	movlb	1	; () banked
 18429  004458  90D8               	bcf	status,0,c
 18430  00445A  3303               	rrcf	___ftpack@exp& (0+255),f,b
 18431  00445C  0101               	movlb	1	; () banked
 18432  00445E  5103               	movf	___ftpack@exp& (0+255),w,b
 18433  004460  0101               	movlb	1	; () banked
 18434  004462  1302               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 18435                           
 18436                           ; BSR set to: 1
 18437  004464  0101               	movlb	1	; () banked
 18438  004466  5104               	movf	___ftpack@sign& (0+255),w,b
 18439  004468  0101               	movlb	1	; () banked
 18440  00446A  B4D8               	btfsc	status,2,c
 18441  00446C  D002               	goto	l9235
 18442                           
 18443                           ; BSR set to: 1
 18444  00446E  0101               	movlb	1	; () banked
 18445  004470  8F02               	bsf	(___ftpack@arg+2)& (0+255),7,b
 18446  004472                     l9235:
 18447                           
 18448                           ; BSR set to: 1
 18449  004472  C100  F100         	movff	___ftpack@arg,?___ftpack
 18450  004476  C101  F101         	movff	___ftpack@arg+1,?___ftpack+1
 18451  00447A  C102  F102         	movff	___ftpack@arg+2,?___ftpack+2
 18452  00447E  0012               	return	
 18453  004480                     __end_of___ftpack:
 18454                           	opt stack 0
 18455                           tblptru	equ	0xFF8
 18456                           tblptrh	equ	0xFF7
 18457                           tblptrl	equ	0xFF6
 18458                           tablat	equ	0xFF5
 18459                           prodh	equ	0xFF4
 18460                           prodl	equ	0xFF3
 18461                           intcon	equ	0xFF2
 18462                           postinc0	equ	0xFEE
 18463                           wreg	equ	0xFE8
 18464                           postdec1	equ	0xFE5
 18465                           fsr1l	equ	0xFE1
 18466                           indf2	equ	0xFDF
 18467                           postinc2	equ	0xFDE
 18468                           postdec2	equ	0xFDD
 18469                           plusw2	equ	0xFDB
 18470                           fsr2h	equ	0xFDA
 18471                           fsr2l	equ	0xFD9
 18472                           status	equ	0xFD8
 18473                           
 18474 ;; *************** function _longPressDOWN *****************
 18475 ;; Defined at:
 18476 ;;		line 214 in file "source/DisplayProtocol.h"
 18477 ;; Parameters:    Size  Location     Type
 18478 ;;		None
 18479 ;; Auto vars:     Size  Location     Type
 18480 ;;		None
 18481 ;; Return value:  Size  Location     Type
 18482 ;;                  1    wreg      void 
 18483 ;; Registers used:
 18484 ;;		wreg, status,2, status,0
 18485 ;; Tracked objects:
 18486 ;;		On entry : 0/0
 18487 ;;		On exit  : 0/0
 18488 ;;		Unchanged: 0/0
 18489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18490 ;;      Params:         0       0       0       0       0       0       0
 18491 ;;      Locals:         0       0       0       0       0       0       0
 18492 ;;      Temps:          0       0       0       0       0       0       0
 18493 ;;      Totals:         0       0       0       0       0       0       0
 18494 ;;Total ram usage:        0 bytes
 18495 ;; Hardware stack levels used:    1
 18496 ;; Hardware stack levels required when called:   12
 18497 ;; This function calls:
 18498 ;;		Nothing
 18499 ;; This function is called by:
 18500 ;;		_buttonChecking
 18501 ;; This function uses a non-reentrant model
 18502 ;;
 18503                           
 18504                           	psect	text73
 18505  006AC8                     __ptext73:
 18506                           	opt stack 0
 18507  006AC8                     _longPressDOWN:
 18508                           	opt stack 17
 18509                           
 18510                           ;DisplayProtocol.h: 215: if (!DOWNisLP) {
 18511                           
 18512                           ; BSR set to: 1
 18513                           ;incstack = 0
 18514  006AC8  5037               	movf	_DOWNisLP,w,c
 18515  006ACA  A4D8               	btfss	status,2,c
 18516  006ACC  0012               	return	
 18517                           
 18518                           ;DisplayProtocol.h: 216: DOWNisLP = 1;
 18519  006ACE  0E01               	movlw	1
 18520  006AD0  6E37               	movwf	_DOWNisLP,c
 18521                           
 18522                           ;DisplayProtocol.h: 217: if(actualScreen == 5) {
 18523  006AD2  0E05               	movlw	5
 18524  006AD4  0101               	movlb	1	; () banked
 18525  006AD6  19BA               	xorwf	_actualScreen& (0+255),w,b
 18526  006AD8  A4D8               	btfss	status,2,c
 18527  006ADA  0012               	return	
 18528                           
 18529                           ; BSR set to: 1
 18530                           ;DisplayProtocol.h: 218: if(menuSection == 2)
 18531  006ADC  0E02               	movlw	2
 18532  006ADE  0101               	movlb	1	; () banked
 18533  006AE0  19C1               	xorwf	_menuSection& (0+255),w,b
 18534  006AE2  A4D8               	btfss	status,2,c
 18535  006AE4  0012               	return	
 18536                           
 18537                           ; BSR set to: 1
 18538                           ;DisplayProtocol.h: 219: chanVals -= 10;
 18539  006AE6  0101               	movlb	1	; () banked
 18540  006AE8  0EF6               	movlw	246
 18541  006AEA  27B1               	addwf	_chanVals& (0+255),f,b
 18542  006AEC  0EFF               	movlw	255
 18543  006AEE  23B2               	addwfc	(_chanVals+1)& (0+255),f,b
 18544                           
 18545                           ; BSR set to: 1
 18546                           
 18547                           ; BSR set to: 1
 18548  006AF0  0012               	return	
 18549  006AF2                     __end_of_longPressDOWN:
 18550                           	opt stack 0
 18551                           tblptru	equ	0xFF8
 18552                           tblptrh	equ	0xFF7
 18553                           tblptrl	equ	0xFF6
 18554                           tablat	equ	0xFF5
 18555                           prodh	equ	0xFF4
 18556                           prodl	equ	0xFF3
 18557                           intcon	equ	0xFF2
 18558                           postinc0	equ	0xFEE
 18559                           wreg	equ	0xFE8
 18560                           postdec1	equ	0xFE5
 18561                           fsr1l	equ	0xFE1
 18562                           indf2	equ	0xFDF
 18563                           postinc2	equ	0xFDE
 18564                           postdec2	equ	0xFDD
 18565                           plusw2	equ	0xFDB
 18566                           fsr2h	equ	0xFDA
 18567                           fsr2l	equ	0xFD9
 18568                           status	equ	0xFD8
 18569                           
 18570 ;; *************** function _delay_ms *****************
 18571 ;; Defined at:
 18572 ;;		line 13 in file "source/../../delay.h"
 18573 ;; Parameters:    Size  Location     Type
 18574 ;;  del             2    0[BANK1 ] int 
 18575 ;; Auto vars:     Size  Location     Type
 18576 ;;  i               2    3[BANK1 ] int 
 18577 ;; Return value:  Size  Location     Type
 18578 ;;                  1    wreg      void 
 18579 ;; Registers used:
 18580 ;;		wreg, status,2, status,0
 18581 ;; Tracked objects:
 18582 ;;		On entry : 0/0
 18583 ;;		On exit  : 0/0
 18584 ;;		Unchanged: 0/0
 18585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18586 ;;      Params:         0       0       2       0       0       0       0
 18587 ;;      Locals:         0       0       2       0       0       0       0
 18588 ;;      Temps:          0       0       1       0       0       0       0
 18589 ;;      Totals:         0       0       5       0       0       0       0
 18590 ;;Total ram usage:        5 bytes
 18591 ;; Hardware stack levels used:    1
 18592 ;; Hardware stack levels required when called:   12
 18593 ;; This function calls:
 18594 ;;		Nothing
 18595 ;; This function is called by:
 18596 ;;		_buttonChecking
 18597 ;; This function uses a non-reentrant model
 18598 ;;
 18599                           
 18600                           	psect	text74
 18601  006838                     __ptext74:
 18602                           	opt stack 0
 18603  006838                     _delay_ms:
 18604                           	opt stack 17
 18605                           
 18606                           ;delay.h: 14: for(int i = 1;i <= del;i++)
 18607                           
 18608                           ;incstack = 0
 18609  006838  0E00               	movlw	0
 18610  00683A  0101               	movlb	1	; () banked
 18611  00683C  6F04               	movwf	(delay_ms@i+1)& (0+255),b
 18612  00683E  0E01               	movlw	1
 18613  006840  6F03               	movwf	delay_ms@i& (0+255),b
 18614  006842  D00C               	goto	l100
 18615  006844                     l10893:
 18616                           
 18617                           ; BSR set to: 1
 18618                           ;delay.h: 15: _delay((unsigned long)((1)*(16000000/4000.0)));
 18619  006844  0E06               	movlw	6
 18620  006846  0101               	movlb	1	; () banked
 18621  006848  6F02               	movwf	??_delay_ms& (0+255),b
 18622  00684A  0E30               	movlw	48
 18623  00684C                     u18967:
 18624  00684C  2EE8               	decfsz	wreg,f,c
 18625  00684E  D7FE               	goto	u18967
 18626  006850  2F02               	decfsz	??_delay_ms& (0+255),f,b
 18627  006852  D7FC               	goto	u18967
 18628  006854  D000               	nop2	
 18629  006856  0101               	movlb	1	; () banked
 18630  006858  4B03               	infsnz	delay_ms@i& (0+255),f,b
 18631  00685A  2B04               	incf	(delay_ms@i+1)& (0+255),f,b
 18632  00685C                     l100:
 18633                           
 18634                           ; BSR set to: 1
 18635  00685C  0101               	movlb	1	; () banked
 18636  00685E  5103               	movf	delay_ms@i& (0+255),w,b
 18637  006860  0101               	movlb	1	; () banked
 18638  006862  5D00               	subwf	delay_ms@del& (0+255),w,b
 18639  006864  0101               	movlb	1	; () banked
 18640  006866  5101               	movf	(delay_ms@del+1)& (0+255),w,b
 18641  006868  0A80               	xorlw	128
 18642  00686A  0101               	movlb	1	; () banked
 18643  00686C  6F02               	movwf	??_delay_ms& (0+255),b
 18644  00686E  0101               	movlb	1	; () banked
 18645  006870  5104               	movf	(delay_ms@i+1)& (0+255),w,b
 18646  006872  0A80               	xorlw	128
 18647  006874  0101               	movlb	1	; () banked
 18648  006876  5902               	subwfb	??_delay_ms& (0+255),w,b
 18649  006878  A0D8               	btfss	status,0,c
 18650  00687A  0012               	return	
 18651  00687C  D7E3               	goto	l10893
 18652  00687E                     __end_of_delay_ms:
 18653                           	opt stack 0
 18654                           tblptru	equ	0xFF8
 18655                           tblptrh	equ	0xFF7
 18656                           tblptrl	equ	0xFF6
 18657                           tablat	equ	0xFF5
 18658                           prodh	equ	0xFF4
 18659                           prodl	equ	0xFF3
 18660                           intcon	equ	0xFF2
 18661                           postinc0	equ	0xFEE
 18662                           wreg	equ	0xFE8
 18663                           postdec1	equ	0xFE5
 18664                           fsr1l	equ	0xFE1
 18665                           indf2	equ	0xFDF
 18666                           postinc2	equ	0xFDE
 18667                           postdec2	equ	0xFDD
 18668                           plusw2	equ	0xFDB
 18669                           fsr2h	equ	0xFDA
 18670                           fsr2l	equ	0xFD9
 18671                           status	equ	0xFD8
 18672                           
 18673 ;; *************** function _UARTConfig *****************
 18674 ;; Defined at:
 18675 ;;		line 81 in file "source/UARTConfig.h"
 18676 ;; Parameters:    Size  Location     Type
 18677 ;;		None
 18678 ;; Auto vars:     Size  Location     Type
 18679 ;;		None
 18680 ;; Return value:  Size  Location     Type
 18681 ;;                  1    wreg      void 
 18682 ;; Registers used:
 18683 ;;		wreg, status,2
 18684 ;; Tracked objects:
 18685 ;;		On entry : 0/0
 18686 ;;		On exit  : 0/0
 18687 ;;		Unchanged: 0/0
 18688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18689 ;;      Params:         0       0       0       0       0       0       0
 18690 ;;      Locals:         0       0       0       0       0       0       0
 18691 ;;      Temps:          0       0       0       0       0       0       0
 18692 ;;      Totals:         0       0       0       0       0       0       0
 18693 ;;Total ram usage:        0 bytes
 18694 ;; Hardware stack levels used:    1
 18695 ;; Hardware stack levels required when called:   12
 18696 ;; This function calls:
 18697 ;;		Nothing
 18698 ;; This function is called by:
 18699 ;;		_main
 18700 ;; This function uses a non-reentrant model
 18701 ;;
 18702                           
 18703                           	psect	text75
 18704  006942                     __ptext75:
 18705                           	opt stack 0
 18706  006942                     _UARTConfig:
 18707                           	opt stack 18
 18708                           
 18709                           ;UARTConfig.h: 82: RCSTA1bits.SPEN = 0;
 18710                           
 18711                           ; BSR set to: 1
 18712                           ;incstack = 0
 18713  006942  9EAB               	bcf	4011,7,c	;volatile
 18714                           
 18715                           ;UARTConfig.h: 83: SPBRGH1 = 0;
 18716  006944  0E00               	movlw	0
 18717  006946  6EB0               	movwf	4016,c	;volatile
 18718                           
 18719                           ;UARTConfig.h: 84: SPBRG1 = 34;
 18720  006948  0E22               	movlw	34
 18721  00694A  6EAF               	movwf	4015,c	;volatile
 18722                           
 18723                           ;UARTConfig.h: 85: ANSELCbits.ANSC6 = 0;
 18724  00694C  010F               	movlb	15	; () banked
 18725  00694E  9D3A               	bcf	58,6,b	;volatile
 18726                           
 18727                           ; BSR set to: 15
 18728                           ;UARTConfig.h: 86: ANSELCbits.ANSC7 = 0;
 18729  006950  010F               	movlb	15	; () banked
 18730  006952  9F3A               	bcf	58,7,b	;volatile
 18731                           
 18732                           ; BSR set to: 15
 18733                           ;UARTConfig.h: 87: TRISCbits.TRISC6 = 1;
 18734  006954  8C94               	bsf	3988,6,c	;volatile
 18735                           
 18736                           ; BSR set to: 15
 18737                           ;UARTConfig.h: 88: TRISCbits.TRISC7 = 1;
 18738  006956  8E94               	bsf	3988,7,c	;volatile
 18739                           
 18740                           ; BSR set to: 15
 18741                           ;UARTConfig.h: 89: TXSTA1bits.TX9 = 0;
 18742  006958  9CAC               	bcf	4012,6,c	;volatile
 18743                           
 18744                           ; BSR set to: 15
 18745                           ;UARTConfig.h: 90: TXSTA1bits.SYNC = 0;
 18746  00695A  98AC               	bcf	4012,4,c	;volatile
 18747                           
 18748                           ; BSR set to: 15
 18749                           ;UARTConfig.h: 91: TXSTA1bits.SENDB = 0;
 18750  00695C  96AC               	bcf	4012,3,c	;volatile
 18751                           
 18752                           ; BSR set to: 15
 18753                           ;UARTConfig.h: 92: TXSTA1bits.BRGH = 1;
 18754  00695E  84AC               	bsf	4012,2,c	;volatile
 18755                           
 18756                           ; BSR set to: 15
 18757                           ;UARTConfig.h: 93: RCSTA1bits.RX9 = 0;
 18758  006960  9CAB               	bcf	4011,6,c	;volatile
 18759                           
 18760                           ; BSR set to: 15
 18761                           ;UARTConfig.h: 94: BAUDCON1bits.DTRXP = 0;
 18762  006962  9AB8               	bcf	4024,5,c	;volatile
 18763                           
 18764                           ; BSR set to: 15
 18765                           ;UARTConfig.h: 95: BAUDCON1bits.CKTXP = 0;
 18766  006964  98B8               	bcf	4024,4,c	;volatile
 18767                           
 18768                           ; BSR set to: 15
 18769                           ;UARTConfig.h: 96: BAUDCON1bits.BRG16 = 1;
 18770  006966  86B8               	bsf	4024,3,c	;volatile
 18771                           
 18772                           ; BSR set to: 15
 18773                           ;UARTConfig.h: 97: BAUDCON1bits.WUE = 0;
 18774  006968  92B8               	bcf	4024,1,c	;volatile
 18775                           
 18776                           ; BSR set to: 15
 18777                           ;UARTConfig.h: 98: BAUDCON1bits.ABDEN = 0;
 18778  00696A  90B8               	bcf	4024,0,c	;volatile
 18779                           
 18780                           ; BSR set to: 15
 18781                           ;UARTConfig.h: 99: RCSTA1bits.CREN = 1;
 18782  00696C  88AB               	bsf	4011,4,c	;volatile
 18783                           
 18784                           ; BSR set to: 15
 18785                           ;UARTConfig.h: 100: TXSTA1bits.TXEN = 1;
 18786  00696E  8AAC               	bsf	4012,5,c	;volatile
 18787                           
 18788                           ; BSR set to: 15
 18789                           ;UARTConfig.h: 101: IPR1bits.RC1IP = 0;
 18790  006970  9A9F               	bcf	3999,5,c	;volatile
 18791                           
 18792                           ; BSR set to: 15
 18793                           ;UARTConfig.h: 102: PIR1bits.RC1IF = 0;
 18794  006972  9A9E               	bcf	3998,5,c	;volatile
 18795                           
 18796                           ; BSR set to: 15
 18797                           ;UARTConfig.h: 103: PIE1bits.RC1IE = 1;
 18798  006974  8A9D               	bsf	3997,5,c	;volatile
 18799                           
 18800                           ; BSR set to: 15
 18801                           ;UARTConfig.h: 104: RCSTA1bits.SPEN = 1;
 18802  006976  8EAB               	bsf	4011,7,c	;volatile
 18803                           
 18804                           ; BSR set to: 15
 18805  006978  0012               	return		;funcret
 18806  00697A                     __end_of_UARTConfig:
 18807                           	opt stack 0
 18808                           tblptru	equ	0xFF8
 18809                           tblptrh	equ	0xFF7
 18810                           tblptrl	equ	0xFF6
 18811                           tablat	equ	0xFF5
 18812                           prodh	equ	0xFF4
 18813                           prodl	equ	0xFF3
 18814                           intcon	equ	0xFF2
 18815                           postinc0	equ	0xFEE
 18816                           wreg	equ	0xFE8
 18817                           postdec1	equ	0xFE5
 18818                           fsr1l	equ	0xFE1
 18819                           indf2	equ	0xFDF
 18820                           postinc2	equ	0xFDE
 18821                           postdec2	equ	0xFDD
 18822                           plusw2	equ	0xFDB
 18823                           fsr2h	equ	0xFDA
 18824                           fsr2l	equ	0xFD9
 18825                           status	equ	0xFD8
 18826                           
 18827 ;; *************** function _PWM2Config *****************
 18828 ;; Defined at:
 18829 ;;		line 115 in file "source/PWMConfig.h"
 18830 ;; Parameters:    Size  Location     Type
 18831 ;;		None
 18832 ;; Auto vars:     Size  Location     Type
 18833 ;;		None
 18834 ;; Return value:  Size  Location     Type
 18835 ;;                  1    wreg      void 
 18836 ;; Registers used:
 18837 ;;		wreg, status,2, status,0, cstack
 18838 ;; Tracked objects:
 18839 ;;		On entry : 0/0
 18840 ;;		On exit  : 0/0
 18841 ;;		Unchanged: 0/0
 18842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18843 ;;      Params:         0       0       0       0       0       0       0
 18844 ;;      Locals:         0       0       0       0       0       0       0
 18845 ;;      Temps:          0       0       0       0       0       0       0
 18846 ;;      Totals:         0       0       0       0       0       0       0
 18847 ;;Total ram usage:        0 bytes
 18848 ;; Hardware stack levels used:    1
 18849 ;; Hardware stack levels required when called:   13
 18850 ;; This function calls:
 18851 ;;		_setPWM2duty
 18852 ;;		_t2config
 18853 ;; This function is called by:
 18854 ;;		_main
 18855 ;; This function uses a non-reentrant model
 18856 ;;
 18857                           
 18858                           	psect	text76
 18859  0064F2                     __ptext76:
 18860                           	opt stack 0
 18861  0064F2                     _PWM2Config:
 18862                           	opt stack 17
 18863                           
 18864                           ;PWMConfig.h: 116: TRISCbits.TRISC0 = 1;
 18865                           
 18866                           ; BSR set to: 15
 18867                           ;incstack = 0
 18868  0064F2  8094               	bsf	3988,0,c	;volatile
 18869                           
 18870                           ;PWMConfig.h: 117: TRISCbits.TRISC1 = 1;
 18871  0064F4  8294               	bsf	3988,1,c	;volatile
 18872                           
 18873                           ;PWMConfig.h: 118: PSTR2CONbits.STR2A = 1;
 18874  0064F6  8063               	bsf	3939,0,c	;volatile
 18875                           
 18876                           ;PWMConfig.h: 119: PSTR2CONbits.STR2B = 1;
 18877  0064F8  8263               	bsf	3939,1,c	;volatile
 18878                           
 18879                           ;PWMConfig.h: 120: PSTR2CONbits.STR2C = 0;
 18880  0064FA  9463               	bcf	3939,2,c	;volatile
 18881                           
 18882                           ;PWMConfig.h: 121: PSTR2CONbits.STR2D = 0;
 18883  0064FC  9663               	bcf	3939,3,c	;volatile
 18884                           
 18885                           ;PWMConfig.h: 122: CCPTMRS0bits.C2TSEL = 0b00;
 18886  0064FE  0EE7               	movlw	-25
 18887  006500  010F               	movlb	15	; () banked
 18888  006502  1749               	andwf	73,f,b	;volatile
 18889                           
 18890                           ;PWMConfig.h: 123: PR2 = 199;
 18891  006504  0EC7               	movlw	199
 18892  006506  6EBB               	movwf	4027,c	;volatile
 18893                           
 18894                           ; BSR set to: 15
 18895                           ;PWMConfig.h: 124: ECCP2ASbits.CCP2AS = 0b000;
 18896  006508  9864               	bcf	3940,4,c	;volatile
 18897  00650A  9A64               	bcf	3940,5,c	;volatile
 18898  00650C  9C64               	bcf	3940,6,c	;volatile
 18899                           
 18900                           ;PWMConfig.h: 125: ECCP2ASbits.PSS2AC = 0b00;
 18901  00650E  0EF3               	movlw	-13
 18902  006510  1664               	andwf	3940,f,c	;volatile
 18903                           
 18904                           ;PWMConfig.h: 126: ECCP2ASbits.PSS2BD = 0b00;
 18905  006512  0EFC               	movlw	-4
 18906  006514  1664               	andwf	3940,f,c	;volatile
 18907                           
 18908                           ; BSR set to: 15
 18909                           ;PWMConfig.h: 127: PWM2CONbits.P2RSEN = 0;
 18910  006516  9E65               	bcf	3941,7,c	;volatile
 18911                           
 18912                           ;PWMConfig.h: 128: ECCP2ASbits.CCP2AS = 1;
 18913  006518  5064               	movf	3940,w,c	;volatile
 18914  00651A  0B8F               	andlw	-113
 18915  00651C  0910               	iorlw	16
 18916  00651E  6E64               	movwf	3940,c	;volatile
 18917                           
 18918                           ;PWMConfig.h: 129: CCP2CONbits.P2M = 0b10;
 18919  006520  5066               	movf	3942,w,c	;volatile
 18920  006522  0B3F               	andlw	-193
 18921  006524  0980               	iorlw	128
 18922  006526  6E66               	movwf	3942,c	;volatile
 18923                           
 18924                           ;PWMConfig.h: 130: CCP2CONbits.CCP2M = 0b1100;
 18925  006528  5066               	movf	3942,w,c	;volatile
 18926  00652A  0BF0               	andlw	-16
 18927  00652C  090C               	iorlw	12
 18928  00652E  6E66               	movwf	3942,c	;volatile
 18929                           
 18930                           ; BSR set to: 15
 18931                           ;PWMConfig.h: 131: setPWM2duty(0);
 18932  006530  0E00               	movlw	0
 18933  006532  0101               	movlb	1	; () banked
 18934  006534  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 18935  006536  0E00               	movlw	0
 18936  006538  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 18937  00653A  EC7D  F02D         	call	_setPWM2duty	;wreg free
 18938                           
 18939                           ;PWMConfig.h: 132: PWM2CONbits.P2DC = 16;
 18940  00653E  9065               	bcf	3941,0,c	;volatile
 18941  006540  9265               	bcf	3941,1,c	;volatile
 18942  006542  9465               	bcf	3941,2,c	;volatile
 18943  006544  9665               	bcf	3941,3,c	;volatile
 18944  006546  8865               	bsf	3941,4,c	;volatile
 18945  006548  9A65               	bcf	3941,5,c	;volatile
 18946  00654A  9C65               	bcf	3941,6,c	;volatile
 18947                           
 18948                           ;PWMConfig.h: 133: t2config();
 18949  00654C  ECF2  F035         	call	_t2config	;wreg free
 18950                           
 18951                           ;PWMConfig.h: 134: TRISCbits.TRISC0 = 0;
 18952  006550  9094               	bcf	3988,0,c	;volatile
 18953                           
 18954                           ;PWMConfig.h: 135: TRISCbits.TRISC1 = 0;
 18955  006552  9294               	bcf	3988,1,c	;volatile
 18956                           
 18957                           ;PWMConfig.h: 136: ECCP2ASbits.CCP2ASE = 0;
 18958  006554  9E64               	bcf	3940,7,c	;volatile
 18959  006556  0012               	return		;funcret
 18960  006558                     __end_of_PWM2Config:
 18961                           	opt stack 0
 18962                           tblptru	equ	0xFF8
 18963                           tblptrh	equ	0xFF7
 18964                           tblptrl	equ	0xFF6
 18965                           tablat	equ	0xFF5
 18966                           prodh	equ	0xFF4
 18967                           prodl	equ	0xFF3
 18968                           intcon	equ	0xFF2
 18969                           postinc0	equ	0xFEE
 18970                           wreg	equ	0xFE8
 18971                           postdec1	equ	0xFE5
 18972                           fsr1l	equ	0xFE1
 18973                           indf2	equ	0xFDF
 18974                           postinc2	equ	0xFDE
 18975                           postdec2	equ	0xFDD
 18976                           plusw2	equ	0xFDB
 18977                           fsr2h	equ	0xFDA
 18978                           fsr2l	equ	0xFD9
 18979                           status	equ	0xFD8
 18980                           
 18981 ;; *************** function _t2config *****************
 18982 ;; Defined at:
 18983 ;;		line 22 in file "source/PWMConfig.h"
 18984 ;; Parameters:    Size  Location     Type
 18985 ;;		None
 18986 ;; Auto vars:     Size  Location     Type
 18987 ;;		None
 18988 ;; Return value:  Size  Location     Type
 18989 ;;                  1    wreg      void 
 18990 ;; Registers used:
 18991 ;;		wreg, status,2
 18992 ;; Tracked objects:
 18993 ;;		On entry : 0/0
 18994 ;;		On exit  : 0/0
 18995 ;;		Unchanged: 0/0
 18996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18997 ;;      Params:         0       0       0       0       0       0       0
 18998 ;;      Locals:         0       0       0       0       0       0       0
 18999 ;;      Temps:          0       0       0       0       0       0       0
 19000 ;;      Totals:         0       0       0       0       0       0       0
 19001 ;;Total ram usage:        0 bytes
 19002 ;; Hardware stack levels used:    1
 19003 ;; Hardware stack levels required when called:   12
 19004 ;; This function calls:
 19005 ;;		Nothing
 19006 ;; This function is called by:
 19007 ;;		_PWM2Config
 19008 ;; This function uses a non-reentrant model
 19009 ;;
 19010                           
 19011                           	psect	text77
 19012  006BE4                     __ptext77:
 19013                           	opt stack 0
 19014  006BE4                     _t2config:
 19015                           	opt stack 17
 19016                           
 19017                           ;PWMConfig.h: 23: T2CONbits.TMR2ON = 0;
 19018                           
 19019                           ;incstack = 0
 19020  006BE4  94BA               	bcf	4026,2,c	;volatile
 19021                           
 19022                           ;PWMConfig.h: 24: T2CONbits.T2CKPS = 0b00;
 19023  006BE6  0EFC               	movlw	-4
 19024  006BE8  16BA               	andwf	4026,f,c	;volatile
 19025                           
 19026                           ;PWMConfig.h: 25: T2CONbits.T2OUTPS = 0b1111;
 19027  006BEA  86BA               	bsf	4026,3,c	;volatile
 19028  006BEC  88BA               	bsf	4026,4,c	;volatile
 19029  006BEE  8ABA               	bsf	4026,5,c	;volatile
 19030  006BF0  8CBA               	bsf	4026,6,c	;volatile
 19031                           
 19032                           ;PWMConfig.h: 27: PIR1bits.TMR2IF = 0;
 19033  006BF2  929E               	bcf	3998,1,c	;volatile
 19034                           
 19035                           ;PWMConfig.h: 28: IPR1bits.TMR2IP = 0;
 19036  006BF4  929F               	bcf	3999,1,c	;volatile
 19037                           
 19038                           ;PWMConfig.h: 29: PIE1bits.TMR2IE = 1;
 19039  006BF6  829D               	bsf	3997,1,c	;volatile
 19040                           
 19041                           ;PWMConfig.h: 30: T2CONbits.TMR2ON = 1;
 19042  006BF8  84BA               	bsf	4026,2,c	;volatile
 19043  006BFA  0012               	return		;funcret
 19044  006BFC                     __end_of_t2config:
 19045                           	opt stack 0
 19046                           tblptru	equ	0xFF8
 19047                           tblptrh	equ	0xFF7
 19048                           tblptrl	equ	0xFF6
 19049                           tablat	equ	0xFF5
 19050                           prodh	equ	0xFF4
 19051                           prodl	equ	0xFF3
 19052                           intcon	equ	0xFF2
 19053                           postinc0	equ	0xFEE
 19054                           wreg	equ	0xFE8
 19055                           postdec1	equ	0xFE5
 19056                           fsr1l	equ	0xFE1
 19057                           indf2	equ	0xFDF
 19058                           postinc2	equ	0xFDE
 19059                           postdec2	equ	0xFDD
 19060                           plusw2	equ	0xFDB
 19061                           fsr2h	equ	0xFDA
 19062                           fsr2l	equ	0xFD9
 19063                           status	equ	0xFD8
 19064                           
 19065 ;; *************** function _setPWM2duty *****************
 19066 ;; Defined at:
 19067 ;;		line 33 in file "source/PWMConfig.h"
 19068 ;; Parameters:    Size  Location     Type
 19069 ;;  actuator        2    0[BANK1 ] short 
 19070 ;; Auto vars:     Size  Location     Type
 19071 ;;  act             2    4[BANK1 ] short 
 19072 ;; Return value:  Size  Location     Type
 19073 ;;                  1    wreg      void 
 19074 ;; Registers used:
 19075 ;;		wreg, status,2, status,0
 19076 ;; Tracked objects:
 19077 ;;		On entry : 0/0
 19078 ;;		On exit  : 0/0
 19079 ;;		Unchanged: 0/0
 19080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19081 ;;      Params:         0       0       2       0       0       0       0
 19082 ;;      Locals:         0       0       2       0       0       0       0
 19083 ;;      Temps:          0       0       2       0       0       0       0
 19084 ;;      Totals:         0       0       6       0       0       0       0
 19085 ;;Total ram usage:        6 bytes
 19086 ;; Hardware stack levels used:    1
 19087 ;; Hardware stack levels required when called:   12
 19088 ;; This function calls:
 19089 ;;		Nothing
 19090 ;; This function is called by:
 19091 ;;		_PWM2Config
 19092 ;;		_pressENTER
 19093 ;;		_longPressENTER
 19094 ;;		_main
 19095 ;; This function uses a non-reentrant model
 19096 ;;
 19097                           
 19098                           	psect	text78
 19099  005AFA                     __ptext78:
 19100                           	opt stack 0
 19101  005AFA                     _setPWM2duty:
 19102                           	opt stack 18
 19103                           
 19104                           ;PWMConfig.h: 34: short act = 400;
 19105                           
 19106                           ;incstack = 0
 19107  005AFA  0E01               	movlw	1
 19108  005AFC  0101               	movlb	1	; () banked
 19109  005AFE  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19110  005B00  0E90               	movlw	144
 19111  005B02  6F04               	movwf	setPWM2duty@act& (0+255),b
 19112                           
 19113                           ; BSR set to: 1
 19114                           ;PWMConfig.h: 35: if(actuator > 400)
 19115  005B04  0101               	movlb	1	; () banked
 19116  005B06  BF01               	btfsc	(setPWM2duty@actuator+1)& (0+255),7,b
 19117  005B08  D00D               	goto	l10545
 19118  005B0A  0E91               	movlw	145
 19119  005B0C  0101               	movlb	1	; () banked
 19120  005B0E  5D00               	subwf	setPWM2duty@actuator& (0+255),w,b
 19121  005B10  0E01               	movlw	1
 19122  005B12  0101               	movlb	1	; () banked
 19123  005B14  5901               	subwfb	(setPWM2duty@actuator+1)& (0+255),w,b
 19124  005B16  A0D8               	btfss	status,0,c
 19125  005B18  D005               	goto	l10545
 19126                           
 19127                           ; BSR set to: 1
 19128                           ;PWMConfig.h: 36: act = 800;
 19129  005B1A  0E03               	movlw	3
 19130  005B1C  0101               	movlb	1	; () banked
 19131  005B1E  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19132  005B20  0E20               	movlw	32
 19133  005B22  D00F               	goto	L7
 19134  005B24                     l10545:
 19135                           
 19136                           ; BSR set to: 1
 19137                           ;PWMConfig.h: 37: else if(actuator < -400)
 19138  005B24  0101               	movlb	1	; () banked
 19139  005B26  AF01               	btfss	(setPWM2duty@actuator+1)& (0+255),7,b
 19140  005B28  D00E               	goto	l10549
 19141  005B2A  0E70               	movlw	112
 19142  005B2C  0101               	movlb	1	; () banked
 19143  005B2E  5D00               	subwf	setPWM2duty@actuator& (0+255),w,b
 19144  005B30  0EFE               	movlw	254
 19145  005B32  0101               	movlb	1	; () banked
 19146  005B34  5901               	subwfb	(setPWM2duty@actuator+1)& (0+255),w,b
 19147  005B36  B0D8               	btfsc	status,0,c
 19148  005B38  D006               	goto	l10549
 19149                           
 19150                           ; BSR set to: 1
 19151                           ;PWMConfig.h: 38: act = 0;
 19152  005B3A  0E00               	movlw	0
 19153  005B3C  0101               	movlb	1	; () banked
 19154  005B3E  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19155  005B40  0E00               	movlw	0
 19156  005B42                     L7:
 19157  005B42  6F04               	movwf	setPWM2duty@act& (0+255),b
 19158  005B44  D00A               	goto	l476
 19159  005B46                     l10549:
 19160                           
 19161                           ; BSR set to: 1
 19162                           ;PWMConfig.h: 39: else
 19163                           ;PWMConfig.h: 40: act = actuator + 400;
 19164  005B46  0E90               	movlw	144
 19165  005B48  0101               	movlb	1	; () banked
 19166  005B4A  2500               	addwf	setPWM2duty@actuator& (0+255),w,b
 19167  005B4C  0101               	movlb	1	; () banked
 19168  005B4E  6F04               	movwf	setPWM2duty@act& (0+255),b
 19169  005B50  0E01               	movlw	1
 19170  005B52  0101               	movlb	1	; () banked
 19171  005B54  2101               	addwfc	(setPWM2duty@actuator+1)& (0+255),w,b
 19172  005B56  0101               	movlb	1	; () banked
 19173  005B58  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19174  005B5A                     l476:
 19175                           
 19176                           ; BSR set to: 1
 19177                           ;PWMConfig.h: 41: CCP2CONbits.DC2B = act;
 19178  005B5A  C104  F102         	movff	setPWM2duty@act,??_setPWM2duty
 19179  005B5E  0101               	movlb	1	; () banked
 19180  005B60  3B02               	swapf	??_setPWM2duty& (0+255),f,b
 19181  005B62  5066               	movf	3942,w,c	;volatile
 19182  005B64  0101               	movlb	1	; () banked
 19183  005B66  1902               	xorwf	??_setPWM2duty& (0+255),w,b
 19184  005B68  0BCF               	andlw	-49
 19185  005B6A  1902               	xorwf	??_setPWM2duty& (0+255),w,b
 19186  005B6C  6E66               	movwf	3942,c	;volatile
 19187                           
 19188                           ;PWMConfig.h: 42: CCPR2L = act>>2;
 19189  005B6E  C104  F102         	movff	setPWM2duty@act,??_setPWM2duty
 19190  005B72  C105  F103         	movff	setPWM2duty@act+1,??_setPWM2duty+1
 19191  005B76  0101               	movlb	1	; () banked
 19192  005B78  3503               	rlcf	(??_setPWM2duty+1)& (0+255),w,b
 19193  005B7A  3303               	rrcf	(??_setPWM2duty+1)& (0+255),f,b
 19194  005B7C  3302               	rrcf	??_setPWM2duty& (0+255),f,b
 19195  005B7E  0101               	movlb	1	; () banked
 19196  005B80  3503               	rlcf	(??_setPWM2duty+1)& (0+255),w,b
 19197  005B82  3303               	rrcf	(??_setPWM2duty+1)& (0+255),f,b
 19198  005B84  3302               	rrcf	??_setPWM2duty& (0+255),f,b
 19199  005B86  0101               	movlb	1	; () banked
 19200  005B88  5102               	movf	??_setPWM2duty& (0+255),w,b
 19201  005B8A  6E67               	movwf	3943,c	;volatile
 19202                           
 19203                           ; BSR set to: 1
 19204  005B8C  0012               	return		;funcret
 19205  005B8E                     __end_of_setPWM2duty:
 19206                           	opt stack 0
 19207                           tblptru	equ	0xFF8
 19208                           tblptrh	equ	0xFF7
 19209                           tblptrl	equ	0xFF6
 19210                           tablat	equ	0xFF5
 19211                           prodh	equ	0xFF4
 19212                           prodl	equ	0xFF3
 19213                           intcon	equ	0xFF2
 19214                           postinc0	equ	0xFEE
 19215                           wreg	equ	0xFE8
 19216                           postdec1	equ	0xFE5
 19217                           fsr1l	equ	0xFE1
 19218                           indf2	equ	0xFDF
 19219                           postinc2	equ	0xFDE
 19220                           postdec2	equ	0xFDD
 19221                           plusw2	equ	0xFDB
 19222                           fsr2h	equ	0xFDA
 19223                           fsr2l	equ	0xFD9
 19224                           status	equ	0xFD8
 19225                           
 19226 ;; *************** function _EEPROMConfig *****************
 19227 ;; Defined at:
 19228 ;;		line 70 in file "source/sysParams.h"
 19229 ;; Parameters:    Size  Location     Type
 19230 ;;		None
 19231 ;; Auto vars:     Size  Location     Type
 19232 ;;		None
 19233 ;; Return value:  Size  Location     Type
 19234 ;;                  1    wreg      void 
 19235 ;; Registers used:
 19236 ;;		None
 19237 ;; Tracked objects:
 19238 ;;		On entry : 0/0
 19239 ;;		On exit  : 0/0
 19240 ;;		Unchanged: 0/0
 19241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19242 ;;      Params:         0       0       0       0       0       0       0
 19243 ;;      Locals:         0       0       0       0       0       0       0
 19244 ;;      Temps:          0       0       0       0       0       0       0
 19245 ;;      Totals:         0       0       0       0       0       0       0
 19246 ;;Total ram usage:        0 bytes
 19247 ;; Hardware stack levels used:    1
 19248 ;; Hardware stack levels required when called:   12
 19249 ;; This function calls:
 19250 ;;		Nothing
 19251 ;; This function is called by:
 19252 ;;		_main
 19253 ;; This function uses a non-reentrant model
 19254 ;;
 19255                           
 19256                           	psect	text79
 19257  006CC0                     __ptext79:
 19258                           	opt stack 0
 19259  006CC0                     _EEPROMConfig:
 19260                           	opt stack 18
 19261                           
 19262                           ;sysParams.h: 71: EECON1bits.WREN = 0;
 19263                           
 19264                           ; BSR set to: 1
 19265                           ;incstack = 0
 19266  006CC0  94A6               	bcf	4006,2,c	;volatile
 19267                           
 19268                           ;sysParams.h: 72: EECON1bits.FREE = 0;
 19269  006CC2  98A6               	bcf	4006,4,c	;volatile
 19270  006CC4  0012               	return		;funcret
 19271  006CC6                     __end_of_EEPROMConfig:
 19272                           	opt stack 0
 19273                           tblptru	equ	0xFF8
 19274                           tblptrh	equ	0xFF7
 19275                           tblptrl	equ	0xFF6
 19276                           tablat	equ	0xFF5
 19277                           prodh	equ	0xFF4
 19278                           prodl	equ	0xFF3
 19279                           intcon	equ	0xFF2
 19280                           postinc0	equ	0xFEE
 19281                           wreg	equ	0xFE8
 19282                           postdec1	equ	0xFE5
 19283                           fsr1l	equ	0xFE1
 19284                           indf2	equ	0xFDF
 19285                           postinc2	equ	0xFDE
 19286                           postdec2	equ	0xFDD
 19287                           plusw2	equ	0xFDB
 19288                           fsr2h	equ	0xFDA
 19289                           fsr2l	equ	0xFD9
 19290                           status	equ	0xFD8
 19291                           
 19292 ;; *************** function _isr *****************
 19293 ;; Defined at:
 19294 ;;		line 21 in file "source/main.c"
 19295 ;; Parameters:    Size  Location     Type
 19296 ;;		None
 19297 ;; Auto vars:     Size  Location     Type
 19298 ;;		None
 19299 ;; Return value:  Size  Location     Type
 19300 ;;                  1    wreg      void 
 19301 ;; Registers used:
 19302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19303 ;; Tracked objects:
 19304 ;;		On entry : 0/0
 19305 ;;		On exit  : 0/0
 19306 ;;		Unchanged: 0/0
 19307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19308 ;;      Params:         0       0       0       0       0       0       0
 19309 ;;      Locals:         0       0       0       0       0       0       0
 19310 ;;      Temps:          0      17       0       0       0       0       0
 19311 ;;      Totals:         0      17       0       0       0       0       0
 19312 ;;Total ram usage:       17 bytes
 19313 ;; Hardware stack levels used:    1
 19314 ;; Hardware stack levels required when called:   11
 19315 ;; This function calls:
 19316 ;;		_T2int
 19317 ;;		_UARTint
 19318 ;; This function is called by:
 19319 ;;		Interrupt level 1
 19320 ;; This function uses a non-reentrant model
 19321 ;;
 19322                           
 19323                           	psect	intcodelo
 19324  000018                     __pintcodelo:
 19325                           	opt stack 0
 19326  000018                     _isr:
 19327                           	opt stack 9
 19328                           
 19329                           ;incstack = 0
 19330  000018  8051               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 19331  00001A  CFD8 F094          	movff	status,??_isr
 19332  00001E  CFE8 F095          	movff	wreg,??_isr+1
 19333  000022  CFE0 F096          	movff	bsr,??_isr+2
 19334  000026  CFFA F097          	movff	pclath,??_isr+3
 19335  00002A  CFFB F098          	movff	pclatu,??_isr+4
 19336  00002E  CFE9 F099          	movff	fsr0l,??_isr+5
 19337  000032  CFEA F09A          	movff	fsr0h,??_isr+6
 19338  000036  CFE1 F09B          	movff	fsr1l,??_isr+7
 19339  00003A  CFE2 F09C          	movff	fsr1h,??_isr+8
 19340  00003E  CFD9 F09D          	movff	fsr2l,??_isr+9
 19341  000042  CFDA F09E          	movff	fsr2h,??_isr+10
 19342  000046  CFF3 F09F          	movff	prodl,??_isr+11
 19343  00004A  CFF4 F0A0          	movff	prodh,??_isr+12
 19344  00004E  CFF6 F0A1          	movff	tblptrl,??_isr+13
 19345  000052  CFF7 F0A2          	movff	tblptrh,??_isr+14
 19346  000056  CFF8 F0A3          	movff	tblptru,??_isr+15
 19347  00005A  CFF5 F0A4          	movff	tablat,??_isr+16
 19348                           
 19349                           ;main.c: 22: if(PIE1bits.RC1IE && PIR1bits.RC1IF) {
 19350  00005E  BA9D               	btfsc	3997,5,c	;volatile
 19351  000060  AA9E               	btfss	3998,5,c	;volatile
 19352  000062  D003               	goto	i1l12599
 19353                           
 19354                           ;main.c: 23: UARTint();
 19355  000064  EC1E  F020         	call	_UARTint	;wreg free
 19356                           
 19357                           ;main.c: 24: PIR1bits.RC1IF = 0;
 19358  000068  9A9E               	bcf	3998,5,c	;volatile
 19359  00006A                     i1l12599:
 19360                           
 19361                           ;main.c: 25: }
 19362                           ;main.c: 26: if(PIE1bits.TMR2IE && PIR1bits.TMR2IF) {
 19363  00006A  B29D               	btfsc	3997,1,c	;volatile
 19364  00006C  A29E               	btfss	3998,1,c	;volatile
 19365  00006E  D003               	goto	i1l881
 19366                           
 19367                           ;main.c: 27: T2int();
 19368  000070  EC65  F018         	call	_T2int	;wreg free
 19369                           
 19370                           ;main.c: 28: PIR1bits.TMR2IF = 0;
 19371  000074  929E               	bcf	3998,1,c	;volatile
 19372  000076                     i1l881:
 19373  000076  C0A4  FFF5         	movff	??_isr+16,tablat
 19374  00007A  C0A3  FFF8         	movff	??_isr+15,tblptru
 19375  00007E  C0A2  FFF7         	movff	??_isr+14,tblptrh
 19376  000082  C0A1  FFF6         	movff	??_isr+13,tblptrl
 19377  000086  C0A0  FFF4         	movff	??_isr+12,prodh
 19378  00008A  C09F  FFF3         	movff	??_isr+11,prodl
 19379  00008E  C09E  FFDA         	movff	??_isr+10,fsr2h
 19380  000092  C09D  FFD9         	movff	??_isr+9,fsr2l
 19381  000096  C09C  FFE2         	movff	??_isr+8,fsr1h
 19382  00009A  C09B  FFE1         	movff	??_isr+7,fsr1l
 19383  00009E  C09A  FFEA         	movff	??_isr+6,fsr0h
 19384  0000A2  C099  FFE9         	movff	??_isr+5,fsr0l
 19385  0000A6  C098  FFFB         	movff	??_isr+4,pclatu
 19386  0000AA  C097  FFFA         	movff	??_isr+3,pclath
 19387  0000AE  C096  FFE0         	movff	??_isr+2,bsr
 19388  0000B2  C095  FFE8         	movff	??_isr+1,wreg
 19389  0000B6  C094  FFD8         	movff	??_isr,status
 19390  0000BA  9051               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 19391  0000BC  0010               	retfie	
 19392  0000BE                     __end_of_isr:
 19393                           	opt stack 0
 19394                           pclatu	equ	0xFFB
 19395                           pclath	equ	0xFFA
 19396                           tblptru	equ	0xFF8
 19397                           tblptrh	equ	0xFF7
 19398                           tblptrl	equ	0xFF6
 19399                           tablat	equ	0xFF5
 19400                           prodh	equ	0xFF4
 19401                           prodl	equ	0xFF3
 19402                           intcon	equ	0xFF2
 19403                           postinc0	equ	0xFEE
 19404                           fsr0h	equ	0xFEA
 19405                           fsr0l	equ	0xFE9
 19406                           wreg	equ	0xFE8
 19407                           postdec1	equ	0xFE5
 19408                           fsr1h	equ	0xFE2
 19409                           fsr1l	equ	0xFE1
 19410                           bsr	equ	0xFE0
 19411                           indf2	equ	0xFDF
 19412                           postinc2	equ	0xFDE
 19413                           postdec2	equ	0xFDD
 19414                           plusw2	equ	0xFDB
 19415                           fsr2h	equ	0xFDA
 19416                           fsr2l	equ	0xFD9
 19417                           status	equ	0xFD8
 19418                           
 19419 ;; *************** function _UARTint *****************
 19420 ;; Defined at:
 19421 ;;		line 11 in file "source/UARTConfig.h"
 19422 ;; Parameters:    Size  Location     Type
 19423 ;;		None
 19424 ;; Auto vars:     Size  Location     Type
 19425 ;;  sas             1   51[BANK0 ] unsigned char 
 19426 ;; Return value:  Size  Location     Type
 19427 ;;                  1    wreg      void 
 19428 ;; Registers used:
 19429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19430 ;; Tracked objects:
 19431 ;;		On entry : 0/0
 19432 ;;		On exit  : 0/0
 19433 ;;		Unchanged: 0/0
 19434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19435 ;;      Params:         0       0       0       0       0       0       0
 19436 ;;      Locals:         0       1       0       0       0       0       0
 19437 ;;      Temps:          0       0       0       0       0       0       0
 19438 ;;      Totals:         0       1       0       0       0       0       0
 19439 ;;Total ram usage:        1 bytes
 19440 ;; Hardware stack levels used:    1
 19441 ;; Hardware stack levels required when called:   10
 19442 ;; This function calls:
 19443 ;;		_loadSysParams
 19444 ;;		_putchUART
 19445 ;;		i1_longPressDOWN
 19446 ;;		i1_longPressENTER
 19447 ;;		i1_longPressRETRO
 19448 ;;		i1_longPressUP
 19449 ;;		i1_pressDOWN
 19450 ;;		i1_pressENTER
 19451 ;;		i1_pressRETRO
 19452 ;;		i1_pressUP
 19453 ;;		i1_saveSysParams
 19454 ;;		i1_sysParamInit
 19455 ;; This function is called by:
 19456 ;;		_isr
 19457 ;; This function uses a non-reentrant model
 19458 ;;
 19459                           
 19460                           	psect	text81
 19461  00403C                     __ptext81:
 19462                           	opt stack 0
 19463  00403C                     _UARTint:
 19464                           	opt stack 9
 19465                           
 19466                           ;UARTConfig.h: 12: char sas = RCREG1;
 19467                           
 19468                           ;incstack = 0
 19469  00403C  CFAE F093          	movff	4014,UARTint@sas	;volatile
 19470                           
 19471                           ;UARTConfig.h: 13: if(sas == 'A') {
 19472  004040  0E41               	movlw	65
 19473  004042  0100               	movlb	0	; () banked
 19474  004044  1993               	xorwf	UARTint@sas& (0+255),w,b
 19475  004046  A4D8               	btfss	status,2,c
 19476  004048  D00D               	goto	i1l12229
 19477                           
 19478                           ; BSR set to: 0
 19479                           ;UARTConfig.h: 14: putchUART(actualScreen);
 19480  00404A  0101               	movlb	1	; () banked
 19481  00404C  51BA               	movf	_actualScreen& (0+255),w,b
 19482  00404E  EC3F  F036         	call	_putchUART
 19483                           
 19484                           ;UARTConfig.h: 15: putchUART(menuSection);
 19485  004052  0101               	movlb	1	; () banked
 19486  004054  51C1               	movf	_menuSection& (0+255),w,b
 19487  004056  EC3F  F036         	call	_putchUART
 19488                           
 19489                           ;UARTConfig.h: 16: putchUART(passSection);
 19490  00405A  0101               	movlb	1	; () banked
 19491  00405C  51C2               	movf	_passSection& (0+255),w,b
 19492  00405E  EC3F  F036         	call	_putchUART
 19493                           
 19494                           ;UARTConfig.h: 17: }else if(sas == 'B') {
 19495  004062  0012               	return	
 19496  004064                     i1l12229:
 19497  004064  0E42               	movlw	66
 19498  004066  0100               	movlb	0	; () banked
 19499  004068  1993               	xorwf	UARTint@sas& (0+255),w,b
 19500  00406A  A4D8               	btfss	status,2,c
 19501  00406C  D003               	goto	i1l12233
 19502                           
 19503                           ; BSR set to: 0
 19504                           ;UARTConfig.h: 18: saveSysParams();
 19505  00406E  ECEF  F029         	call	i1_saveSysParams	;wreg free
 19506                           
 19507                           ;UARTConfig.h: 19: }else if(sas == 'C') {
 19508  004072  0012               	return	
 19509  004074                     i1l12233:
 19510  004074  0E43               	movlw	67
 19511  004076  0100               	movlb	0	; () banked
 19512  004078  1993               	xorwf	UARTint@sas& (0+255),w,b
 19513  00407A  A4D8               	btfss	status,2,c
 19514  00407C  D003               	goto	i1l12237
 19515                           
 19516                           ; BSR set to: 0
 19517                           ;UARTConfig.h: 20: sysParamInit();
 19518  00407E  EC15  F028         	call	i1_sysParamInit	;wreg free
 19519                           
 19520                           ;UARTConfig.h: 21: }else if(sas == 'D') {
 19521  004082  0012               	return	
 19522  004084                     i1l12237:
 19523  004084  0E44               	movlw	68
 19524  004086  0100               	movlb	0	; () banked
 19525  004088  1993               	xorwf	UARTint@sas& (0+255),w,b
 19526  00408A  A4D8               	btfss	status,2,c
 19527  00408C  D003               	goto	i1l12241
 19528                           
 19529                           ; BSR set to: 0
 19530                           ;UARTConfig.h: 22: loadSysParams();
 19531  00408E  EC5C  F033         	call	_loadSysParams	;wreg free
 19532                           
 19533                           ;UARTConfig.h: 23: }else if(sas == 'E') {
 19534  004092  0012               	return	
 19535  004094                     i1l12241:
 19536  004094  0E45               	movlw	69
 19537  004096  0100               	movlb	0	; () banked
 19538  004098  1993               	xorwf	UARTint@sas& (0+255),w,b
 19539  00409A  B4D8               	btfsc	status,2,c
 19540  00409C  0012               	return	
 19541                           
 19542                           ; BSR set to: 0
 19543                           ;UARTConfig.h: 57: else if(sas == 'R') {
 19544                           
 19545                           ; BSR set to: 0
 19546                           
 19547                           ; BSR set to: 0
 19548                           ;UARTConfig.h: 25: }
 19549  00409E  0E52               	movlw	82
 19550  0040A0  0100               	movlb	0	; () banked
 19551  0040A2  1993               	xorwf	UARTint@sas& (0+255),w,b
 19552  0040A4  A4D8               	btfss	status,2,c
 19553  0040A6  D014               	goto	i1l12255
 19554                           
 19555                           ; BSR set to: 0
 19556                           ;UARTConfig.h: 58: if(actualScreen == 0) {
 19557  0040A8  0101               	movlb	1	; () banked
 19558  0040AA  51BA               	movf	_actualScreen& (0+255),w,b
 19559  0040AC  A4D8               	btfss	status,2,c
 19560  0040AE  D007               	goto	i1l12251
 19561                           
 19562                           ; BSR set to: 1
 19563                           ;UARTConfig.h: 59: actualScreen = 1;
 19564  0040B0  0E01               	movlw	1
 19565  0040B2  0101               	movlb	1	; () banked
 19566  0040B4  6FBA               	movwf	_actualScreen& (0+255),b
 19567                           
 19568                           ;UARTConfig.h: 60: fd = 0;
 19569  0040B6  0E00               	movlw	0
 19570  0040B8  0101               	movlb	1	; () banked
 19571  0040BA  6FBC               	movwf	_fd& (0+255),b
 19572                           
 19573                           ;UARTConfig.h: 61: }else if(actualScreen == 4)
 19574  0040BC  0012               	return	
 19575  0040BE                     i1l12251:
 19576                           
 19577                           ; BSR set to: 1
 19578  0040BE  0E04               	movlw	4
 19579  0040C0  0101               	movlb	1	; () banked
 19580  0040C2  19BA               	xorwf	_actualScreen& (0+255),w,b
 19581  0040C4  A4D8               	btfss	status,2,c
 19582  0040C6  0012               	return	
 19583                           
 19584                           ; BSR set to: 1
 19585                           ;UARTConfig.h: 62: actualScreen = 9;
 19586  0040C8  0E09               	movlw	9
 19587  0040CA  0101               	movlb	1	; () banked
 19588  0040CC  6FBA               	movwf	_actualScreen& (0+255),b
 19589                           
 19590                           ; BSR set to: 1
 19591                           ;UARTConfig.h: 63: }else if(sas == 'S')
 19592                           
 19593                           ; BSR set to: 1
 19594  0040CE  0012               	return	
 19595  0040D0                     i1l12255:
 19596  0040D0  0E53               	movlw	83
 19597  0040D2  0100               	movlb	0	; () banked
 19598  0040D4  1993               	xorwf	UARTint@sas& (0+255),w,b
 19599  0040D6  A4D8               	btfss	status,2,c
 19600  0040D8  D003               	goto	i1l12259
 19601                           
 19602                           ; BSR set to: 0
 19603                           ;UARTConfig.h: 64: pressUP();
 19604  0040DA  EC31  F021         	call	i1_pressUP	;wreg free
 19605  0040DE  0012               	return	
 19606  0040E0                     i1l12259:
 19607                           
 19608                           ;UARTConfig.h: 65: else if(sas == 'T')
 19609  0040E0  0E54               	movlw	84
 19610  0040E2  0100               	movlb	0	; () banked
 19611  0040E4  1993               	xorwf	UARTint@sas& (0+255),w,b
 19612  0040E6  A4D8               	btfss	status,2,c
 19613  0040E8  D003               	goto	i1l12263
 19614                           
 19615                           ; BSR set to: 0
 19616                           ;UARTConfig.h: 66: pressDOWN();
 19617  0040EA  EC4B  F023         	call	i1_pressDOWN	;wreg free
 19618  0040EE  0012               	return	
 19619  0040F0                     i1l12263:
 19620                           
 19621                           ;UARTConfig.h: 67: else if(sas == 'U')
 19622  0040F0  0E55               	movlw	85
 19623  0040F2  0100               	movlb	0	; () banked
 19624  0040F4  1993               	xorwf	UARTint@sas& (0+255),w,b
 19625  0040F6  A4D8               	btfss	status,2,c
 19626  0040F8  D003               	goto	i1l12267
 19627                           
 19628                           ; BSR set to: 0
 19629                           ;UARTConfig.h: 68: pressRETRO();
 19630  0040FA  ECE2  F02C         	call	i1_pressRETRO	;wreg free
 19631  0040FE  0012               	return	
 19632  004100                     i1l12267:
 19633                           
 19634                           ;UARTConfig.h: 69: else if(sas == 'V')
 19635  004100  0E56               	movlw	86
 19636  004102  0100               	movlb	0	; () banked
 19637  004104  1993               	xorwf	UARTint@sas& (0+255),w,b
 19638  004106  A4D8               	btfss	status,2,c
 19639  004108  D003               	goto	i1l12271
 19640                           
 19641                           ; BSR set to: 0
 19642                           ;UARTConfig.h: 70: pressENTER();
 19643  00410A  EC73  F00E         	call	i1_pressENTER	;wreg free
 19644  00410E  0012               	return	
 19645  004110                     i1l12271:
 19646                           
 19647                           ;UARTConfig.h: 71: else if(sas == 'W')
 19648  004110  0E57               	movlw	87
 19649  004112  0100               	movlb	0	; () banked
 19650  004114  1993               	xorwf	UARTint@sas& (0+255),w,b
 19651  004116  A4D8               	btfss	status,2,c
 19652  004118  D003               	goto	i1l12275
 19653                           
 19654                           ; BSR set to: 0
 19655                           ;UARTConfig.h: 72: longPressUP();
 19656  00411A  EC9D  F031         	call	i1_longPressUP	;wreg free
 19657  00411E  0012               	return	
 19658  004120                     i1l12275:
 19659                           
 19660                           ;UARTConfig.h: 73: else if(sas == 'X')
 19661  004120  0E58               	movlw	88
 19662  004122  0100               	movlb	0	; () banked
 19663  004124  1993               	xorwf	UARTint@sas& (0+255),w,b
 19664  004126  A4D8               	btfss	status,2,c
 19665  004128  D003               	goto	i1l12279
 19666                           
 19667                           ; BSR set to: 0
 19668                           ;UARTConfig.h: 74: longPressDOWN();
 19669  00412A  EC79  F035         	call	i1_longPressDOWN	;wreg free
 19670  00412E  0012               	return	
 19671  004130                     i1l12279:
 19672                           
 19673                           ;UARTConfig.h: 75: else if(sas == 'Y')
 19674  004130  0E59               	movlw	89
 19675  004132  0100               	movlb	0	; () banked
 19676  004134  1993               	xorwf	UARTint@sas& (0+255),w,b
 19677  004136  A4D8               	btfss	status,2,c
 19678  004138  D003               	goto	i1l12283
 19679                           
 19680                           ; BSR set to: 0
 19681                           ;UARTConfig.h: 76: longPressRETRO();
 19682  00413A  EC04  F033         	call	i1_longPressRETRO	;wreg free
 19683  00413E  0012               	return	
 19684  004140                     i1l12283:
 19685                           
 19686                           ;UARTConfig.h: 77: else if(sas == 'Z')
 19687  004140  0E5A               	movlw	90
 19688  004142  0100               	movlb	0	; () banked
 19689  004144  1993               	xorwf	UARTint@sas& (0+255),w,b
 19690  004146  A4D8               	btfss	status,2,c
 19691  004148  0012               	return	
 19692                           
 19693                           ; BSR set to: 0
 19694                           ;UARTConfig.h: 78: longPressENTER();
 19695  00414A  EC3F  F00A         	call	i1_longPressENTER	;wreg free
 19696  00414E  0012               	return	
 19697  004150                     __end_of_UARTint:
 19698                           	opt stack 0
 19699                           pclatu	equ	0xFFB
 19700                           pclath	equ	0xFFA
 19701                           tblptru	equ	0xFF8
 19702                           tblptrh	equ	0xFF7
 19703                           tblptrl	equ	0xFF6
 19704                           tablat	equ	0xFF5
 19705                           prodh	equ	0xFF4
 19706                           prodl	equ	0xFF3
 19707                           intcon	equ	0xFF2
 19708                           postinc0	equ	0xFEE
 19709                           fsr0h	equ	0xFEA
 19710                           fsr0l	equ	0xFE9
 19711                           wreg	equ	0xFE8
 19712                           postdec1	equ	0xFE5
 19713                           fsr1h	equ	0xFE2
 19714                           fsr1l	equ	0xFE1
 19715                           bsr	equ	0xFE0
 19716                           indf2	equ	0xFDF
 19717                           postinc2	equ	0xFDE
 19718                           postdec2	equ	0xFDD
 19719                           plusw2	equ	0xFDB
 19720                           fsr2h	equ	0xFDA
 19721                           fsr2l	equ	0xFD9
 19722                           status	equ	0xFD8
 19723                           
 19724 ;; *************** function i1_sysParamInit *****************
 19725 ;; Defined at:
 19726 ;;		line 165 in file "source/sysParams.h"
 19727 ;; Parameters:    Size  Location     Type
 19728 ;;		None
 19729 ;; Auto vars:     Size  Location     Type
 19730 ;;		None
 19731 ;; Return value:  Size  Location     Type
 19732 ;;                  1    wreg      void 
 19733 ;; Registers used:
 19734 ;;		wreg, status,2, status,0, cstack
 19735 ;; Tracked objects:
 19736 ;;		On entry : 0/0
 19737 ;;		On exit  : 0/0
 19738 ;;		Unchanged: 0/0
 19739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19740 ;;      Params:         0       0       0       0       0       0       0
 19741 ;;      Locals:         0       0       0       0       0       0       0
 19742 ;;      Temps:          0       1       0       0       0       0       0
 19743 ;;      Totals:         0       1       0       0       0       0       0
 19744 ;;Total ram usage:        1 bytes
 19745 ;; Hardware stack levels used:    1
 19746 ;; Hardware stack levels required when called:    7
 19747 ;; This function calls:
 19748 ;;		i1_calcSysVars
 19749 ;;		i1_readEEPROM
 19750 ;; This function is called by:
 19751 ;;		_UARTint
 19752 ;; This function uses a non-reentrant model
 19753 ;;
 19754                           
 19755                           	psect	text82
 19756  00502A                     __ptext82:
 19757                           	opt stack 0
 19758  00502A                     i1_sysParamInit:
 19759                           	opt stack 11
 19760                           
 19761                           ;sysParams.h: 168: fData.floatUB = readEEPROM(3);
 19762                           
 19763                           ;incstack = 0
 19764  00502A  0E03               	movlw	3
 19765  00502C  EC14  F036         	call	i1_readEEPROM
 19766  005030  0100               	movlb	0	; () banked
 19767  005032  6FC6               	movwf	(_fData+2)& (0+255),b
 19768                           
 19769                           ;sysParams.h: 169: fData.floatHB = readEEPROM(4);
 19770  005034  0E04               	movlw	4
 19771  005036  EC14  F036         	call	i1_readEEPROM
 19772  00503A  0100               	movlb	0	; () banked
 19773  00503C  6FC5               	movwf	(_fData+1)& (0+255),b
 19774                           
 19775                           ;sysParams.h: 170: fData.floatLB = readEEPROM(5);
 19776  00503E  0E05               	movlw	5
 19777  005040  EC14  F036         	call	i1_readEEPROM
 19778  005044  0100               	movlb	0	; () banked
 19779  005046  6FC4               	movwf	_fData& (0+255),b
 19780                           
 19781                           ; BSR set to: 0
 19782                           ;sysParams.h: 171: tiXcorte = fData.floatdat;
 19783  005048  C0C4  F0B2         	movff	_fData,_tiXcorte
 19784  00504C  C0C5  F0B3         	movff	_fData+1,_tiXcorte+1
 19785  005050  C0C6  F0B4         	movff	_fData+2,_tiXcorte+2
 19786                           
 19787                           ;sysParams.h: 172: i16Data.int16HB = readEEPROM(6);
 19788  005054  0E06               	movlw	6
 19789  005056  EC14  F036         	call	i1_readEEPROM
 19790  00505A  0100               	movlb	0	; () banked
 19791  00505C  6FC8               	movwf	(_i16Data+1)& (0+255),b
 19792                           
 19793                           ;sysParams.h: 173: i16Data.int16LB = readEEPROM(7);
 19794  00505E  0E07               	movlw	7
 19795  005060  EC14  F036         	call	i1_readEEPROM
 19796  005064  0100               	movlb	0	; () banked
 19797  005066  6FC7               	movwf	_i16Data& (0+255),b
 19798                           
 19799                           ; BSR set to: 0
 19800                           ;sysParams.h: 174: numCortes = i16Data.int16dat;
 19801  005068  C0C7  F0B8         	movff	_i16Data,_numCortes
 19802  00506C  C0C8  F0B9         	movff	_i16Data+1,_numCortes+1
 19803                           
 19804                           ;sysParams.h: 176: fData.floatUB = readEEPROM(9);
 19805  005070  0E09               	movlw	9
 19806  005072  EC14  F036         	call	i1_readEEPROM
 19807  005076  0100               	movlb	0	; () banked
 19808  005078  6FC6               	movwf	(_fData+2)& (0+255),b
 19809                           
 19810                           ;sysParams.h: 177: fData.floatHB = readEEPROM(10);
 19811  00507A  0E0A               	movlw	10
 19812  00507C  EC14  F036         	call	i1_readEEPROM
 19813  005080  0100               	movlb	0	; () banked
 19814  005082  6FC5               	movwf	(_fData+1)& (0+255),b
 19815                           
 19816                           ;sysParams.h: 178: fData.floatLB = readEEPROM(11);
 19817  005084  0E0B               	movlw	11
 19818  005086  EC14  F036         	call	i1_readEEPROM
 19819  00508A  0100               	movlb	0	; () banked
 19820  00508C  6FC4               	movwf	_fData& (0+255),b
 19821                           
 19822                           ; BSR set to: 0
 19823                           ;sysParams.h: 179: diamTubo = fData.floatdat;
 19824  00508E  C0C4  F0A9         	movff	_fData,_diamTubo
 19825  005092  C0C5  F0AA         	movff	_fData+1,_diamTubo+1
 19826  005096  C0C6  F0AB         	movff	_fData+2,_diamTubo+2
 19827                           
 19828                           ;sysParams.h: 186: fData.floatUB = readEEPROM(17);
 19829  00509A  0E11               	movlw	17
 19830  00509C  EC14  F036         	call	i1_readEEPROM
 19831  0050A0  0100               	movlb	0	; () banked
 19832  0050A2  6FC6               	movwf	(_fData+2)& (0+255),b
 19833                           
 19834                           ;sysParams.h: 187: fData.floatHB = readEEPROM(18);
 19835  0050A4  0E12               	movlw	18
 19836  0050A6  EC14  F036         	call	i1_readEEPROM
 19837  0050AA  0100               	movlb	0	; () banked
 19838  0050AC  6FC5               	movwf	(_fData+1)& (0+255),b
 19839                           
 19840                           ;sysParams.h: 188: fData.floatLB = readEEPROM(19);
 19841  0050AE  0E13               	movlw	19
 19842  0050B0  EC14  F036         	call	i1_readEEPROM
 19843  0050B4  0100               	movlb	0	; () banked
 19844  0050B6  6FC4               	movwf	_fData& (0+255),b
 19845                           
 19846                           ; BSR set to: 0
 19847                           ;sysParams.h: 189: velocidadMasa = fData.floatdat;
 19848  0050B8  C0C4  F0B5         	movff	_fData,_velocidadMasa
 19849  0050BC  C0C5  F0B6         	movff	_fData+1,_velocidadMasa+1
 19850  0050C0  C0C6  F0B7         	movff	_fData+2,_velocidadMasa+2
 19851                           
 19852                           ; BSR set to: 0
 19853                           ;sysParams.h: 190: calcSysVars();
 19854  0050C4  EC44  F032         	call	i1_calcSysVars	;wreg free
 19855                           
 19856                           ;sysParams.h: 191: processState = readEEPROM(31);
 19857  0050C8  0E1F               	movlw	31
 19858  0050CA  EC14  F036         	call	i1_readEEPROM
 19859  0050CE  0100               	movlb	0	; () banked
 19860  0050D0  6F7A               	movwf	??i1_sysParamInit& (0+255),b
 19861  0050D2  0100               	movlb	0	; () banked
 19862  0050D4  517A               	movf	??i1_sysParamInit& (0+255),w,b
 19863  0050D6  6E35               	movwf	_processState,c
 19864  0050D8  6A36               	clrf	_processState+1,c
 19865                           
 19866                           ;sysParams.h: 192: bladeIsUP = readEEPROM(32);
 19867  0050DA  0E20               	movlw	32
 19868  0050DC  EC14  F036         	call	i1_readEEPROM
 19869  0050E0  6E50               	movwf	_bladeIsUP,c
 19870                           
 19871                           ;sysParams.h: 193: ProcessStarted = readEEPROM(30);
 19872  0050E2  0E1E               	movlw	30
 19873  0050E4  EC14  F036         	call	i1_readEEPROM
 19874  0050E8  6E3A               	movwf	_ProcessStarted,c
 19875  0050EA  0012               	return		;funcret
 19876  0050EC                     __end_ofi1_sysParamInit:
 19877                           	opt stack 0
 19878                           pclatu	equ	0xFFB
 19879                           pclath	equ	0xFFA
 19880                           tblptru	equ	0xFF8
 19881                           tblptrh	equ	0xFF7
 19882                           tblptrl	equ	0xFF6
 19883                           tablat	equ	0xFF5
 19884                           prodh	equ	0xFF4
 19885                           prodl	equ	0xFF3
 19886                           intcon	equ	0xFF2
 19887                           postinc0	equ	0xFEE
 19888                           fsr0h	equ	0xFEA
 19889                           fsr0l	equ	0xFE9
 19890                           wreg	equ	0xFE8
 19891                           postdec1	equ	0xFE5
 19892                           fsr1h	equ	0xFE2
 19893                           fsr1l	equ	0xFE1
 19894                           bsr	equ	0xFE0
 19895                           indf2	equ	0xFDF
 19896                           postinc2	equ	0xFDE
 19897                           postdec2	equ	0xFDD
 19898                           plusw2	equ	0xFDB
 19899                           fsr2h	equ	0xFDA
 19900                           fsr2l	equ	0xFD9
 19901                           status	equ	0xFD8
 19902                           
 19903 ;; *************** function i1_readEEPROM *****************
 19904 ;; Defined at:
 19905 ;;		line 61 in file "source/sysParams.h"
 19906 ;; Parameters:    Size  Location     Type
 19907 ;;  adr             1    wreg     unsigned char 
 19908 ;; Auto vars:     Size  Location     Type
 19909 ;;  adr             1    0[BANK0 ] unsigned char 
 19910 ;; Return value:  Size  Location     Type
 19911 ;;                  1    wreg      unsigned char 
 19912 ;; Registers used:
 19913 ;;		wreg, status,2
 19914 ;; Tracked objects:
 19915 ;;		On entry : 0/0
 19916 ;;		On exit  : 0/0
 19917 ;;		Unchanged: 0/0
 19918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19919 ;;      Params:         0       0       0       0       0       0       0
 19920 ;;      Locals:         0       1       0       0       0       0       0
 19921 ;;      Temps:          0       0       0       0       0       0       0
 19922 ;;      Totals:         0       1       0       0       0       0       0
 19923 ;;Total ram usage:        1 bytes
 19924 ;; Hardware stack levels used:    1
 19925 ;; Hardware stack levels required when called:    4
 19926 ;; This function calls:
 19927 ;;		Nothing
 19928 ;; This function is called by:
 19929 ;;		i1_sysParamInit
 19930 ;; This function uses a non-reentrant model
 19931 ;;
 19932                           
 19933                           	psect	text83
 19934  006C28                     __ptext83:
 19935                           	opt stack 0
 19936  006C28                     i1_readEEPROM:
 19937                           	opt stack 13
 19938                           
 19939                           ;incstack = 0
 19940                           ;i1readEEPROM@adr stored from wreg
 19941  006C28  0100               	movlb	0	; () banked
 19942  006C2A  6F60               	movwf	i1readEEPROM@adr& (0+255),b
 19943                           
 19944                           ;sysParams.h: 62: EEADR = adr;
 19945  006C2C  C060  FFA9         	movff	i1readEEPROM@adr,4009	;volatile
 19946                           
 19947                           ;sysParams.h: 63: EECON1bits.EEPGD = 0;
 19948  006C30  9EA6               	bcf	4006,7,c	;volatile
 19949                           
 19950                           ;sysParams.h: 64: EECON1bits.CFGS = 0;
 19951  006C32  9CA6               	bcf	4006,6,c	;volatile
 19952                           
 19953                           ;sysParams.h: 65: EECON1bits.RD = 1;
 19954  006C34  80A6               	bsf	4006,0,c	;volatile
 19955  006C36                     i1l283:
 19956  006C36  B0A6               	btfsc	4006,0,c	;volatile
 19957  006C38  D7FE               	goto	i1l283
 19958                           
 19959                           ;sysParams.h: 67: return EEDATA;
 19960  006C3A  50A8               	movf	4008,w,c	;volatile
 19961  006C3C  0012               	return		;funcret
 19962  006C3E                     __end_ofi1_readEEPROM:
 19963                           	opt stack 0
 19964                           pclatu	equ	0xFFB
 19965                           pclath	equ	0xFFA
 19966                           tblptru	equ	0xFF8
 19967                           tblptrh	equ	0xFF7
 19968                           tblptrl	equ	0xFF6
 19969                           tablat	equ	0xFF5
 19970                           prodh	equ	0xFF4
 19971                           prodl	equ	0xFF3
 19972                           intcon	equ	0xFF2
 19973                           postinc0	equ	0xFEE
 19974                           fsr0h	equ	0xFEA
 19975                           fsr0l	equ	0xFE9
 19976                           wreg	equ	0xFE8
 19977                           postdec1	equ	0xFE5
 19978                           fsr1h	equ	0xFE2
 19979                           fsr1l	equ	0xFE1
 19980                           bsr	equ	0xFE0
 19981                           indf2	equ	0xFDF
 19982                           postinc2	equ	0xFDE
 19983                           postdec2	equ	0xFDD
 19984                           plusw2	equ	0xFDB
 19985                           fsr2h	equ	0xFDA
 19986                           fsr2l	equ	0xFD9
 19987                           status	equ	0xFD8
 19988                           
 19989 ;; *************** function i1_pressUP *****************
 19990 ;; Defined at:
 19991 ;;		line 124 in file "source/DisplayProtocol.h"
 19992 ;; Parameters:    Size  Location     Type
 19993 ;;		None
 19994 ;; Auto vars:     Size  Location     Type
 19995 ;;		None
 19996 ;; Return value:  Size  Location     Type
 19997 ;;                  1    wreg      void 
 19998 ;; Registers used:
 19999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20000 ;; Tracked objects:
 20001 ;;		On entry : 0/0
 20002 ;;		On exit  : 0/0
 20003 ;;		Unchanged: 0/0
 20004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20005 ;;      Params:         0       0       0       0       0       0       0
 20006 ;;      Locals:         0       0       0       0       0       0       0
 20007 ;;      Temps:          0       1       0       0       0       0       0
 20008 ;;      Totals:         0       1       0       0       0       0       0
 20009 ;;Total ram usage:        1 bytes
 20010 ;; Hardware stack levels used:    1
 20011 ;; Hardware stack levels required when called:    5
 20012 ;; This function calls:
 20013 ;;		i1_chanValDigUP
 20014 ;; This function is called by:
 20015 ;;		_UARTint
 20016 ;; This function uses a non-reentrant model
 20017 ;;
 20018                           
 20019                           	psect	text84
 20020  004262                     __ptext84:
 20021                           	opt stack 0
 20022  004262                     i1_pressUP:
 20023                           	opt stack 13
 20024                           
 20025                           ;DisplayProtocol.h: 125: if (actualScreen == 0 || actualScreen == 4) {
 20026                           
 20027                           ;incstack = 0
 20028  004262  0101               	movlb	1	; () banked
 20029  004264  51BA               	movf	_actualScreen& (0+255),w,b
 20030  004266  B4D8               	btfsc	status,2,c
 20031  004268  D005               	goto	i1l11585
 20032                           
 20033                           ; BSR set to: 1
 20034  00426A  0E04               	movlw	4
 20035  00426C  0101               	movlb	1	; () banked
 20036  00426E  19BA               	xorwf	_actualScreen& (0+255),w,b
 20037  004270  A4D8               	btfss	status,2,c
 20038  004272  D00C               	goto	i1l11591
 20039  004274                     i1l11585:
 20040                           
 20041                           ; BSR set to: 1
 20042                           ;DisplayProtocol.h: 126: menuSection++;
 20043  004274  0101               	movlb	1	; () banked
 20044  004276  2BC1               	incf	_menuSection& (0+255),f,b
 20045                           
 20046                           ; BSR set to: 1
 20047                           ;DisplayProtocol.h: 127: if (menuSection > 4)
 20048  004278  0101               	movlb	1	; () banked
 20049  00427A  51C1               	movf	_menuSection& (0+255),w,b
 20050  00427C  0A80               	xorlw	128
 20051  00427E  0F7B               	addlw	-133
 20052  004280  A0D8               	btfss	status,0,c
 20053  004282  0012               	return	
 20054                           
 20055                           ; BSR set to: 1
 20056                           ;DisplayProtocol.h: 128: menuSection = 0;
 20057  004284  0E00               	movlw	0
 20058  004286  0101               	movlb	1	; () banked
 20059  004288  6FC1               	movwf	_menuSection& (0+255),b
 20060                           
 20061                           ; BSR set to: 1
 20062                           ;DisplayProtocol.h: 129: } else if (actualScreen == 1) {
 20063  00428A  0012               	return	
 20064  00428C                     i1l11591:
 20065                           
 20066                           ; BSR set to: 1
 20067  00428C  0101               	movlb	1	; () banked
 20068  00428E  05BA               	decf	_actualScreen& (0+255),w,b
 20069  004290  A4D8               	btfss	status,2,c
 20070  004292  D024               	goto	i1l11597
 20071                           
 20072                           ; BSR set to: 1
 20073                           ;DisplayProtocol.h: 130: introducido[passSection]++;
 20074  004294  0101               	movlb	1	; () banked
 20075  004296  51C2               	movf	_passSection& (0+255),w,b
 20076  004298  0D01               	mullw	1
 20077  00429A  0EA6               	movlw	low _introducido
 20078  00429C  24F3               	addwf	prodl,w,c
 20079  00429E  6ED9               	movwf	fsr2l,c
 20080  0042A0  0E01               	movlw	high _introducido
 20081  0042A2  20F4               	addwfc	prodh,w,c
 20082  0042A4  6EDA               	movwf	fsr2h,c
 20083  0042A6  2ADF               	incf	indf2,f,c
 20084                           
 20085                           ;DisplayProtocol.h: 131: if (introducido[passSection] > 9)
 20086  0042A8  0101               	movlb	1	; () banked
 20087  0042AA  51C2               	movf	_passSection& (0+255),w,b
 20088  0042AC  0D01               	mullw	1
 20089  0042AE  0EA6               	movlw	low _introducido
 20090  0042B0  24F3               	addwf	prodl,w,c
 20091  0042B2  6ED9               	movwf	fsr2l,c
 20092  0042B4  0E01               	movlw	high _introducido
 20093  0042B6  20F4               	addwfc	prodh,w,c
 20094  0042B8  6EDA               	movwf	fsr2h,c
 20095  0042BA  50DF               	movf	indf2,w,c
 20096  0042BC  0A80               	xorlw	128
 20097  0042BE  0F76               	addlw	-138
 20098  0042C0  A0D8               	btfss	status,0,c
 20099  0042C2  0012               	return	
 20100                           
 20101                           ; BSR set to: 1
 20102                           ;DisplayProtocol.h: 132: introducido[passSection] = 0;
 20103  0042C4  0101               	movlb	1	; () banked
 20104  0042C6  51C2               	movf	_passSection& (0+255),w,b
 20105  0042C8  0D01               	mullw	1
 20106  0042CA  0EA6               	movlw	low _introducido
 20107  0042CC  24F3               	addwf	prodl,w,c
 20108  0042CE  6ED9               	movwf	fsr2l,c
 20109  0042D0  0E01               	movlw	high _introducido
 20110  0042D2  20F4               	addwfc	prodh,w,c
 20111  0042D4  6EDA               	movwf	fsr2h,c
 20112  0042D6  0E00               	movlw	0
 20113  0042D8  6EDF               	movwf	indf2,c
 20114                           
 20115                           ; BSR set to: 1
 20116                           ;DisplayProtocol.h: 133: } else if (actualScreen == 2 || actualScreen == 3
 20117  0042DA  0012               	return	
 20118  0042DC                     i1l11597:
 20119                           
 20120                           ; BSR set to: 1
 20121                           ;DisplayProtocol.h: 134: || actualScreen == 10 || actualScreen == 11) {
 20122  0042DC  0E02               	movlw	2
 20123  0042DE  0101               	movlb	1	; () banked
 20124  0042E0  19BA               	xorwf	_actualScreen& (0+255),w,b
 20125  0042E2  B4D8               	btfsc	status,2,c
 20126  0042E4  D00F               	goto	i1l11605
 20127                           
 20128                           ; BSR set to: 1
 20129  0042E6  0E03               	movlw	3
 20130  0042E8  0101               	movlb	1	; () banked
 20131  0042EA  19BA               	xorwf	_actualScreen& (0+255),w,b
 20132  0042EC  B4D8               	btfsc	status,2,c
 20133  0042EE  D00A               	goto	i1l11605
 20134                           
 20135                           ; BSR set to: 1
 20136  0042F0  0E0A               	movlw	10
 20137  0042F2  0101               	movlb	1	; () banked
 20138  0042F4  19BA               	xorwf	_actualScreen& (0+255),w,b
 20139  0042F6  B4D8               	btfsc	status,2,c
 20140  0042F8  D005               	goto	i1l11605
 20141                           
 20142                           ; BSR set to: 1
 20143  0042FA  0E0B               	movlw	11
 20144  0042FC  0101               	movlb	1	; () banked
 20145  0042FE  19BA               	xorwf	_actualScreen& (0+255),w,b
 20146  004300  A4D8               	btfss	status,2,c
 20147  004302  D011               	goto	i1l11611
 20148  004304                     i1l11605:
 20149                           
 20150                           ; BSR set to: 1
 20151                           ;DisplayProtocol.h: 135: selSN = !selSN;
 20152  004304  0101               	movlb	1	; () banked
 20153  004306  51C3               	movf	_selSN& (0+255),w,b
 20154  004308  A4D8               	btfss	status,2,c
 20155  00430A  D002               	goto	i1u1698_20
 20156  00430C  0E01               	movlw	1
 20157  00430E  D001               	goto	i1u1699_20
 20158  004310                     i1u1698_20:
 20159  004310  0E00               	movlw	0
 20160  004312                     i1u1699_20:
 20161  004312  0101               	movlb	1	; () banked
 20162  004314  6FC3               	movwf	_selSN& (0+255),b
 20163                           
 20164                           ; BSR set to: 1
 20165                           ;DisplayProtocol.h: 136: if(selSN > 1)
 20166  004316  0E01               	movlw	1
 20167  004318  0101               	movlb	1	; () banked
 20168  00431A  65C3               	cpfsgt	_selSN& (0+255),b
 20169  00431C  0012               	return	
 20170                           
 20171                           ; BSR set to: 1
 20172                           ;DisplayProtocol.h: 137: selSN = 0;
 20173  00431E  0E00               	movlw	0
 20174  004320  0101               	movlb	1	; () banked
 20175  004322  6FC3               	movwf	_selSN& (0+255),b
 20176                           
 20177                           ; BSR set to: 1
 20178                           ;DisplayProtocol.h: 138: }else if(actualScreen == 5) {
 20179  004324  0012               	return	
 20180  004326                     i1l11611:
 20181                           
 20182                           ; BSR set to: 1
 20183  004326  0E05               	movlw	5
 20184  004328  0101               	movlb	1	; () banked
 20185  00432A  19BA               	xorwf	_actualScreen& (0+255),w,b
 20186  00432C  B4D8               	btfsc	status,2,c
 20187  00432E  D00B               	goto	i1l11623
 20188  004330  D019               	goto	i1l11625
 20189  004332                     i1l11615:
 20190                           
 20191                           ; BSR set to: 1
 20192                           ;DisplayProtocol.h: 143: chanValDigUP();
 20193  004332  EC1C  F026         	call	i1_chanValDigUP	;wreg free
 20194                           
 20195                           ;DisplayProtocol.h: 144: break;
 20196  004336  0012               	return	
 20197  004338                     i1l11617:
 20198                           
 20199                           ;DisplayProtocol.h: 146: chanVals++;
 20200  004338  0101               	movlb	1	; () banked
 20201  00433A  4BB1               	infsnz	_chanVals& (0+255),f,b
 20202  00433C  2BB2               	incf	(_chanVals+1)& (0+255),f,b
 20203                           
 20204                           ;DisplayProtocol.h: 147: break;
 20205  00433E  0012               	return	
 20206  004340                     i1l11619:
 20207                           
 20208                           ; BSR set to: 1
 20209                           ;DisplayProtocol.h: 149: chanValDigUP();
 20210  004340  EC1C  F026         	call	i1_chanValDigUP	;wreg free
 20211                           
 20212                           ;DisplayProtocol.h: 151: }
 20213                           ;DisplayProtocol.h: 152: }
 20214                           
 20215                           ;DisplayProtocol.h: 150: break;
 20216  004344  0012               	return	
 20217  004346                     i1l11623:
 20218  004346  0101               	movlb	1	; () banked
 20219  004348  51C1               	movf	_menuSection& (0+255),w,b
 20220                           
 20221                           ; Switch size 1, requested type "space"
 20222                           ; Number of cases is 4, Range of values is 0 to 3
 20223                           ; switch strategies available:
 20224                           ; Name         Instructions Cycles
 20225                           ; simple_byte           13     7 (average)
 20226                           ;	Chosen strategy is simple_byte
 20227  00434A  0A00               	xorlw	0	; case 0
 20228  00434C  B4D8               	btfsc	status,2,c
 20229  00434E  0012               	return	
 20230  004350  0A01               	xorlw	1	; case 1
 20231  004352  B4D8               	btfsc	status,2,c
 20232  004354  D7EE               	goto	i1l11615
 20233  004356  0A03               	xorlw	3	; case 2
 20234  004358  B4D8               	btfsc	status,2,c
 20235  00435A  D7EE               	goto	i1l11617
 20236  00435C  0A01               	xorlw	1	; case 3
 20237  00435E  A4D8               	btfss	status,2,c
 20238                           
 20239                           ; BSR set to: 1
 20240                           ;DisplayProtocol.h: 153: }else if(actualScreen == 12)
 20241  004360  0012               	return	
 20242  004362  D7EE               	goto	i1l11619
 20243  004364                     i1l11625:
 20244                           
 20245                           ; BSR set to: 1
 20246  004364  0E0C               	movlw	12
 20247  004366  0101               	movlb	1	; () banked
 20248  004368  19BA               	xorwf	_actualScreen& (0+255),w,b
 20249  00436A  A4D8               	btfss	status,2,c
 20250  00436C  0012               	return	
 20251                           
 20252                           ; BSR set to: 1
 20253                           ;DisplayProtocol.h: 154: chanValDigUP();
 20254  00436E  EC1C  F026         	call	i1_chanValDigUP	;wreg free
 20255  004372  0012               	return	
 20256  004374                     __end_ofi1_pressUP:
 20257                           	opt stack 0
 20258                           pclatu	equ	0xFFB
 20259                           pclath	equ	0xFFA
 20260                           tblptru	equ	0xFF8
 20261                           tblptrh	equ	0xFF7
 20262                           tblptrl	equ	0xFF6
 20263                           tablat	equ	0xFF5
 20264                           prodh	equ	0xFF4
 20265                           prodl	equ	0xFF3
 20266                           intcon	equ	0xFF2
 20267                           postinc0	equ	0xFEE
 20268                           fsr0h	equ	0xFEA
 20269                           fsr0l	equ	0xFE9
 20270                           wreg	equ	0xFE8
 20271                           postdec1	equ	0xFE5
 20272                           fsr1h	equ	0xFE2
 20273                           fsr1l	equ	0xFE1
 20274                           bsr	equ	0xFE0
 20275                           indf2	equ	0xFDF
 20276                           postinc2	equ	0xFDE
 20277                           postdec2	equ	0xFDD
 20278                           plusw2	equ	0xFDB
 20279                           fsr2h	equ	0xFDA
 20280                           fsr2l	equ	0xFD9
 20281                           status	equ	0xFD8
 20282                           
 20283 ;; *************** function i1_chanValDigUP *****************
 20284 ;; Defined at:
 20285 ;;		line 28 in file "source/DisplayProtocol.h"
 20286 ;; Parameters:    Size  Location     Type
 20287 ;;		None
 20288 ;; Auto vars:     Size  Location     Type
 20289 ;;		None
 20290 ;; Return value:  Size  Location     Type
 20291 ;;                  1    wreg      void 
 20292 ;; Registers used:
 20293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20294 ;; Tracked objects:
 20295 ;;		On entry : 0/0
 20296 ;;		On exit  : 0/0
 20297 ;;		Unchanged: 0/0
 20298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20299 ;;      Params:         0       0       0       0       0       0       0
 20300 ;;      Locals:         0       0       0       0       0       0       0
 20301 ;;      Temps:          0       5       0       0       0       0       0
 20302 ;;      Totals:         0       5       0       0       0       0       0
 20303 ;;Total ram usage:        5 bytes
 20304 ;; Hardware stack levels used:    1
 20305 ;; Hardware stack levels required when called:    4
 20306 ;; This function calls:
 20307 ;;		Nothing
 20308 ;; This function is called by:
 20309 ;;		i1_pressUP
 20310 ;; This function uses a non-reentrant model
 20311 ;;
 20312                           
 20313                           	psect	text85
 20314  004C38                     __ptext85:
 20315                           	opt stack 0
 20316  004C38                     i1_chanValDigUP:
 20317                           	opt stack 13
 20318                           
 20319                           ;DisplayProtocol.h: 29: chanValdig[chanValSection]++;
 20320                           
 20321                           ;incstack = 0
 20322  004C38  0101               	movlb	1	; () banked
 20323  004C3A  5194               	movf	_chanValSection& (0+255),w,b
 20324  004C3C  0D01               	mullw	1
 20325  004C3E  0EA0               	movlw	low _chanValdig
 20326  004C40  24F3               	addwf	prodl,w,c
 20327  004C42  6ED9               	movwf	fsr2l,c
 20328  004C44  0E01               	movlw	high _chanValdig
 20329  004C46  20F4               	addwfc	prodh,w,c
 20330  004C48  6EDA               	movwf	fsr2h,c
 20331  004C4A  2ADF               	incf	indf2,f,c
 20332                           
 20333                           ;DisplayProtocol.h: 30: if(chanValdig[chanValSection] > 9) {
 20334  004C4C  0101               	movlb	1	; () banked
 20335  004C4E  5194               	movf	_chanValSection& (0+255),w,b
 20336  004C50  0D01               	mullw	1
 20337  004C52  0EA0               	movlw	low _chanValdig
 20338  004C54  24F3               	addwf	prodl,w,c
 20339  004C56  6ED9               	movwf	fsr2l,c
 20340  004C58  0E01               	movlw	high _chanValdig
 20341  004C5A  20F4               	addwfc	prodh,w,c
 20342  004C5C  6EDA               	movwf	fsr2h,c
 20343  004C5E  50DF               	movf	indf2,w,c
 20344  004C60  0A80               	xorlw	128
 20345  004C62  0F76               	addlw	-138
 20346  004C64  A0D8               	btfss	status,0,c
 20347  004C66  0012               	return	
 20348                           
 20349                           ; BSR set to: 1
 20350                           ;DisplayProtocol.h: 31: chanValdig[chanValSection] = 0;
 20351  004C68  0101               	movlb	1	; () banked
 20352  004C6A  5194               	movf	_chanValSection& (0+255),w,b
 20353  004C6C  0D01               	mullw	1
 20354  004C6E  0EA0               	movlw	low _chanValdig
 20355  004C70  24F3               	addwf	prodl,w,c
 20356  004C72  6ED9               	movwf	fsr2l,c
 20357  004C74  0E01               	movlw	high _chanValdig
 20358  004C76  20F4               	addwfc	prodh,w,c
 20359  004C78  6EDA               	movwf	fsr2h,c
 20360  004C7A  0E00               	movlw	0
 20361  004C7C  6EDF               	movwf	indf2,c
 20362                           
 20363                           ; BSR set to: 1
 20364                           ;DisplayProtocol.h: 32: if(chanValSection > 1 && chanValdig[chanValSection - 1] < 9)
 20365  004C7E  0101               	movlb	1	; () banked
 20366  004C80  5194               	movf	_chanValSection& (0+255),w,b
 20367  004C82  0A80               	xorlw	128
 20368  004C84  0F7E               	addlw	-130
 20369  004C86  A0D8               	btfss	status,0,c
 20370  004C88  0012               	return	
 20371                           
 20372                           ; BSR set to: 1
 20373  004C8A  0EFF               	movlw	255
 20374  004C8C  0100               	movlb	0	; () banked
 20375  004C8E  6F60               	movwf	??i1_chanValDigUP& (0+255),b
 20376  004C90  0EFF               	movlw	255
 20377  004C92  0100               	movlb	0	; () banked
 20378  004C94  6F61               	movwf	(??i1_chanValDigUP+1)& (0+255),b
 20379  004C96  C194  F062         	movff	_chanValSection,??i1_chanValDigUP+2
 20380  004C9A  0100               	movlb	0	; () banked
 20381  004C9C  6B63               	clrf	(??i1_chanValDigUP+3)& (0+255),b
 20382  004C9E  BF62               	btfsc	(??i1_chanValDigUP+2)& (0+255),7,b
 20383  004CA0  0763               	decf	(??i1_chanValDigUP+3)& (0+255),f,b
 20384  004CA2  0100               	movlb	0	; () banked
 20385  004CA4  5160               	movf	??i1_chanValDigUP& (0+255),w,b
 20386  004CA6  0100               	movlb	0	; () banked
 20387  004CA8  2762               	addwf	(??i1_chanValDigUP+2)& (0+255),f,b
 20388  004CAA  0100               	movlb	0	; () banked
 20389  004CAC  5161               	movf	(??i1_chanValDigUP+1)& (0+255),w,b
 20390  004CAE  0100               	movlb	0	; () banked
 20391  004CB0  2363               	addwfc	(??i1_chanValDigUP+3)& (0+255),f,b
 20392  004CB2  0EA0               	movlw	low _chanValdig
 20393  004CB4  0100               	movlb	0	; () banked
 20394  004CB6  2562               	addwf	(??i1_chanValDigUP+2)& (0+255),w,b
 20395  004CB8  6ED9               	movwf	fsr2l,c
 20396  004CBA  0E01               	movlw	high _chanValdig
 20397  004CBC  0100               	movlb	0	; () banked
 20398  004CBE  2163               	addwfc	(??i1_chanValDigUP+3)& (0+255),w,b
 20399  004CC0  6EDA               	movwf	fsr2h,c
 20400  004CC2  50DF               	movf	indf2,w,c
 20401  004CC4  0A80               	xorlw	128
 20402  004CC6  0F77               	addlw	-137
 20403  004CC8  B0D8               	btfsc	status,0,c
 20404  004CCA  0012               	return	
 20405                           
 20406                           ; BSR set to: 0
 20407                           ;DisplayProtocol.h: 33: chanValdig[chanValSection - 1]++;
 20408  004CCC  0EFF               	movlw	255
 20409  004CCE  0100               	movlb	0	; () banked
 20410  004CD0  6F60               	movwf	??i1_chanValDigUP& (0+255),b
 20411  004CD2  0EFF               	movlw	255
 20412  004CD4  0100               	movlb	0	; () banked
 20413  004CD6  6F61               	movwf	(??i1_chanValDigUP+1)& (0+255),b
 20414  004CD8  C194  F062         	movff	_chanValSection,??i1_chanValDigUP+2
 20415  004CDC  0100               	movlb	0	; () banked
 20416  004CDE  6B63               	clrf	(??i1_chanValDigUP+3)& (0+255),b
 20417  004CE0  BF62               	btfsc	(??i1_chanValDigUP+2)& (0+255),7,b
 20418  004CE2  0763               	decf	(??i1_chanValDigUP+3)& (0+255),f,b
 20419  004CE4  0100               	movlb	0	; () banked
 20420  004CE6  5160               	movf	??i1_chanValDigUP& (0+255),w,b
 20421  004CE8  0100               	movlb	0	; () banked
 20422  004CEA  2762               	addwf	(??i1_chanValDigUP+2)& (0+255),f,b
 20423  004CEC  0100               	movlb	0	; () banked
 20424  004CEE  5161               	movf	(??i1_chanValDigUP+1)& (0+255),w,b
 20425  004CF0  0100               	movlb	0	; () banked
 20426  004CF2  2363               	addwfc	(??i1_chanValDigUP+3)& (0+255),f,b
 20427  004CF4  0EA0               	movlw	low _chanValdig
 20428  004CF6  0100               	movlb	0	; () banked
 20429  004CF8  2562               	addwf	(??i1_chanValDigUP+2)& (0+255),w,b
 20430  004CFA  6ED9               	movwf	fsr2l,c
 20431  004CFC  0E01               	movlw	high _chanValdig
 20432  004CFE  0100               	movlb	0	; () banked
 20433  004D00  2163               	addwfc	(??i1_chanValDigUP+3)& (0+255),w,b
 20434  004D02  6EDA               	movwf	fsr2h,c
 20435  004D04  2ADF               	incf	indf2,f,c
 20436                           
 20437                           ; BSR set to: 0
 20438  004D06  0012               	return	
 20439  004D08                     __end_ofi1_chanValDigUP:
 20440                           	opt stack 0
 20441                           pclatu	equ	0xFFB
 20442                           pclath	equ	0xFFA
 20443                           tblptru	equ	0xFF8
 20444                           tblptrh	equ	0xFF7
 20445                           tblptrl	equ	0xFF6
 20446                           tablat	equ	0xFF5
 20447                           prodh	equ	0xFF4
 20448                           prodl	equ	0xFF3
 20449                           intcon	equ	0xFF2
 20450                           postinc0	equ	0xFEE
 20451                           fsr0h	equ	0xFEA
 20452                           fsr0l	equ	0xFE9
 20453                           wreg	equ	0xFE8
 20454                           postdec1	equ	0xFE5
 20455                           fsr1h	equ	0xFE2
 20456                           fsr1l	equ	0xFE1
 20457                           bsr	equ	0xFE0
 20458                           indf2	equ	0xFDF
 20459                           postinc2	equ	0xFDE
 20460                           postdec2	equ	0xFDD
 20461                           plusw2	equ	0xFDB
 20462                           fsr2h	equ	0xFDA
 20463                           fsr2l	equ	0xFD9
 20464                           status	equ	0xFD8
 20465                           
 20466 ;; *************** function i1_pressRETRO *****************
 20467 ;; Defined at:
 20468 ;;		line 229 in file "source/DisplayProtocol.h"
 20469 ;; Parameters:    Size  Location     Type
 20470 ;;		None
 20471 ;; Auto vars:     Size  Location     Type
 20472 ;;		None
 20473 ;; Return value:  Size  Location     Type
 20474 ;;                  1    wreg      void 
 20475 ;; Registers used:
 20476 ;;		wreg, status,2, status,0
 20477 ;; Tracked objects:
 20478 ;;		On entry : 0/0
 20479 ;;		On exit  : 0/0
 20480 ;;		Unchanged: 0/0
 20481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20482 ;;      Params:         0       0       0       0       0       0       0
 20483 ;;      Locals:         0       0       0       0       0       0       0
 20484 ;;      Temps:          0       0       0       0       0       0       0
 20485 ;;      Totals:         0       0       0       0       0       0       0
 20486 ;;Total ram usage:        0 bytes
 20487 ;; Hardware stack levels used:    1
 20488 ;; Hardware stack levels required when called:    4
 20489 ;; This function calls:
 20490 ;;		Nothing
 20491 ;; This function is called by:
 20492 ;;		_UARTint
 20493 ;; This function uses a non-reentrant model
 20494 ;;
 20495                           
 20496                           	psect	text86
 20497  0059C4                     __ptext86:
 20498                           	opt stack 0
 20499  0059C4                     i1_pressRETRO:
 20500                           	opt stack 14
 20501                           
 20502                           ;DisplayProtocol.h: 230: if (actualScreen == 1) {
 20503                           
 20504                           ;incstack = 0
 20505  0059C4  0101               	movlb	1	; () banked
 20506  0059C6  05BA               	decf	_actualScreen& (0+255),w,b
 20507  0059C8  A4D8               	btfss	status,2,c
 20508  0059CA  D004               	goto	i1l11715
 20509                           
 20510                           ; BSR set to: 1
 20511                           ;DisplayProtocol.h: 231: actualScreen = 0;
 20512  0059CC  0E00               	movlw	0
 20513  0059CE  0101               	movlb	1	; () banked
 20514  0059D0  6FBA               	movwf	_actualScreen& (0+255),b
 20515                           
 20516                           ;DisplayProtocol.h: 232: }else if (actualScreen == 2 || actualScreen == 3
 20517  0059D2  0012               	return	
 20518  0059D4                     i1l11715:
 20519                           
 20520                           ; BSR set to: 1
 20521                           ;DisplayProtocol.h: 233: || actualScreen == 10) {
 20522  0059D4  0E02               	movlw	2
 20523  0059D6  0101               	movlb	1	; () banked
 20524  0059D8  19BA               	xorwf	_actualScreen& (0+255),w,b
 20525  0059DA  B4D8               	btfsc	status,2,c
 20526  0059DC  D00A               	goto	i1l644
 20527                           
 20528                           ; BSR set to: 1
 20529  0059DE  0E03               	movlw	3
 20530  0059E0  0101               	movlb	1	; () banked
 20531  0059E2  19BA               	xorwf	_actualScreen& (0+255),w,b
 20532  0059E4  B4D8               	btfsc	status,2,c
 20533  0059E6  D005               	goto	i1l644
 20534                           
 20535                           ; BSR set to: 1
 20536  0059E8  0E0A               	movlw	10
 20537  0059EA  0101               	movlb	1	; () banked
 20538  0059EC  19BA               	xorwf	_actualScreen& (0+255),w,b
 20539  0059EE  A4D8               	btfss	status,2,c
 20540  0059F0  D003               	goto	i1l11721
 20541  0059F2                     i1l644:
 20542                           
 20543                           ; BSR set to: 1
 20544                           ;DisplayProtocol.h: 234: actualScreen = tempLastScreen;
 20545  0059F2  C0CA  F1BA         	movff	_tempLastScreen,_actualScreen
 20546                           
 20547                           ;DisplayProtocol.h: 235: }else if(actualScreen == 5) {
 20548  0059F6  0012               	return	
 20549  0059F8                     i1l11721:
 20550                           
 20551                           ; BSR set to: 1
 20552  0059F8  0E05               	movlw	5
 20553  0059FA  0101               	movlb	1	; () banked
 20554  0059FC  19BA               	xorwf	_actualScreen& (0+255),w,b
 20555  0059FE  A4D8               	btfss	status,2,c
 20556  005A00  D015               	goto	i1l11733
 20557                           
 20558                           ; BSR set to: 1
 20559                           ;DisplayProtocol.h: 236: if(menuSection != 2) {
 20560  005A02  0E02               	movlw	2
 20561  005A04  0101               	movlb	1	; () banked
 20562  005A06  19C1               	xorwf	_menuSection& (0+255),w,b
 20563  005A08  B4D8               	btfsc	status,2,c
 20564  005A0A  D00C               	goto	i1l11731
 20565                           
 20566                           ; BSR set to: 1
 20567                           ;DisplayProtocol.h: 237: chanValSection++;
 20568  005A0C  0101               	movlb	1	; () banked
 20569  005A0E  2B94               	incf	_chanValSection& (0+255),f,b
 20570                           
 20571                           ; BSR set to: 1
 20572                           ;DisplayProtocol.h: 238: if(chanValSection > 5)
 20573  005A10  0101               	movlb	1	; () banked
 20574  005A12  5194               	movf	_chanValSection& (0+255),w,b
 20575  005A14  0A80               	xorlw	128
 20576  005A16  0F7A               	addlw	-134
 20577  005A18  A0D8               	btfss	status,0,c
 20578  005A1A  0012               	return	
 20579                           
 20580                           ; BSR set to: 1
 20581                           ;DisplayProtocol.h: 239: chanValSection = 0;
 20582  005A1C  0E00               	movlw	0
 20583  005A1E  0101               	movlb	1	; () banked
 20584  005A20  6F94               	movwf	_chanValSection& (0+255),b
 20585                           
 20586                           ; BSR set to: 1
 20587                           ;DisplayProtocol.h: 240: }else
 20588  005A22  0012               	return	
 20589  005A24                     i1l11731:
 20590                           
 20591                           ; BSR set to: 1
 20592                           ;DisplayProtocol.h: 241: actualScreen = 4;
 20593  005A24  0E04               	movlw	4
 20594  005A26  0101               	movlb	1	; () banked
 20595  005A28  6FBA               	movwf	_actualScreen& (0+255),b
 20596                           
 20597                           ; BSR set to: 1
 20598                           ;DisplayProtocol.h: 242: }else if(actualScreen == 11)
 20599  005A2A  0012               	return	
 20600  005A2C                     i1l11733:
 20601                           
 20602                           ; BSR set to: 1
 20603  005A2C  0E0B               	movlw	11
 20604  005A2E  0101               	movlb	1	; () banked
 20605  005A30  19BA               	xorwf	_actualScreen& (0+255),w,b
 20606  005A32  A4D8               	btfss	status,2,c
 20607  005A34  D004               	goto	i1l11737
 20608                           
 20609                           ; BSR set to: 1
 20610                           ;DisplayProtocol.h: 243: actualScreen = 4;
 20611  005A36  0E04               	movlw	4
 20612  005A38  0101               	movlb	1	; () banked
 20613  005A3A  6FBA               	movwf	_actualScreen& (0+255),b
 20614  005A3C  0012               	return	
 20615  005A3E                     i1l11737:
 20616                           
 20617                           ; BSR set to: 1
 20618                           ;DisplayProtocol.h: 244: else if(actualScreen == 12) {
 20619  005A3E  0E0C               	movlw	12
 20620  005A40  0101               	movlb	1	; () banked
 20621  005A42  19BA               	xorwf	_actualScreen& (0+255),w,b
 20622  005A44  A4D8               	btfss	status,2,c
 20623  005A46  0012               	return	
 20624                           
 20625                           ; BSR set to: 1
 20626                           ;DisplayProtocol.h: 245: chanValSection++;
 20627  005A48  0101               	movlb	1	; () banked
 20628  005A4A  2B94               	incf	_chanValSection& (0+255),f,b
 20629                           
 20630                           ; BSR set to: 1
 20631                           ;DisplayProtocol.h: 246: if(chanValSection > 5)
 20632  005A4C  0101               	movlb	1	; () banked
 20633  005A4E  5194               	movf	_chanValSection& (0+255),w,b
 20634  005A50  0A80               	xorlw	128
 20635  005A52  0F7A               	addlw	-134
 20636  005A54  A0D8               	btfss	status,0,c
 20637  005A56  0012               	return	
 20638                           
 20639                           ; BSR set to: 1
 20640                           ;DisplayProtocol.h: 247: chanValSection = 0;
 20641  005A58  0E00               	movlw	0
 20642  005A5A  0101               	movlb	1	; () banked
 20643  005A5C  6F94               	movwf	_chanValSection& (0+255),b
 20644                           
 20645                           ; BSR set to: 1
 20646                           
 20647                           ; BSR set to: 1
 20648                           
 20649                           ; BSR set to: 1
 20650                           
 20651                           ; BSR set to: 1
 20652                           
 20653                           ; BSR set to: 1
 20654  005A5E  0012               	return	
 20655  005A60                     __end_ofi1_pressRETRO:
 20656                           	opt stack 0
 20657                           pclatu	equ	0xFFB
 20658                           pclath	equ	0xFFA
 20659                           tblptru	equ	0xFF8
 20660                           tblptrh	equ	0xFF7
 20661                           tblptrl	equ	0xFF6
 20662                           tablat	equ	0xFF5
 20663                           prodh	equ	0xFF4
 20664                           prodl	equ	0xFF3
 20665                           intcon	equ	0xFF2
 20666                           postinc0	equ	0xFEE
 20667                           fsr0h	equ	0xFEA
 20668                           fsr0l	equ	0xFE9
 20669                           wreg	equ	0xFE8
 20670                           postdec1	equ	0xFE5
 20671                           fsr1h	equ	0xFE2
 20672                           fsr1l	equ	0xFE1
 20673                           bsr	equ	0xFE0
 20674                           indf2	equ	0xFDF
 20675                           postinc2	equ	0xFDE
 20676                           postdec2	equ	0xFDD
 20677                           plusw2	equ	0xFDB
 20678                           fsr2h	equ	0xFDA
 20679                           fsr2l	equ	0xFD9
 20680                           status	equ	0xFD8
 20681                           
 20682 ;; *************** function i1_pressENTER *****************
 20683 ;; Defined at:
 20684 ;;		line 273 in file "source/DisplayProtocol.h"
 20685 ;; Parameters:    Size  Location     Type
 20686 ;;		None
 20687 ;; Auto vars:     Size  Location     Type
 20688 ;;		None
 20689 ;; Return value:  Size  Location     Type
 20690 ;;                  1    wreg      void 
 20691 ;; Registers used:
 20692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20693 ;; Tracked objects:
 20694 ;;		On entry : 0/0
 20695 ;;		On exit  : 0/0
 20696 ;;		Unchanged: 0/0
 20697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20698 ;;      Params:         0       0       0       0       0       0       0
 20699 ;;      Locals:         0       0       0       0       0       0       0
 20700 ;;      Temps:          0       0       0       0       0       0       0
 20701 ;;      Totals:         0       0       0       0       0       0       0
 20702 ;;Total ram usage:        0 bytes
 20703 ;; Hardware stack levels used:    1
 20704 ;; Hardware stack levels required when called:    9
 20705 ;; This function calls:
 20706 ;;		i1_checkPass
 20707 ;;		i1_confirmEdition
 20708 ;;		i1_desintegrator
 20709 ;;		i1_setPWM2duty
 20710 ;; This function is called by:
 20711 ;;		_UARTint
 20712 ;; This function uses a non-reentrant model
 20713 ;;
 20714                           
 20715                           	psect	text87
 20716  001CE6                     __ptext87:
 20717                           	opt stack 0
 20718  001CE6                     i1_pressENTER:
 20719                           	opt stack 9
 20720                           
 20721                           ;DisplayProtocol.h: 274: if (actualScreen == 1) {
 20722                           
 20723                           ; BSR set to: 1
 20724                           ;incstack = 0
 20725  001CE6  0101               	movlb	1	; () banked
 20726  001CE8  05BA               	decf	_actualScreen& (0+255),w,b
 20727  001CEA  A4D8               	btfss	status,2,c
 20728  001CEC  D018               	goto	i1l11779
 20729                           
 20730                           ; BSR set to: 1
 20731                           ;DisplayProtocol.h: 275: passSection++;
 20732  001CEE  0101               	movlb	1	; () banked
 20733  001CF0  2BC2               	incf	_passSection& (0+255),f,b
 20734                           
 20735                           ; BSR set to: 1
 20736                           ;DisplayProtocol.h: 276: if (passSection > 3) {
 20737  001CF2  0101               	movlb	1	; () banked
 20738  001CF4  51C2               	movf	_passSection& (0+255),w,b
 20739  001CF6  0A80               	xorlw	128
 20740  001CF8  0F7C               	addlw	-132
 20741  001CFA  A0D8               	btfss	status,0,c
 20742  001CFC  0012               	return	
 20743                           
 20744                           ; BSR set to: 1
 20745                           ;DisplayProtocol.h: 277: passSection = 0;
 20746  001CFE  0E00               	movlw	0
 20747  001D00  0101               	movlb	1	; () banked
 20748  001D02  6FC2               	movwf	_passSection& (0+255),b
 20749                           
 20750                           ; BSR set to: 1
 20751                           ;DisplayProtocol.h: 278: if (checkPass())
 20752  001D04  EC30  F02F         	call	i1_checkPass	;wreg free
 20753  001D08  0900               	iorlw	0
 20754  001D0A  B4D8               	btfsc	status,2,c
 20755  001D0C  D004               	goto	i1l11777
 20756                           
 20757                           ;DisplayProtocol.h: 279: actualScreen = 8;
 20758  001D0E  0E08               	movlw	8
 20759  001D10  0101               	movlb	1	; () banked
 20760  001D12  6FBA               	movwf	_actualScreen& (0+255),b
 20761  001D14  0012               	return	
 20762  001D16                     i1l11777:
 20763                           
 20764                           ;DisplayProtocol.h: 280: else
 20765                           ;DisplayProtocol.h: 281: actualScreen = 7;
 20766  001D16  0E07               	movlw	7
 20767  001D18  0101               	movlb	1	; () banked
 20768  001D1A  6FBA               	movwf	_actualScreen& (0+255),b
 20769                           
 20770                           ; BSR set to: 1
 20771                           ;DisplayProtocol.h: 282: }
 20772                           ;DisplayProtocol.h: 283: }else if(actualScreen == 4) {
 20773                           
 20774                           ; BSR set to: 1
 20775  001D1C  0012               	return	
 20776  001D1E                     i1l11779:
 20777                           
 20778                           ; BSR set to: 1
 20779  001D1E  0E04               	movlw	4
 20780  001D20  0101               	movlb	1	; () banked
 20781  001D22  19BA               	xorwf	_actualScreen& (0+255),w,b
 20782  001D24  B4D8               	btfsc	status,2,c
 20783  001D26  D042               	goto	i1l11807
 20784  001D28  D053               	goto	i1l11809
 20785  001D2A                     i1l680:
 20786                           
 20787                           ; BSR set to: 1
 20788                           ;DisplayProtocol.h: 286: tempLastScreen = actualScreen;
 20789  001D2A  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 20790                           
 20791                           ; BSR set to: 1
 20792                           ;DisplayProtocol.h: 287: if(ProcessStarted) {
 20793  001D2E  503A               	movf	_ProcessStarted,w,c
 20794  001D30  B4D8               	btfsc	status,2,c
 20795  001D32  D007               	goto	i1l11787
 20796                           
 20797                           ; BSR set to: 1
 20798                           ;DisplayProtocol.h: 288: actualScreen = 3;
 20799  001D34  0E03               	movlw	3
 20800  001D36  0101               	movlb	1	; () banked
 20801  001D38  6FBA               	movwf	_actualScreen& (0+255),b
 20802                           
 20803                           ;DisplayProtocol.h: 289: selSN = 0;
 20804  001D3A  0E00               	movlw	0
 20805  001D3C  0101               	movlb	1	; () banked
 20806  001D3E  6FC3               	movwf	_selSN& (0+255),b
 20807                           
 20808                           ;DisplayProtocol.h: 290: }else {
 20809  001D40  0012               	return	
 20810  001D42                     i1l11787:
 20811                           
 20812                           ; BSR set to: 1
 20813                           ;DisplayProtocol.h: 291: actualScreen = 2;
 20814  001D42  0E02               	movlw	2
 20815  001D44  0101               	movlb	1	; () banked
 20816  001D46  6FBA               	movwf	_actualScreen& (0+255),b
 20817                           
 20818                           ;DisplayProtocol.h: 292: selSN = 1;
 20819  001D48  0E01               	movlw	1
 20820  001D4A  0101               	movlb	1	; () banked
 20821  001D4C  6FC3               	movwf	_selSN& (0+255),b
 20822                           
 20823                           ; BSR set to: 1
 20824                           ;DisplayProtocol.h: 293: }
 20825                           ;DisplayProtocol.h: 294: break;
 20826  001D4E  0012               	return	
 20827  001D50                     i1l684:
 20828                           
 20829                           ; BSR set to: 1
 20830                           ;DisplayProtocol.h: 296: chanValf = kgXcorte;
 20831  001D50  C0AC  F1AE         	movff	_kgXcorte,_chanValf
 20832  001D54  C0AD  F1AF         	movff	_kgXcorte+1,_chanValf+1
 20833  001D58  C0AE  F1B0         	movff	_kgXcorte+2,_chanValf+2
 20834                           
 20835                           ; BSR set to: 1
 20836                           ;DisplayProtocol.h: 297: desintegrator();
 20837  001D5C  ECC3  F016         	call	i1_desintegrator	;wreg free
 20838                           
 20839                           ;DisplayProtocol.h: 298: actualScreen = 5;
 20840  001D60  0E05               	movlw	5
 20841  001D62  0101               	movlb	1	; () banked
 20842  001D64  6FBA               	movwf	_actualScreen& (0+255),b
 20843                           
 20844                           ;DisplayProtocol.h: 299: break;
 20845  001D66  0012               	return	
 20846  001D68                     i1l685:
 20847                           
 20848                           ; BSR set to: 1
 20849                           ;DisplayProtocol.h: 301: tempLastScreen = actualScreen;
 20850  001D68  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 20851                           
 20852                           ;DisplayProtocol.h: 302: chanVals = numCortes;
 20853  001D6C  C0B8  F1B1         	movff	_numCortes,_chanVals
 20854  001D70  C0B9  F1B2         	movff	_numCortes+1,_chanVals+1
 20855                           
 20856                           ; BSR set to: 1
 20857                           ;DisplayProtocol.h: 303: actualScreen = 5;
 20858  001D74  0E05               	movlw	5
 20859  001D76  0101               	movlb	1	; () banked
 20860  001D78  6FBA               	movwf	_actualScreen& (0+255),b
 20861                           
 20862                           ;DisplayProtocol.h: 304: break;
 20863  001D7A  0012               	return	
 20864  001D7C                     i1l686:
 20865                           
 20866                           ; BSR set to: 1
 20867                           ;DisplayProtocol.h: 306: chanValf = diamTubo;
 20868  001D7C  C0A9  F1AE         	movff	_diamTubo,_chanValf
 20869  001D80  C0AA  F1AF         	movff	_diamTubo+1,_chanValf+1
 20870  001D84  C0AB  F1B0         	movff	_diamTubo+2,_chanValf+2
 20871                           
 20872                           ; BSR set to: 1
 20873                           ;DisplayProtocol.h: 307: desintegrator();
 20874  001D88  ECC3  F016         	call	i1_desintegrator	;wreg free
 20875                           
 20876                           ;DisplayProtocol.h: 308: actualScreen = 5;
 20877  001D8C  0E05               	movlw	5
 20878  001D8E  0101               	movlb	1	; () banked
 20879  001D90  6FBA               	movwf	_actualScreen& (0+255),b
 20880                           
 20881                           ;DisplayProtocol.h: 309: break;
 20882  001D92  0012               	return	
 20883  001D94                     i1l11799:
 20884                           
 20885                           ; BSR set to: 1
 20886                           ;DisplayProtocol.h: 311: if(!ProcessStarted) {
 20887  001D94  503A               	movf	_ProcessStarted,w,c
 20888  001D96  A4D8               	btfss	status,2,c
 20889  001D98  0012               	return	
 20890                           
 20891                           ; BSR set to: 1
 20892                           ;DisplayProtocol.h: 312: tempLastScreen = actualScreen;
 20893  001D9A  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 20894                           
 20895                           ; BSR set to: 1
 20896                           ;DisplayProtocol.h: 313: selSN = 1;
 20897  001D9E  0E01               	movlw	1
 20898  001DA0  0101               	movlb	1	; () banked
 20899  001DA2  6FC3               	movwf	_selSN& (0+255),b
 20900                           
 20901                           ;DisplayProtocol.h: 314: actualScreen = 11;
 20902  001DA4  0E0B               	movlw	11
 20903  001DA6  0101               	movlb	1	; () banked
 20904  001DA8  6FBA               	movwf	_actualScreen& (0+255),b
 20905                           
 20906                           ; BSR set to: 1
 20907                           ;DisplayProtocol.h: 317: }
 20908                           ;DisplayProtocol.h: 318: }
 20909                           
 20910                           ; BSR set to: 1
 20911                           ;DisplayProtocol.h: 315: }
 20912                           ;DisplayProtocol.h: 316: break;
 20913  001DAA  0012               	return	
 20914  001DAC                     i1l11807:
 20915                           
 20916                           ; BSR set to: 1
 20917  001DAC  0101               	movlb	1	; () banked
 20918  001DAE  51C1               	movf	_menuSection& (0+255),w,b
 20919                           
 20920                           ; Switch size 1, requested type "space"
 20921                           ; Number of cases is 5, Range of values is 0 to 4
 20922                           ; switch strategies available:
 20923                           ; Name         Instructions Cycles
 20924                           ; simple_byte           16     9 (average)
 20925                           ;	Chosen strategy is simple_byte
 20926  001DB0  0A00               	xorlw	0	; case 0
 20927  001DB2  B4D8               	btfsc	status,2,c
 20928  001DB4  D7BA               	goto	i1l680
 20929  001DB6  0A01               	xorlw	1	; case 1
 20930  001DB8  B4D8               	btfsc	status,2,c
 20931  001DBA  D7CA               	goto	i1l684
 20932  001DBC  0A03               	xorlw	3	; case 2
 20933  001DBE  B4D8               	btfsc	status,2,c
 20934  001DC0  D7D3               	goto	i1l685
 20935  001DC2  0A01               	xorlw	1	; case 3
 20936  001DC4  B4D8               	btfsc	status,2,c
 20937  001DC6  D7DA               	goto	i1l686
 20938  001DC8  0A07               	xorlw	7	; case 4
 20939  001DCA  A4D8               	btfss	status,2,c
 20940                           
 20941                           ; BSR set to: 1
 20942                           ;DisplayProtocol.h: 319: }else if(actualScreen == 7)
 20943  001DCC  0012               	return	
 20944  001DCE  D7E2               	goto	i1l11799
 20945  001DD0                     i1l11809:
 20946                           
 20947                           ; BSR set to: 1
 20948  001DD0  0E07               	movlw	7
 20949  001DD2  0101               	movlb	1	; () banked
 20950  001DD4  19BA               	xorwf	_actualScreen& (0+255),w,b
 20951  001DD6  A4D8               	btfss	status,2,c
 20952  001DD8  D004               	goto	i1l11813
 20953                           
 20954                           ; BSR set to: 1
 20955                           ;DisplayProtocol.h: 320: actualScreen = 1;
 20956  001DDA  0E01               	movlw	1
 20957  001DDC  0101               	movlb	1	; () banked
 20958  001DDE  6FBA               	movwf	_actualScreen& (0+255),b
 20959  001DE0  0012               	return	
 20960  001DE2                     i1l11813:
 20961                           
 20962                           ; BSR set to: 1
 20963                           ;DisplayProtocol.h: 321: else if(actualScreen == 6) {
 20964  001DE2  0E06               	movlw	6
 20965  001DE4  0101               	movlb	1	; () banked
 20966  001DE6  19BA               	xorwf	_actualScreen& (0+255),w,b
 20967  001DE8  B4D8               	btfsc	status,2,c
 20968  001DEA  0012               	return	
 20969                           
 20970                           ; BSR set to: 1
 20971                           
 20972                           ; BSR set to: 1
 20973                           
 20974                           ; BSR set to: 1
 20975                           ;DisplayProtocol.h: 323: }else if(actualScreen == 5) {
 20976  001DEC  0E05               	movlw	5
 20977  001DEE  0101               	movlb	1	; () banked
 20978  001DF0  19BA               	xorwf	_actualScreen& (0+255),w,b
 20979  001DF2  A4D8               	btfss	status,2,c
 20980  001DF4  D017               	goto	i1l11829
 20981                           
 20982                           ; BSR set to: 1
 20983                           ;DisplayProtocol.h: 324: if(menuSection != 2) {
 20984  001DF6  0E02               	movlw	2
 20985  001DF8  0101               	movlb	1	; () banked
 20986  001DFA  19C1               	xorwf	_menuSection& (0+255),w,b
 20987  001DFC  B4D8               	btfsc	status,2,c
 20988  001DFE  D009               	goto	i1l11827
 20989                           
 20990                           ; BSR set to: 1
 20991                           ;DisplayProtocol.h: 325: chanValSection--;
 20992  001E00  0101               	movlb	1	; () banked
 20993  001E02  0794               	decf	_chanValSection& (0+255),f,b
 20994                           
 20995                           ; BSR set to: 1
 20996                           ;DisplayProtocol.h: 326: if(chanValSection < 0)
 20997  001E04  0101               	movlb	1	; () banked
 20998  001E06  AF94               	btfss	_chanValSection& (0+255),7,b
 20999  001E08  0012               	return	
 21000                           
 21001                           ; BSR set to: 1
 21002                           ;DisplayProtocol.h: 327: chanValSection = 5;
 21003  001E0A  0E05               	movlw	5
 21004  001E0C  0101               	movlb	1	; () banked
 21005  001E0E  6F94               	movwf	_chanValSection& (0+255),b
 21006                           
 21007                           ; BSR set to: 1
 21008                           ;DisplayProtocol.h: 328: }else
 21009  001E10  0012               	return	
 21010  001E12                     i1l11827:
 21011                           
 21012                           ; BSR set to: 1
 21013                           ;DisplayProtocol.h: 329: confirmEdition(!ProcessStarted);
 21014  001E12  503A               	movf	_ProcessStarted,w,c
 21015  001E14  A4D8               	btfss	status,2,c
 21016  001E16  D002               	goto	i1u1755_20
 21017  001E18  0E01               	movlw	1
 21018  001E1A  D001               	goto	i1u1756_20
 21019  001E1C                     i1u1755_20:
 21020  001E1C  0E00               	movlw	0
 21021  001E1E                     i1u1756_20:
 21022  001E1E  EC4B  F024         	call	i1_confirmEdition
 21023                           
 21024                           ;DisplayProtocol.h: 330: }else if(actualScreen == 2) {
 21025  001E22  0012               	return	
 21026  001E24                     i1l11829:
 21027  001E24  0E02               	movlw	2
 21028  001E26  0101               	movlb	1	; () banked
 21029  001E28  19BA               	xorwf	_actualScreen& (0+255),w,b
 21030  001E2A  A4D8               	btfss	status,2,c
 21031  001E2C  D01E               	goto	i1l11841
 21032                           
 21033                           ; BSR set to: 1
 21034                           ;DisplayProtocol.h: 331: ProcessStarted = !selSN;
 21035  001E2E  0101               	movlb	1	; () banked
 21036  001E30  51C3               	movf	_selSN& (0+255),w,b
 21037  001E32  A4D8               	btfss	status,2,c
 21038  001E34  D002               	goto	i1u1758_20
 21039  001E36  0E01               	movlw	1
 21040  001E38  D001               	goto	i1u1759_20
 21041  001E3A                     i1u1758_20:
 21042  001E3A  0E00               	movlw	0
 21043  001E3C                     i1u1759_20:
 21044  001E3C  6E3A               	movwf	_ProcessStarted,c
 21045                           
 21046                           ;DisplayProtocol.h: 332: bladeIsUP = 2;
 21047  001E3E  0E02               	movlw	2
 21048  001E40  6E50               	movwf	_bladeIsUP,c
 21049                           
 21050                           ;DisplayProtocol.h: 333: if(ProcessStarted && bladeIsUP != 1) {
 21051  001E42  503A               	movf	_ProcessStarted,w,c
 21052  001E44  B4D8               	btfsc	status,2,c
 21053  001E46  D00E               	goto	i1l11839
 21054                           
 21055                           ; BSR set to: 1
 21056  001E48  0450               	decf	_bladeIsUP,w,c
 21057  001E4A  B4D8               	btfsc	status,2,c
 21058  001E4C  D00B               	goto	i1l11839
 21059                           
 21060                           ; BSR set to: 1
 21061                           ;DisplayProtocol.h: 334: processState = 0;
 21062  001E4E  0E00               	movlw	0
 21063  001E50  6E36               	movwf	_processState+1,c
 21064  001E52  0E00               	movlw	0
 21065  001E54  6E35               	movwf	_processState,c
 21066                           
 21067                           ; BSR set to: 1
 21068                           ;DisplayProtocol.h: 335: setPWM2duty(-400);
 21069  001E56  0EFE               	movlw	254
 21070  001E58  0100               	movlb	0	; () banked
 21071  001E5A  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 21072  001E5C  0E70               	movlw	112
 21073  001E5E  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 21074  001E60  ECC7  F02D         	call	i1_setPWM2duty	;wreg free
 21075  001E64                     i1l11839:
 21076                           
 21077                           ;DisplayProtocol.h: 336: }
 21078                           ;DisplayProtocol.h: 337: actualScreen = tempLastScreen;
 21079  001E64  C0CA  F1BA         	movff	_tempLastScreen,_actualScreen
 21080                           
 21081                           ;DisplayProtocol.h: 338: }else if(actualScreen == 3) {
 21082  001E68  0012               	return	
 21083  001E6A                     i1l11841:
 21084  001E6A  0E03               	movlw	3
 21085  001E6C  0101               	movlb	1	; () banked
 21086  001E6E  19BA               	xorwf	_actualScreen& (0+255),w,b
 21087  001E70  A4D8               	btfss	status,2,c
 21088  001E72  D005               	goto	i1l11845
 21089                           
 21090                           ; BSR set to: 1
 21091                           ;DisplayProtocol.h: 339: ProcessStarted = selSN;
 21092  001E74  C1C3  F03A         	movff	_selSN,_ProcessStarted
 21093                           
 21094                           ;DisplayProtocol.h: 340: actualScreen = tempLastScreen;
 21095  001E78  C0CA  F1BA         	movff	_tempLastScreen,_actualScreen
 21096                           
 21097                           ;DisplayProtocol.h: 341: }else if(actualScreen == 10) {
 21098  001E7C  0012               	return	
 21099  001E7E                     i1l11845:
 21100                           
 21101                           ; BSR set to: 1
 21102  001E7E  0E0A               	movlw	10
 21103  001E80  0101               	movlb	1	; () banked
 21104  001E82  19BA               	xorwf	_actualScreen& (0+255),w,b
 21105  001E84  A4D8               	btfss	status,2,c
 21106  001E86  D00B               	goto	i1l11851
 21107                           
 21108                           ; BSR set to: 1
 21109                           ;DisplayProtocol.h: 342: if(!selSN)
 21110  001E88  0101               	movlb	1	; () banked
 21111  001E8A  51C3               	movf	_selSN& (0+255),w,b
 21112  001E8C  A4D8               	btfss	status,2,c
 21113  001E8E  D004               	goto	i1l705
 21114                           
 21115                           ; BSR set to: 1
 21116                           ;DisplayProtocol.h: 343: confirmEdition(1);
 21117  001E90  0E01               	movlw	1
 21118  001E92  EC4B  F024         	call	i1_confirmEdition
 21119  001E96  0012               	return	
 21120  001E98                     i1l705:
 21121                           
 21122                           ; BSR set to: 1
 21123                           ;DisplayProtocol.h: 344: else
 21124                           ;DisplayProtocol.h: 345: actualScreen = tempLastScreen;
 21125  001E98  C0CA  F1BA         	movff	_tempLastScreen,_actualScreen
 21126                           
 21127                           ; BSR set to: 1
 21128                           ;DisplayProtocol.h: 346: }else if(actualScreen == 8)
 21129  001E9C  0012               	return	
 21130  001E9E                     i1l11851:
 21131                           
 21132                           ; BSR set to: 1
 21133  001E9E  0E08               	movlw	8
 21134  001EA0  0101               	movlb	1	; () banked
 21135  001EA2  19BA               	xorwf	_actualScreen& (0+255),w,b
 21136  001EA4  A4D8               	btfss	status,2,c
 21137  001EA6  D004               	goto	i1l11855
 21138                           
 21139                           ; BSR set to: 1
 21140                           ;DisplayProtocol.h: 347: actualScreen = 4;
 21141  001EA8  0E04               	movlw	4
 21142  001EAA  0101               	movlb	1	; () banked
 21143  001EAC  6FBA               	movwf	_actualScreen& (0+255),b
 21144  001EAE  0012               	return	
 21145  001EB0                     i1l11855:
 21146                           
 21147                           ; BSR set to: 1
 21148                           ;DisplayProtocol.h: 348: else if(actualScreen == 9)
 21149  001EB0  0E09               	movlw	9
 21150  001EB2  0101               	movlb	1	; () banked
 21151  001EB4  19BA               	xorwf	_actualScreen& (0+255),w,b
 21152  001EB6  A4D8               	btfss	status,2,c
 21153  001EB8  D004               	goto	i1l11859
 21154                           
 21155                           ; BSR set to: 1
 21156                           ;DisplayProtocol.h: 349: actualScreen = 0;
 21157  001EBA  0E00               	movlw	0
 21158  001EBC  0101               	movlb	1	; () banked
 21159  001EBE  6FBA               	movwf	_actualScreen& (0+255),b
 21160  001EC0  0012               	return	
 21161  001EC2                     i1l11859:
 21162                           
 21163                           ; BSR set to: 1
 21164                           ;DisplayProtocol.h: 350: else if(actualScreen == 11) {
 21165  001EC2  0E0B               	movlw	11
 21166  001EC4  0101               	movlb	1	; () banked
 21167  001EC6  19BA               	xorwf	_actualScreen& (0+255),w,b
 21168  001EC8  A4D8               	btfss	status,2,c
 21169  001ECA  D059               	goto	i1l11899
 21170                           
 21171                           ; BSR set to: 1
 21172                           ;DisplayProtocol.h: 351: if(!selSN) {
 21173  001ECC  0101               	movlb	1	; () banked
 21174  001ECE  51C3               	movf	_selSN& (0+255),w,b
 21175  001ED0  A4D8               	btfss	status,2,c
 21176  001ED2  D051               	goto	i1l11897
 21177                           
 21178                           ; BSR set to: 1
 21179                           ;DisplayProtocol.h: 352: chanValf = 0;
 21180  001ED4  0E00               	movlw	0
 21181  001ED6  0101               	movlb	1	; () banked
 21182  001ED8  6FAE               	movwf	_chanValf& (0+255),b
 21183  001EDA  0E00               	movlw	0
 21184  001EDC  0101               	movlb	1	; () banked
 21185  001EDE  6FAF               	movwf	(_chanValf+1)& (0+255),b
 21186  001EE0  0E00               	movlw	0
 21187  001EE2  0101               	movlb	1	; () banked
 21188  001EE4  6FB0               	movwf	(_chanValf+2)& (0+255),b
 21189                           
 21190                           ; BSR set to: 1
 21191                           ;DisplayProtocol.h: 353: desintegrator();
 21192  001EE6  ECC3  F016         	call	i1_desintegrator	;wreg free
 21193                           
 21194                           ;DisplayProtocol.h: 354: temptiXcorte = tiXcorte;
 21195  001EEA  C0B2  F0AF         	movff	_tiXcorte,_temptiXcorte
 21196  001EEE  C0B3  F0B0         	movff	_tiXcorte+1,_temptiXcorte+1
 21197  001EF2  C0B4  F0B1         	movff	_tiXcorte+2,_temptiXcorte+2
 21198                           
 21199                           ;DisplayProtocol.h: 355: tiXcorte = 5.0f;
 21200  001EF6  0E00               	movlw	0
 21201  001EF8  0100               	movlb	0	; () banked
 21202  001EFA  6FB2               	movwf	_tiXcorte& (0+255),b
 21203  001EFC  0EA0               	movlw	160
 21204  001EFE  0100               	movlb	0	; () banked
 21205  001F00  6FB3               	movwf	(_tiXcorte+1)& (0+255),b
 21206  001F02  0E40               	movlw	64
 21207  001F04  0100               	movlb	0	; () banked
 21208  001F06  6FB4               	movwf	(_tiXcorte+2)& (0+255),b
 21209                           
 21210                           ; BSR set to: 0
 21211                           ;DisplayProtocol.h: 356: timsXcorte = 5000.0f;
 21212  001F08  0E40               	movlw	64
 21213  001F0A  6E4D               	movwf	_timsXcorte,c
 21214  001F0C  0E9C               	movlw	156
 21215  001F0E  6E4E               	movwf	_timsXcorte+1,c
 21216  001F10  0E45               	movlw	69
 21217  001F12  6E4F               	movwf	_timsXcorte+2,c
 21218                           
 21219                           ; BSR set to: 0
 21220                           ;DisplayProtocol.h: 357: tempNumCortes = numCortes;
 21221  001F14  C0B8  F192         	movff	_numCortes,_tempNumCortes
 21222  001F18  C0B9  F193         	movff	_numCortes+1,_tempNumCortes+1
 21223                           
 21224                           ; BSR set to: 0
 21225                           ;DisplayProtocol.h: 358: numCortes = 1;
 21226  001F1C  0E00               	movlw	0
 21227  001F1E  0100               	movlb	0	; () banked
 21228  001F20  6FB9               	movwf	(_numCortes+1)& (0+255),b
 21229  001F22  0E01               	movlw	1
 21230  001F24  6FB8               	movwf	_numCortes& (0+255),b
 21231                           
 21232                           ; BSR set to: 0
 21233                           ;DisplayProtocol.h: 359: processState = 0;
 21234  001F26  0E00               	movlw	0
 21235  001F28  6E36               	movwf	_processState+1,c
 21236  001F2A  0E00               	movlw	0
 21237  001F2C  6E35               	movwf	_processState,c
 21238                           
 21239                           ; BSR set to: 0
 21240                           ;DisplayProtocol.h: 360: processTimer = 0;
 21241  001F2E  0E00               	movlw	0
 21242  001F30  6E2B               	movwf	_processTimer,c
 21243  001F32  0E00               	movlw	0
 21244  001F34  6E2C               	movwf	_processTimer+1,c
 21245  001F36  0E00               	movlw	0
 21246  001F38  6E2D               	movwf	_processTimer+2,c
 21247  001F3A  0E00               	movlw	0
 21248  001F3C  6E2E               	movwf	_processTimer+3,c
 21249                           
 21250                           ; BSR set to: 0
 21251                           ;DisplayProtocol.h: 361: bladeIsUP = 2;
 21252  001F3E  0E02               	movlw	2
 21253  001F40  6E50               	movwf	_bladeIsUP,c
 21254                           
 21255                           ; BSR set to: 0
 21256                           ;DisplayProtocol.h: 362: ProcessStarted = 1;
 21257  001F42  0E01               	movlw	1
 21258  001F44  6E3A               	movwf	_ProcessStarted,c
 21259                           
 21260                           ; BSR set to: 0
 21261                           ;DisplayProtocol.h: 363: if(ProcessStarted && bladeIsUP != 1) {
 21262  001F46  503A               	movf	_ProcessStarted,w,c
 21263  001F48  B4D8               	btfsc	status,2,c
 21264  001F4A  D00E               	goto	i1l11893
 21265                           
 21266                           ; BSR set to: 0
 21267  001F4C  0450               	decf	_bladeIsUP,w,c
 21268  001F4E  B4D8               	btfsc	status,2,c
 21269  001F50  D00B               	goto	i1l11893
 21270                           
 21271                           ; BSR set to: 0
 21272                           ;DisplayProtocol.h: 364: processState = 0;
 21273  001F52  0E00               	movlw	0
 21274  001F54  6E36               	movwf	_processState+1,c
 21275  001F56  0E00               	movlw	0
 21276  001F58  6E35               	movwf	_processState,c
 21277                           
 21278                           ; BSR set to: 0
 21279                           ;DisplayProtocol.h: 365: setPWM2duty(-400);
 21280  001F5A  0EFE               	movlw	254
 21281  001F5C  0100               	movlb	0	; () banked
 21282  001F5E  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 21283  001F60  0E70               	movlw	112
 21284  001F62  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 21285  001F64  ECC7  F02D         	call	i1_setPWM2duty	;wreg free
 21286  001F68                     i1l11893:
 21287                           
 21288                           ;DisplayProtocol.h: 366: }
 21289                           ;DisplayProtocol.h: 367: calibLevel = 0;
 21290  001F68  0E00               	movlw	0
 21291  001F6A  0101               	movlb	1	; () banked
 21292  001F6C  6FBB               	movwf	_calibLevel& (0+255),b
 21293                           
 21294                           ; BSR set to: 1
 21295                           ;DisplayProtocol.h: 368: actualScreen = 6;
 21296  001F6E  0E06               	movlw	6
 21297  001F70  0101               	movlb	1	; () banked
 21298  001F72  6FBA               	movwf	_actualScreen& (0+255),b
 21299                           
 21300                           ;DisplayProtocol.h: 369: }else
 21301  001F74  0012               	return	
 21302  001F76                     i1l11897:
 21303                           
 21304                           ; BSR set to: 1
 21305                           ;DisplayProtocol.h: 370: actualScreen = 4;
 21306  001F76  0E04               	movlw	4
 21307  001F78  0101               	movlb	1	; () banked
 21308  001F7A  6FBA               	movwf	_actualScreen& (0+255),b
 21309                           
 21310                           ; BSR set to: 1
 21311                           ;DisplayProtocol.h: 371: }else if(actualScreen == 12) {
 21312  001F7C  0012               	return	
 21313  001F7E                     i1l11899:
 21314                           
 21315                           ; BSR set to: 1
 21316  001F7E  0E0C               	movlw	12
 21317  001F80  0101               	movlb	1	; () banked
 21318  001F82  19BA               	xorwf	_actualScreen& (0+255),w,b
 21319  001F84  A4D8               	btfss	status,2,c
 21320  001F86  0012               	return	
 21321                           
 21322                           ; BSR set to: 1
 21323                           ;DisplayProtocol.h: 372: chanValSection--;
 21324  001F88  0101               	movlb	1	; () banked
 21325  001F8A  0794               	decf	_chanValSection& (0+255),f,b
 21326                           
 21327                           ; BSR set to: 1
 21328                           ;DisplayProtocol.h: 373: if(chanValSection < 0)
 21329  001F8C  0101               	movlb	1	; () banked
 21330  001F8E  AF94               	btfss	_chanValSection& (0+255),7,b
 21331  001F90  0012               	return	
 21332                           
 21333                           ; BSR set to: 1
 21334                           ;DisplayProtocol.h: 374: chanValSection = 5;
 21335  001F92  0E05               	movlw	5
 21336  001F94  0101               	movlb	1	; () banked
 21337  001F96  6F94               	movwf	_chanValSection& (0+255),b
 21338                           
 21339                           ; BSR set to: 1
 21340                           
 21341                           ; BSR set to: 1
 21342                           
 21343                           ; BSR set to: 1
 21344                           
 21345                           ; BSR set to: 1
 21346                           
 21347                           ; BSR set to: 1
 21348                           
 21349                           ; BSR set to: 1
 21350                           
 21351                           ; BSR set to: 1
 21352                           
 21353                           ; BSR set to: 1
 21354                           
 21355                           ; BSR set to: 1
 21356                           
 21357                           ; BSR set to: 1
 21358                           
 21359                           ; BSR set to: 1
 21360                           
 21361                           ; BSR set to: 1
 21362  001F98  0012               	return	
 21363  001F9A                     __end_ofi1_pressENTER:
 21364                           	opt stack 0
 21365                           pclatu	equ	0xFFB
 21366                           pclath	equ	0xFFA
 21367                           tblptru	equ	0xFF8
 21368                           tblptrh	equ	0xFF7
 21369                           tblptrl	equ	0xFF6
 21370                           tablat	equ	0xFF5
 21371                           prodh	equ	0xFF4
 21372                           prodl	equ	0xFF3
 21373                           intcon	equ	0xFF2
 21374                           postinc0	equ	0xFEE
 21375                           fsr0h	equ	0xFEA
 21376                           fsr0l	equ	0xFE9
 21377                           wreg	equ	0xFE8
 21378                           postdec1	equ	0xFE5
 21379                           fsr1h	equ	0xFE2
 21380                           fsr1l	equ	0xFE1
 21381                           bsr	equ	0xFE0
 21382                           indf2	equ	0xFDF
 21383                           postinc2	equ	0xFDE
 21384                           postdec2	equ	0xFDD
 21385                           plusw2	equ	0xFDB
 21386                           fsr2h	equ	0xFDA
 21387                           fsr2l	equ	0xFD9
 21388                           status	equ	0xFD8
 21389                           
 21390 ;; *************** function i1_desintegrator *****************
 21391 ;; Defined at:
 21392 ;;		line 46 in file "source/DisplayProtocol.h"
 21393 ;; Parameters:    Size  Location     Type
 21394 ;;		None
 21395 ;; Auto vars:     Size  Location     Type
 21396 ;;  desintegrato    4   36[BANK0 ] long 
 21397 ;;  desintegrato    4   32[BANK0 ] long 
 21398 ;;  desintegrato    4   28[BANK0 ] long 
 21399 ;;  desintegrato    3   25[BANK0 ] float 
 21400 ;;  desintegrato    2   40[BANK0 ] int 
 21401 ;; Return value:  Size  Location     Type
 21402 ;;                  1    wreg      void 
 21403 ;; Registers used:
 21404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21405 ;; Tracked objects:
 21406 ;;		On entry : 0/0
 21407 ;;		On exit  : 0/0
 21408 ;;		Unchanged: 0/0
 21409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21410 ;;      Params:         0       0       0       0       0       0       0
 21411 ;;      Locals:         0      17       0       0       0       0       0
 21412 ;;      Temps:          0       2       0       0       0       0       0
 21413 ;;      Totals:         0      19       0       0       0       0       0
 21414 ;;Total ram usage:       19 bytes
 21415 ;; Hardware stack levels used:    1
 21416 ;; Hardware stack levels required when called:    6
 21417 ;; This function calls:
 21418 ;;		i1___aldiv
 21419 ;;		i1___ftmul
 21420 ;;		i1___fttol
 21421 ;;		i1___lmul
 21422 ;; This function is called by:
 21423 ;;		i1_pressENTER
 21424 ;; This function uses a non-reentrant model
 21425 ;;
 21426                           
 21427                           	psect	text88
 21428  002D86                     __ptext88:
 21429                           	opt stack 0
 21430  002D86                     i1_desintegrator:
 21431                           	opt stack 11
 21432                           
 21433                           ;DisplayProtocol.h: 47: chanValSection = 5;
 21434                           
 21435                           ;incstack = 0
 21436  002D86  0E05               	movlw	5
 21437  002D88  0101               	movlb	1	; () banked
 21438  002D8A  6F94               	movwf	_chanValSection& (0+255),b
 21439                           
 21440                           ; BSR set to: 1
 21441                           ;DisplayProtocol.h: 48: float temp = (float)chanValf*1000;
 21442  002D8C  C1AE  F068         	movff	_chanValf,i1___ftmul@f1
 21443  002D90  C1AF  F069         	movff	_chanValf+1,i1___ftmul@f1+1
 21444  002D94  C1B0  F06A         	movff	_chanValf+2,i1___ftmul@f1+2
 21445  002D98  0E00               	movlw	0
 21446  002D9A  0100               	movlb	0	; () banked
 21447  002D9C  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 21448  002D9E  0E7A               	movlw	122
 21449  002DA0  0100               	movlb	0	; () banked
 21450  002DA2  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 21451  002DA4  0E44               	movlw	68
 21452  002DA6  0100               	movlb	0	; () banked
 21453  002DA8  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 21454  002DAA  ECA3  F01A         	call	i1___ftmul	;wreg free
 21455  002DAE  C068  F079         	movff	?i1___ftmul,i1desintegrator@temp
 21456  002DB2  C069  F07A         	movff	?i1___ftmul+1,i1desintegrator@temp+1
 21457  002DB6  C06A  F07B         	movff	?i1___ftmul+2,i1desintegrator@temp+2
 21458                           
 21459                           ;DisplayProtocol.h: 49: long tempL = (long)temp;
 21460  002DBA  C079  F060         	movff	i1desintegrator@temp,i1___fttol@f1
 21461  002DBE  C07A  F061         	movff	i1desintegrator@temp+1,i1___fttol@f1+1
 21462  002DC2  C07B  F062         	movff	i1desintegrator@temp+2,i1___fttol@f1+2
 21463  002DC6  EC40  F01D         	call	i1___fttol	;wreg free
 21464  002DCA  C060  F07C         	movff	?i1___fttol,i1desintegrator@tempL
 21465  002DCE  C061  F07D         	movff	?i1___fttol+1,i1desintegrator@tempL+1
 21466  002DD2  C062  F07E         	movff	?i1___fttol+2,i1desintegrator@tempL+2
 21467  002DD6  C063  F07F         	movff	?i1___fttol+3,i1desintegrator@tempL+3
 21468                           
 21469                           ;DisplayProtocol.h: 50: long temp2 = 0;
 21470  002DDA  0E00               	movlw	0
 21471  002DDC  0100               	movlb	0	; () banked
 21472  002DDE  6F84               	movwf	i1desintegrator@temp2& (0+255),b
 21473  002DE0  0E00               	movlw	0
 21474  002DE2  6F85               	movwf	(i1desintegrator@temp2+1)& (0+255),b
 21475  002DE4  0E00               	movlw	0
 21476  002DE6  6F86               	movwf	(i1desintegrator@temp2+2)& (0+255),b
 21477  002DE8  0E00               	movlw	0
 21478  002DEA  6F87               	movwf	(i1desintegrator@temp2+3)& (0+255),b
 21479                           
 21480                           ;DisplayProtocol.h: 51: long temp3 = 0;
 21481  002DEC  0E00               	movlw	0
 21482  002DEE  0100               	movlb	0	; () banked
 21483  002DF0  6F80               	movwf	i1desintegrator@temp3& (0+255),b
 21484  002DF2  0E00               	movlw	0
 21485  002DF4  6F81               	movwf	(i1desintegrator@temp3+1)& (0+255),b
 21486  002DF6  0E00               	movlw	0
 21487  002DF8  6F82               	movwf	(i1desintegrator@temp3+2)& (0+255),b
 21488  002DFA  0E00               	movlw	0
 21489  002DFC  6F83               	movwf	(i1desintegrator@temp3+3)& (0+255),b
 21490                           
 21491                           ;DisplayProtocol.h: 52: int i;
 21492                           ;DisplayProtocol.h: 53: for(i = 0; i < 6; i++) {
 21493  002DFE  0E00               	movlw	0
 21494  002E00  0100               	movlb	0	; () banked
 21495  002E02  6F89               	movwf	(i1desintegrator@i+1)& (0+255),b
 21496  002E04  0E00               	movlw	0
 21497  002E06  6F88               	movwf	i1desintegrator@i& (0+255),b
 21498                           
 21499                           ; BSR set to: 0
 21500  002E08  0100               	movlb	0	; () banked
 21501  002E0A  BF89               	btfsc	(i1desintegrator@i+1)& (0+255),7,b
 21502  002E0C  D00A               	goto	i1l10749
 21503  002E0E  0100               	movlb	0	; () banked
 21504  002E10  5189               	movf	(i1desintegrator@i+1)& (0+255),w,b
 21505  002E12  E106               	bnz	i1u1531_20
 21506  002E14  0E06               	movlw	6
 21507  002E16  0100               	movlb	0	; () banked
 21508  002E18  5D88               	subwf	i1desintegrator@i& (0+255),w,b
 21509  002E1A  B0D8               	btfsc	status,0,c
 21510  002E1C  0012               	return	
 21511  002E1E  D001               	goto	i1l10749
 21512  002E20                     i1u1531_20:
 21513                           
 21514                           ; BSR set to: 0
 21515  002E20  0012               	return	
 21516  002E22                     i1l10749:
 21517                           
 21518                           ; BSR set to: 0
 21519                           ;DisplayProtocol.h: 54: temp2 = tempL/exp10[i];
 21520  002E22  C07C  F060         	movff	i1desintegrator@tempL,i1___aldiv@dividend
 21521  002E26  C07D  F061         	movff	i1desintegrator@tempL+1,i1___aldiv@dividend+1
 21522  002E2A  C07E  F062         	movff	i1desintegrator@tempL+2,i1___aldiv@dividend+2
 21523  002E2E  C07F  F063         	movff	i1desintegrator@tempL+3,i1___aldiv@dividend+3
 21524  002E32  0E77               	movlw	low _exp10
 21525  002E34  0100               	movlb	0	; () banked
 21526  002E36  6F77               	movwf	??i1_desintegrator& (0+255),b
 21527  002E38  0E01               	movlw	high _exp10
 21528  002E3A  0100               	movlb	0	; () banked
 21529  002E3C  6F78               	movwf	(??i1_desintegrator+1)& (0+255),b
 21530  002E3E  90D8               	bcf	status,0,c
 21531  002E40  0100               	movlb	0	; () banked
 21532  002E42  3588               	rlcf	i1desintegrator@i& (0+255),w,b
 21533  002E44  6ED9               	movwf	fsr2l,c
 21534  002E46  0100               	movlb	0	; () banked
 21535  002E48  3589               	rlcf	(i1desintegrator@i+1)& (0+255),w,b
 21536  002E4A  6EDA               	movwf	fsr2h,c
 21537  002E4C  90D8               	bcf	status,0,c
 21538  002E4E  36D9               	rlcf	fsr2l,f,c
 21539  002E50  36DA               	rlcf	fsr2h,f,c
 21540  002E52  0100               	movlb	0	; () banked
 21541  002E54  5177               	movf	??i1_desintegrator& (0+255),w,b
 21542  002E56  26D9               	addwf	fsr2l,f,c
 21543  002E58  0100               	movlb	0	; () banked
 21544  002E5A  5178               	movf	(??i1_desintegrator+1)& (0+255),w,b
 21545  002E5C  22DA               	addwfc	fsr2h,f,c
 21546  002E5E  CFDE F064          	movff	postinc2,i1___aldiv@divisor
 21547  002E62  CFDE F065          	movff	postinc2,i1___aldiv@divisor+1
 21548  002E66  CFDE F066          	movff	postinc2,i1___aldiv@divisor+2
 21549  002E6A  CFDE F067          	movff	postinc2,i1___aldiv@divisor+3
 21550  002E6E  EC91  F01F         	call	i1___aldiv	;wreg free
 21551  002E72  C060  F084         	movff	?i1___aldiv,i1desintegrator@temp2
 21552  002E76  C061  F085         	movff	?i1___aldiv+1,i1desintegrator@temp2+1
 21553  002E7A  C062  F086         	movff	?i1___aldiv+2,i1desintegrator@temp2+2
 21554  002E7E  C063  F087         	movff	?i1___aldiv+3,i1desintegrator@temp2+3
 21555                           
 21556                           ;DisplayProtocol.h: 55: temp3 = temp2*exp10[i];
 21557  002E82  0E77               	movlw	low _exp10
 21558  002E84  0100               	movlb	0	; () banked
 21559  002E86  6F77               	movwf	??i1_desintegrator& (0+255),b
 21560  002E88  0E01               	movlw	high _exp10
 21561  002E8A  0100               	movlb	0	; () banked
 21562  002E8C  6F78               	movwf	(??i1_desintegrator+1)& (0+255),b
 21563  002E8E  90D8               	bcf	status,0,c
 21564  002E90  0100               	movlb	0	; () banked
 21565  002E92  3588               	rlcf	i1desintegrator@i& (0+255),w,b
 21566  002E94  6ED9               	movwf	fsr2l,c
 21567  002E96  0100               	movlb	0	; () banked
 21568  002E98  3589               	rlcf	(i1desintegrator@i+1)& (0+255),w,b
 21569  002E9A  6EDA               	movwf	fsr2h,c
 21570  002E9C  90D8               	bcf	status,0,c
 21571  002E9E  36D9               	rlcf	fsr2l,f,c
 21572  002EA0  36DA               	rlcf	fsr2h,f,c
 21573  002EA2  0100               	movlb	0	; () banked
 21574  002EA4  5177               	movf	??i1_desintegrator& (0+255),w,b
 21575  002EA6  26D9               	addwf	fsr2l,f,c
 21576  002EA8  0100               	movlb	0	; () banked
 21577  002EAA  5178               	movf	(??i1_desintegrator+1)& (0+255),w,b
 21578  002EAC  22DA               	addwfc	fsr2h,f,c
 21579  002EAE  CFDE F060          	movff	postinc2,i1___lmul@multiplier
 21580  002EB2  CFDE F061          	movff	postinc2,i1___lmul@multiplier+1
 21581  002EB6  CFDE F062          	movff	postinc2,i1___lmul@multiplier+2
 21582  002EBA  CFDE F063          	movff	postinc2,i1___lmul@multiplier+3
 21583  002EBE  C084  F064         	movff	i1desintegrator@temp2,i1___lmul@multiplicand
 21584  002EC2  C085  F065         	movff	i1desintegrator@temp2+1,i1___lmul@multiplicand+1
 21585  002EC6  C086  F066         	movff	i1desintegrator@temp2+2,i1___lmul@multiplicand+2
 21586  002ECA  C087  F067         	movff	i1desintegrator@temp2+3,i1___lmul@multiplicand+3
 21587  002ECE  EC28  F031         	call	i1___lmul	;wreg free
 21588  002ED2  C060  F080         	movff	?i1___lmul,i1desintegrator@temp3
 21589  002ED6  C061  F081         	movff	?i1___lmul+1,i1desintegrator@temp3+1
 21590  002EDA  C062  F082         	movff	?i1___lmul+2,i1desintegrator@temp3+2
 21591  002EDE  C063  F083         	movff	?i1___lmul+3,i1desintegrator@temp3+3
 21592                           
 21593                           ;DisplayProtocol.h: 56: chanValdig[i] = temp2;
 21594  002EE2  0EA0               	movlw	low _chanValdig
 21595  002EE4  0100               	movlb	0	; () banked
 21596  002EE6  2588               	addwf	i1desintegrator@i& (0+255),w,b
 21597  002EE8  6ED9               	movwf	fsr2l,c
 21598  002EEA  0E01               	movlw	high _chanValdig
 21599  002EEC  0100               	movlb	0	; () banked
 21600  002EEE  2189               	addwfc	(i1desintegrator@i+1)& (0+255),w,b
 21601  002EF0  6EDA               	movwf	fsr2h,c
 21602  002EF2  C084  FFDF         	movff	i1desintegrator@temp2,indf2
 21603                           
 21604                           ; BSR set to: 0
 21605                           ;DisplayProtocol.h: 57: tempL -= temp3;
 21606  002EF6  0100               	movlb	0	; () banked
 21607  002EF8  5180               	movf	i1desintegrator@temp3& (0+255),w,b
 21608  002EFA  0100               	movlb	0	; () banked
 21609  002EFC  5F7C               	subwf	i1desintegrator@tempL& (0+255),f,b
 21610  002EFE  0100               	movlb	0	; () banked
 21611  002F00  5181               	movf	(i1desintegrator@temp3+1)& (0+255),w,b
 21612  002F02  0100               	movlb	0	; () banked
 21613  002F04  5B7D               	subwfb	(i1desintegrator@tempL+1)& (0+255),f,b
 21614  002F06  0100               	movlb	0	; () banked
 21615  002F08  5182               	movf	(i1desintegrator@temp3+2)& (0+255),w,b
 21616  002F0A  0100               	movlb	0	; () banked
 21617  002F0C  5B7E               	subwfb	(i1desintegrator@tempL+2)& (0+255),f,b
 21618  002F0E  0100               	movlb	0	; () banked
 21619  002F10  5183               	movf	(i1desintegrator@temp3+3)& (0+255),w,b
 21620  002F12  0100               	movlb	0	; () banked
 21621  002F14  5B7F               	subwfb	(i1desintegrator@tempL+3)& (0+255),f,b
 21622                           
 21623                           ; BSR set to: 0
 21624  002F16  0100               	movlb	0	; () banked
 21625  002F18  4B88               	infsnz	i1desintegrator@i& (0+255),f,b
 21626  002F1A  2B89               	incf	(i1desintegrator@i+1)& (0+255),f,b
 21627                           
 21628                           ; BSR set to: 0
 21629  002F1C  0100               	movlb	0	; () banked
 21630  002F1E  BF89               	btfsc	(i1desintegrator@i+1)& (0+255),7,b
 21631  002F20  D780               	goto	i1l10749
 21632  002F22  0100               	movlb	0	; () banked
 21633  002F24  5189               	movf	(i1desintegrator@i+1)& (0+255),w,b
 21634  002F26  E101               	bnz	i1l537
 21635  002F28  D775               	goto	L8
 21636  002F2A                     i1l537:
 21637                           
 21638                           ; BSR set to: 0
 21639  002F2A  0012               	return		;funcret
 21640  002F2C                     __end_ofi1_desintegrator:
 21641                           	opt stack 0
 21642                           pclatu	equ	0xFFB
 21643                           pclath	equ	0xFFA
 21644                           tblptru	equ	0xFF8
 21645                           tblptrh	equ	0xFF7
 21646                           tblptrl	equ	0xFF6
 21647                           tablat	equ	0xFF5
 21648                           prodh	equ	0xFF4
 21649                           prodl	equ	0xFF3
 21650                           intcon	equ	0xFF2
 21651                           postinc0	equ	0xFEE
 21652                           fsr0h	equ	0xFEA
 21653                           fsr0l	equ	0xFE9
 21654                           wreg	equ	0xFE8
 21655                           postdec1	equ	0xFE5
 21656                           fsr1h	equ	0xFE2
 21657                           fsr1l	equ	0xFE1
 21658                           bsr	equ	0xFE0
 21659                           indf2	equ	0xFDF
 21660                           postinc2	equ	0xFDE
 21661                           postdec2	equ	0xFDD
 21662                           plusw2	equ	0xFDB
 21663                           fsr2h	equ	0xFDA
 21664                           fsr2l	equ	0xFD9
 21665                           status	equ	0xFD8
 21666                           
 21667 ;; *************** function i1___fttol *****************
 21668 ;; Defined at:
 21669 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 21670 ;; Parameters:    Size  Location     Type
 21671 ;;  f1              3    0[BANK0 ] float 
 21672 ;; Auto vars:     Size  Location     Type
 21673 ;;  __fttol         4   10[BANK0 ] unsigned long 
 21674 ;;  __fttol         1   14[BANK0 ] unsigned char 
 21675 ;;  __fttol         1    9[BANK0 ] unsigned char 
 21676 ;; Return value:  Size  Location     Type
 21677 ;;                  4    0[BANK0 ] long 
 21678 ;; Registers used:
 21679 ;;		wreg, status,2, status,0
 21680 ;; Tracked objects:
 21681 ;;		On entry : 0/0
 21682 ;;		On exit  : 0/0
 21683 ;;		Unchanged: 0/0
 21684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21685 ;;      Params:         0       4       0       0       0       0       0
 21686 ;;      Locals:         0       6       0       0       0       0       0
 21687 ;;      Temps:          0       5       0       0       0       0       0
 21688 ;;      Totals:         0      15       0       0       0       0       0
 21689 ;;Total ram usage:       15 bytes
 21690 ;; Hardware stack levels used:    1
 21691 ;; Hardware stack levels required when called:    4
 21692 ;; This function calls:
 21693 ;;		Nothing
 21694 ;; This function is called by:
 21695 ;;		i1_desintegrator
 21696 ;; This function uses a non-reentrant model
 21697 ;;
 21698                           
 21699                           	psect	text89
 21700  003A80                     __ptext89:
 21701                           	opt stack 0
 21702  003A80                     i1___fttol:
 21703                           	opt stack 12
 21704                           
 21705                           ; BSR set to: 0
 21706                           ;incstack = 0
 21707  003A80  C062  F064         	movff	i1___fttol@f1+2,??i1___fttol
 21708  003A84  0100               	movlb	0	; () banked
 21709  003A86  6B65               	clrf	(??i1___fttol+1)& (0+255),b
 21710  003A88  6B66               	clrf	(??i1___fttol+2)& (0+255),b
 21711  003A8A  0100               	movlb	0	; () banked
 21712  003A8C  3561               	rlcf	(i1___fttol@f1+1)& (0+255),w,b
 21713  003A8E  0100               	movlb	0	; () banked
 21714  003A90  3764               	rlcf	??i1___fttol& (0+255),f,b
 21715  003A92  E301               	bnc	u1486_21
 21716  003A94  8165               	bsf	(??i1___fttol+1)& (0+255),0,b
 21717  003A96                     u1486_21:
 21718  003A96  0100               	movlb	0	; () banked
 21719  003A98  5164               	movf	??i1___fttol& (0+255),w,b
 21720  003A9A  0100               	movlb	0	; () banked
 21721  003A9C  6F6E               	movwf	i1___fttol@exp1& (0+255),b
 21722  003A9E  0100               	movlb	0	; () banked
 21723  003AA0  516E               	movf	i1___fttol@exp1& (0+255),w,b
 21724  003AA2  A4D8               	btfss	status,2,c
 21725  003AA4  D00A               	goto	i1l10469
 21726                           
 21727                           ; BSR set to: 0
 21728  003AA6  0E00               	movlw	0
 21729  003AA8  0100               	movlb	0	; () banked
 21730  003AAA  6F60               	movwf	?i1___fttol& (0+255),b
 21731  003AAC  0E00               	movlw	0
 21732  003AAE  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 21733  003AB0  0E00               	movlw	0
 21734  003AB2  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 21735  003AB4  0E00               	movlw	0
 21736  003AB6  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 21737                           
 21738                           ; BSR set to: 0
 21739  003AB8  0012               	return	
 21740  003ABA                     i1l10469:
 21741                           
 21742                           ; BSR set to: 0
 21743  003ABA  0E17               	movlw	23
 21744  003ABC  0100               	movlb	0	; () banked
 21745  003ABE  6F64               	movwf	??i1___fttol& (0+255),b
 21746  003AC0  C060  F065         	movff	i1___fttol@f1,??i1___fttol+1
 21747  003AC4  C061  F066         	movff	i1___fttol@f1+1,??i1___fttol+2
 21748  003AC8  C062  F067         	movff	i1___fttol@f1+2,??i1___fttol+3
 21749  003ACC  0100               	movlb	0	; () banked
 21750  003ACE  2964               	incf	??i1___fttol& (0+255),w,b
 21751  003AD0  0100               	movlb	0	; () banked
 21752  003AD2  6F68               	movwf	(??i1___fttol+4)& (0+255),b
 21753  003AD4  D005               	goto	i1u1488_20
 21754  003AD6                     i1u1488_25:
 21755  003AD6  0100               	movlb	0	; () banked
 21756  003AD8  90D8               	bcf	status,0,c
 21757  003ADA  3367               	rrcf	(??i1___fttol+3)& (0+255),f,b
 21758  003ADC  3366               	rrcf	(??i1___fttol+2)& (0+255),f,b
 21759  003ADE  3365               	rrcf	(??i1___fttol+1)& (0+255),f,b
 21760  003AE0                     i1u1488_20:
 21761  003AE0  0100               	movlb	0	; () banked
 21762  003AE2  2F68               	decfsz	(??i1___fttol+4)& (0+255),f,b
 21763  003AE4  D7F8               	goto	i1u1488_25
 21764  003AE6  0100               	movlb	0	; () banked
 21765  003AE8  5165               	movf	(??i1___fttol+1)& (0+255),w,b
 21766  003AEA  0100               	movlb	0	; () banked
 21767  003AEC  6F69               	movwf	i1___fttol@sign1& (0+255),b
 21768                           
 21769                           ; BSR set to: 0
 21770  003AEE  0100               	movlb	0	; () banked
 21771  003AF0  8F61               	bsf	(i1___fttol@f1+1)& (0+255),7,b
 21772                           
 21773                           ; BSR set to: 0
 21774  003AF2  0EFF               	movlw	255
 21775  003AF4  0100               	movlb	0	; () banked
 21776  003AF6  1760               	andwf	i1___fttol@f1& (0+255),f,b
 21777  003AF8  0EFF               	movlw	255
 21778  003AFA  0100               	movlb	0	; () banked
 21779  003AFC  1761               	andwf	(i1___fttol@f1+1)& (0+255),f,b
 21780  003AFE  0E00               	movlw	0
 21781  003B00  0100               	movlb	0	; () banked
 21782  003B02  1762               	andwf	(i1___fttol@f1+2)& (0+255),f,b
 21783                           
 21784                           ; BSR set to: 0
 21785  003B04  0100               	movlb	0	; () banked
 21786  003B06  5160               	movf	i1___fttol@f1& (0+255),w,b
 21787  003B08  0100               	movlb	0	; () banked
 21788  003B0A  6F6A               	movwf	i1___fttol@lval& (0+255),b
 21789  003B0C  0100               	movlb	0	; () banked
 21790  003B0E  5161               	movf	(i1___fttol@f1+1)& (0+255),w,b
 21791  003B10  0100               	movlb	0	; () banked
 21792  003B12  6F6B               	movwf	(i1___fttol@lval+1)& (0+255),b
 21793  003B14  0100               	movlb	0	; () banked
 21794  003B16  5162               	movf	(i1___fttol@f1+2)& (0+255),w,b
 21795  003B18  0100               	movlb	0	; () banked
 21796  003B1A  6F6C               	movwf	(i1___fttol@lval+2)& (0+255),b
 21797  003B1C  0100               	movlb	0	; () banked
 21798  003B1E  6B6D               	clrf	(i1___fttol@lval+3)& (0+255),b
 21799                           
 21800                           ; BSR set to: 0
 21801  003B20  0E8E               	movlw	142
 21802  003B22  0100               	movlb	0	; () banked
 21803  003B24  5F6E               	subwf	i1___fttol@exp1& (0+255),f,b
 21804                           
 21805                           ; BSR set to: 0
 21806  003B26  0100               	movlb	0	; () banked
 21807  003B28  AF6E               	btfss	i1___fttol@exp1& (0+255),7,b
 21808  003B2A  D01A               	goto	i1l10491
 21809                           
 21810                           ; BSR set to: 0
 21811  003B2C  0100               	movlb	0	; () banked
 21812  003B2E  516E               	movf	i1___fttol@exp1& (0+255),w,b
 21813  003B30  0A80               	xorlw	128
 21814  003B32  0F8F               	addlw	143
 21815  003B34  B0D8               	btfsc	status,0,c
 21816  003B36  D00A               	goto	i1l10487
 21817                           
 21818                           ; BSR set to: 0
 21819  003B38  0E00               	movlw	0
 21820  003B3A  0100               	movlb	0	; () banked
 21821  003B3C  6F60               	movwf	?i1___fttol& (0+255),b
 21822  003B3E  0E00               	movlw	0
 21823  003B40  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 21824  003B42  0E00               	movlw	0
 21825  003B44  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 21826  003B46  0E00               	movlw	0
 21827  003B48  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 21828                           
 21829                           ; BSR set to: 0
 21830  003B4A  0012               	return	
 21831  003B4C                     i1l10487:
 21832                           
 21833                           ; BSR set to: 0
 21834  003B4C  0100               	movlb	0	; () banked
 21835  003B4E  90D8               	bcf	status,0,c
 21836  003B50  336D               	rrcf	(i1___fttol@lval+3)& (0+255),f,b
 21837  003B52  336C               	rrcf	(i1___fttol@lval+2)& (0+255),f,b
 21838  003B54  336B               	rrcf	(i1___fttol@lval+1)& (0+255),f,b
 21839  003B56  336A               	rrcf	i1___fttol@lval& (0+255),f,b
 21840                           
 21841                           ; BSR set to: 0
 21842  003B58  0100               	movlb	0	; () banked
 21843  003B5A  3F6E               	incfsz	i1___fttol@exp1& (0+255),f,b
 21844  003B5C  D7F7               	goto	i1l10487
 21845                           
 21846                           ; BSR set to: 0
 21847  003B5E  D01B               	goto	i1l10501
 21848  003B60                     i1l10491:
 21849                           
 21850                           ; BSR set to: 0
 21851  003B60  0E17               	movlw	23
 21852  003B62  0100               	movlb	0	; () banked
 21853  003B64  656E               	cpfsgt	i1___fttol@exp1& (0+255),b
 21854  003B66  D012               	goto	i1l10499
 21855                           
 21856                           ; BSR set to: 0
 21857  003B68  0E00               	movlw	0
 21858  003B6A  0100               	movlb	0	; () banked
 21859  003B6C  6F60               	movwf	?i1___fttol& (0+255),b
 21860  003B6E  0E00               	movlw	0
 21861  003B70  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 21862  003B72  0E00               	movlw	0
 21863  003B74  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 21864  003B76  0E00               	movlw	0
 21865  003B78  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 21866                           
 21867                           ; BSR set to: 0
 21868  003B7A  0012               	return	
 21869  003B7C                     i1l10497:
 21870                           
 21871                           ; BSR set to: 0
 21872  003B7C  0100               	movlb	0	; () banked
 21873  003B7E  90D8               	bcf	status,0,c
 21874  003B80  376A               	rlcf	i1___fttol@lval& (0+255),f,b
 21875  003B82  376B               	rlcf	(i1___fttol@lval+1)& (0+255),f,b
 21876  003B84  376C               	rlcf	(i1___fttol@lval+2)& (0+255),f,b
 21877  003B86  376D               	rlcf	(i1___fttol@lval+3)& (0+255),f,b
 21878  003B88  0100               	movlb	0	; () banked
 21879  003B8A  076E               	decf	i1___fttol@exp1& (0+255),f,b
 21880  003B8C                     i1l10499:
 21881                           
 21882                           ; BSR set to: 0
 21883  003B8C  0100               	movlb	0	; () banked
 21884  003B8E  516E               	movf	i1___fttol@exp1& (0+255),w,b
 21885  003B90  0100               	movlb	0	; () banked
 21886  003B92  A4D8               	btfss	status,2,c
 21887  003B94  D7F3               	goto	i1l10497
 21888  003B96                     i1l10501:
 21889                           
 21890                           ; BSR set to: 0
 21891  003B96  0100               	movlb	0	; () banked
 21892  003B98  5169               	movf	i1___fttol@sign1& (0+255),w,b
 21893  003B9A  0100               	movlb	0	; () banked
 21894  003B9C  B4D8               	btfsc	status,2,c
 21895  003B9E  D009               	goto	i1l10505
 21896                           
 21897                           ; BSR set to: 0
 21898  003BA0  0100               	movlb	0	; () banked
 21899  003BA2  1F6D               	comf	(i1___fttol@lval+3)& (0+255),f,b
 21900  003BA4  1F6C               	comf	(i1___fttol@lval+2)& (0+255),f,b
 21901  003BA6  1F6B               	comf	(i1___fttol@lval+1)& (0+255),f,b
 21902  003BA8  6D6A               	negf	i1___fttol@lval& (0+255),b
 21903  003BAA  0E00               	movlw	0
 21904  003BAC  236B               	addwfc	(i1___fttol@lval+1)& (0+255),f,b
 21905  003BAE  236C               	addwfc	(i1___fttol@lval+2)& (0+255),f,b
 21906  003BB0  236D               	addwfc	(i1___fttol@lval+3)& (0+255),f,b
 21907  003BB2                     i1l10505:
 21908                           
 21909                           ; BSR set to: 0
 21910  003BB2  C06A  F060         	movff	i1___fttol@lval,?i1___fttol
 21911  003BB6  C06B  F061         	movff	i1___fttol@lval+1,?i1___fttol+1
 21912  003BBA  C06C  F062         	movff	i1___fttol@lval+2,?i1___fttol+2
 21913  003BBE  C06D  F063         	movff	i1___fttol@lval+3,?i1___fttol+3
 21914  003BC2  0012               	return	
 21915  003BC4                     __end_ofi1___fttol:
 21916                           	opt stack 0
 21917                           pclatu	equ	0xFFB
 21918                           pclath	equ	0xFFA
 21919                           tblptru	equ	0xFF8
 21920                           tblptrh	equ	0xFF7
 21921                           tblptrl	equ	0xFF6
 21922                           tablat	equ	0xFF5
 21923                           prodh	equ	0xFF4
 21924                           prodl	equ	0xFF3
 21925                           intcon	equ	0xFF2
 21926                           postinc0	equ	0xFEE
 21927                           fsr0h	equ	0xFEA
 21928                           fsr0l	equ	0xFE9
 21929                           wreg	equ	0xFE8
 21930                           postdec1	equ	0xFE5
 21931                           fsr1h	equ	0xFE2
 21932                           fsr1l	equ	0xFE1
 21933                           bsr	equ	0xFE0
 21934                           indf2	equ	0xFDF
 21935                           postinc2	equ	0xFDE
 21936                           postdec2	equ	0xFDD
 21937                           plusw2	equ	0xFDB
 21938                           fsr2h	equ	0xFDA
 21939                           fsr2l	equ	0xFD9
 21940                           status	equ	0xFD8
 21941                           
 21942 ;; *************** function i1___aldiv *****************
 21943 ;; Defined at:
 21944 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
 21945 ;; Parameters:    Size  Location     Type
 21946 ;;  dividend        4    0[BANK0 ] long 
 21947 ;;  divisor         4    4[BANK0 ] long 
 21948 ;; Auto vars:     Size  Location     Type
 21949 ;;  __aldiv         4   10[BANK0 ] long 
 21950 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 21951 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 21952 ;; Return value:  Size  Location     Type
 21953 ;;                  4    0[BANK0 ] long 
 21954 ;; Registers used:
 21955 ;;		wreg, status,2, status,0
 21956 ;; Tracked objects:
 21957 ;;		On entry : 0/0
 21958 ;;		On exit  : 0/0
 21959 ;;		Unchanged: 0/0
 21960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21961 ;;      Params:         0       8       0       0       0       0       0
 21962 ;;      Locals:         0       6       0       0       0       0       0
 21963 ;;      Temps:          0       0       0       0       0       0       0
 21964 ;;      Totals:         0      14       0       0       0       0       0
 21965 ;;Total ram usage:       14 bytes
 21966 ;; Hardware stack levels used:    1
 21967 ;; Hardware stack levels required when called:    4
 21968 ;; This function calls:
 21969 ;;		Nothing
 21970 ;; This function is called by:
 21971 ;;		i1_desintegrator
 21972 ;; This function uses a non-reentrant model
 21973 ;;
 21974                           
 21975                           	psect	text90
 21976  003F22                     __ptext90:
 21977                           	opt stack 0
 21978  003F22                     i1___aldiv:
 21979                           	opt stack 12
 21980                           
 21981                           ; BSR set to: 0
 21982                           ;incstack = 0
 21983  003F22  0E00               	movlw	0
 21984  003F24  0100               	movlb	0	; () banked
 21985  003F26  6F69               	movwf	i1___aldiv@sign& (0+255),b
 21986                           
 21987                           ; BSR set to: 0
 21988  003F28  0100               	movlb	0	; () banked
 21989  003F2A  AF67               	btfss	(i1___aldiv@divisor+3)& (0+255),7,b
 21990  003F2C  D00C               	goto	i1l10411
 21991                           
 21992                           ; BSR set to: 0
 21993  003F2E  0100               	movlb	0	; () banked
 21994  003F30  1F67               	comf	(i1___aldiv@divisor+3)& (0+255),f,b
 21995  003F32  1F66               	comf	(i1___aldiv@divisor+2)& (0+255),f,b
 21996  003F34  1F65               	comf	(i1___aldiv@divisor+1)& (0+255),f,b
 21997  003F36  6D64               	negf	i1___aldiv@divisor& (0+255),b
 21998  003F38  0E00               	movlw	0
 21999  003F3A  2365               	addwfc	(i1___aldiv@divisor+1)& (0+255),f,b
 22000  003F3C  2366               	addwfc	(i1___aldiv@divisor+2)& (0+255),f,b
 22001  003F3E  2367               	addwfc	(i1___aldiv@divisor+3)& (0+255),f,b
 22002                           
 22003                           ; BSR set to: 0
 22004  003F40  0E01               	movlw	1
 22005  003F42  0100               	movlb	0	; () banked
 22006  003F44  6F69               	movwf	i1___aldiv@sign& (0+255),b
 22007  003F46                     i1l10411:
 22008                           
 22009                           ; BSR set to: 0
 22010  003F46  0100               	movlb	0	; () banked
 22011  003F48  AF63               	btfss	(i1___aldiv@dividend+3)& (0+255),7,b
 22012  003F4A  D00C               	goto	i1l10417
 22013                           
 22014                           ; BSR set to: 0
 22015  003F4C  0100               	movlb	0	; () banked
 22016  003F4E  1F63               	comf	(i1___aldiv@dividend+3)& (0+255),f,b
 22017  003F50  1F62               	comf	(i1___aldiv@dividend+2)& (0+255),f,b
 22018  003F52  1F61               	comf	(i1___aldiv@dividend+1)& (0+255),f,b
 22019  003F54  6D60               	negf	i1___aldiv@dividend& (0+255),b
 22020  003F56  0E00               	movlw	0
 22021  003F58  2361               	addwfc	(i1___aldiv@dividend+1)& (0+255),f,b
 22022  003F5A  2362               	addwfc	(i1___aldiv@dividend+2)& (0+255),f,b
 22023  003F5C  2363               	addwfc	(i1___aldiv@dividend+3)& (0+255),f,b
 22024                           
 22025                           ; BSR set to: 0
 22026  003F5E  0E01               	movlw	1
 22027  003F60  0100               	movlb	0	; () banked
 22028  003F62  1B69               	xorwf	i1___aldiv@sign& (0+255),f,b
 22029  003F64                     i1l10417:
 22030                           
 22031                           ; BSR set to: 0
 22032  003F64  0E00               	movlw	0
 22033  003F66  0100               	movlb	0	; () banked
 22034  003F68  6F6A               	movwf	i1___aldiv@quotient& (0+255),b
 22035  003F6A  0E00               	movlw	0
 22036  003F6C  6F6B               	movwf	(i1___aldiv@quotient+1)& (0+255),b
 22037  003F6E  0E00               	movlw	0
 22038  003F70  6F6C               	movwf	(i1___aldiv@quotient+2)& (0+255),b
 22039  003F72  0E00               	movlw	0
 22040  003F74  6F6D               	movwf	(i1___aldiv@quotient+3)& (0+255),b
 22041                           
 22042                           ; BSR set to: 0
 22043  003F76  0100               	movlb	0	; () banked
 22044  003F78  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 22045  003F7A  0100               	movlb	0	; () banked
 22046  003F7C  1165               	iorwf	(i1___aldiv@divisor+1)& (0+255),w,b
 22047  003F7E  0100               	movlb	0	; () banked
 22048  003F80  1166               	iorwf	(i1___aldiv@divisor+2)& (0+255),w,b
 22049  003F82  0100               	movlb	0	; () banked
 22050  003F84  1167               	iorwf	(i1___aldiv@divisor+3)& (0+255),w,b
 22051  003F86  B4D8               	btfsc	status,2,c
 22052  003F88  D042               	goto	i1l10439
 22053                           
 22054                           ; BSR set to: 0
 22055  003F8A  0E01               	movlw	1
 22056  003F8C  0100               	movlb	0	; () banked
 22057  003F8E  6F68               	movwf	i1___aldiv@counter& (0+255),b
 22058  003F90  D008               	goto	i1l10425
 22059  003F92                     i1l10423:
 22060                           
 22061                           ; BSR set to: 0
 22062  003F92  0100               	movlb	0	; () banked
 22063  003F94  90D8               	bcf	status,0,c
 22064  003F96  3764               	rlcf	i1___aldiv@divisor& (0+255),f,b
 22065  003F98  3765               	rlcf	(i1___aldiv@divisor+1)& (0+255),f,b
 22066  003F9A  3766               	rlcf	(i1___aldiv@divisor+2)& (0+255),f,b
 22067  003F9C  3767               	rlcf	(i1___aldiv@divisor+3)& (0+255),f,b
 22068  003F9E  0100               	movlb	0	; () banked
 22069  003FA0  2B68               	incf	i1___aldiv@counter& (0+255),f,b
 22070  003FA2                     i1l10425:
 22071                           
 22072                           ; BSR set to: 0
 22073  003FA2  0100               	movlb	0	; () banked
 22074  003FA4  AF67               	btfss	(i1___aldiv@divisor+3)& (0+255),7,b
 22075  003FA6  D7F5               	goto	i1l10423
 22076  003FA8                     i1l10427:
 22077                           
 22078                           ; BSR set to: 0
 22079  003FA8  0100               	movlb	0	; () banked
 22080  003FAA  90D8               	bcf	status,0,c
 22081  003FAC  376A               	rlcf	i1___aldiv@quotient& (0+255),f,b
 22082  003FAE  376B               	rlcf	(i1___aldiv@quotient+1)& (0+255),f,b
 22083  003FB0  376C               	rlcf	(i1___aldiv@quotient+2)& (0+255),f,b
 22084  003FB2  376D               	rlcf	(i1___aldiv@quotient+3)& (0+255),f,b
 22085                           
 22086                           ; BSR set to: 0
 22087  003FB4  0100               	movlb	0	; () banked
 22088  003FB6  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 22089  003FB8  0100               	movlb	0	; () banked
 22090  003FBA  5D60               	subwf	i1___aldiv@dividend& (0+255),w,b
 22091  003FBC  0100               	movlb	0	; () banked
 22092  003FBE  5165               	movf	(i1___aldiv@divisor+1)& (0+255),w,b
 22093  003FC0  0100               	movlb	0	; () banked
 22094  003FC2  5961               	subwfb	(i1___aldiv@dividend+1)& (0+255),w,b
 22095  003FC4  0100               	movlb	0	; () banked
 22096  003FC6  5166               	movf	(i1___aldiv@divisor+2)& (0+255),w,b
 22097  003FC8  0100               	movlb	0	; () banked
 22098  003FCA  5962               	subwfb	(i1___aldiv@dividend+2)& (0+255),w,b
 22099  003FCC  0100               	movlb	0	; () banked
 22100  003FCE  5167               	movf	(i1___aldiv@divisor+3)& (0+255),w,b
 22101  003FD0  0100               	movlb	0	; () banked
 22102  003FD2  5963               	subwfb	(i1___aldiv@dividend+3)& (0+255),w,b
 22103  003FD4  A0D8               	btfss	status,0,c
 22104  003FD6  D012               	goto	i1l10435
 22105                           
 22106                           ; BSR set to: 0
 22107  003FD8  0100               	movlb	0	; () banked
 22108  003FDA  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 22109  003FDC  0100               	movlb	0	; () banked
 22110  003FDE  5F60               	subwf	i1___aldiv@dividend& (0+255),f,b
 22111  003FE0  0100               	movlb	0	; () banked
 22112  003FE2  5165               	movf	(i1___aldiv@divisor+1)& (0+255),w,b
 22113  003FE4  0100               	movlb	0	; () banked
 22114  003FE6  5B61               	subwfb	(i1___aldiv@dividend+1)& (0+255),f,b
 22115  003FE8  0100               	movlb	0	; () banked
 22116  003FEA  5166               	movf	(i1___aldiv@divisor+2)& (0+255),w,b
 22117  003FEC  0100               	movlb	0	; () banked
 22118  003FEE  5B62               	subwfb	(i1___aldiv@dividend+2)& (0+255),f,b
 22119  003FF0  0100               	movlb	0	; () banked
 22120  003FF2  5167               	movf	(i1___aldiv@divisor+3)& (0+255),w,b
 22121  003FF4  0100               	movlb	0	; () banked
 22122  003FF6  5B63               	subwfb	(i1___aldiv@dividend+3)& (0+255),f,b
 22123                           
 22124                           ; BSR set to: 0
 22125  003FF8  0100               	movlb	0	; () banked
 22126  003FFA  816A               	bsf	i1___aldiv@quotient& (0+255),0,b
 22127  003FFC                     i1l10435:
 22128                           
 22129                           ; BSR set to: 0
 22130  003FFC  0100               	movlb	0	; () banked
 22131  003FFE  90D8               	bcf	status,0,c
 22132  004000  3367               	rrcf	(i1___aldiv@divisor+3)& (0+255),f,b
 22133  004002  3366               	rrcf	(i1___aldiv@divisor+2)& (0+255),f,b
 22134  004004  3365               	rrcf	(i1___aldiv@divisor+1)& (0+255),f,b
 22135  004006  3364               	rrcf	i1___aldiv@divisor& (0+255),f,b
 22136                           
 22137                           ; BSR set to: 0
 22138  004008  0100               	movlb	0	; () banked
 22139  00400A  2F68               	decfsz	i1___aldiv@counter& (0+255),f,b
 22140  00400C  D7CD               	goto	i1l10427
 22141  00400E                     i1l10439:
 22142                           
 22143                           ; BSR set to: 0
 22144  00400E  0100               	movlb	0	; () banked
 22145  004010  5169               	movf	i1___aldiv@sign& (0+255),w,b
 22146  004012  0100               	movlb	0	; () banked
 22147  004014  B4D8               	btfsc	status,2,c
 22148  004016  D009               	goto	i1l10443
 22149                           
 22150                           ; BSR set to: 0
 22151  004018  0100               	movlb	0	; () banked
 22152  00401A  1F6D               	comf	(i1___aldiv@quotient+3)& (0+255),f,b
 22153  00401C  1F6C               	comf	(i1___aldiv@quotient+2)& (0+255),f,b
 22154  00401E  1F6B               	comf	(i1___aldiv@quotient+1)& (0+255),f,b
 22155  004020  6D6A               	negf	i1___aldiv@quotient& (0+255),b
 22156  004022  0E00               	movlw	0
 22157  004024  236B               	addwfc	(i1___aldiv@quotient+1)& (0+255),f,b
 22158  004026  236C               	addwfc	(i1___aldiv@quotient+2)& (0+255),f,b
 22159  004028  236D               	addwfc	(i1___aldiv@quotient+3)& (0+255),f,b
 22160  00402A                     i1l10443:
 22161                           
 22162                           ; BSR set to: 0
 22163  00402A  C06A  F060         	movff	i1___aldiv@quotient,?i1___aldiv
 22164  00402E  C06B  F061         	movff	i1___aldiv@quotient+1,?i1___aldiv+1
 22165  004032  C06C  F062         	movff	i1___aldiv@quotient+2,?i1___aldiv+2
 22166  004036  C06D  F063         	movff	i1___aldiv@quotient+3,?i1___aldiv+3
 22167  00403A  0012               	return	
 22168  00403C                     __end_ofi1___aldiv:
 22169                           	opt stack 0
 22170                           pclatu	equ	0xFFB
 22171                           pclath	equ	0xFFA
 22172                           tblptru	equ	0xFF8
 22173                           tblptrh	equ	0xFF7
 22174                           tblptrl	equ	0xFF6
 22175                           tablat	equ	0xFF5
 22176                           prodh	equ	0xFF4
 22177                           prodl	equ	0xFF3
 22178                           intcon	equ	0xFF2
 22179                           postinc0	equ	0xFEE
 22180                           fsr0h	equ	0xFEA
 22181                           fsr0l	equ	0xFE9
 22182                           wreg	equ	0xFE8
 22183                           postdec1	equ	0xFE5
 22184                           fsr1h	equ	0xFE2
 22185                           fsr1l	equ	0xFE1
 22186                           bsr	equ	0xFE0
 22187                           indf2	equ	0xFDF
 22188                           postinc2	equ	0xFDE
 22189                           postdec2	equ	0xFDD
 22190                           plusw2	equ	0xFDB
 22191                           fsr2h	equ	0xFDA
 22192                           fsr2l	equ	0xFD9
 22193                           status	equ	0xFD8
 22194                           
 22195 ;; *************** function i1_checkPass *****************
 22196 ;; Defined at:
 22197 ;;		line 14 in file "source/DisplayProtocol.h"
 22198 ;; Parameters:    Size  Location     Type
 22199 ;;		None
 22200 ;; Auto vars:     Size  Location     Type
 22201 ;;  checkPass       2    5[BANK0 ] int 
 22202 ;;  checkPass       1    4[BANK0 ] unsigned char 
 22203 ;; Return value:  Size  Location     Type
 22204 ;;                  1    wreg      unsigned char 
 22205 ;; Registers used:
 22206 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22207 ;; Tracked objects:
 22208 ;;		On entry : 0/0
 22209 ;;		On exit  : 0/0
 22210 ;;		Unchanged: 0/0
 22211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22212 ;;      Params:         0       0       0       0       0       0       0
 22213 ;;      Locals:         0       3       0       0       0       0       0
 22214 ;;      Temps:          0       4       0       0       0       0       0
 22215 ;;      Totals:         0       7       0       0       0       0       0
 22216 ;;Total ram usage:        7 bytes
 22217 ;; Hardware stack levels used:    1
 22218 ;; Hardware stack levels required when called:    4
 22219 ;; This function calls:
 22220 ;;		Nothing
 22221 ;; This function is called by:
 22222 ;;		i1_pressENTER
 22223 ;; This function uses a non-reentrant model
 22224 ;;
 22225                           
 22226                           	psect	text91
 22227  005E60                     __ptext91:
 22228                           	opt stack 0
 22229  005E60                     i1_checkPass:
 22230                           	opt stack 13
 22231                           
 22232                           ;DisplayProtocol.h: 15: int i;
 22233                           ;DisplayProtocol.h: 16: char passOK = 0;
 22234                           
 22235                           ; BSR set to: 0
 22236                           ;incstack = 0
 22237  005E60  0E00               	movlw	0
 22238  005E62  0100               	movlb	0	; () banked
 22239  005E64  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22240                           
 22241                           ;DisplayProtocol.h: 17: for (i = 0; i < 4; i++) {
 22242  005E66  0E00               	movlw	0
 22243  005E68  0100               	movlb	0	; () banked
 22244  005E6A  6F66               	movwf	(i1checkPass@i+1)& (0+255),b
 22245  005E6C  0E00               	movlw	0
 22246  005E6E  6F65               	movwf	i1checkPass@i& (0+255),b
 22247  005E70                     i1l10701:
 22248                           
 22249                           ; BSR set to: 0
 22250  005E70  0100               	movlb	0	; () banked
 22251  005E72  BF66               	btfsc	(i1checkPass@i+1)& (0+255),7,b
 22252  005E74  D008               	goto	i1l10705
 22253  005E76  0100               	movlb	0	; () banked
 22254  005E78  5166               	movf	(i1checkPass@i+1)& (0+255),w,b
 22255  005E7A  E136               	bnz	i1l10715
 22256  005E7C  0E04               	movlw	4
 22257  005E7E  0100               	movlb	0	; () banked
 22258  005E80  5D65               	subwf	i1checkPass@i& (0+255),w,b
 22259  005E82  B0D8               	btfsc	status,0,c
 22260  005E84  D031               	goto	i1l10715
 22261  005E86                     i1l10705:
 22262                           
 22263                           ; BSR set to: 0
 22264                           ;DisplayProtocol.h: 18: if (introducido[i] == contra[i])
 22265  005E86  0EC0               	movlw	low _contra
 22266  005E88  0100               	movlb	0	; () banked
 22267  005E8A  2565               	addwf	i1checkPass@i& (0+255),w,b
 22268  005E8C  6ED9               	movwf	fsr2l,c
 22269  005E8E  0E00               	movlw	high _contra
 22270  005E90  0100               	movlb	0	; () banked
 22271  005E92  2166               	addwfc	(i1checkPass@i+1)& (0+255),w,b
 22272  005E94  6EDA               	movwf	fsr2h,c
 22273  005E96  50DF               	movf	indf2,w,c
 22274  005E98  0100               	movlb	0	; () banked
 22275  005E9A  6F60               	movwf	??i1_checkPass& (0+255),b
 22276  005E9C  6B61               	clrf	(??i1_checkPass+1)& (0+255),b
 22277  005E9E  0EA6               	movlw	low _introducido
 22278  005EA0  0100               	movlb	0	; () banked
 22279  005EA2  2565               	addwf	i1checkPass@i& (0+255),w,b
 22280  005EA4  6ED9               	movwf	fsr2l,c
 22281  005EA6  0E01               	movlw	high _introducido
 22282  005EA8  0100               	movlb	0	; () banked
 22283  005EAA  2166               	addwfc	(i1checkPass@i+1)& (0+255),w,b
 22284  005EAC  6EDA               	movwf	fsr2h,c
 22285  005EAE  50DF               	movf	indf2,w,c
 22286  005EB0  0100               	movlb	0	; () banked
 22287  005EB2  6F62               	movwf	(??i1_checkPass+2)& (0+255),b
 22288  005EB4  6B63               	clrf	(??i1_checkPass+3)& (0+255),b
 22289  005EB6  BF62               	btfsc	(??i1_checkPass+2)& (0+255),7,b
 22290  005EB8  0763               	decf	(??i1_checkPass+3)& (0+255),f,b
 22291  005EBA  0100               	movlb	0	; () banked
 22292  005EBC  5160               	movf	??i1_checkPass& (0+255),w,b
 22293  005EBE  0100               	movlb	0	; () banked
 22294  005EC0  1962               	xorwf	(??i1_checkPass+2)& (0+255),w,b
 22295  005EC2  E10A               	bnz	i1l10709
 22296  005EC4  0100               	movlb	0	; () banked
 22297  005EC6  5161               	movf	(??i1_checkPass+1)& (0+255),w,b
 22298  005EC8  0100               	movlb	0	; () banked
 22299  005ECA  1963               	xorwf	(??i1_checkPass+3)& (0+255),w,b
 22300  005ECC  A4D8               	btfss	status,2,c
 22301  005ECE  D004               	goto	i1l10709
 22302                           
 22303                           ; BSR set to: 0
 22304                           ;DisplayProtocol.h: 19: passOK = 1;
 22305  005ED0  0E01               	movlw	1
 22306  005ED2  0100               	movlb	0	; () banked
 22307  005ED4  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22308  005ED6  D004               	goto	i1l10711
 22309  005ED8                     i1l10709:
 22310                           
 22311                           ; BSR set to: 0
 22312                           ;DisplayProtocol.h: 20: else {
 22313                           ;DisplayProtocol.h: 21: passOK = 0;
 22314  005ED8  0E00               	movlw	0
 22315  005EDA  0100               	movlb	0	; () banked
 22316  005EDC  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22317                           
 22318                           ;DisplayProtocol.h: 22: break;
 22319  005EDE  D004               	goto	i1l10715
 22320  005EE0                     i1l10711:
 22321                           
 22322                           ; BSR set to: 0
 22323  005EE0  0100               	movlb	0	; () banked
 22324  005EE2  4B65               	infsnz	i1checkPass@i& (0+255),f,b
 22325  005EE4  2B66               	incf	(i1checkPass@i+1)& (0+255),f,b
 22326  005EE6  D7C4               	goto	i1l10701
 22327  005EE8                     i1l10715:
 22328                           
 22329                           ; BSR set to: 0
 22330                           ;DisplayProtocol.h: 23: }
 22331                           ;DisplayProtocol.h: 24: }
 22332                           ;DisplayProtocol.h: 25: return passOK;
 22333  005EE8  0100               	movlb	0	; () banked
 22334  005EEA  5164               	movf	i1checkPass@passOK& (0+255),w,b
 22335  005EEC  0012               	return	
 22336  005EEE                     __end_ofi1_checkPass:
 22337                           	opt stack 0
 22338                           pclatu	equ	0xFFB
 22339                           pclath	equ	0xFFA
 22340                           tblptru	equ	0xFF8
 22341                           tblptrh	equ	0xFF7
 22342                           tblptrl	equ	0xFF6
 22343                           tablat	equ	0xFF5
 22344                           prodh	equ	0xFF4
 22345                           prodl	equ	0xFF3
 22346                           intcon	equ	0xFF2
 22347                           postinc0	equ	0xFEE
 22348                           fsr0h	equ	0xFEA
 22349                           fsr0l	equ	0xFE9
 22350                           wreg	equ	0xFE8
 22351                           postdec1	equ	0xFE5
 22352                           fsr1h	equ	0xFE2
 22353                           fsr1l	equ	0xFE1
 22354                           bsr	equ	0xFE0
 22355                           indf2	equ	0xFDF
 22356                           postinc2	equ	0xFDE
 22357                           postdec2	equ	0xFDD
 22358                           plusw2	equ	0xFDB
 22359                           fsr2h	equ	0xFDA
 22360                           fsr2l	equ	0xFD9
 22361                           status	equ	0xFD8
 22362                           
 22363 ;; *************** function i1_pressDOWN *****************
 22364 ;; Defined at:
 22365 ;;		line 181 in file "source/DisplayProtocol.h"
 22366 ;; Parameters:    Size  Location     Type
 22367 ;;		None
 22368 ;; Auto vars:     Size  Location     Type
 22369 ;;		None
 22370 ;; Return value:  Size  Location     Type
 22371 ;;                  1    wreg      void 
 22372 ;; Registers used:
 22373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22374 ;; Tracked objects:
 22375 ;;		On entry : 0/0
 22376 ;;		On exit  : 0/0
 22377 ;;		Unchanged: 0/0
 22378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22379 ;;      Params:         0       0       0       0       0       0       0
 22380 ;;      Locals:         0       0       0       0       0       0       0
 22381 ;;      Temps:          0       1       0       0       0       0       0
 22382 ;;      Totals:         0       1       0       0       0       0       0
 22383 ;;Total ram usage:        1 bytes
 22384 ;; Hardware stack levels used:    1
 22385 ;; Hardware stack levels required when called:    5
 22386 ;; This function calls:
 22387 ;;		i1_chanValDigDOWN
 22388 ;; This function is called by:
 22389 ;;		_UARTint
 22390 ;; This function uses a non-reentrant model
 22391 ;;
 22392                           
 22393                           	psect	text92
 22394  004696                     __ptext92:
 22395                           	opt stack 0
 22396  004696                     i1_pressDOWN:
 22397                           	opt stack 13
 22398                           
 22399                           ;DisplayProtocol.h: 182: if (actualScreen == 0 || actualScreen == 4) {
 22400                           
 22401                           ; BSR set to: 0
 22402                           ;incstack = 0
 22403  004696  0101               	movlb	1	; () banked
 22404  004698  51BA               	movf	_actualScreen& (0+255),w,b
 22405  00469A  B4D8               	btfsc	status,2,c
 22406  00469C  D005               	goto	i1l11657
 22407                           
 22408                           ; BSR set to: 1
 22409  00469E  0E04               	movlw	4
 22410  0046A0  0101               	movlb	1	; () banked
 22411  0046A2  19BA               	xorwf	_actualScreen& (0+255),w,b
 22412  0046A4  A4D8               	btfss	status,2,c
 22413  0046A6  D009               	goto	i1l11663
 22414  0046A8                     i1l11657:
 22415                           
 22416                           ; BSR set to: 1
 22417                           ;DisplayProtocol.h: 183: menuSection--;
 22418  0046A8  0101               	movlb	1	; () banked
 22419  0046AA  07C1               	decf	_menuSection& (0+255),f,b
 22420                           
 22421                           ; BSR set to: 1
 22422                           ;DisplayProtocol.h: 184: if (menuSection < 0)
 22423  0046AC  0101               	movlb	1	; () banked
 22424  0046AE  AFC1               	btfss	_menuSection& (0+255),7,b
 22425  0046B0  0012               	return	
 22426                           
 22427                           ; BSR set to: 1
 22428                           ;DisplayProtocol.h: 185: menuSection = 4;
 22429  0046B2  0E04               	movlw	4
 22430  0046B4  0101               	movlb	1	; () banked
 22431  0046B6  6FC1               	movwf	_menuSection& (0+255),b
 22432                           
 22433                           ; BSR set to: 1
 22434                           ;DisplayProtocol.h: 186: } else if (actualScreen == 1) {
 22435  0046B8  0012               	return	
 22436  0046BA                     i1l11663:
 22437                           
 22438                           ; BSR set to: 1
 22439  0046BA  0101               	movlb	1	; () banked
 22440  0046BC  05BA               	decf	_actualScreen& (0+255),w,b
 22441  0046BE  A4D8               	btfss	status,2,c
 22442  0046C0  D022               	goto	i1l11669
 22443                           
 22444                           ; BSR set to: 1
 22445                           ;DisplayProtocol.h: 187: introducido[passSection]--;
 22446  0046C2  0101               	movlb	1	; () banked
 22447  0046C4  51C2               	movf	_passSection& (0+255),w,b
 22448  0046C6  0D01               	mullw	1
 22449  0046C8  0EA6               	movlw	low _introducido
 22450  0046CA  24F3               	addwf	prodl,w,c
 22451  0046CC  6ED9               	movwf	fsr2l,c
 22452  0046CE  0E01               	movlw	high _introducido
 22453  0046D0  20F4               	addwfc	prodh,w,c
 22454  0046D2  6EDA               	movwf	fsr2h,c
 22455  0046D4  06DF               	decf	indf2,f,c
 22456                           
 22457                           ;DisplayProtocol.h: 188: if (introducido[passSection] < 0)
 22458  0046D6  0101               	movlb	1	; () banked
 22459  0046D8  51C2               	movf	_passSection& (0+255),w,b
 22460  0046DA  0D01               	mullw	1
 22461  0046DC  0EA6               	movlw	low _introducido
 22462  0046DE  24F3               	addwf	prodl,w,c
 22463  0046E0  6ED9               	movwf	fsr2l,c
 22464  0046E2  0E01               	movlw	high _introducido
 22465  0046E4  20F4               	addwfc	prodh,w,c
 22466  0046E6  6EDA               	movwf	fsr2h,c
 22467  0046E8  0E00               	movlw	0
 22468  0046EA  AEDB               	btfss	plusw2,7,c
 22469  0046EC  0012               	return	
 22470                           
 22471                           ; BSR set to: 1
 22472                           ;DisplayProtocol.h: 189: introducido[passSection] = 9;
 22473  0046EE  0101               	movlb	1	; () banked
 22474  0046F0  51C2               	movf	_passSection& (0+255),w,b
 22475  0046F2  0D01               	mullw	1
 22476  0046F4  0EA6               	movlw	low _introducido
 22477  0046F6  24F3               	addwf	prodl,w,c
 22478  0046F8  6ED9               	movwf	fsr2l,c
 22479  0046FA  0E01               	movlw	high _introducido
 22480  0046FC  20F4               	addwfc	prodh,w,c
 22481  0046FE  6EDA               	movwf	fsr2h,c
 22482  004700  0E09               	movlw	9
 22483  004702  6EDF               	movwf	indf2,c
 22484                           
 22485                           ; BSR set to: 1
 22486                           ;DisplayProtocol.h: 190: } else if (actualScreen == 2 || actualScreen == 3
 22487  004704  0012               	return	
 22488  004706                     i1l11669:
 22489                           
 22490                           ; BSR set to: 1
 22491                           ;DisplayProtocol.h: 191: || actualScreen == 10 || actualScreen == 11) {
 22492  004706  0E02               	movlw	2
 22493  004708  0101               	movlb	1	; () banked
 22494  00470A  19BA               	xorwf	_actualScreen& (0+255),w,b
 22495  00470C  B4D8               	btfsc	status,2,c
 22496  00470E  D00F               	goto	i1l11677
 22497                           
 22498                           ; BSR set to: 1
 22499  004710  0E03               	movlw	3
 22500  004712  0101               	movlb	1	; () banked
 22501  004714  19BA               	xorwf	_actualScreen& (0+255),w,b
 22502  004716  B4D8               	btfsc	status,2,c
 22503  004718  D00A               	goto	i1l11677
 22504                           
 22505                           ; BSR set to: 1
 22506  00471A  0E0A               	movlw	10
 22507  00471C  0101               	movlb	1	; () banked
 22508  00471E  19BA               	xorwf	_actualScreen& (0+255),w,b
 22509  004720  B4D8               	btfsc	status,2,c
 22510  004722  D005               	goto	i1l11677
 22511                           
 22512                           ; BSR set to: 1
 22513  004724  0E0B               	movlw	11
 22514  004726  0101               	movlb	1	; () banked
 22515  004728  19BA               	xorwf	_actualScreen& (0+255),w,b
 22516  00472A  A4D8               	btfss	status,2,c
 22517  00472C  D011               	goto	i1l11683
 22518  00472E                     i1l11677:
 22519                           
 22520                           ; BSR set to: 1
 22521                           ;DisplayProtocol.h: 192: selSN = !selSN;
 22522  00472E  0101               	movlb	1	; () banked
 22523  004730  51C3               	movf	_selSN& (0+255),w,b
 22524  004732  A4D8               	btfss	status,2,c
 22525  004734  D002               	goto	i1u1720_20
 22526  004736  0E01               	movlw	1
 22527  004738  D001               	goto	i1u1721_20
 22528  00473A                     i1u1720_20:
 22529  00473A  0E00               	movlw	0
 22530  00473C                     i1u1721_20:
 22531  00473C  0101               	movlb	1	; () banked
 22532  00473E  6FC3               	movwf	_selSN& (0+255),b
 22533                           
 22534                           ; BSR set to: 1
 22535                           ;DisplayProtocol.h: 193: if(selSN > 1)
 22536  004740  0E01               	movlw	1
 22537  004742  0101               	movlb	1	; () banked
 22538  004744  65C3               	cpfsgt	_selSN& (0+255),b
 22539  004746  0012               	return	
 22540                           
 22541                           ; BSR set to: 1
 22542                           ;DisplayProtocol.h: 194: selSN = 0;
 22543  004748  0E00               	movlw	0
 22544  00474A  0101               	movlb	1	; () banked
 22545  00474C  6FC3               	movwf	_selSN& (0+255),b
 22546                           
 22547                           ; BSR set to: 1
 22548                           ;DisplayProtocol.h: 195: }else if(actualScreen == 5) {
 22549  00474E  0012               	return	
 22550  004750                     i1l11683:
 22551                           
 22552                           ; BSR set to: 1
 22553  004750  0E05               	movlw	5
 22554  004752  0101               	movlb	1	; () banked
 22555  004754  19BA               	xorwf	_actualScreen& (0+255),w,b
 22556  004756  B4D8               	btfsc	status,2,c
 22557  004758  D00C               	goto	i1l11695
 22558  00475A  D01A               	goto	i1l11697
 22559  00475C                     i1l11687:
 22560                           
 22561                           ; BSR set to: 1
 22562                           ;DisplayProtocol.h: 200: chanValDigDOWN();
 22563  00475C  ECEA  F026         	call	i1_chanValDigDOWN	;wreg free
 22564                           
 22565                           ;DisplayProtocol.h: 201: break;
 22566  004760  0012               	return	
 22567  004762                     i1l11689:
 22568                           
 22569                           ;DisplayProtocol.h: 203: chanVals--;
 22570  004762  0101               	movlb	1	; () banked
 22571  004764  07B1               	decf	_chanVals& (0+255),f,b
 22572  004766  A0D8               	btfss	status,0,c
 22573  004768  07B2               	decf	(_chanVals+1)& (0+255),f,b
 22574                           
 22575                           ;DisplayProtocol.h: 204: break;
 22576  00476A  0012               	return	
 22577  00476C                     i1l11691:
 22578                           
 22579                           ; BSR set to: 1
 22580                           ;DisplayProtocol.h: 206: chanValDigDOWN();
 22581  00476C  ECEA  F026         	call	i1_chanValDigDOWN	;wreg free
 22582                           
 22583                           ;DisplayProtocol.h: 208: }
 22584                           ;DisplayProtocol.h: 209: }
 22585                           
 22586                           ;DisplayProtocol.h: 207: break;
 22587  004770  0012               	return	
 22588  004772                     i1l11695:
 22589  004772  0101               	movlb	1	; () banked
 22590  004774  51C1               	movf	_menuSection& (0+255),w,b
 22591                           
 22592                           ; Switch size 1, requested type "space"
 22593                           ; Number of cases is 4, Range of values is 0 to 3
 22594                           ; switch strategies available:
 22595                           ; Name         Instructions Cycles
 22596                           ; simple_byte           13     7 (average)
 22597                           ;	Chosen strategy is simple_byte
 22598  004776  0A00               	xorlw	0	; case 0
 22599  004778  B4D8               	btfsc	status,2,c
 22600  00477A  0012               	return	
 22601  00477C  0A01               	xorlw	1	; case 1
 22602  00477E  B4D8               	btfsc	status,2,c
 22603  004780  D7ED               	goto	i1l11687
 22604  004782  0A03               	xorlw	3	; case 2
 22605  004784  B4D8               	btfsc	status,2,c
 22606  004786  D7ED               	goto	i1l11689
 22607  004788  0A01               	xorlw	1	; case 3
 22608  00478A  A4D8               	btfss	status,2,c
 22609                           
 22610                           ; BSR set to: 1
 22611                           ;DisplayProtocol.h: 210: }else if(actualScreen == 12)
 22612  00478C  0012               	return	
 22613  00478E  D7EE               	goto	i1l11691
 22614  004790                     i1l11697:
 22615                           
 22616                           ; BSR set to: 1
 22617  004790  0E0C               	movlw	12
 22618  004792  0101               	movlb	1	; () banked
 22619  004794  19BA               	xorwf	_actualScreen& (0+255),w,b
 22620  004796  A4D8               	btfss	status,2,c
 22621  004798  0012               	return	
 22622                           
 22623                           ; BSR set to: 1
 22624                           ;DisplayProtocol.h: 211: chanValDigDOWN();
 22625  00479A  ECEA  F026         	call	i1_chanValDigDOWN	;wreg free
 22626  00479E  0012               	return	
 22627  0047A0                     __end_ofi1_pressDOWN:
 22628                           	opt stack 0
 22629                           pclatu	equ	0xFFB
 22630                           pclath	equ	0xFFA
 22631                           tblptru	equ	0xFF8
 22632                           tblptrh	equ	0xFF7
 22633                           tblptrl	equ	0xFF6
 22634                           tablat	equ	0xFF5
 22635                           prodh	equ	0xFF4
 22636                           prodl	equ	0xFF3
 22637                           intcon	equ	0xFF2
 22638                           postinc0	equ	0xFEE
 22639                           fsr0h	equ	0xFEA
 22640                           fsr0l	equ	0xFE9
 22641                           wreg	equ	0xFE8
 22642                           postdec1	equ	0xFE5
 22643                           fsr1h	equ	0xFE2
 22644                           fsr1l	equ	0xFE1
 22645                           bsr	equ	0xFE0
 22646                           indf2	equ	0xFDF
 22647                           postinc2	equ	0xFDE
 22648                           postdec2	equ	0xFDD
 22649                           plusw2	equ	0xFDB
 22650                           fsr2h	equ	0xFDA
 22651                           fsr2l	equ	0xFD9
 22652                           status	equ	0xFD8
 22653                           
 22654 ;; *************** function i1_chanValDigDOWN *****************
 22655 ;; Defined at:
 22656 ;;		line 37 in file "source/DisplayProtocol.h"
 22657 ;; Parameters:    Size  Location     Type
 22658 ;;		None
 22659 ;; Auto vars:     Size  Location     Type
 22660 ;;		None
 22661 ;; Return value:  Size  Location     Type
 22662 ;;                  1    wreg      void 
 22663 ;; Registers used:
 22664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22665 ;; Tracked objects:
 22666 ;;		On entry : 0/0
 22667 ;;		On exit  : 0/0
 22668 ;;		Unchanged: 0/0
 22669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22670 ;;      Params:         0       0       0       0       0       0       0
 22671 ;;      Locals:         0       0       0       0       0       0       0
 22672 ;;      Temps:          0       5       0       0       0       0       0
 22673 ;;      Totals:         0       5       0       0       0       0       0
 22674 ;;Total ram usage:        5 bytes
 22675 ;; Hardware stack levels used:    1
 22676 ;; Hardware stack levels required when called:    4
 22677 ;; This function calls:
 22678 ;;		Nothing
 22679 ;; This function is called by:
 22680 ;;		i1_pressDOWN
 22681 ;; This function uses a non-reentrant model
 22682 ;;
 22683                           
 22684                           	psect	text93
 22685  004DD4                     __ptext93:
 22686                           	opt stack 0
 22687  004DD4                     i1_chanValDigDOWN:
 22688                           	opt stack 13
 22689                           
 22690                           ;DisplayProtocol.h: 38: chanValdig[chanValSection]--;
 22691                           
 22692                           ;incstack = 0
 22693  004DD4  0101               	movlb	1	; () banked
 22694  004DD6  5194               	movf	_chanValSection& (0+255),w,b
 22695  004DD8  0D01               	mullw	1
 22696  004DDA  0EA0               	movlw	low _chanValdig
 22697  004DDC  24F3               	addwf	prodl,w,c
 22698  004DDE  6ED9               	movwf	fsr2l,c
 22699  004DE0  0E01               	movlw	high _chanValdig
 22700  004DE2  20F4               	addwfc	prodh,w,c
 22701  004DE4  6EDA               	movwf	fsr2h,c
 22702  004DE6  06DF               	decf	indf2,f,c
 22703                           
 22704                           ;DisplayProtocol.h: 39: if(chanValdig[chanValSection] < 0) {
 22705  004DE8  0101               	movlb	1	; () banked
 22706  004DEA  5194               	movf	_chanValSection& (0+255),w,b
 22707  004DEC  0D01               	mullw	1
 22708  004DEE  0EA0               	movlw	low _chanValdig
 22709  004DF0  24F3               	addwf	prodl,w,c
 22710  004DF2  6ED9               	movwf	fsr2l,c
 22711  004DF4  0E01               	movlw	high _chanValdig
 22712  004DF6  20F4               	addwfc	prodh,w,c
 22713  004DF8  6EDA               	movwf	fsr2h,c
 22714  004DFA  0E00               	movlw	0
 22715  004DFC  AEDB               	btfss	plusw2,7,c
 22716  004DFE  0012               	return	
 22717                           
 22718                           ; BSR set to: 1
 22719                           ;DisplayProtocol.h: 40: chanValdig[chanValSection] = 9;
 22720  004E00  0101               	movlb	1	; () banked
 22721  004E02  5194               	movf	_chanValSection& (0+255),w,b
 22722  004E04  0D01               	mullw	1
 22723  004E06  0EA0               	movlw	low _chanValdig
 22724  004E08  24F3               	addwf	prodl,w,c
 22725  004E0A  6ED9               	movwf	fsr2l,c
 22726  004E0C  0E01               	movlw	high _chanValdig
 22727  004E0E  20F4               	addwfc	prodh,w,c
 22728  004E10  6EDA               	movwf	fsr2h,c
 22729  004E12  0E09               	movlw	9
 22730  004E14  6EDF               	movwf	indf2,c
 22731                           
 22732                           ; BSR set to: 1
 22733                           ;DisplayProtocol.h: 41: if(chanValSection > 1 && chanValdig[chanValSection - 1] > 0)
 22734  004E16  0101               	movlb	1	; () banked
 22735  004E18  5194               	movf	_chanValSection& (0+255),w,b
 22736  004E1A  0A80               	xorlw	128
 22737  004E1C  0F7E               	addlw	-130
 22738  004E1E  A0D8               	btfss	status,0,c
 22739  004E20  0012               	return	
 22740                           
 22741                           ; BSR set to: 1
 22742  004E22  0EFF               	movlw	255
 22743  004E24  0100               	movlb	0	; () banked
 22744  004E26  6F60               	movwf	??i1_chanValDigDOWN& (0+255),b
 22745  004E28  0EFF               	movlw	255
 22746  004E2A  0100               	movlb	0	; () banked
 22747  004E2C  6F61               	movwf	(??i1_chanValDigDOWN+1)& (0+255),b
 22748  004E2E  C194  F062         	movff	_chanValSection,??i1_chanValDigDOWN+2
 22749  004E32  0100               	movlb	0	; () banked
 22750  004E34  6B63               	clrf	(??i1_chanValDigDOWN+3)& (0+255),b
 22751  004E36  BF62               	btfsc	(??i1_chanValDigDOWN+2)& (0+255),7,b
 22752  004E38  0763               	decf	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22753  004E3A  0100               	movlb	0	; () banked
 22754  004E3C  5160               	movf	??i1_chanValDigDOWN& (0+255),w,b
 22755  004E3E  0100               	movlb	0	; () banked
 22756  004E40  2762               	addwf	(??i1_chanValDigDOWN+2)& (0+255),f,b
 22757  004E42  0100               	movlb	0	; () banked
 22758  004E44  5161               	movf	(??i1_chanValDigDOWN+1)& (0+255),w,b
 22759  004E46  0100               	movlb	0	; () banked
 22760  004E48  2363               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22761  004E4A  0EA0               	movlw	low _chanValdig
 22762  004E4C  0100               	movlb	0	; () banked
 22763  004E4E  2562               	addwf	(??i1_chanValDigDOWN+2)& (0+255),w,b
 22764  004E50  6ED9               	movwf	fsr2l,c
 22765  004E52  0E01               	movlw	high _chanValdig
 22766  004E54  0100               	movlb	0	; () banked
 22767  004E56  2163               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),w,b
 22768  004E58  6EDA               	movwf	fsr2h,c
 22769  004E5A  50DF               	movf	indf2,w,c
 22770  004E5C  0A80               	xorlw	128
 22771  004E5E  0F7F               	addlw	-129
 22772  004E60  A0D8               	btfss	status,0,c
 22773  004E62  0012               	return	
 22774                           
 22775                           ; BSR set to: 0
 22776                           ;DisplayProtocol.h: 42: chanValdig[chanValSection - 1]--;
 22777  004E64  0EFF               	movlw	255
 22778  004E66  0100               	movlb	0	; () banked
 22779  004E68  6F60               	movwf	??i1_chanValDigDOWN& (0+255),b
 22780  004E6A  0EFF               	movlw	255
 22781  004E6C  0100               	movlb	0	; () banked
 22782  004E6E  6F61               	movwf	(??i1_chanValDigDOWN+1)& (0+255),b
 22783  004E70  C194  F062         	movff	_chanValSection,??i1_chanValDigDOWN+2
 22784  004E74  0100               	movlb	0	; () banked
 22785  004E76  6B63               	clrf	(??i1_chanValDigDOWN+3)& (0+255),b
 22786  004E78  BF62               	btfsc	(??i1_chanValDigDOWN+2)& (0+255),7,b
 22787  004E7A  0763               	decf	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22788  004E7C  0100               	movlb	0	; () banked
 22789  004E7E  5160               	movf	??i1_chanValDigDOWN& (0+255),w,b
 22790  004E80  0100               	movlb	0	; () banked
 22791  004E82  2762               	addwf	(??i1_chanValDigDOWN+2)& (0+255),f,b
 22792  004E84  0100               	movlb	0	; () banked
 22793  004E86  5161               	movf	(??i1_chanValDigDOWN+1)& (0+255),w,b
 22794  004E88  0100               	movlb	0	; () banked
 22795  004E8A  2363               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22796  004E8C  0EA0               	movlw	low _chanValdig
 22797  004E8E  0100               	movlb	0	; () banked
 22798  004E90  2562               	addwf	(??i1_chanValDigDOWN+2)& (0+255),w,b
 22799  004E92  6ED9               	movwf	fsr2l,c
 22800  004E94  0E01               	movlw	high _chanValdig
 22801  004E96  0100               	movlb	0	; () banked
 22802  004E98  2163               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),w,b
 22803  004E9A  6EDA               	movwf	fsr2h,c
 22804  004E9C  06DF               	decf	indf2,f,c
 22805                           
 22806                           ; BSR set to: 0
 22807  004E9E  0012               	return	
 22808  004EA0                     __end_ofi1_chanValDigDOWN:
 22809                           	opt stack 0
 22810                           pclatu	equ	0xFFB
 22811                           pclath	equ	0xFFA
 22812                           tblptru	equ	0xFF8
 22813                           tblptrh	equ	0xFF7
 22814                           tblptrl	equ	0xFF6
 22815                           tablat	equ	0xFF5
 22816                           prodh	equ	0xFF4
 22817                           prodl	equ	0xFF3
 22818                           intcon	equ	0xFF2
 22819                           postinc0	equ	0xFEE
 22820                           fsr0h	equ	0xFEA
 22821                           fsr0l	equ	0xFE9
 22822                           wreg	equ	0xFE8
 22823                           postdec1	equ	0xFE5
 22824                           fsr1h	equ	0xFE2
 22825                           fsr1l	equ	0xFE1
 22826                           bsr	equ	0xFE0
 22827                           indf2	equ	0xFDF
 22828                           postinc2	equ	0xFDE
 22829                           postdec2	equ	0xFDD
 22830                           plusw2	equ	0xFDB
 22831                           fsr2h	equ	0xFDA
 22832                           fsr2l	equ	0xFD9
 22833                           status	equ	0xFD8
 22834                           
 22835 ;; *************** function i1_longPressUP *****************
 22836 ;; Defined at:
 22837 ;;		line 157 in file "source/DisplayProtocol.h"
 22838 ;; Parameters:    Size  Location     Type
 22839 ;;		None
 22840 ;; Auto vars:     Size  Location     Type
 22841 ;;		None
 22842 ;; Return value:  Size  Location     Type
 22843 ;;                  1    wreg      void 
 22844 ;; Registers used:
 22845 ;;		wreg, status,2, status,0
 22846 ;; Tracked objects:
 22847 ;;		On entry : 0/0
 22848 ;;		On exit  : 0/0
 22849 ;;		Unchanged: 0/0
 22850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22851 ;;      Params:         0       0       0       0       0       0       0
 22852 ;;      Locals:         0       0       0       0       0       0       0
 22853 ;;      Temps:          0       0       0       0       0       0       0
 22854 ;;      Totals:         0       0       0       0       0       0       0
 22855 ;;Total ram usage:        0 bytes
 22856 ;; Hardware stack levels used:    1
 22857 ;; Hardware stack levels required when called:    4
 22858 ;; This function calls:
 22859 ;;		Nothing
 22860 ;; This function is called by:
 22861 ;;		_UARTint
 22862 ;; This function uses a non-reentrant model
 22863 ;;
 22864                           
 22865                           	psect	text94
 22866  00633A                     __ptext94:
 22867                           	opt stack 0
 22868  00633A                     i1_longPressUP:
 22869                           	opt stack 14
 22870                           
 22871                           ;DisplayProtocol.h: 158: if (!UPisLP) {
 22872                           
 22873                           ;incstack = 0
 22874  00633A  503C               	movf	_UPisLP,w,c
 22875  00633C  A4D8               	btfss	status,2,c
 22876  00633E  0012               	return	
 22877                           
 22878                           ;DisplayProtocol.h: 159: UPisLP = 1;
 22879  006340  0E01               	movlw	1
 22880  006342  6E3C               	movwf	_UPisLP,c
 22881                           
 22882                           ;DisplayProtocol.h: 160: if (actualScreen == 0 || actualScreen == 4) {
 22883  006344  0101               	movlb	1	; () banked
 22884  006346  51BA               	movf	_actualScreen& (0+255),w,b
 22885  006348  B4D8               	btfsc	status,2,c
 22886  00634A  D005               	goto	i1l11635
 22887                           
 22888                           ; BSR set to: 1
 22889  00634C  0E04               	movlw	4
 22890  00634E  0101               	movlb	1	; () banked
 22891  006350  19BA               	xorwf	_actualScreen& (0+255),w,b
 22892  006352  A4D8               	btfss	status,2,c
 22893  006354  D01C               	goto	i1l11647
 22894  006356                     i1l11635:
 22895                           
 22896                           ; BSR set to: 1
 22897                           ;DisplayProtocol.h: 161: if (holdENTERcont > 5) {
 22898  006356  0E05               	movlw	5
 22899  006358  0101               	movlb	1	; () banked
 22900  00635A  65BE               	cpfsgt	_holdENTERcont& (0+255),b
 22901  00635C  D014               	goto	i1l11645
 22902                           
 22903                           ; BSR set to: 1
 22904                           ;DisplayProtocol.h: 162: if (actualScreen == 0) {
 22905  00635E  0101               	movlb	1	; () banked
 22906  006360  51BA               	movf	_actualScreen& (0+255),w,b
 22907  006362  A4D8               	btfss	status,2,c
 22908  006364  D007               	goto	i1l11641
 22909                           
 22910                           ; BSR set to: 1
 22911                           ;DisplayProtocol.h: 163: actualScreen = 1;
 22912  006366  0E01               	movlw	1
 22913  006368  0101               	movlb	1	; () banked
 22914  00636A  6FBA               	movwf	_actualScreen& (0+255),b
 22915                           
 22916                           ;DisplayProtocol.h: 164: fd = 0;
 22917  00636C  0E00               	movlw	0
 22918  00636E  0101               	movlb	1	; () banked
 22919  006370  6FBC               	movwf	_fd& (0+255),b
 22920                           
 22921                           ;DisplayProtocol.h: 165: } else if (actualScreen == 4)
 22922  006372  0012               	return	
 22923  006374                     i1l11641:
 22924                           
 22925                           ; BSR set to: 1
 22926  006374  0E04               	movlw	4
 22927  006376  0101               	movlb	1	; () banked
 22928  006378  19BA               	xorwf	_actualScreen& (0+255),w,b
 22929  00637A  A4D8               	btfss	status,2,c
 22930  00637C  0012               	return	
 22931                           
 22932                           ; BSR set to: 1
 22933                           ;DisplayProtocol.h: 166: actualScreen = 9;
 22934  00637E  0E09               	movlw	9
 22935  006380  0101               	movlb	1	; () banked
 22936  006382  6FBA               	movwf	_actualScreen& (0+255),b
 22937                           
 22938                           ; BSR set to: 1
 22939                           ;DisplayProtocol.h: 167: } else
 22940                           
 22941                           ; BSR set to: 1
 22942  006384  0012               	return	
 22943  006386                     i1l11645:
 22944                           
 22945                           ; BSR set to: 1
 22946                           ;DisplayProtocol.h: 168: menuSection = 0;
 22947  006386  0E00               	movlw	0
 22948  006388  0101               	movlb	1	; () banked
 22949  00638A  6FC1               	movwf	_menuSection& (0+255),b
 22950                           
 22951                           ; BSR set to: 1
 22952                           ;DisplayProtocol.h: 169: }else if(actualScreen == 5) {
 22953  00638C  0012               	return	
 22954  00638E                     i1l11647:
 22955                           
 22956                           ; BSR set to: 1
 22957  00638E  0E05               	movlw	5
 22958  006390  0101               	movlb	1	; () banked
 22959  006392  19BA               	xorwf	_actualScreen& (0+255),w,b
 22960  006394  A4D8               	btfss	status,2,c
 22961  006396  0012               	return	
 22962                           
 22963                           ; BSR set to: 1
 22964                           ;DisplayProtocol.h: 170: if(menuSection == 2)
 22965  006398  0E02               	movlw	2
 22966  00639A  0101               	movlb	1	; () banked
 22967  00639C  19C1               	xorwf	_menuSection& (0+255),w,b
 22968  00639E  A4D8               	btfss	status,2,c
 22969  0063A0  0012               	return	
 22970                           
 22971                           ; BSR set to: 1
 22972                           ;DisplayProtocol.h: 171: chanVals += 10;
 22973  0063A2  0E0A               	movlw	10
 22974  0063A4  0101               	movlb	1	; () banked
 22975  0063A6  27B1               	addwf	_chanVals& (0+255),f,b
 22976  0063A8  0E00               	movlw	0
 22977  0063AA  23B2               	addwfc	(_chanVals+1)& (0+255),f,b
 22978                           
 22979                           ; BSR set to: 1
 22980                           
 22981                           ; BSR set to: 1
 22982                           
 22983                           ; BSR set to: 1
 22984  0063AC  0012               	return	
 22985  0063AE                     __end_ofi1_longPressUP:
 22986                           	opt stack 0
 22987                           pclatu	equ	0xFFB
 22988                           pclath	equ	0xFFA
 22989                           tblptru	equ	0xFF8
 22990                           tblptrh	equ	0xFF7
 22991                           tblptrl	equ	0xFF6
 22992                           tablat	equ	0xFF5
 22993                           prodh	equ	0xFF4
 22994                           prodl	equ	0xFF3
 22995                           intcon	equ	0xFF2
 22996                           postinc0	equ	0xFEE
 22997                           fsr0h	equ	0xFEA
 22998                           fsr0l	equ	0xFE9
 22999                           wreg	equ	0xFE8
 23000                           postdec1	equ	0xFE5
 23001                           fsr1h	equ	0xFE2
 23002                           fsr1l	equ	0xFE1
 23003                           bsr	equ	0xFE0
 23004                           indf2	equ	0xFDF
 23005                           postinc2	equ	0xFDE
 23006                           postdec2	equ	0xFDD
 23007                           plusw2	equ	0xFDB
 23008                           fsr2h	equ	0xFDA
 23009                           fsr2l	equ	0xFD9
 23010                           status	equ	0xFD8
 23011                           
 23012 ;; *************** function i1_longPressRETRO *****************
 23013 ;; Defined at:
 23014 ;;		line 252 in file "source/DisplayProtocol.h"
 23015 ;; Parameters:    Size  Location     Type
 23016 ;;		None
 23017 ;; Auto vars:     Size  Location     Type
 23018 ;;		None
 23019 ;; Return value:  Size  Location     Type
 23020 ;;                  1    wreg      void 
 23021 ;; Registers used:
 23022 ;;		wreg, status,2, status,0
 23023 ;; Tracked objects:
 23024 ;;		On entry : 0/0
 23025 ;;		On exit  : 0/0
 23026 ;;		Unchanged: 0/0
 23027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23028 ;;      Params:         0       0       0       0       0       0       0
 23029 ;;      Locals:         0       0       0       0       0       0       0
 23030 ;;      Temps:          0       0       0       0       0       0       0
 23031 ;;      Totals:         0       0       0       0       0       0       0
 23032 ;;Total ram usage:        0 bytes
 23033 ;; Hardware stack levels used:    1
 23034 ;; Hardware stack levels required when called:    4
 23035 ;; This function calls:
 23036 ;;		Nothing
 23037 ;; This function is called by:
 23038 ;;		_UARTint
 23039 ;; This function uses a non-reentrant model
 23040 ;;
 23041                           
 23042                           	psect	text95
 23043  006608                     __ptext95:
 23044                           	opt stack 0
 23045  006608                     i1_longPressRETRO:
 23046                           	opt stack 14
 23047                           
 23048                           ;DisplayProtocol.h: 253: if (!RETROisLP) {
 23049                           
 23050                           ;incstack = 0
 23051  006608  503B               	movf	_RETROisLP,w,c
 23052  00660A  A4D8               	btfss	status,2,c
 23053  00660C  0012               	return	
 23054                           
 23055                           ;DisplayProtocol.h: 254: RETROisLP = 1;
 23056  00660E  0E01               	movlw	1
 23057  006610  6E3B               	movwf	_RETROisLP,c
 23058                           
 23059                           ;DisplayProtocol.h: 255: if(actualScreen == 0 || actualScreen == 4) {
 23060  006612  0101               	movlb	1	; () banked
 23061  006614  51BA               	movf	_actualScreen& (0+255),w,b
 23062  006616  B4D8               	btfsc	status,2,c
 23063  006618  D005               	goto	i1l11751
 23064                           
 23065                           ; BSR set to: 1
 23066  00661A  0E04               	movlw	4
 23067  00661C  0101               	movlb	1	; () banked
 23068  00661E  19BA               	xorwf	_actualScreen& (0+255),w,b
 23069  006620  A4D8               	btfss	status,2,c
 23070  006622  D00C               	goto	i1l11757
 23071  006624                     i1l11751:
 23072                           
 23073                           ; BSR set to: 1
 23074                           ;DisplayProtocol.h: 256: if(ProcessStarted) {
 23075  006624  503A               	movf	_ProcessStarted,w,c
 23076  006626  B4D8               	btfsc	status,2,c
 23077  006628  0012               	return	
 23078                           
 23079                           ; BSR set to: 1
 23080                           ;DisplayProtocol.h: 257: tempLastScreen = actualScreen;
 23081  00662A  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 23082                           
 23083                           ; BSR set to: 1
 23084                           ;DisplayProtocol.h: 258: actualScreen = 3;
 23085  00662E  0E03               	movlw	3
 23086  006630  0101               	movlb	1	; () banked
 23087  006632  6FBA               	movwf	_actualScreen& (0+255),b
 23088                           
 23089                           ;DisplayProtocol.h: 259: selSN = 0;
 23090  006634  0E00               	movlw	0
 23091  006636  0101               	movlb	1	; () banked
 23092  006638  6FC3               	movwf	_selSN& (0+255),b
 23093                           
 23094                           ; BSR set to: 1
 23095                           ;DisplayProtocol.h: 260: }
 23096                           ;DisplayProtocol.h: 261: }else if(actualScreen == 5)
 23097  00663A  0012               	return	
 23098  00663C                     i1l11757:
 23099                           
 23100                           ; BSR set to: 1
 23101  00663C  0E05               	movlw	5
 23102  00663E  0101               	movlb	1	; () banked
 23103  006640  19BA               	xorwf	_actualScreen& (0+255),w,b
 23104  006642  A4D8               	btfss	status,2,c
 23105  006644  D004               	goto	i1l11761
 23106                           
 23107                           ; BSR set to: 1
 23108                           ;DisplayProtocol.h: 262: actualScreen = 4;
 23109  006646  0E04               	movlw	4
 23110  006648  0101               	movlb	1	; () banked
 23111  00664A  6FBA               	movwf	_actualScreen& (0+255),b
 23112  00664C  0012               	return	
 23113  00664E                     i1l11761:
 23114                           
 23115                           ; BSR set to: 1
 23116                           ;DisplayProtocol.h: 263: else if(actualScreen == 12)
 23117  00664E  0E0C               	movlw	12
 23118  006650  0101               	movlb	1	; () banked
 23119  006652  19BA               	xorwf	_actualScreen& (0+255),w,b
 23120  006654  A4D8               	btfss	status,2,c
 23121  006656  0012               	return	
 23122                           
 23123                           ; BSR set to: 1
 23124                           ;DisplayProtocol.h: 264: actualScreen = 4;
 23125  006658  0E04               	movlw	4
 23126  00665A  0101               	movlb	1	; () banked
 23127  00665C  6FBA               	movwf	_actualScreen& (0+255),b
 23128                           
 23129                           ; BSR set to: 1
 23130                           
 23131                           ; BSR set to: 1
 23132                           
 23133                           ; BSR set to: 1
 23134  00665E  0012               	return	
 23135  006660                     __end_ofi1_longPressRETRO:
 23136                           	opt stack 0
 23137                           pclatu	equ	0xFFB
 23138                           pclath	equ	0xFFA
 23139                           tblptru	equ	0xFF8
 23140                           tblptrh	equ	0xFF7
 23141                           tblptrl	equ	0xFF6
 23142                           tablat	equ	0xFF5
 23143                           prodh	equ	0xFF4
 23144                           prodl	equ	0xFF3
 23145                           intcon	equ	0xFF2
 23146                           postinc0	equ	0xFEE
 23147                           fsr0h	equ	0xFEA
 23148                           fsr0l	equ	0xFE9
 23149                           wreg	equ	0xFE8
 23150                           postdec1	equ	0xFE5
 23151                           fsr1h	equ	0xFE2
 23152                           fsr1l	equ	0xFE1
 23153                           bsr	equ	0xFE0
 23154                           indf2	equ	0xFDF
 23155                           postinc2	equ	0xFDE
 23156                           postdec2	equ	0xFDD
 23157                           plusw2	equ	0xFDB
 23158                           fsr2h	equ	0xFDA
 23159                           fsr2l	equ	0xFD9
 23160                           status	equ	0xFD8
 23161                           
 23162 ;; *************** function i1_longPressENTER *****************
 23163 ;; Defined at:
 23164 ;;		line 379 in file "source/DisplayProtocol.h"
 23165 ;; Parameters:    Size  Location     Type
 23166 ;;		None
 23167 ;; Auto vars:     Size  Location     Type
 23168 ;;  longPressENT    3   45[BANK0 ] float 
 23169 ;; Return value:  Size  Location     Type
 23170 ;;                  1    wreg      void 
 23171 ;; Registers used:
 23172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23173 ;; Tracked objects:
 23174 ;;		On entry : 0/0
 23175 ;;		On exit  : 0/0
 23176 ;;		Unchanged: 0/0
 23177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23178 ;;      Params:         0       0       0       0       0       0       0
 23179 ;;      Locals:         0       6       0       0       0       0       0
 23180 ;;      Temps:          0       0       0       0       0       0       0
 23181 ;;      Totals:         0       6       0       0       0       0       0
 23182 ;;Total ram usage:        6 bytes
 23183 ;; Hardware stack levels used:    1
 23184 ;; Hardware stack levels required when called:    9
 23185 ;; This function calls:
 23186 ;;		i1___ftadd
 23187 ;;		i1___ftdiv
 23188 ;;		i1_calcVars2ti
 23189 ;;		i1_confirmEdition
 23190 ;;		i1_integrator
 23191 ;;		i1_setPWM2duty
 23192 ;; This function is called by:
 23193 ;;		_UARTint
 23194 ;; This function uses a non-reentrant model
 23195 ;;
 23196                           
 23197                           	psect	text96
 23198  00147E                     __ptext96:
 23199                           	opt stack 0
 23200  00147E                     i1_longPressENTER:
 23201                           	opt stack 9
 23202                           
 23203                           ;DisplayProtocol.h: 380: if (!ENTERisLP) {
 23204                           
 23205                           ;incstack = 0
 23206  00147E  0101               	movlb	1	; () banked
 23207  001480  51B6               	movf	_ENTERisLP& (0+255),w,b
 23208  001482  A4D8               	btfss	status,2,c
 23209  001484  0012               	return	
 23210                           
 23211                           ; BSR set to: 1
 23212                           ;DisplayProtocol.h: 381: ENTERisLP = 1;
 23213  001486  0E01               	movlw	1
 23214  001488  0101               	movlb	1	; () banked
 23215  00148A  6FB6               	movwf	_ENTERisLP& (0+255),b
 23216                           
 23217                           ;DisplayProtocol.h: 382: if(actualScreen == 0 || actualScreen == 4) {
 23218  00148C  0101               	movlb	1	; () banked
 23219  00148E  51BA               	movf	_actualScreen& (0+255),w,b
 23220  001490  B4D8               	btfsc	status,2,c
 23221  001492  D005               	goto	i1l11913
 23222                           
 23223                           ; BSR set to: 1
 23224  001494  0E04               	movlw	4
 23225  001496  0101               	movlb	1	; () banked
 23226  001498  19BA               	xorwf	_actualScreen& (0+255),w,b
 23227  00149A  A4D8               	btfss	status,2,c
 23228  00149C  D024               	goto	i1l11929
 23229  00149E                     i1l11913:
 23230                           
 23231                           ; BSR set to: 1
 23232                           ;DisplayProtocol.h: 383: if (holdUPcont > 5) {
 23233  00149E  0E05               	movlw	5
 23234  0014A0  0101               	movlb	1	; () banked
 23235  0014A2  65C0               	cpfsgt	_holdUPcont& (0+255),b
 23236  0014A4  D014               	goto	i1l11923
 23237                           
 23238                           ; BSR set to: 1
 23239                           ;DisplayProtocol.h: 384: if (actualScreen == 0) {
 23240  0014A6  0101               	movlb	1	; () banked
 23241  0014A8  51BA               	movf	_actualScreen& (0+255),w,b
 23242  0014AA  A4D8               	btfss	status,2,c
 23243  0014AC  D007               	goto	i1l11919
 23244                           
 23245                           ; BSR set to: 1
 23246                           ;DisplayProtocol.h: 385: actualScreen = 1;
 23247  0014AE  0E01               	movlw	1
 23248  0014B0  0101               	movlb	1	; () banked
 23249  0014B2  6FBA               	movwf	_actualScreen& (0+255),b
 23250                           
 23251                           ;DisplayProtocol.h: 386: fd = 0;
 23252  0014B4  0E00               	movlw	0
 23253  0014B6  0101               	movlb	1	; () banked
 23254  0014B8  6FBC               	movwf	_fd& (0+255),b
 23255                           
 23256                           ;DisplayProtocol.h: 387: } else if (actualScreen == 4)
 23257  0014BA  0012               	return	
 23258  0014BC                     i1l11919:
 23259                           
 23260                           ; BSR set to: 1
 23261  0014BC  0E04               	movlw	4
 23262  0014BE  0101               	movlb	1	; () banked
 23263  0014C0  19BA               	xorwf	_actualScreen& (0+255),w,b
 23264  0014C2  A4D8               	btfss	status,2,c
 23265  0014C4  0012               	return	
 23266                           
 23267                           ; BSR set to: 1
 23268                           ;DisplayProtocol.h: 388: actualScreen = 9;
 23269  0014C6  0E09               	movlw	9
 23270  0014C8  0101               	movlb	1	; () banked
 23271  0014CA  6FBA               	movwf	_actualScreen& (0+255),b
 23272                           
 23273                           ; BSR set to: 1
 23274                           ;DisplayProtocol.h: 389: } else if(!ProcessStarted) {
 23275                           
 23276                           ; BSR set to: 1
 23277  0014CC  0012               	return	
 23278  0014CE                     i1l11923:
 23279                           
 23280                           ; BSR set to: 1
 23281  0014CE  503A               	movf	_ProcessStarted,w,c
 23282  0014D0  A4D8               	btfss	status,2,c
 23283  0014D2  0012               	return	
 23284                           
 23285                           ; BSR set to: 1
 23286                           ;DisplayProtocol.h: 390: tempLastScreen = actualScreen;
 23287  0014D4  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 23288                           
 23289                           ; BSR set to: 1
 23290                           ;DisplayProtocol.h: 391: actualScreen = 2;
 23291  0014D8  0E02               	movlw	2
 23292  0014DA  0101               	movlb	1	; () banked
 23293  0014DC  6FBA               	movwf	_actualScreen& (0+255),b
 23294                           
 23295                           ;DisplayProtocol.h: 392: selSN = 1;
 23296  0014DE  0E01               	movlw	1
 23297  0014E0  0101               	movlb	1	; () banked
 23298  0014E2  6FC3               	movwf	_selSN& (0+255),b
 23299                           
 23300                           ; BSR set to: 1
 23301                           ;DisplayProtocol.h: 393: }
 23302                           ;DisplayProtocol.h: 394: }else if(actualScreen == 5) {
 23303                           
 23304                           ; BSR set to: 1
 23305  0014E4  0012               	return	
 23306  0014E6                     i1l11929:
 23307                           
 23308                           ; BSR set to: 1
 23309  0014E6  0E05               	movlw	5
 23310  0014E8  0101               	movlb	1	; () banked
 23311  0014EA  19BA               	xorwf	_actualScreen& (0+255),w,b
 23312  0014EC  A4D8               	btfss	status,2,c
 23313  0014EE  D00F               	goto	i1l11937
 23314                           
 23315                           ; BSR set to: 1
 23316                           ;DisplayProtocol.h: 395: if(menuSection != 2)
 23317  0014F0  0E02               	movlw	2
 23318  0014F2  0101               	movlb	1	; () banked
 23319  0014F4  19C1               	xorwf	_menuSection& (0+255),w,b
 23320  0014F6  A4D8               	btfss	status,2,c
 23321                           
 23322                           ; BSR set to: 1
 23323                           ;DisplayProtocol.h: 396: integrator();
 23324  0014F8  EC73  F01E         	call	i1_integrator	;wreg free
 23325                           
 23326                           ;DisplayProtocol.h: 397: confirmEdition(!ProcessStarted);
 23327  0014FC  503A               	movf	_ProcessStarted,w,c
 23328  0014FE  A4D8               	btfss	status,2,c
 23329  001500  D002               	goto	i1u1782_20
 23330  001502  0E01               	movlw	1
 23331  001504  D001               	goto	i1u1783_20
 23332  001506                     i1u1782_20:
 23333  001506  0E00               	movlw	0
 23334  001508                     i1u1783_20:
 23335  001508  EC4B  F024         	call	i1_confirmEdition
 23336                           
 23337                           ;DisplayProtocol.h: 398: }else if(actualScreen == 12) {
 23338  00150C  0012               	return	
 23339  00150E                     i1l11937:
 23340  00150E  0E0C               	movlw	12
 23341  001510  0101               	movlb	1	; () banked
 23342  001512  19BA               	xorwf	_actualScreen& (0+255),w,b
 23343  001514  A4D8               	btfss	status,2,c
 23344  001516  0012               	return	
 23345                           
 23346                           ; BSR set to: 1
 23347                           ;DisplayProtocol.h: 399: integrator();
 23348  001518  EC73  F01E         	call	i1_integrator	;wreg free
 23349                           
 23350                           ;DisplayProtocol.h: 400: if(calibLevel == 0) {
 23351  00151C  0101               	movlb	1	; () banked
 23352  00151E  51BB               	movf	_calibLevel& (0+255),w,b
 23353  001520  A4D8               	btfss	status,2,c
 23354  001522  D058               	goto	i1l11967
 23355                           
 23356                           ; BSR set to: 1
 23357                           ;DisplayProtocol.h: 401: tempVelocidadMasa1 = (float)chanValf / tiXcorte;
 23358  001524  C1AE  F072         	movff	_chanValf,i1___ftdiv@f1
 23359  001528  C1AF  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 23360  00152C  C1B0  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 23361  001530  C0B2  F075         	movff	_tiXcorte,i1___ftdiv@f2
 23362  001534  C0B3  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 23363  001538  C0B4  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 23364  00153C  ECF8  F01B         	call	i1___ftdiv	;wreg free
 23365  001540  C072  F19A         	movff	?i1___ftdiv,_tempVelocidadMasa1
 23366  001544  C073  F19B         	movff	?i1___ftdiv+1,_tempVelocidadMasa1+1
 23367  001548  C074  F19C         	movff	?i1___ftdiv+2,_tempVelocidadMasa1+2
 23368                           
 23369                           ;DisplayProtocol.h: 402: tiXcorte = (float)0.5 / tempVelocidadMasa1;
 23370  00154C  0E00               	movlw	0
 23371  00154E  0100               	movlb	0	; () banked
 23372  001550  6F72               	movwf	i1___ftdiv@f1& (0+255),b
 23373  001552  0E00               	movlw	0
 23374  001554  0100               	movlb	0	; () banked
 23375  001556  6F73               	movwf	(i1___ftdiv@f1+1)& (0+255),b
 23376  001558  0E3F               	movlw	63
 23377  00155A  0100               	movlb	0	; () banked
 23378  00155C  6F74               	movwf	(i1___ftdiv@f1+2)& (0+255),b
 23379  00155E  C19A  F075         	movff	_tempVelocidadMasa1,i1___ftdiv@f2
 23380  001562  C19B  F076         	movff	_tempVelocidadMasa1+1,i1___ftdiv@f2+1
 23381  001566  C19C  F077         	movff	_tempVelocidadMasa1+2,i1___ftdiv@f2+2
 23382  00156A  ECF8  F01B         	call	i1___ftdiv	;wreg free
 23383  00156E  C072  F0B2         	movff	?i1___ftdiv,_tiXcorte
 23384  001572  C073  F0B3         	movff	?i1___ftdiv+1,_tiXcorte+1
 23385  001576  C074  F0B4         	movff	?i1___ftdiv+2,_tiXcorte+2
 23386                           
 23387                           ;DisplayProtocol.h: 403: calibLevel = 1;
 23388  00157A  0E01               	movlw	1
 23389  00157C  0101               	movlb	1	; () banked
 23390  00157E  6FBB               	movwf	_calibLevel& (0+255),b
 23391                           
 23392                           ; BSR set to: 1
 23393                           ;DisplayProtocol.h: 404: numCortes = 1;
 23394  001580  0E00               	movlw	0
 23395  001582  0100               	movlb	0	; () banked
 23396  001584  6FB9               	movwf	(_numCortes+1)& (0+255),b
 23397  001586  0E01               	movlw	1
 23398  001588  6FB8               	movwf	_numCortes& (0+255),b
 23399                           
 23400                           ; BSR set to: 0
 23401                           ;DisplayProtocol.h: 405: processState = 0;
 23402  00158A  0E00               	movlw	0
 23403  00158C  6E36               	movwf	_processState+1,c
 23404  00158E  0E00               	movlw	0
 23405  001590  6E35               	movwf	_processState,c
 23406                           
 23407                           ; BSR set to: 0
 23408                           ;DisplayProtocol.h: 406: processTimer = 0;
 23409  001592  0E00               	movlw	0
 23410  001594  6E2B               	movwf	_processTimer,c
 23411  001596  0E00               	movlw	0
 23412  001598  6E2C               	movwf	_processTimer+1,c
 23413  00159A  0E00               	movlw	0
 23414  00159C  6E2D               	movwf	_processTimer+2,c
 23415  00159E  0E00               	movlw	0
 23416  0015A0  6E2E               	movwf	_processTimer+3,c
 23417                           
 23418                           ; BSR set to: 0
 23419                           ;DisplayProtocol.h: 407: bladeIsUP = 2;
 23420  0015A2  0E02               	movlw	2
 23421  0015A4  6E50               	movwf	_bladeIsUP,c
 23422                           
 23423                           ; BSR set to: 0
 23424                           ;DisplayProtocol.h: 408: ProcessStarted = 1;
 23425  0015A6  0E01               	movlw	1
 23426  0015A8  6E3A               	movwf	_ProcessStarted,c
 23427                           
 23428                           ; BSR set to: 0
 23429                           ;DisplayProtocol.h: 409: if(ProcessStarted && bladeIsUP != 1) {
 23430  0015AA  503A               	movf	_ProcessStarted,w,c
 23431  0015AC  B4D8               	btfsc	status,2,c
 23432  0015AE  D00E               	goto	i1l11965
 23433                           
 23434                           ; BSR set to: 0
 23435  0015B0  0450               	decf	_bladeIsUP,w,c
 23436  0015B2  B4D8               	btfsc	status,2,c
 23437  0015B4  D00B               	goto	i1l11965
 23438                           
 23439                           ; BSR set to: 0
 23440                           ;DisplayProtocol.h: 410: processState = 0;
 23441  0015B6  0E00               	movlw	0
 23442  0015B8  6E36               	movwf	_processState+1,c
 23443  0015BA  0E00               	movlw	0
 23444  0015BC  6E35               	movwf	_processState,c
 23445                           
 23446                           ; BSR set to: 0
 23447                           ;DisplayProtocol.h: 411: setPWM2duty(-400);
 23448  0015BE  0EFE               	movlw	254
 23449  0015C0  0100               	movlb	0	; () banked
 23450  0015C2  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 23451  0015C4  0E70               	movlw	112
 23452  0015C6  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 23453  0015C8  ECC7  F02D         	call	i1_setPWM2duty	;wreg free
 23454  0015CC                     i1l11965:
 23455                           
 23456                           ;DisplayProtocol.h: 412: }
 23457                           ;DisplayProtocol.h: 413: actualScreen = 6;
 23458  0015CC  0E06               	movlw	6
 23459  0015CE  0101               	movlb	1	; () banked
 23460  0015D0  6FBA               	movwf	_actualScreen& (0+255),b
 23461                           
 23462                           ;DisplayProtocol.h: 414: }else if(calibLevel == 1) {
 23463  0015D2  0012               	return	
 23464  0015D4                     i1l11967:
 23465                           
 23466                           ; BSR set to: 1
 23467  0015D4  0101               	movlb	1	; () banked
 23468  0015D6  05BB               	decf	_calibLevel& (0+255),w,b
 23469  0015D8  A4D8               	btfss	status,2,c
 23470  0015DA  D058               	goto	i1l11993
 23471                           
 23472                           ; BSR set to: 1
 23473                           ;DisplayProtocol.h: 415: tempVelocidadMasa2 = (float)chanValf / tiXcorte;
 23474  0015DC  C1AE  F072         	movff	_chanValf,i1___ftdiv@f1
 23475  0015E0  C1AF  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 23476  0015E4  C1B0  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 23477  0015E8  C0B2  F075         	movff	_tiXcorte,i1___ftdiv@f2
 23478  0015EC  C0B3  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 23479  0015F0  C0B4  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 23480  0015F4  ECF8  F01B         	call	i1___ftdiv	;wreg free
 23481  0015F8  C072  F19D         	movff	?i1___ftdiv,_tempVelocidadMasa2
 23482  0015FC  C073  F19E         	movff	?i1___ftdiv+1,_tempVelocidadMasa2+1
 23483  001600  C074  F19F         	movff	?i1___ftdiv+2,_tempVelocidadMasa2+2
 23484                           
 23485                           ;DisplayProtocol.h: 416: tiXcorte = (float)0.25 / tempVelocidadMasa2;
 23486  001604  0E00               	movlw	0
 23487  001606  0100               	movlb	0	; () banked
 23488  001608  6F72               	movwf	i1___ftdiv@f1& (0+255),b
 23489  00160A  0E80               	movlw	128
 23490  00160C  0100               	movlb	0	; () banked
 23491  00160E  6F73               	movwf	(i1___ftdiv@f1+1)& (0+255),b
 23492  001610  0E3E               	movlw	62
 23493  001612  0100               	movlb	0	; () banked
 23494  001614  6F74               	movwf	(i1___ftdiv@f1+2)& (0+255),b
 23495  001616  C19D  F075         	movff	_tempVelocidadMasa2,i1___ftdiv@f2
 23496  00161A  C19E  F076         	movff	_tempVelocidadMasa2+1,i1___ftdiv@f2+1
 23497  00161E  C19F  F077         	movff	_tempVelocidadMasa2+2,i1___ftdiv@f2+2
 23498  001622  ECF8  F01B         	call	i1___ftdiv	;wreg free
 23499  001626  C072  F0B2         	movff	?i1___ftdiv,_tiXcorte
 23500  00162A  C073  F0B3         	movff	?i1___ftdiv+1,_tiXcorte+1
 23501  00162E  C074  F0B4         	movff	?i1___ftdiv+2,_tiXcorte+2
 23502                           
 23503                           ;DisplayProtocol.h: 417: calibLevel = 2;
 23504  001632  0E02               	movlw	2
 23505  001634  0101               	movlb	1	; () banked
 23506  001636  6FBB               	movwf	_calibLevel& (0+255),b
 23507                           
 23508                           ; BSR set to: 1
 23509                           ;DisplayProtocol.h: 418: numCortes = 1;
 23510  001638  0E00               	movlw	0
 23511  00163A  0100               	movlb	0	; () banked
 23512  00163C  6FB9               	movwf	(_numCortes+1)& (0+255),b
 23513  00163E  0E01               	movlw	1
 23514  001640  6FB8               	movwf	_numCortes& (0+255),b
 23515                           
 23516                           ; BSR set to: 0
 23517                           ;DisplayProtocol.h: 419: processState = 0;
 23518  001642  0E00               	movlw	0
 23519  001644  6E36               	movwf	_processState+1,c
 23520  001646  0E00               	movlw	0
 23521  001648  6E35               	movwf	_processState,c
 23522                           
 23523                           ; BSR set to: 0
 23524                           ;DisplayProtocol.h: 420: processTimer = 0;
 23525  00164A  0E00               	movlw	0
 23526  00164C  6E2B               	movwf	_processTimer,c
 23527  00164E  0E00               	movlw	0
 23528  001650  6E2C               	movwf	_processTimer+1,c
 23529  001652  0E00               	movlw	0
 23530  001654  6E2D               	movwf	_processTimer+2,c
 23531  001656  0E00               	movlw	0
 23532  001658  6E2E               	movwf	_processTimer+3,c
 23533                           
 23534                           ; BSR set to: 0
 23535                           ;DisplayProtocol.h: 421: bladeIsUP = 2;
 23536  00165A  0E02               	movlw	2
 23537  00165C  6E50               	movwf	_bladeIsUP,c
 23538                           
 23539                           ; BSR set to: 0
 23540                           ;DisplayProtocol.h: 422: ProcessStarted = 1;
 23541  00165E  0E01               	movlw	1
 23542  001660  6E3A               	movwf	_ProcessStarted,c
 23543                           
 23544                           ; BSR set to: 0
 23545                           ;DisplayProtocol.h: 423: if(ProcessStarted && bladeIsUP != 1) {
 23546  001662  503A               	movf	_ProcessStarted,w,c
 23547  001664  B4D8               	btfsc	status,2,c
 23548  001666  D00E               	goto	i1l11991
 23549                           
 23550                           ; BSR set to: 0
 23551  001668  0450               	decf	_bladeIsUP,w,c
 23552  00166A  B4D8               	btfsc	status,2,c
 23553  00166C  D00B               	goto	i1l11991
 23554                           
 23555                           ; BSR set to: 0
 23556                           ;DisplayProtocol.h: 424: processState = 0;
 23557  00166E  0E00               	movlw	0
 23558  001670  6E36               	movwf	_processState+1,c
 23559  001672  0E00               	movlw	0
 23560  001674  6E35               	movwf	_processState,c
 23561                           
 23562                           ; BSR set to: 0
 23563                           ;DisplayProtocol.h: 425: setPWM2duty(-400);
 23564  001676  0EFE               	movlw	254
 23565  001678  0100               	movlb	0	; () banked
 23566  00167A  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 23567  00167C  0E70               	movlw	112
 23568  00167E  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 23569  001680  ECC7  F02D         	call	i1_setPWM2duty	;wreg free
 23570  001684                     i1l11991:
 23571                           
 23572                           ;DisplayProtocol.h: 426: }
 23573                           ;DisplayProtocol.h: 427: actualScreen = 6;
 23574  001684  0E06               	movlw	6
 23575  001686  0101               	movlb	1	; () banked
 23576  001688  6FBA               	movwf	_actualScreen& (0+255),b
 23577                           
 23578                           ;DisplayProtocol.h: 428: }else if(calibLevel == 2) {
 23579  00168A  0012               	return	
 23580  00168C                     i1l11993:
 23581                           
 23582                           ; BSR set to: 1
 23583  00168C  0E02               	movlw	2
 23584  00168E  0101               	movlb	1	; () banked
 23585  001690  19BB               	xorwf	_calibLevel& (0+255),w,b
 23586  001692  A4D8               	btfss	status,2,c
 23587  001694  0012               	return	
 23588                           
 23589                           ; BSR set to: 1
 23590                           ;DisplayProtocol.h: 429: tempVelocidadMasa3 = (float)chanValf / tiXcorte;
 23591  001696  C1AE  F072         	movff	_chanValf,i1___ftdiv@f1
 23592  00169A  C1AF  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 23593  00169E  C1B0  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 23594  0016A2  C0B2  F075         	movff	_tiXcorte,i1___ftdiv@f2
 23595  0016A6  C0B3  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 23596  0016AA  C0B4  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 23597  0016AE  ECF8  F01B         	call	i1___ftdiv	;wreg free
 23598  0016B2  C072  F18F         	movff	?i1___ftdiv,_tempVelocidadMasa3
 23599  0016B6  C073  F190         	movff	?i1___ftdiv+1,_tempVelocidadMasa3+1
 23600  0016BA  C074  F191         	movff	?i1___ftdiv+2,_tempVelocidadMasa3+2
 23601                           
 23602                           ;DisplayProtocol.h: 430: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 23603  0016BE  C19D  F06B         	movff	_tempVelocidadMasa2,i1___ftadd@f2
 23604  0016C2  C19E  F06C         	movff	_tempVelocidadMasa2+1,i1___ftadd@f2+1
 23605  0016C6  C19F  F06D         	movff	_tempVelocidadMasa2+2,i1___ftadd@f2+2
 23606  0016CA  C19A  F068         	movff	_tempVelocidadMasa1,i1___ftadd@f1
 23607  0016CE  C19B  F069         	movff	_tempVelocidadMasa1+1,i1___ftadd@f1+1
 23608  0016D2  C19C  F06A         	movff	_tempVelocidadMasa1+2,i1___ftadd@f1+2
 23609  0016D6  ECB0  F013         	call	i1___ftadd	;wreg free
 23610  0016DA  C068  F090         	movff	?i1___ftadd,i1_longPressENTER$3198
 23611  0016DE  C069  F091         	movff	?i1___ftadd+1,i1_longPressENTER$3198+1
 23612  0016E2  C06A  F092         	movff	?i1___ftadd+2,i1_longPressENTER$3198+2
 23613                           
 23614                           ;DisplayProtocol.h: 430: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 23615  0016E6  C090  F068         	movff	i1_longPressENTER$3198,i1___ftadd@f1
 23616  0016EA  C091  F069         	movff	i1_longPressENTER$3198+1,i1___ftadd@f1+1
 23617  0016EE  C092  F06A         	movff	i1_longPressENTER$3198+2,i1___ftadd@f1+2
 23618  0016F2  C18F  F06B         	movff	_tempVelocidadMasa3,i1___ftadd@f2
 23619  0016F6  C190  F06C         	movff	_tempVelocidadMasa3+1,i1___ftadd@f2+1
 23620  0016FA  C191  F06D         	movff	_tempVelocidadMasa3+2,i1___ftadd@f2+2
 23621  0016FE  ECB0  F013         	call	i1___ftadd	;wreg free
 23622  001702  C068  F08D         	movff	?i1___ftadd,i1longPressENTER@temp
 23623  001706  C069  F08E         	movff	?i1___ftadd+1,i1longPressENTER@temp+1
 23624  00170A  C06A  F08F         	movff	?i1___ftadd+2,i1longPressENTER@temp+2
 23625                           
 23626                           ;DisplayProtocol.h: 431: chanValf = (float)temp / 3.0f;
 23627  00170E  C08D  F072         	movff	i1longPressENTER@temp,i1___ftdiv@f1
 23628  001712  C08E  F073         	movff	i1longPressENTER@temp+1,i1___ftdiv@f1+1
 23629  001716  C08F  F074         	movff	i1longPressENTER@temp+2,i1___ftdiv@f1+2
 23630  00171A  0E00               	movlw	0
 23631  00171C  0100               	movlb	0	; () banked
 23632  00171E  6F75               	movwf	i1___ftdiv@f2& (0+255),b
 23633  001720  0E40               	movlw	64
 23634  001722  0100               	movlb	0	; () banked
 23635  001724  6F76               	movwf	(i1___ftdiv@f2+1)& (0+255),b
 23636  001726  0E40               	movlw	64
 23637  001728  0100               	movlb	0	; () banked
 23638  00172A  6F77               	movwf	(i1___ftdiv@f2+2)& (0+255),b
 23639  00172C  ECF8  F01B         	call	i1___ftdiv	;wreg free
 23640  001730  C072  F1AE         	movff	?i1___ftdiv,_chanValf
 23641  001734  C073  F1AF         	movff	?i1___ftdiv+1,_chanValf+1
 23642  001738  C074  F1B0         	movff	?i1___ftdiv+2,_chanValf+2
 23643                           
 23644                           ;DisplayProtocol.h: 432: numCortes = tempNumCortes;
 23645  00173C  C192  F0B8         	movff	_tempNumCortes,_numCortes
 23646  001740  C193  F0B9         	movff	_tempNumCortes+1,_numCortes+1
 23647                           
 23648                           ;DisplayProtocol.h: 433: calcVars2ti();
 23649  001744  EC30  F033         	call	i1_calcVars2ti	;wreg free
 23650                           
 23651                           ;DisplayProtocol.h: 434: confirmEdition(!ProcessStarted);
 23652  001748  503A               	movf	_ProcessStarted,w,c
 23653  00174A  A4D8               	btfss	status,2,c
 23654  00174C  D002               	goto	i1u1792_20
 23655  00174E  0E01               	movlw	1
 23656  001750  D001               	goto	i1u1793_20
 23657  001752                     i1u1792_20:
 23658  001752  0E00               	movlw	0
 23659  001754                     i1u1793_20:
 23660  001754  EC4B  F024         	call	i1_confirmEdition
 23661  001758  0012               	return	
 23662  00175A                     __end_ofi1_longPressENTER:
 23663                           	opt stack 0
 23664                           pclatu	equ	0xFFB
 23665                           pclath	equ	0xFFA
 23666                           tblptru	equ	0xFF8
 23667                           tblptrh	equ	0xFF7
 23668                           tblptrl	equ	0xFF6
 23669                           tablat	equ	0xFF5
 23670                           prodh	equ	0xFF4
 23671                           prodl	equ	0xFF3
 23672                           intcon	equ	0xFF2
 23673                           postinc0	equ	0xFEE
 23674                           fsr0h	equ	0xFEA
 23675                           fsr0l	equ	0xFE9
 23676                           wreg	equ	0xFE8
 23677                           postdec1	equ	0xFE5
 23678                           fsr1h	equ	0xFE2
 23679                           fsr1l	equ	0xFE1
 23680                           bsr	equ	0xFE0
 23681                           indf2	equ	0xFDF
 23682                           postinc2	equ	0xFDE
 23683                           postdec2	equ	0xFDD
 23684                           plusw2	equ	0xFDB
 23685                           fsr2h	equ	0xFDA
 23686                           fsr2l	equ	0xFD9
 23687                           status	equ	0xFD8
 23688                           
 23689 ;; *************** function i1_integrator *****************
 23690 ;; Defined at:
 23691 ;;		line 61 in file "source/DisplayProtocol.h"
 23692 ;; Parameters:    Size  Location     Type
 23693 ;;		None
 23694 ;; Auto vars:     Size  Location     Type
 23695 ;;  integrator      4   39[BANK0 ] long 
 23696 ;;  integrator      4   35[BANK0 ] long 
 23697 ;;  integrator      2   43[BANK0 ] int 
 23698 ;; Return value:  Size  Location     Type
 23699 ;;                  1    wreg      void 
 23700 ;; Registers used:
 23701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23702 ;; Tracked objects:
 23703 ;;		On entry : 0/0
 23704 ;;		On exit  : 0/0
 23705 ;;		Unchanged: 0/0
 23706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23707 ;;      Params:         0       0       0       0       0       0       0
 23708 ;;      Locals:         0      10       0       0       0       0       0
 23709 ;;      Temps:          0       2       0       0       0       0       0
 23710 ;;      Totals:         0      12       0       0       0       0       0
 23711 ;;Total ram usage:       12 bytes
 23712 ;; Hardware stack levels used:    1
 23713 ;; Hardware stack levels required when called:    6
 23714 ;; This function calls:
 23715 ;;		i1___altoft
 23716 ;;		i1___ftdiv
 23717 ;;		i1___lmul
 23718 ;; This function is called by:
 23719 ;;		i1_longPressENTER
 23720 ;; This function uses a non-reentrant model
 23721 ;;
 23722                           
 23723                           	psect	text97
 23724  003CE6                     __ptext97:
 23725                           	opt stack 0
 23726  003CE6                     i1_integrator:
 23727                           	opt stack 11
 23728                           
 23729                           ;DisplayProtocol.h: 62: long acum = 0;
 23730                           
 23731                           ;incstack = 0
 23732  003CE6  0E00               	movlw	0
 23733  003CE8  0100               	movlb	0	; () banked
 23734  003CEA  6F83               	movwf	i1integrator@acum& (0+255),b
 23735  003CEC  0E00               	movlw	0
 23736  003CEE  6F84               	movwf	(i1integrator@acum+1)& (0+255),b
 23737  003CF0  0E00               	movlw	0
 23738  003CF2  6F85               	movwf	(i1integrator@acum+2)& (0+255),b
 23739  003CF4  0E00               	movlw	0
 23740  003CF6  6F86               	movwf	(i1integrator@acum+3)& (0+255),b
 23741                           
 23742                           ;DisplayProtocol.h: 63: long temp = 0;
 23743  003CF8  0E00               	movlw	0
 23744  003CFA  0100               	movlb	0	; () banked
 23745  003CFC  6F87               	movwf	i1integrator@temp& (0+255),b
 23746  003CFE  0E00               	movlw	0
 23747  003D00  6F88               	movwf	(i1integrator@temp+1)& (0+255),b
 23748  003D02  0E00               	movlw	0
 23749  003D04  6F89               	movwf	(i1integrator@temp+2)& (0+255),b
 23750  003D06  0E00               	movlw	0
 23751  003D08  6F8A               	movwf	(i1integrator@temp+3)& (0+255),b
 23752                           
 23753                           ;DisplayProtocol.h: 64: int i;
 23754                           ;DisplayProtocol.h: 65: for(i = 0; i < 6; i++) {
 23755  003D0A  0E00               	movlw	0
 23756  003D0C  0100               	movlb	0	; () banked
 23757  003D0E  6F8C               	movwf	(i1integrator@i+1)& (0+255),b
 23758  003D10  0E00               	movlw	0
 23759  003D12  6F8B               	movwf	i1integrator@i& (0+255),b
 23760  003D14                     i1l10761:
 23761                           
 23762                           ; BSR set to: 0
 23763  003D14  0100               	movlb	0	; () banked
 23764  003D16  BF8C               	btfsc	(i1integrator@i+1)& (0+255),7,b
 23765  003D18  D008               	goto	i1l10765
 23766  003D1A  0100               	movlb	0	; () banked
 23767  003D1C  518C               	movf	(i1integrator@i+1)& (0+255),w,b
 23768  003D1E  E152               	bnz	i1l10773
 23769  003D20  0E06               	movlw	6
 23770  003D22  0100               	movlb	0	; () banked
 23771  003D24  5D8B               	subwf	i1integrator@i& (0+255),w,b
 23772  003D26  B0D8               	btfsc	status,0,c
 23773  003D28  D04D               	goto	i1l10773
 23774  003D2A                     i1l10765:
 23775                           
 23776                           ; BSR set to: 0
 23777                           ;DisplayProtocol.h: 66: temp = (long)chanValdig[i]*exp10[i];
 23778  003D2A  0EA0               	movlw	low _chanValdig
 23779  003D2C  0100               	movlb	0	; () banked
 23780  003D2E  258B               	addwf	i1integrator@i& (0+255),w,b
 23781  003D30  6ED9               	movwf	fsr2l,c
 23782  003D32  0E01               	movlw	high _chanValdig
 23783  003D34  0100               	movlb	0	; () banked
 23784  003D36  218C               	addwfc	(i1integrator@i+1)& (0+255),w,b
 23785  003D38  6EDA               	movwf	fsr2h,c
 23786  003D3A  50DF               	movf	indf2,w,c
 23787  003D3C  0100               	movlb	0	; () banked
 23788  003D3E  6F60               	movwf	i1___lmul@multiplier& (0+255),b
 23789  003D40  0E00               	movlw	0
 23790  003D42  BF60               	btfsc	i1___lmul@multiplier& (0+255),7,b
 23791  003D44  0EFF               	movlw	-1
 23792  003D46  6F61               	movwf	(i1___lmul@multiplier+1)& (0+255),b
 23793  003D48  6F62               	movwf	(i1___lmul@multiplier+2)& (0+255),b
 23794  003D4A  6F63               	movwf	(i1___lmul@multiplier+3)& (0+255),b
 23795  003D4C  0E77               	movlw	low _exp10
 23796  003D4E  0100               	movlb	0	; () banked
 23797  003D50  6F81               	movwf	??i1_integrator& (0+255),b
 23798  003D52  0E01               	movlw	high _exp10
 23799  003D54  0100               	movlb	0	; () banked
 23800  003D56  6F82               	movwf	(??i1_integrator+1)& (0+255),b
 23801  003D58  90D8               	bcf	status,0,c
 23802  003D5A  0100               	movlb	0	; () banked
 23803  003D5C  358B               	rlcf	i1integrator@i& (0+255),w,b
 23804  003D5E  6ED9               	movwf	fsr2l,c
 23805  003D60  0100               	movlb	0	; () banked
 23806  003D62  358C               	rlcf	(i1integrator@i+1)& (0+255),w,b
 23807  003D64  6EDA               	movwf	fsr2h,c
 23808  003D66  90D8               	bcf	status,0,c
 23809  003D68  36D9               	rlcf	fsr2l,f,c
 23810  003D6A  36DA               	rlcf	fsr2h,f,c
 23811  003D6C  0100               	movlb	0	; () banked
 23812  003D6E  5181               	movf	??i1_integrator& (0+255),w,b
 23813  003D70  26D9               	addwf	fsr2l,f,c
 23814  003D72  0100               	movlb	0	; () banked
 23815  003D74  5182               	movf	(??i1_integrator+1)& (0+255),w,b
 23816  003D76  22DA               	addwfc	fsr2h,f,c
 23817  003D78  CFDE F064          	movff	postinc2,i1___lmul@multiplicand
 23818  003D7C  CFDE F065          	movff	postinc2,i1___lmul@multiplicand+1
 23819  003D80  CFDE F066          	movff	postinc2,i1___lmul@multiplicand+2
 23820  003D84  CFDE F067          	movff	postinc2,i1___lmul@multiplicand+3
 23821  003D88  EC28  F031         	call	i1___lmul	;wreg free
 23822  003D8C  C060  F087         	movff	?i1___lmul,i1integrator@temp
 23823  003D90  C061  F088         	movff	?i1___lmul+1,i1integrator@temp+1
 23824  003D94  C062  F089         	movff	?i1___lmul+2,i1integrator@temp+2
 23825  003D98  C063  F08A         	movff	?i1___lmul+3,i1integrator@temp+3
 23826                           
 23827                           ;DisplayProtocol.h: 67: acum += temp;
 23828  003D9C  0100               	movlb	0	; () banked
 23829  003D9E  5187               	movf	i1integrator@temp& (0+255),w,b
 23830  003DA0  0100               	movlb	0	; () banked
 23831  003DA2  2783               	addwf	i1integrator@acum& (0+255),f,b
 23832  003DA4  0100               	movlb	0	; () banked
 23833  003DA6  5188               	movf	(i1integrator@temp+1)& (0+255),w,b
 23834  003DA8  0100               	movlb	0	; () banked
 23835  003DAA  2384               	addwfc	(i1integrator@acum+1)& (0+255),f,b
 23836  003DAC  0100               	movlb	0	; () banked
 23837  003DAE  5189               	movf	(i1integrator@temp+2)& (0+255),w,b
 23838  003DB0  0100               	movlb	0	; () banked
 23839  003DB2  2385               	addwfc	(i1integrator@acum+2)& (0+255),f,b
 23840  003DB4  0100               	movlb	0	; () banked
 23841  003DB6  518A               	movf	(i1integrator@temp+3)& (0+255),w,b
 23842  003DB8  0100               	movlb	0	; () banked
 23843  003DBA  2386               	addwfc	(i1integrator@acum+3)& (0+255),f,b
 23844                           
 23845                           ; BSR set to: 0
 23846  003DBC  0100               	movlb	0	; () banked
 23847  003DBE  4B8B               	infsnz	i1integrator@i& (0+255),f,b
 23848  003DC0  2B8C               	incf	(i1integrator@i+1)& (0+255),f,b
 23849  003DC2  D7A8               	goto	i1l10761
 23850  003DC4                     i1l10773:
 23851                           
 23852                           ; BSR set to: 0
 23853                           ;DisplayProtocol.h: 68: }
 23854                           ;DisplayProtocol.h: 69: chanValf = (float)acum / 1000;
 23855  003DC4  C083  F068         	movff	i1integrator@acum,i1___altoft@c
 23856  003DC8  C084  F069         	movff	i1integrator@acum+1,i1___altoft@c+1
 23857  003DCC  C085  F06A         	movff	i1integrator@acum+2,i1___altoft@c+2
 23858  003DD0  C086  F06B         	movff	i1integrator@acum+3,i1___altoft@c+3
 23859  003DD4  EC45  F02C         	call	i1___altoft	;wreg free
 23860  003DD8  C068  F072         	movff	?i1___altoft,i1___ftdiv@f1
 23861  003DDC  C069  F073         	movff	?i1___altoft+1,i1___ftdiv@f1+1
 23862  003DE0  C06A  F074         	movff	?i1___altoft+2,i1___ftdiv@f1+2
 23863  003DE4  0E00               	movlw	0
 23864  003DE6  0100               	movlb	0	; () banked
 23865  003DE8  6F75               	movwf	i1___ftdiv@f2& (0+255),b
 23866  003DEA  0E7A               	movlw	122
 23867  003DEC  0100               	movlb	0	; () banked
 23868  003DEE  6F76               	movwf	(i1___ftdiv@f2+1)& (0+255),b
 23869  003DF0  0E44               	movlw	68
 23870  003DF2  0100               	movlb	0	; () banked
 23871  003DF4  6F77               	movwf	(i1___ftdiv@f2+2)& (0+255),b
 23872  003DF6  ECF8  F01B         	call	i1___ftdiv	;wreg free
 23873  003DFA  C072  F1AE         	movff	?i1___ftdiv,_chanValf
 23874  003DFE  C073  F1AF         	movff	?i1___ftdiv+1,_chanValf+1
 23875  003E02  C074  F1B0         	movff	?i1___ftdiv+2,_chanValf+2
 23876  003E06  0012               	return		;funcret
 23877  003E08                     __end_ofi1_integrator:
 23878                           	opt stack 0
 23879                           pclatu	equ	0xFFB
 23880                           pclath	equ	0xFFA
 23881                           tblptru	equ	0xFF8
 23882                           tblptrh	equ	0xFF7
 23883                           tblptrl	equ	0xFF6
 23884                           tablat	equ	0xFF5
 23885                           prodh	equ	0xFF4
 23886                           prodl	equ	0xFF3
 23887                           intcon	equ	0xFF2
 23888                           postinc0	equ	0xFEE
 23889                           fsr0h	equ	0xFEA
 23890                           fsr0l	equ	0xFE9
 23891                           wreg	equ	0xFE8
 23892                           postdec1	equ	0xFE5
 23893                           fsr1h	equ	0xFE2
 23894                           fsr1l	equ	0xFE1
 23895                           bsr	equ	0xFE0
 23896                           indf2	equ	0xFDF
 23897                           postinc2	equ	0xFDE
 23898                           postdec2	equ	0xFDD
 23899                           plusw2	equ	0xFDB
 23900                           fsr2h	equ	0xFDA
 23901                           fsr2l	equ	0xFD9
 23902                           status	equ	0xFD8
 23903                           
 23904 ;; *************** function i1___lmul *****************
 23905 ;; Defined at:
 23906 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
 23907 ;; Parameters:    Size  Location     Type
 23908 ;;  multiplier      4    0[BANK0 ] unsigned long 
 23909 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 23910 ;; Auto vars:     Size  Location     Type
 23911 ;;  __lmul          4    8[BANK0 ] unsigned long 
 23912 ;; Return value:  Size  Location     Type
 23913 ;;                  4    0[BANK0 ] unsigned long 
 23914 ;; Registers used:
 23915 ;;		wreg, status,2, status,0
 23916 ;; Tracked objects:
 23917 ;;		On entry : 0/0
 23918 ;;		On exit  : 0/0
 23919 ;;		Unchanged: 0/0
 23920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23921 ;;      Params:         0       8       0       0       0       0       0
 23922 ;;      Locals:         0       4       0       0       0       0       0
 23923 ;;      Temps:          0       0       0       0       0       0       0
 23924 ;;      Totals:         0      12       0       0       0       0       0
 23925 ;;Total ram usage:       12 bytes
 23926 ;; Hardware stack levels used:    1
 23927 ;; Hardware stack levels required when called:    4
 23928 ;; This function calls:
 23929 ;;		Nothing
 23930 ;; This function is called by:
 23931 ;;		i1_desintegrator
 23932 ;;		i1_integrator
 23933 ;; This function uses a non-reentrant model
 23934 ;;
 23935                           
 23936                           	psect	text98
 23937  006250                     __ptext98:
 23938                           	opt stack 0
 23939  006250                     i1___lmul:
 23940                           	opt stack 12
 23941                           
 23942                           ;incstack = 0
 23943  006250  0E00               	movlw	0
 23944  006252  0100               	movlb	0	; () banked
 23945  006254  6F68               	movwf	i1___lmul@product& (0+255),b
 23946  006256  0E00               	movlw	0
 23947  006258  6F69               	movwf	(i1___lmul@product+1)& (0+255),b
 23948  00625A  0E00               	movlw	0
 23949  00625C  6F6A               	movwf	(i1___lmul@product+2)& (0+255),b
 23950  00625E  0E00               	movlw	0
 23951  006260  6F6B               	movwf	(i1___lmul@product+3)& (0+255),b
 23952  006262                     i1l10395:
 23953                           
 23954                           ; BSR set to: 0
 23955  006262  0100               	movlb	0	; () banked
 23956  006264  A160               	btfss	i1___lmul@multiplier& (0+255),0,b
 23957  006266  D010               	goto	i1l10399
 23958                           
 23959                           ; BSR set to: 0
 23960  006268  0100               	movlb	0	; () banked
 23961  00626A  5164               	movf	i1___lmul@multiplicand& (0+255),w,b
 23962  00626C  0100               	movlb	0	; () banked
 23963  00626E  2768               	addwf	i1___lmul@product& (0+255),f,b
 23964  006270  0100               	movlb	0	; () banked
 23965  006272  5165               	movf	(i1___lmul@multiplicand+1)& (0+255),w,b
 23966  006274  0100               	movlb	0	; () banked
 23967  006276  2369               	addwfc	(i1___lmul@product+1)& (0+255),f,b
 23968  006278  0100               	movlb	0	; () banked
 23969  00627A  5166               	movf	(i1___lmul@multiplicand+2)& (0+255),w,b
 23970  00627C  0100               	movlb	0	; () banked
 23971  00627E  236A               	addwfc	(i1___lmul@product+2)& (0+255),f,b
 23972  006280  0100               	movlb	0	; () banked
 23973  006282  5167               	movf	(i1___lmul@multiplicand+3)& (0+255),w,b
 23974  006284  0100               	movlb	0	; () banked
 23975  006286  236B               	addwfc	(i1___lmul@product+3)& (0+255),f,b
 23976  006288                     i1l10399:
 23977                           
 23978                           ; BSR set to: 0
 23979  006288  0100               	movlb	0	; () banked
 23980  00628A  90D8               	bcf	status,0,c
 23981  00628C  3764               	rlcf	i1___lmul@multiplicand& (0+255),f,b
 23982  00628E  3765               	rlcf	(i1___lmul@multiplicand+1)& (0+255),f,b
 23983  006290  3766               	rlcf	(i1___lmul@multiplicand+2)& (0+255),f,b
 23984  006292  3767               	rlcf	(i1___lmul@multiplicand+3)& (0+255),f,b
 23985                           
 23986                           ; BSR set to: 0
 23987  006294  0100               	movlb	0	; () banked
 23988  006296  90D8               	bcf	status,0,c
 23989  006298  3363               	rrcf	(i1___lmul@multiplier+3)& (0+255),f,b
 23990  00629A  3362               	rrcf	(i1___lmul@multiplier+2)& (0+255),f,b
 23991  00629C  3361               	rrcf	(i1___lmul@multiplier+1)& (0+255),f,b
 23992  00629E  3360               	rrcf	i1___lmul@multiplier& (0+255),f,b
 23993  0062A0  0100               	movlb	0	; () banked
 23994  0062A2  5160               	movf	i1___lmul@multiplier& (0+255),w,b
 23995  0062A4  0100               	movlb	0	; () banked
 23996  0062A6  1161               	iorwf	(i1___lmul@multiplier+1)& (0+255),w,b
 23997  0062A8  0100               	movlb	0	; () banked
 23998  0062AA  1162               	iorwf	(i1___lmul@multiplier+2)& (0+255),w,b
 23999  0062AC  0100               	movlb	0	; () banked
 24000  0062AE  1163               	iorwf	(i1___lmul@multiplier+3)& (0+255),w,b
 24001  0062B0  A4D8               	btfss	status,2,c
 24002  0062B2  D7D7               	goto	i1l10395
 24003                           
 24004                           ; BSR set to: 0
 24005  0062B4  C068  F060         	movff	i1___lmul@product,?i1___lmul
 24006  0062B8  C069  F061         	movff	i1___lmul@product+1,?i1___lmul+1
 24007  0062BC  C06A  F062         	movff	i1___lmul@product+2,?i1___lmul+2
 24008  0062C0  C06B  F063         	movff	i1___lmul@product+3,?i1___lmul+3
 24009                           
 24010                           ; BSR set to: 0
 24011  0062C4  0012               	return		;funcret
 24012  0062C6                     __end_ofi1___lmul:
 24013                           	opt stack 0
 24014                           pclatu	equ	0xFFB
 24015                           pclath	equ	0xFFA
 24016                           tblptru	equ	0xFF8
 24017                           tblptrh	equ	0xFF7
 24018                           tblptrl	equ	0xFF6
 24019                           tablat	equ	0xFF5
 24020                           prodh	equ	0xFF4
 24021                           prodl	equ	0xFF3
 24022                           intcon	equ	0xFF2
 24023                           postinc0	equ	0xFEE
 24024                           fsr0h	equ	0xFEA
 24025                           fsr0l	equ	0xFE9
 24026                           wreg	equ	0xFE8
 24027                           postdec1	equ	0xFE5
 24028                           fsr1h	equ	0xFE2
 24029                           fsr1l	equ	0xFE1
 24030                           bsr	equ	0xFE0
 24031                           indf2	equ	0xFDF
 24032                           postinc2	equ	0xFDE
 24033                           postdec2	equ	0xFDD
 24034                           plusw2	equ	0xFDB
 24035                           fsr2h	equ	0xFDA
 24036                           fsr2l	equ	0xFD9
 24037                           status	equ	0xFD8
 24038                           
 24039 ;; *************** function i1___altoft *****************
 24040 ;; Defined at:
 24041 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
 24042 ;; Parameters:    Size  Location     Type
 24043 ;;  c               4    8[BANK0 ] long 
 24044 ;; Auto vars:     Size  Location     Type
 24045 ;;  __altoft        1   17[BANK0 ] unsigned char 
 24046 ;;  __altoft        1   16[BANK0 ] unsigned char 
 24047 ;; Return value:  Size  Location     Type
 24048 ;;                  3    8[BANK0 ] float 
 24049 ;; Registers used:
 24050 ;;		wreg, status,2, status,0, cstack
 24051 ;; Tracked objects:
 24052 ;;		On entry : 0/0
 24053 ;;		On exit  : 0/0
 24054 ;;		Unchanged: 0/0
 24055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24056 ;;      Params:         0       4       0       0       0       0       0
 24057 ;;      Locals:         0       2       0       0       0       0       0
 24058 ;;      Temps:          0       4       0       0       0       0       0
 24059 ;;      Totals:         0      10       0       0       0       0       0
 24060 ;;Total ram usage:       10 bytes
 24061 ;; Hardware stack levels used:    1
 24062 ;; Hardware stack levels required when called:    5
 24063 ;; This function calls:
 24064 ;;		i1___ftpack
 24065 ;; This function is called by:
 24066 ;;		i1_integrator
 24067 ;; This function uses a non-reentrant model
 24068 ;;
 24069                           
 24070                           	psect	text99
 24071  00588A                     __ptext99:
 24072                           	opt stack 0
 24073  00588A                     i1___altoft:
 24074                           	opt stack 11
 24075                           
 24076                           ; BSR set to: 0
 24077                           ;incstack = 0
 24078  00588A  0E00               	movlw	0
 24079  00588C  0100               	movlb	0	; () banked
 24080  00588E  6F71               	movwf	i1___altoft@sign& (0+255),b
 24081  005890  0E8E               	movlw	142
 24082  005892  0100               	movlb	0	; () banked
 24083  005894  6F70               	movwf	i1___altoft@exp& (0+255),b
 24084                           
 24085                           ; BSR set to: 0
 24086  005896  0100               	movlb	0	; () banked
 24087  005898  AF6B               	btfss	(i1___altoft@c+3)& (0+255),7,b
 24088  00589A  D015               	goto	i1l10457
 24089                           
 24090                           ; BSR set to: 0
 24091  00589C  0100               	movlb	0	; () banked
 24092  00589E  1F6B               	comf	(i1___altoft@c+3)& (0+255),f,b
 24093  0058A0  1F6A               	comf	(i1___altoft@c+2)& (0+255),f,b
 24094  0058A2  1F69               	comf	(i1___altoft@c+1)& (0+255),f,b
 24095  0058A4  6D68               	negf	i1___altoft@c& (0+255),b
 24096  0058A6  0E00               	movlw	0
 24097  0058A8  2369               	addwfc	(i1___altoft@c+1)& (0+255),f,b
 24098  0058AA  236A               	addwfc	(i1___altoft@c+2)& (0+255),f,b
 24099  0058AC  236B               	addwfc	(i1___altoft@c+3)& (0+255),f,b
 24100                           
 24101                           ; BSR set to: 0
 24102  0058AE  0E01               	movlw	1
 24103  0058B0  0100               	movlb	0	; () banked
 24104  0058B2  6F71               	movwf	i1___altoft@sign& (0+255),b
 24105                           
 24106                           ; BSR set to: 0
 24107  0058B4  D008               	goto	i1l10457
 24108  0058B6                     i1l10455:
 24109                           
 24110                           ; BSR set to: 0
 24111  0058B6  0100               	movlb	0	; () banked
 24112  0058B8  90D8               	bcf	status,0,c
 24113  0058BA  336B               	rrcf	(i1___altoft@c+3)& (0+255),f,b
 24114  0058BC  336A               	rrcf	(i1___altoft@c+2)& (0+255),f,b
 24115  0058BE  3369               	rrcf	(i1___altoft@c+1)& (0+255),f,b
 24116  0058C0  3368               	rrcf	i1___altoft@c& (0+255),f,b
 24117  0058C2  0100               	movlb	0	; () banked
 24118  0058C4  2B70               	incf	i1___altoft@exp& (0+255),f,b
 24119  0058C6                     i1l10457:
 24120                           
 24121                           ; BSR set to: 0
 24122  0058C6  0E00               	movlw	0
 24123  0058C8  0100               	movlb	0	; () banked
 24124  0058CA  1568               	andwf	i1___altoft@c& (0+255),w,b
 24125  0058CC  0100               	movlb	0	; () banked
 24126  0058CE  6F6C               	movwf	??i1___altoft& (0+255),b
 24127  0058D0  0E00               	movlw	0
 24128  0058D2  0100               	movlb	0	; () banked
 24129  0058D4  1569               	andwf	(i1___altoft@c+1)& (0+255),w,b
 24130  0058D6  0100               	movlb	0	; () banked
 24131  0058D8  6F6D               	movwf	(??i1___altoft+1)& (0+255),b
 24132  0058DA  0E00               	movlw	0
 24133  0058DC  0100               	movlb	0	; () banked
 24134  0058DE  156A               	andwf	(i1___altoft@c+2)& (0+255),w,b
 24135  0058E0  0100               	movlb	0	; () banked
 24136  0058E2  6F6E               	movwf	(??i1___altoft+2)& (0+255),b
 24137  0058E4  0EFF               	movlw	255
 24138  0058E6  0100               	movlb	0	; () banked
 24139  0058E8  156B               	andwf	(i1___altoft@c+3)& (0+255),w,b
 24140  0058EA  0100               	movlb	0	; () banked
 24141  0058EC  6F6F               	movwf	(??i1___altoft+3)& (0+255),b
 24142  0058EE  0100               	movlb	0	; () banked
 24143  0058F0  516C               	movf	??i1___altoft& (0+255),w,b
 24144  0058F2  0100               	movlb	0	; () banked
 24145  0058F4  116D               	iorwf	(??i1___altoft+1)& (0+255),w,b
 24146  0058F6  0100               	movlb	0	; () banked
 24147  0058F8  116E               	iorwf	(??i1___altoft+2)& (0+255),w,b
 24148  0058FA  0100               	movlb	0	; () banked
 24149  0058FC  116F               	iorwf	(??i1___altoft+3)& (0+255),w,b
 24150  0058FE  A4D8               	btfss	status,2,c
 24151  005900  D7DA               	goto	i1l10455
 24152                           
 24153                           ; BSR set to: 0
 24154                           
 24155                           ; BSR set to: 0
 24156  005902  C068  F060         	movff	i1___altoft@c,i1___ftpack@arg
 24157  005906  C069  F061         	movff	i1___altoft@c+1,i1___ftpack@arg+1
 24158  00590A  C06A  F062         	movff	i1___altoft@c+2,i1___ftpack@arg+2
 24159  00590E  C070  F063         	movff	i1___altoft@exp,i1___ftpack@exp
 24160  005912  C071  F064         	movff	i1___altoft@sign,i1___ftpack@sign
 24161  005916  EC40  F022         	call	i1___ftpack	;wreg free
 24162  00591A  C060  F068         	movff	?i1___ftpack,?i1___altoft
 24163  00591E  C061  F069         	movff	?i1___ftpack+1,?i1___altoft+1
 24164  005922  C062  F06A         	movff	?i1___ftpack+2,?i1___altoft+2
 24165  005926  0012               	return	
 24166  005928                     __end_ofi1___altoft:
 24167                           	opt stack 0
 24168                           pclatu	equ	0xFFB
 24169                           pclath	equ	0xFFA
 24170                           tblptru	equ	0xFF8
 24171                           tblptrh	equ	0xFF7
 24172                           tblptrl	equ	0xFF6
 24173                           tablat	equ	0xFF5
 24174                           prodh	equ	0xFF4
 24175                           prodl	equ	0xFF3
 24176                           intcon	equ	0xFF2
 24177                           postinc0	equ	0xFEE
 24178                           fsr0h	equ	0xFEA
 24179                           fsr0l	equ	0xFE9
 24180                           wreg	equ	0xFE8
 24181                           postdec1	equ	0xFE5
 24182                           fsr1h	equ	0xFE2
 24183                           fsr1l	equ	0xFE1
 24184                           bsr	equ	0xFE0
 24185                           indf2	equ	0xFDF
 24186                           postinc2	equ	0xFDE
 24187                           postdec2	equ	0xFDD
 24188                           plusw2	equ	0xFDB
 24189                           fsr2h	equ	0xFDA
 24190                           fsr2l	equ	0xFD9
 24191                           status	equ	0xFD8
 24192                           
 24193 ;; *************** function i1_confirmEdition *****************
 24194 ;; Defined at:
 24195 ;;		line 72 in file "source/DisplayProtocol.h"
 24196 ;; Parameters:    Size  Location     Type
 24197 ;;  yes             1    wreg     unsigned char 
 24198 ;; Auto vars:     Size  Location     Type
 24199 ;;  yes             1   33[BANK0 ] unsigned char 
 24200 ;; Return value:  Size  Location     Type
 24201 ;;                  1    wreg      void 
 24202 ;; Registers used:
 24203 ;;		wreg, status,2, status,0, cstack
 24204 ;; Tracked objects:
 24205 ;;		On entry : 0/0
 24206 ;;		On exit  : 0/0
 24207 ;;		Unchanged: 0/0
 24208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24209 ;;      Params:         0       0       0       0       0       0       0
 24210 ;;      Locals:         0       1       0       0       0       0       0
 24211 ;;      Temps:          0       0       0       0       0       0       0
 24212 ;;      Totals:         0       1       0       0       0       0       0
 24213 ;;Total ram usage:        1 bytes
 24214 ;; Hardware stack levels used:    1
 24215 ;; Hardware stack levels required when called:    8
 24216 ;; This function calls:
 24217 ;;		i1_saveSysParams
 24218 ;; This function is called by:
 24219 ;;		i1_pressENTER
 24220 ;;		i1_longPressENTER
 24221 ;; This function uses a non-reentrant model
 24222 ;;
 24223                           
 24224                           	psect	text100
 24225  004896                     __ptext100:
 24226                           	opt stack 0
 24227  004896                     i1_confirmEdition:
 24228                           	opt stack 9
 24229                           
 24230                           ;incstack = 0
 24231                           ;i1confirmEdition@yes stored from wreg
 24232  004896  0100               	movlb	0	; () banked
 24233  004898  6F81               	movwf	i1confirmEdition@yes& (0+255),b
 24234                           
 24235                           ;DisplayProtocol.h: 73: switch (menuSection) {
 24236  00489A  D066               	goto	i1l10819
 24237  00489C                     i1l10777:
 24238                           
 24239                           ;DisplayProtocol.h: 77: if(yes) {
 24240  00489C  0100               	movlb	0	; () banked
 24241  00489E  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 24242  0048A0  0100               	movlb	0	; () banked
 24243  0048A2  B4D8               	btfsc	status,2,c
 24244  0048A4  D00C               	goto	i1l549
 24245                           
 24246                           ; BSR set to: 0
 24247                           ;DisplayProtocol.h: 78: kgXcorte = chanValf;
 24248  0048A6  C1AE  F0AC         	movff	_chanValf,_kgXcorte
 24249  0048AA  C1AF  F0AD         	movff	_chanValf+1,_kgXcorte+1
 24250  0048AE  C1B0  F0AE         	movff	_chanValf+2,_kgXcorte+2
 24251                           
 24252                           ; BSR set to: 0
 24253                           ;DisplayProtocol.h: 79: actualScreen = 4;
 24254  0048B2  0E04               	movlw	4
 24255  0048B4  0101               	movlb	1	; () banked
 24256  0048B6  6FBA               	movwf	_actualScreen& (0+255),b
 24257                           
 24258                           ; BSR set to: 1
 24259                           ;DisplayProtocol.h: 80: saveSysParams();
 24260  0048B8  ECEF  F029         	call	i1_saveSysParams	;wreg free
 24261                           
 24262                           ;DisplayProtocol.h: 81: }else {
 24263  0048BC  0012               	return	
 24264  0048BE                     i1l549:
 24265                           
 24266                           ; BSR set to: 0
 24267                           ;DisplayProtocol.h: 82: tempLastScreen = actualScreen;
 24268  0048BE  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 24269                           
 24270                           ; BSR set to: 0
 24271                           ;DisplayProtocol.h: 83: selSN = 1;
 24272  0048C2  0E01               	movlw	1
 24273  0048C4  0101               	movlb	1	; () banked
 24274  0048C6  6FC3               	movwf	_selSN& (0+255),b
 24275                           
 24276                           ;DisplayProtocol.h: 84: actualScreen = 10;
 24277  0048C8  0E0A               	movlw	10
 24278  0048CA  0101               	movlb	1	; () banked
 24279  0048CC  6FBA               	movwf	_actualScreen& (0+255),b
 24280                           
 24281                           ; BSR set to: 1
 24282                           ;DisplayProtocol.h: 85: }
 24283                           ;DisplayProtocol.h: 86: break;
 24284  0048CE  0012               	return	
 24285  0048D0                     i1l10787:
 24286                           
 24287                           ; BSR set to: 1
 24288                           ;DisplayProtocol.h: 88: if(yes) {
 24289  0048D0  0100               	movlb	0	; () banked
 24290  0048D2  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 24291  0048D4  0100               	movlb	0	; () banked
 24292  0048D6  B4D8               	btfsc	status,2,c
 24293  0048D8  D00A               	goto	i1l552
 24294                           
 24295                           ; BSR set to: 0
 24296                           ;DisplayProtocol.h: 89: numCortes = chanVals;
 24297  0048DA  C1B1  F0B8         	movff	_chanVals,_numCortes
 24298  0048DE  C1B2  F0B9         	movff	_chanVals+1,_numCortes+1
 24299                           
 24300                           ; BSR set to: 0
 24301                           ;DisplayProtocol.h: 90: actualScreen = 4;
 24302  0048E2  0E04               	movlw	4
 24303  0048E4  0101               	movlb	1	; () banked
 24304  0048E6  6FBA               	movwf	_actualScreen& (0+255),b
 24305                           
 24306                           ; BSR set to: 1
 24307                           ;DisplayProtocol.h: 91: saveSysParams();
 24308  0048E8  ECEF  F029         	call	i1_saveSysParams	;wreg free
 24309                           
 24310                           ;DisplayProtocol.h: 92: }else {
 24311  0048EC  0012               	return	
 24312  0048EE                     i1l552:
 24313                           
 24314                           ; BSR set to: 0
 24315                           ;DisplayProtocol.h: 93: tempLastScreen = actualScreen;
 24316  0048EE  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 24317                           
 24318                           ; BSR set to: 0
 24319                           ;DisplayProtocol.h: 94: selSN = 1;
 24320  0048F2  0E01               	movlw	1
 24321  0048F4  0101               	movlb	1	; () banked
 24322  0048F6  6FC3               	movwf	_selSN& (0+255),b
 24323                           
 24324                           ;DisplayProtocol.h: 95: actualScreen = 10;
 24325  0048F8  0E0A               	movlw	10
 24326  0048FA  0101               	movlb	1	; () banked
 24327  0048FC  6FBA               	movwf	_actualScreen& (0+255),b
 24328                           
 24329                           ; BSR set to: 1
 24330                           ;DisplayProtocol.h: 96: }
 24331                           ;DisplayProtocol.h: 97: break;
 24332  0048FE  0012               	return	
 24333  004900                     i1l10797:
 24334                           
 24335                           ; BSR set to: 1
 24336                           ;DisplayProtocol.h: 99: if(yes) {
 24337  004900  0100               	movlb	0	; () banked
 24338  004902  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 24339  004904  0100               	movlb	0	; () banked
 24340  004906  B4D8               	btfsc	status,2,c
 24341  004908  D00C               	goto	i1l555
 24342                           
 24343                           ; BSR set to: 0
 24344                           ;DisplayProtocol.h: 100: diamTubo = chanValf;
 24345  00490A  C1AE  F0A9         	movff	_chanValf,_diamTubo
 24346  00490E  C1AF  F0AA         	movff	_chanValf+1,_diamTubo+1
 24347  004912  C1B0  F0AB         	movff	_chanValf+2,_diamTubo+2
 24348                           
 24349                           ; BSR set to: 0
 24350                           ;DisplayProtocol.h: 101: actualScreen = 4;
 24351  004916  0E04               	movlw	4
 24352  004918  0101               	movlb	1	; () banked
 24353  00491A  6FBA               	movwf	_actualScreen& (0+255),b
 24354                           
 24355                           ; BSR set to: 1
 24356                           ;DisplayProtocol.h: 102: saveSysParams();
 24357  00491C  ECEF  F029         	call	i1_saveSysParams	;wreg free
 24358                           
 24359                           ;DisplayProtocol.h: 103: }else {
 24360  004920  0012               	return	
 24361  004922                     i1l555:
 24362                           
 24363                           ; BSR set to: 0
 24364                           ;DisplayProtocol.h: 104: tempLastScreen = actualScreen;
 24365  004922  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 24366                           
 24367                           ; BSR set to: 0
 24368                           ;DisplayProtocol.h: 105: selSN = 1;
 24369  004926  0E01               	movlw	1
 24370  004928  0101               	movlb	1	; () banked
 24371  00492A  6FC3               	movwf	_selSN& (0+255),b
 24372                           
 24373                           ;DisplayProtocol.h: 106: actualScreen = 10;
 24374  00492C  0E0A               	movlw	10
 24375  00492E  0101               	movlb	1	; () banked
 24376  004930  6FBA               	movwf	_actualScreen& (0+255),b
 24377                           
 24378                           ; BSR set to: 1
 24379                           ;DisplayProtocol.h: 107: }
 24380                           ;DisplayProtocol.h: 108: break;
 24381  004932  0012               	return	
 24382  004934                     i1l10807:
 24383                           
 24384                           ; BSR set to: 1
 24385                           ;DisplayProtocol.h: 110: if(yes) {
 24386  004934  0100               	movlb	0	; () banked
 24387  004936  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 24388  004938  0100               	movlb	0	; () banked
 24389  00493A  B4D8               	btfsc	status,2,c
 24390  00493C  D00C               	goto	i1l558
 24391                           
 24392                           ; BSR set to: 0
 24393                           ;DisplayProtocol.h: 111: velocidadMasa = chanValf;
 24394  00493E  C1AE  F0B5         	movff	_chanValf,_velocidadMasa
 24395  004942  C1AF  F0B6         	movff	_chanValf+1,_velocidadMasa+1
 24396  004946  C1B0  F0B7         	movff	_chanValf+2,_velocidadMasa+2
 24397                           
 24398                           ; BSR set to: 0
 24399                           ;DisplayProtocol.h: 112: actualScreen = 4;
 24400  00494A  0E04               	movlw	4
 24401  00494C  0101               	movlb	1	; () banked
 24402  00494E  6FBA               	movwf	_actualScreen& (0+255),b
 24403                           
 24404                           ; BSR set to: 1
 24405                           ;DisplayProtocol.h: 113: saveSysParams();
 24406  004950  ECEF  F029         	call	i1_saveSysParams	;wreg free
 24407                           
 24408                           ;DisplayProtocol.h: 114: }else {
 24409  004954  0012               	return	
 24410  004956                     i1l558:
 24411                           
 24412                           ; BSR set to: 0
 24413                           ;DisplayProtocol.h: 115: tempLastScreen = actualScreen;
 24414  004956  C1BA  F0CA         	movff	_actualScreen,_tempLastScreen
 24415                           
 24416                           ; BSR set to: 0
 24417                           ;DisplayProtocol.h: 116: selSN = 1;
 24418  00495A  0E01               	movlw	1
 24419  00495C  0101               	movlb	1	; () banked
 24420  00495E  6FC3               	movwf	_selSN& (0+255),b
 24421                           
 24422                           ;DisplayProtocol.h: 117: actualScreen = 10;
 24423  004960  0E0A               	movlw	10
 24424  004962  0101               	movlb	1	; () banked
 24425  004964  6FBA               	movwf	_actualScreen& (0+255),b
 24426                           
 24427                           ; BSR set to: 1
 24428                           ;DisplayProtocol.h: 120: }
 24429                           ;DisplayProtocol.h: 121: }
 24430                           
 24431                           ; BSR set to: 1
 24432                           ;DisplayProtocol.h: 118: }
 24433                           ;DisplayProtocol.h: 119: break;
 24434  004966  0012               	return	
 24435  004968                     i1l10819:
 24436  004968  0101               	movlb	1	; () banked
 24437  00496A  51C1               	movf	_menuSection& (0+255),w,b
 24438                           
 24439                           ; Switch size 1, requested type "space"
 24440                           ; Number of cases is 5, Range of values is 0 to 4
 24441                           ; switch strategies available:
 24442                           ; Name         Instructions Cycles
 24443                           ; simple_byte           16     9 (average)
 24444                           ;	Chosen strategy is simple_byte
 24445  00496C  0A00               	xorlw	0	; case 0
 24446  00496E  B4D8               	btfsc	status,2,c
 24447  004970  0012               	return	
 24448  004972  0A01               	xorlw	1	; case 1
 24449  004974  B4D8               	btfsc	status,2,c
 24450  004976  D792               	goto	i1l10777
 24451  004978  0A03               	xorlw	3	; case 2
 24452  00497A  B4D8               	btfsc	status,2,c
 24453  00497C  D7A9               	goto	i1l10787
 24454  00497E  0A01               	xorlw	1	; case 3
 24455  004980  B4D8               	btfsc	status,2,c
 24456  004982  D7BE               	goto	i1l10797
 24457  004984  0A07               	xorlw	7	; case 4
 24458  004986  A4D8               	btfss	status,2,c
 24459  004988  0012               	return	
 24460  00498A  D7D4               	goto	i1l10807
 24461  00498C                     __end_ofi1_confirmEdition:
 24462                           	opt stack 0
 24463                           pclatu	equ	0xFFB
 24464                           pclath	equ	0xFFA
 24465                           tblptru	equ	0xFF8
 24466                           tblptrh	equ	0xFF7
 24467                           tblptrl	equ	0xFF6
 24468                           tablat	equ	0xFF5
 24469                           prodh	equ	0xFF4
 24470                           prodl	equ	0xFF3
 24471                           intcon	equ	0xFF2
 24472                           postinc0	equ	0xFEE
 24473                           fsr0h	equ	0xFEA
 24474                           fsr0l	equ	0xFE9
 24475                           wreg	equ	0xFE8
 24476                           postdec1	equ	0xFE5
 24477                           fsr1h	equ	0xFE2
 24478                           fsr1l	equ	0xFE1
 24479                           bsr	equ	0xFE0
 24480                           indf2	equ	0xFDF
 24481                           postinc2	equ	0xFDE
 24482                           postdec2	equ	0xFDD
 24483                           plusw2	equ	0xFDB
 24484                           fsr2h	equ	0xFDA
 24485                           fsr2l	equ	0xFD9
 24486                           status	equ	0xFD8
 24487                           
 24488 ;; *************** function i1___ftadd *****************
 24489 ;; Defined at:
 24490 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 24491 ;; Parameters:    Size  Location     Type
 24492 ;;  f1              3    8[BANK0 ] float 
 24493 ;;  f2              3   11[BANK0 ] float 
 24494 ;; Auto vars:     Size  Location     Type
 24495 ;;  __ftadd         1   19[BANK0 ] unsigned char 
 24496 ;;  __ftadd         1   18[BANK0 ] unsigned char 
 24497 ;;  __ftadd         1   17[BANK0 ] unsigned char 
 24498 ;; Return value:  Size  Location     Type
 24499 ;;                  3    8[BANK0 ] float 
 24500 ;; Registers used:
 24501 ;;		wreg, status,2, status,0, cstack
 24502 ;; Tracked objects:
 24503 ;;		On entry : 0/0
 24504 ;;		On exit  : 0/0
 24505 ;;		Unchanged: 0/0
 24506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24507 ;;      Params:         0       6       0       0       0       0       0
 24508 ;;      Locals:         0       3       0       0       0       0       0
 24509 ;;      Temps:          0       3       0       0       0       0       0
 24510 ;;      Totals:         0      12       0       0       0       0       0
 24511 ;;Total ram usage:       12 bytes
 24512 ;; Hardware stack levels used:    1
 24513 ;; Hardware stack levels required when called:    5
 24514 ;; This function calls:
 24515 ;;		i1___ftpack
 24516 ;; This function is called by:
 24517 ;;		i1_longPressENTER
 24518 ;; This function uses a non-reentrant model
 24519 ;;
 24520                           
 24521                           	psect	text101
 24522  002760                     __ptext101:
 24523                           	opt stack 0
 24524  002760                     i1___ftadd:
 24525                           	opt stack 12
 24526                           
 24527                           ;incstack = 0
 24528  002760  C06A  F06E         	movff	i1___ftadd@f1+2,??i1___ftadd
 24529  002764  0100               	movlb	0	; () banked
 24530  002766  6B6F               	clrf	(??i1___ftadd+1)& (0+255),b
 24531  002768  6B70               	clrf	(??i1___ftadd+2)& (0+255),b
 24532  00276A  0100               	movlb	0	; () banked
 24533  00276C  3569               	rlcf	(i1___ftadd@f1+1)& (0+255),w,b
 24534  00276E  0100               	movlb	0	; () banked
 24535  002770  376E               	rlcf	??i1___ftadd& (0+255),f,b
 24536  002772  E301               	bnc	u1539_21
 24537  002774  816F               	bsf	(??i1___ftadd+1)& (0+255),0,b
 24538  002776                     u1539_21:
 24539  002776  0100               	movlb	0	; () banked
 24540  002778  516E               	movf	??i1___ftadd& (0+255),w,b
 24541  00277A  0100               	movlb	0	; () banked
 24542  00277C  6F73               	movwf	i1___ftadd@exp1& (0+255),b
 24543  00277E  C06D  F06E         	movff	i1___ftadd@f2+2,??i1___ftadd
 24544  002782  0100               	movlb	0	; () banked
 24545  002784  6B6F               	clrf	(??i1___ftadd+1)& (0+255),b
 24546  002786  6B70               	clrf	(??i1___ftadd+2)& (0+255),b
 24547  002788  0100               	movlb	0	; () banked
 24548  00278A  356C               	rlcf	(i1___ftadd@f2+1)& (0+255),w,b
 24549  00278C  0100               	movlb	0	; () banked
 24550  00278E  376E               	rlcf	??i1___ftadd& (0+255),f,b
 24551  002790  E301               	bnc	u1540_21
 24552  002792  816F               	bsf	(??i1___ftadd+1)& (0+255),0,b
 24553  002794                     u1540_21:
 24554  002794  0100               	movlb	0	; () banked
 24555  002796  516E               	movf	??i1___ftadd& (0+255),w,b
 24556  002798  0100               	movlb	0	; () banked
 24557  00279A  6F72               	movwf	i1___ftadd@exp2& (0+255),b
 24558                           
 24559                           ; BSR set to: 0
 24560  00279C  0100               	movlb	0	; () banked
 24561  00279E  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24562  0027A0  0100               	movlb	0	; () banked
 24563  0027A2  B4D8               	btfsc	status,2,c
 24564  0027A4  D011               	goto	i1l1287
 24565                           
 24566                           ; BSR set to: 0
 24567  0027A6  0100               	movlb	0	; () banked
 24568  0027A8  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24569  0027AA  0100               	movlb	0	; () banked
 24570  0027AC  5D73               	subwf	i1___ftadd@exp1& (0+255),w,b
 24571  0027AE  B0D8               	btfsc	status,0,c
 24572  0027B0  D012               	goto	i1l10829
 24573                           
 24574                           ; BSR set to: 0
 24575  0027B2  0100               	movlb	0	; () banked
 24576  0027B4  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24577  0027B6  0800               	sublw	0
 24578  0027B8  0100               	movlb	0	; () banked
 24579  0027BA  2572               	addwf	i1___ftadd@exp2& (0+255),w,b
 24580  0027BC  0100               	movlb	0	; () banked
 24581  0027BE  6F6E               	movwf	??i1___ftadd& (0+255),b
 24582  0027C0  0E18               	movlw	24
 24583  0027C2  0100               	movlb	0	; () banked
 24584  0027C4  656E               	cpfsgt	??i1___ftadd& (0+255),b
 24585  0027C6  D007               	goto	i1l10829
 24586  0027C8                     i1l1287:
 24587                           
 24588                           ; BSR set to: 0
 24589  0027C8  C06B  F068         	movff	i1___ftadd@f2,?i1___ftadd
 24590  0027CC  C06C  F069         	movff	i1___ftadd@f2+1,?i1___ftadd+1
 24591  0027D0  C06D  F06A         	movff	i1___ftadd@f2+2,?i1___ftadd+2
 24592  0027D4  0012               	return	
 24593  0027D6                     i1l10829:
 24594                           
 24595                           ; BSR set to: 0
 24596  0027D6  0100               	movlb	0	; () banked
 24597  0027D8  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24598  0027DA  0100               	movlb	0	; () banked
 24599  0027DC  B4D8               	btfsc	status,2,c
 24600  0027DE  D011               	goto	i1l1291
 24601                           
 24602                           ; BSR set to: 0
 24603  0027E0  0100               	movlb	0	; () banked
 24604  0027E2  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24605  0027E4  0100               	movlb	0	; () banked
 24606  0027E6  5D72               	subwf	i1___ftadd@exp2& (0+255),w,b
 24607  0027E8  B0D8               	btfsc	status,0,c
 24608  0027EA  D012               	goto	i1l10835
 24609                           
 24610                           ; BSR set to: 0
 24611  0027EC  0100               	movlb	0	; () banked
 24612  0027EE  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24613  0027F0  0800               	sublw	0
 24614  0027F2  0100               	movlb	0	; () banked
 24615  0027F4  2573               	addwf	i1___ftadd@exp1& (0+255),w,b
 24616  0027F6  0100               	movlb	0	; () banked
 24617  0027F8  6F6E               	movwf	??i1___ftadd& (0+255),b
 24618  0027FA  0E18               	movlw	24
 24619  0027FC  0100               	movlb	0	; () banked
 24620  0027FE  656E               	cpfsgt	??i1___ftadd& (0+255),b
 24621  002800  D007               	goto	i1l10835
 24622  002802                     i1l1291:
 24623                           
 24624                           ; BSR set to: 0
 24625  002802  C068  F068         	movff	i1___ftadd@f1,?i1___ftadd
 24626  002806  C069  F069         	movff	i1___ftadd@f1+1,?i1___ftadd+1
 24627  00280A  C06A  F06A         	movff	i1___ftadd@f1+2,?i1___ftadd+2
 24628  00280E  0012               	return	
 24629  002810                     i1l10835:
 24630                           
 24631                           ; BSR set to: 0
 24632  002810  0E06               	movlw	6
 24633  002812  0100               	movlb	0	; () banked
 24634  002814  6F71               	movwf	i1___ftadd@sign& (0+255),b
 24635                           
 24636                           ; BSR set to: 0
 24637  002816  0100               	movlb	0	; () banked
 24638  002818  AF6A               	btfss	(i1___ftadd@f1+2)& (0+255),7,b
 24639  00281A  D002               	goto	i1l10841
 24640                           
 24641                           ; BSR set to: 0
 24642  00281C  0100               	movlb	0	; () banked
 24643  00281E  8F71               	bsf	i1___ftadd@sign& (0+255),7,b
 24644  002820                     i1l10841:
 24645                           
 24646                           ; BSR set to: 0
 24647  002820  0100               	movlb	0	; () banked
 24648  002822  AF6D               	btfss	(i1___ftadd@f2+2)& (0+255),7,b
 24649  002824  D002               	goto	i1l1293
 24650                           
 24651                           ; BSR set to: 0
 24652  002826  0100               	movlb	0	; () banked
 24653  002828  8D71               	bsf	i1___ftadd@sign& (0+255),6,b
 24654  00282A                     i1l1293:
 24655                           
 24656                           ; BSR set to: 0
 24657  00282A  0100               	movlb	0	; () banked
 24658  00282C  8F69               	bsf	(i1___ftadd@f1+1)& (0+255),7,b
 24659                           
 24660                           ; BSR set to: 0
 24661  00282E  0EFF               	movlw	255
 24662  002830  0100               	movlb	0	; () banked
 24663  002832  1768               	andwf	i1___ftadd@f1& (0+255),f,b
 24664  002834  0EFF               	movlw	255
 24665  002836  0100               	movlb	0	; () banked
 24666  002838  1769               	andwf	(i1___ftadd@f1+1)& (0+255),f,b
 24667  00283A  0E00               	movlw	0
 24668  00283C  0100               	movlb	0	; () banked
 24669  00283E  176A               	andwf	(i1___ftadd@f1+2)& (0+255),f,b
 24670  002840  0100               	movlb	0	; () banked
 24671  002842  8F6C               	bsf	(i1___ftadd@f2+1)& (0+255),7,b
 24672                           
 24673                           ; BSR set to: 0
 24674  002844  0EFF               	movlw	255
 24675  002846  0100               	movlb	0	; () banked
 24676  002848  176B               	andwf	i1___ftadd@f2& (0+255),f,b
 24677  00284A  0EFF               	movlw	255
 24678  00284C  0100               	movlb	0	; () banked
 24679  00284E  176C               	andwf	(i1___ftadd@f2+1)& (0+255),f,b
 24680  002850  0E00               	movlw	0
 24681  002852  0100               	movlb	0	; () banked
 24682  002854  176D               	andwf	(i1___ftadd@f2+2)& (0+255),f,b
 24683                           
 24684                           ; BSR set to: 0
 24685  002856  0100               	movlb	0	; () banked
 24686  002858  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24687  00285A  0100               	movlb	0	; () banked
 24688  00285C  5D73               	subwf	i1___ftadd@exp1& (0+255),w,b
 24689  00285E  B0D8               	btfsc	status,0,c
 24690  002860  D025               	goto	i1l10861
 24691  002862                     i1l10851:
 24692                           
 24693                           ; BSR set to: 0
 24694  002862  0100               	movlb	0	; () banked
 24695  002864  90D8               	bcf	status,0,c
 24696  002866  376B               	rlcf	i1___ftadd@f2& (0+255),f,b
 24697  002868  376C               	rlcf	(i1___ftadd@f2+1)& (0+255),f,b
 24698  00286A  376D               	rlcf	(i1___ftadd@f2+2)& (0+255),f,b
 24699  00286C  0100               	movlb	0	; () banked
 24700  00286E  0772               	decf	i1___ftadd@exp2& (0+255),f,b
 24701                           
 24702                           ; BSR set to: 0
 24703  002870  0100               	movlb	0	; () banked
 24704  002872  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24705  002874  0100               	movlb	0	; () banked
 24706  002876  1972               	xorwf	i1___ftadd@exp2& (0+255),w,b
 24707  002878  B4D8               	btfsc	status,2,c
 24708  00287A  D011               	goto	i1l10859
 24709                           
 24710                           ; BSR set to: 0
 24711  00287C  0100               	movlb	0	; () banked
 24712  00287E  0771               	decf	i1___ftadd@sign& (0+255),f,b
 24713  002880  C071  F06E         	movff	i1___ftadd@sign,??i1___ftadd
 24714  002884  0E07               	movlw	7
 24715  002886  0100               	movlb	0	; () banked
 24716  002888  176E               	andwf	??i1___ftadd& (0+255),f,b
 24717  00288A  B4D8               	btfsc	status,2,c
 24718  00288C  D008               	goto	i1l10859
 24719  00288E  D7E9               	goto	i1l10851
 24720  002890                     i1l10857:
 24721                           
 24722                           ; BSR set to: 0
 24723  002890  0100               	movlb	0	; () banked
 24724  002892  90D8               	bcf	status,0,c
 24725  002894  336A               	rrcf	(i1___ftadd@f1+2)& (0+255),f,b
 24726  002896  3369               	rrcf	(i1___ftadd@f1+1)& (0+255),f,b
 24727  002898  3368               	rrcf	i1___ftadd@f1& (0+255),f,b
 24728  00289A  0100               	movlb	0	; () banked
 24729  00289C  2B73               	incf	i1___ftadd@exp1& (0+255),f,b
 24730  00289E                     i1l10859:
 24731                           
 24732                           ; BSR set to: 0
 24733  00289E  0100               	movlb	0	; () banked
 24734  0028A0  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24735  0028A2  0100               	movlb	0	; () banked
 24736  0028A4  1973               	xorwf	i1___ftadd@exp1& (0+255),w,b
 24737  0028A6  B4D8               	btfsc	status,2,c
 24738  0028A8  D02B               	goto	i1l1302
 24739  0028AA  D7F2               	goto	i1l10857
 24740  0028AC                     i1l10861:
 24741                           
 24742                           ; BSR set to: 0
 24743  0028AC  0100               	movlb	0	; () banked
 24744  0028AE  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24745  0028B0  0100               	movlb	0	; () banked
 24746  0028B2  5D72               	subwf	i1___ftadd@exp2& (0+255),w,b
 24747  0028B4  B0D8               	btfsc	status,0,c
 24748  0028B6  D024               	goto	i1l1302
 24749  0028B8                     i1l10863:
 24750                           
 24751                           ; BSR set to: 0
 24752  0028B8  0100               	movlb	0	; () banked
 24753  0028BA  90D8               	bcf	status,0,c
 24754  0028BC  3768               	rlcf	i1___ftadd@f1& (0+255),f,b
 24755  0028BE  3769               	rlcf	(i1___ftadd@f1+1)& (0+255),f,b
 24756  0028C0  376A               	rlcf	(i1___ftadd@f1+2)& (0+255),f,b
 24757  0028C2  0100               	movlb	0	; () banked
 24758  0028C4  0773               	decf	i1___ftadd@exp1& (0+255),f,b
 24759                           
 24760                           ; BSR set to: 0
 24761  0028C6  0100               	movlb	0	; () banked
 24762  0028C8  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24763  0028CA  0100               	movlb	0	; () banked
 24764  0028CC  1972               	xorwf	i1___ftadd@exp2& (0+255),w,b
 24765  0028CE  B4D8               	btfsc	status,2,c
 24766  0028D0  D011               	goto	i1l10871
 24767                           
 24768                           ; BSR set to: 0
 24769  0028D2  0100               	movlb	0	; () banked
 24770  0028D4  0771               	decf	i1___ftadd@sign& (0+255),f,b
 24771  0028D6  C071  F06E         	movff	i1___ftadd@sign,??i1___ftadd
 24772  0028DA  0E07               	movlw	7
 24773  0028DC  0100               	movlb	0	; () banked
 24774  0028DE  176E               	andwf	??i1___ftadd& (0+255),f,b
 24775  0028E0  B4D8               	btfsc	status,2,c
 24776  0028E2  D008               	goto	i1l10871
 24777  0028E4  D7E9               	goto	i1l10863
 24778  0028E6                     i1l10869:
 24779                           
 24780                           ; BSR set to: 0
 24781  0028E6  0100               	movlb	0	; () banked
 24782  0028E8  90D8               	bcf	status,0,c
 24783  0028EA  336D               	rrcf	(i1___ftadd@f2+2)& (0+255),f,b
 24784  0028EC  336C               	rrcf	(i1___ftadd@f2+1)& (0+255),f,b
 24785  0028EE  336B               	rrcf	i1___ftadd@f2& (0+255),f,b
 24786  0028F0  0100               	movlb	0	; () banked
 24787  0028F2  2B72               	incf	i1___ftadd@exp2& (0+255),f,b
 24788  0028F4                     i1l10871:
 24789                           
 24790                           ; BSR set to: 0
 24791  0028F4  0100               	movlb	0	; () banked
 24792  0028F6  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24793  0028F8  0100               	movlb	0	; () banked
 24794  0028FA  1973               	xorwf	i1___ftadd@exp1& (0+255),w,b
 24795  0028FC  A4D8               	btfss	status,2,c
 24796  0028FE  D7F3               	goto	i1l10869
 24797  002900                     i1l1302:
 24798                           
 24799                           ; BSR set to: 0
 24800  002900  0100               	movlb	0	; () banked
 24801  002902  AF71               	btfss	i1___ftadd@sign& (0+255),7,b
 24802  002904  D012               	goto	i1l1311
 24803                           
 24804                           ; BSR set to: 0
 24805  002906  0EFF               	movlw	255
 24806  002908  0100               	movlb	0	; () banked
 24807  00290A  1B68               	xorwf	i1___ftadd@f1& (0+255),f,b
 24808  00290C  0EFF               	movlw	255
 24809  00290E  0100               	movlb	0	; () banked
 24810  002910  1B69               	xorwf	(i1___ftadd@f1+1)& (0+255),f,b
 24811  002912  0EFF               	movlw	255
 24812  002914  0100               	movlb	0	; () banked
 24813  002916  1B6A               	xorwf	(i1___ftadd@f1+2)& (0+255),f,b
 24814  002918  0E01               	movlw	1
 24815  00291A  0100               	movlb	0	; () banked
 24816  00291C  2768               	addwf	i1___ftadd@f1& (0+255),f,b
 24817  00291E  0E00               	movlw	0
 24818  002920  0100               	movlb	0	; () banked
 24819  002922  2369               	addwfc	(i1___ftadd@f1+1)& (0+255),f,b
 24820  002924  0E00               	movlw	0
 24821  002926  0100               	movlb	0	; () banked
 24822  002928  236A               	addwfc	(i1___ftadd@f1+2)& (0+255),f,b
 24823  00292A                     i1l1311:
 24824                           
 24825                           ; BSR set to: 0
 24826  00292A  0100               	movlb	0	; () banked
 24827  00292C  AD71               	btfss	i1___ftadd@sign& (0+255),6,b
 24828  00292E  D012               	goto	i1l10877
 24829                           
 24830                           ; BSR set to: 0
 24831  002930  0EFF               	movlw	255
 24832  002932  0100               	movlb	0	; () banked
 24833  002934  1B6B               	xorwf	i1___ftadd@f2& (0+255),f,b
 24834  002936  0EFF               	movlw	255
 24835  002938  0100               	movlb	0	; () banked
 24836  00293A  1B6C               	xorwf	(i1___ftadd@f2+1)& (0+255),f,b
 24837  00293C  0EFF               	movlw	255
 24838  00293E  0100               	movlb	0	; () banked
 24839  002940  1B6D               	xorwf	(i1___ftadd@f2+2)& (0+255),f,b
 24840  002942  0E01               	movlw	1
 24841  002944  0100               	movlb	0	; () banked
 24842  002946  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 24843  002948  0E00               	movlw	0
 24844  00294A  0100               	movlb	0	; () banked
 24845  00294C  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 24846  00294E  0E00               	movlw	0
 24847  002950  0100               	movlb	0	; () banked
 24848  002952  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 24849  002954                     i1l10877:
 24850                           
 24851                           ; BSR set to: 0
 24852  002954  0E00               	movlw	0
 24853  002956  0100               	movlb	0	; () banked
 24854  002958  6F71               	movwf	i1___ftadd@sign& (0+255),b
 24855                           
 24856                           ; BSR set to: 0
 24857  00295A  0100               	movlb	0	; () banked
 24858  00295C  5168               	movf	i1___ftadd@f1& (0+255),w,b
 24859  00295E  0100               	movlb	0	; () banked
 24860  002960  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 24861  002962  0100               	movlb	0	; () banked
 24862  002964  5169               	movf	(i1___ftadd@f1+1)& (0+255),w,b
 24863  002966  0100               	movlb	0	; () banked
 24864  002968  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 24865  00296A  0100               	movlb	0	; () banked
 24866  00296C  516A               	movf	(i1___ftadd@f1+2)& (0+255),w,b
 24867  00296E  0100               	movlb	0	; () banked
 24868  002970  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 24869                           
 24870                           ; BSR set to: 0
 24871  002972  0100               	movlb	0	; () banked
 24872  002974  AF6D               	btfss	(i1___ftadd@f2+2)& (0+255),7,b
 24873  002976  D015               	goto	i1l10887
 24874                           
 24875                           ; BSR set to: 0
 24876  002978  0EFF               	movlw	255
 24877  00297A  0100               	movlb	0	; () banked
 24878  00297C  1B6B               	xorwf	i1___ftadd@f2& (0+255),f,b
 24879  00297E  0EFF               	movlw	255
 24880  002980  0100               	movlb	0	; () banked
 24881  002982  1B6C               	xorwf	(i1___ftadd@f2+1)& (0+255),f,b
 24882  002984  0EFF               	movlw	255
 24883  002986  0100               	movlb	0	; () banked
 24884  002988  1B6D               	xorwf	(i1___ftadd@f2+2)& (0+255),f,b
 24885  00298A  0E01               	movlw	1
 24886  00298C  0100               	movlb	0	; () banked
 24887  00298E  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 24888  002990  0E00               	movlw	0
 24889  002992  0100               	movlb	0	; () banked
 24890  002994  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 24891  002996  0E00               	movlw	0
 24892  002998  0100               	movlb	0	; () banked
 24893  00299A  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 24894                           
 24895                           ; BSR set to: 0
 24896  00299C  0E01               	movlw	1
 24897  00299E  0100               	movlb	0	; () banked
 24898  0029A0  6F71               	movwf	i1___ftadd@sign& (0+255),b
 24899  0029A2                     i1l10887:
 24900                           
 24901                           ; BSR set to: 0
 24902  0029A2  C06B  F060         	movff	i1___ftadd@f2,i1___ftpack@arg
 24903  0029A6  C06C  F061         	movff	i1___ftadd@f2+1,i1___ftpack@arg+1
 24904  0029AA  C06D  F062         	movff	i1___ftadd@f2+2,i1___ftpack@arg+2
 24905  0029AE  C073  F063         	movff	i1___ftadd@exp1,i1___ftpack@exp
 24906  0029B2  C071  F064         	movff	i1___ftadd@sign,i1___ftpack@sign
 24907  0029B6  EC40  F022         	call	i1___ftpack	;wreg free
 24908  0029BA  C060  F068         	movff	?i1___ftpack,?i1___ftadd
 24909  0029BE  C061  F069         	movff	?i1___ftpack+1,?i1___ftadd+1
 24910  0029C2  C062  F06A         	movff	?i1___ftpack+2,?i1___ftadd+2
 24911  0029C6  0012               	return	
 24912  0029C8                     __end_ofi1___ftadd:
 24913                           	opt stack 0
 24914                           pclatu	equ	0xFFB
 24915                           pclath	equ	0xFFA
 24916                           tblptru	equ	0xFF8
 24917                           tblptrh	equ	0xFF7
 24918                           tblptrl	equ	0xFF6
 24919                           tablat	equ	0xFF5
 24920                           prodh	equ	0xFF4
 24921                           prodl	equ	0xFF3
 24922                           intcon	equ	0xFF2
 24923                           postinc0	equ	0xFEE
 24924                           fsr0h	equ	0xFEA
 24925                           fsr0l	equ	0xFE9
 24926                           wreg	equ	0xFE8
 24927                           postdec1	equ	0xFE5
 24928                           fsr1h	equ	0xFE2
 24929                           fsr1l	equ	0xFE1
 24930                           bsr	equ	0xFE0
 24931                           indf2	equ	0xFDF
 24932                           postinc2	equ	0xFDE
 24933                           postdec2	equ	0xFDD
 24934                           plusw2	equ	0xFDB
 24935                           fsr2h	equ	0xFDA
 24936                           fsr2l	equ	0xFD9
 24937                           status	equ	0xFD8
 24938                           
 24939 ;; *************** function i1_longPressDOWN *****************
 24940 ;; Defined at:
 24941 ;;		line 214 in file "source/DisplayProtocol.h"
 24942 ;; Parameters:    Size  Location     Type
 24943 ;;		None
 24944 ;; Auto vars:     Size  Location     Type
 24945 ;;		None
 24946 ;; Return value:  Size  Location     Type
 24947 ;;                  1    wreg      void 
 24948 ;; Registers used:
 24949 ;;		wreg, status,2, status,0
 24950 ;; Tracked objects:
 24951 ;;		On entry : 0/0
 24952 ;;		On exit  : 0/0
 24953 ;;		Unchanged: 0/0
 24954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24955 ;;      Params:         0       0       0       0       0       0       0
 24956 ;;      Locals:         0       0       0       0       0       0       0
 24957 ;;      Temps:          0       0       0       0       0       0       0
 24958 ;;      Totals:         0       0       0       0       0       0       0
 24959 ;;Total ram usage:        0 bytes
 24960 ;; Hardware stack levels used:    1
 24961 ;; Hardware stack levels required when called:    4
 24962 ;; This function calls:
 24963 ;;		Nothing
 24964 ;; This function is called by:
 24965 ;;		_UARTint
 24966 ;; This function uses a non-reentrant model
 24967 ;;
 24968                           
 24969                           	psect	text102
 24970  006AF2                     __ptext102:
 24971                           	opt stack 0
 24972  006AF2                     i1_longPressDOWN:
 24973                           	opt stack 14
 24974                           
 24975                           ;DisplayProtocol.h: 215: if (!DOWNisLP) {
 24976                           
 24977                           ;incstack = 0
 24978  006AF2  5037               	movf	_DOWNisLP,w,c
 24979  006AF4  A4D8               	btfss	status,2,c
 24980  006AF6  0012               	return	
 24981                           
 24982                           ;DisplayProtocol.h: 216: DOWNisLP = 1;
 24983  006AF8  0E01               	movlw	1
 24984  006AFA  6E37               	movwf	_DOWNisLP,c
 24985                           
 24986                           ;DisplayProtocol.h: 217: if(actualScreen == 5) {
 24987  006AFC  0E05               	movlw	5
 24988  006AFE  0101               	movlb	1	; () banked
 24989  006B00  19BA               	xorwf	_actualScreen& (0+255),w,b
 24990  006B02  A4D8               	btfss	status,2,c
 24991  006B04  0012               	return	
 24992                           
 24993                           ; BSR set to: 1
 24994                           ;DisplayProtocol.h: 218: if(menuSection == 2)
 24995  006B06  0E02               	movlw	2
 24996  006B08  0101               	movlb	1	; () banked
 24997  006B0A  19C1               	xorwf	_menuSection& (0+255),w,b
 24998  006B0C  A4D8               	btfss	status,2,c
 24999  006B0E  0012               	return	
 25000                           
 25001                           ; BSR set to: 1
 25002                           ;DisplayProtocol.h: 219: chanVals -= 10;
 25003  006B10  0101               	movlb	1	; () banked
 25004  006B12  0EF6               	movlw	246
 25005  006B14  27B1               	addwf	_chanVals& (0+255),f,b
 25006  006B16  0EFF               	movlw	255
 25007  006B18  23B2               	addwfc	(_chanVals+1)& (0+255),f,b
 25008                           
 25009                           ; BSR set to: 1
 25010                           
 25011                           ; BSR set to: 1
 25012  006B1A  0012               	return	
 25013  006B1C                     __end_ofi1_longPressDOWN:
 25014                           	opt stack 0
 25015                           pclatu	equ	0xFFB
 25016                           pclath	equ	0xFFA
 25017                           tblptru	equ	0xFF8
 25018                           tblptrh	equ	0xFF7
 25019                           tblptrl	equ	0xFF6
 25020                           tablat	equ	0xFF5
 25021                           prodh	equ	0xFF4
 25022                           prodl	equ	0xFF3
 25023                           intcon	equ	0xFF2
 25024                           postinc0	equ	0xFEE
 25025                           fsr0h	equ	0xFEA
 25026                           fsr0l	equ	0xFE9
 25027                           wreg	equ	0xFE8
 25028                           postdec1	equ	0xFE5
 25029                           fsr1h	equ	0xFE2
 25030                           fsr1l	equ	0xFE1
 25031                           bsr	equ	0xFE0
 25032                           indf2	equ	0xFDF
 25033                           postinc2	equ	0xFDE
 25034                           postdec2	equ	0xFDD
 25035                           plusw2	equ	0xFDB
 25036                           fsr2h	equ	0xFDA
 25037                           fsr2l	equ	0xFD9
 25038                           status	equ	0xFD8
 25039                           
 25040 ;; *************** function _putchUART *****************
 25041 ;; Defined at:
 25042 ;;		line 63 in file "source/IOConfig.h"
 25043 ;; Parameters:    Size  Location     Type
 25044 ;;  val             1    wreg     unsigned char 
 25045 ;; Auto vars:     Size  Location     Type
 25046 ;;  val             1    0[BANK0 ] unsigned char 
 25047 ;; Return value:  Size  Location     Type
 25048 ;;                  1    wreg      void 
 25049 ;; Registers used:
 25050 ;;		wreg
 25051 ;; Tracked objects:
 25052 ;;		On entry : 0/0
 25053 ;;		On exit  : 0/0
 25054 ;;		Unchanged: 0/0
 25055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25056 ;;      Params:         0       0       0       0       0       0       0
 25057 ;;      Locals:         0       1       0       0       0       0       0
 25058 ;;      Temps:          0       0       0       0       0       0       0
 25059 ;;      Totals:         0       1       0       0       0       0       0
 25060 ;;Total ram usage:        1 bytes
 25061 ;; Hardware stack levels used:    1
 25062 ;; Hardware stack levels required when called:    4
 25063 ;; This function calls:
 25064 ;;		Nothing
 25065 ;; This function is called by:
 25066 ;;		_UARTint
 25067 ;; This function uses a non-reentrant model
 25068 ;;
 25069                           
 25070                           	psect	text103
 25071  006C7E                     __ptext103:
 25072                           	opt stack 0
 25073  006C7E                     _putchUART:
 25074                           	opt stack 14
 25075                           
 25076                           ;incstack = 0
 25077                           ;putchUART@val stored from wreg
 25078  006C7E  0100               	movlb	0	; () banked
 25079  006C80  6F60               	movwf	putchUART@val& (0+255),b
 25080  006C82                     i1l225:
 25081  006C82  A2AC               	btfss	4012,1,c	;volatile
 25082  006C84  D7FE               	goto	i1l225
 25083                           
 25084                           ;IOConfig.h: 65: TXREG1 = val;
 25085  006C86  C060  FFAD         	movff	putchUART@val,4013	;volatile
 25086  006C8A  0012               	return		;funcret
 25087  006C8C                     __end_of_putchUART:
 25088                           	opt stack 0
 25089                           pclatu	equ	0xFFB
 25090                           pclath	equ	0xFFA
 25091                           tblptru	equ	0xFF8
 25092                           tblptrh	equ	0xFF7
 25093                           tblptrl	equ	0xFF6
 25094                           tablat	equ	0xFF5
 25095                           prodh	equ	0xFF4
 25096                           prodl	equ	0xFF3
 25097                           intcon	equ	0xFF2
 25098                           postinc0	equ	0xFEE
 25099                           fsr0h	equ	0xFEA
 25100                           fsr0l	equ	0xFE9
 25101                           wreg	equ	0xFE8
 25102                           postdec1	equ	0xFE5
 25103                           fsr1h	equ	0xFE2
 25104                           fsr1l	equ	0xFE1
 25105                           bsr	equ	0xFE0
 25106                           indf2	equ	0xFDF
 25107                           postinc2	equ	0xFDE
 25108                           postdec2	equ	0xFDD
 25109                           plusw2	equ	0xFDB
 25110                           fsr2h	equ	0xFDA
 25111                           fsr2l	equ	0xFD9
 25112                           status	equ	0xFD8
 25113                           
 25114 ;; *************** function _loadSysParams *****************
 25115 ;; Defined at:
 25116 ;;		line 143 in file "source/sysParams.h"
 25117 ;; Parameters:    Size  Location     Type
 25118 ;;		None
 25119 ;; Auto vars:     Size  Location     Type
 25120 ;;		None
 25121 ;; Return value:  Size  Location     Type
 25122 ;;                  1    wreg      void 
 25123 ;; Registers used:
 25124 ;;		wreg, status,2, status,0, cstack
 25125 ;; Tracked objects:
 25126 ;;		On entry : 0/0
 25127 ;;		On exit  : 0/0
 25128 ;;		Unchanged: 0/0
 25129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25130 ;;      Params:         0       0       0       0       0       0       0
 25131 ;;      Locals:         0       0       0       0       0       0       0
 25132 ;;      Temps:          0       0       0       0       0       0       0
 25133 ;;      Totals:         0       0       0       0       0       0       0
 25134 ;;Total ram usage:        0 bytes
 25135 ;; Hardware stack levels used:    1
 25136 ;; Hardware stack levels required when called:    8
 25137 ;; This function calls:
 25138 ;;		i1_calcSysVars
 25139 ;;		i1_saveSysParams
 25140 ;; This function is called by:
 25141 ;;		_UARTint
 25142 ;; This function uses a non-reentrant model
 25143 ;;
 25144                           
 25145                           	psect	text104
 25146  0066B8                     __ptext104:
 25147                           	opt stack 0
 25148  0066B8                     _loadSysParams:
 25149                           	opt stack 10
 25150                           
 25151                           ;sysParams.h: 144: tiXcorte = 10.0f;
 25152                           
 25153                           ;incstack = 0
 25154  0066B8  0E00               	movlw	0
 25155  0066BA  0100               	movlb	0	; () banked
 25156  0066BC  6FB2               	movwf	_tiXcorte& (0+255),b
 25157  0066BE  0E20               	movlw	32
 25158  0066C0  0100               	movlb	0	; () banked
 25159  0066C2  6FB3               	movwf	(_tiXcorte+1)& (0+255),b
 25160  0066C4  0E41               	movlw	65
 25161  0066C6  0100               	movlb	0	; () banked
 25162  0066C8  6FB4               	movwf	(_tiXcorte+2)& (0+255),b
 25163                           
 25164                           ;sysParams.h: 145: numCortes = 5;
 25165  0066CA  0E00               	movlw	0
 25166  0066CC  0100               	movlb	0	; () banked
 25167  0066CE  6FB9               	movwf	(_numCortes+1)& (0+255),b
 25168  0066D0  0E05               	movlw	5
 25169  0066D2  6FB8               	movwf	_numCortes& (0+255),b
 25170                           
 25171                           ;sysParams.h: 146: diamTubo = 20.000f;
 25172  0066D4  0E00               	movlw	0
 25173  0066D6  0100               	movlb	0	; () banked
 25174  0066D8  6FA9               	movwf	_diamTubo& (0+255),b
 25175  0066DA  0EA0               	movlw	160
 25176  0066DC  0100               	movlb	0	; () banked
 25177  0066DE  6FAA               	movwf	(_diamTubo+1)& (0+255),b
 25178  0066E0  0E41               	movlw	65
 25179  0066E2  0100               	movlb	0	; () banked
 25180  0066E4  6FAB               	movwf	(_diamTubo+2)& (0+255),b
 25181                           
 25182                           ;sysParams.h: 147: velocidadMasa = 0.2;
 25183  0066E6  0ECD               	movlw	205
 25184  0066E8  0100               	movlb	0	; () banked
 25185  0066EA  6FB5               	movwf	_velocidadMasa& (0+255),b
 25186  0066EC  0E4C               	movlw	76
 25187  0066EE  0100               	movlb	0	; () banked
 25188  0066F0  6FB6               	movwf	(_velocidadMasa+1)& (0+255),b
 25189  0066F2  0E3E               	movlw	62
 25190  0066F4  0100               	movlb	0	; () banked
 25191  0066F6  6FB7               	movwf	(_velocidadMasa+2)& (0+255),b
 25192                           
 25193                           ;sysParams.h: 148: processState = 0;
 25194  0066F8  0E00               	movlw	0
 25195  0066FA  6E36               	movwf	_processState+1,c
 25196  0066FC  0E00               	movlw	0
 25197  0066FE  6E35               	movwf	_processState,c
 25198                           
 25199                           ;sysParams.h: 149: ProcessStarted = 0;
 25200  006700  0E00               	movlw	0
 25201  006702  6E3A               	movwf	_ProcessStarted,c
 25202                           
 25203                           ; BSR set to: 0
 25204                           ;sysParams.h: 150: calcSysVars();
 25205  006704  EC44  F032         	call	i1_calcSysVars	;wreg free
 25206                           
 25207                           ;sysParams.h: 151: saveSysParams();
 25208  006708  ECEF  F029         	call	i1_saveSysParams	;wreg free
 25209  00670C  0012               	return		;funcret
 25210  00670E                     __end_of_loadSysParams:
 25211                           	opt stack 0
 25212                           pclatu	equ	0xFFB
 25213                           pclath	equ	0xFFA
 25214                           tblptru	equ	0xFF8
 25215                           tblptrh	equ	0xFF7
 25216                           tblptrl	equ	0xFF6
 25217                           tablat	equ	0xFF5
 25218                           prodh	equ	0xFF4
 25219                           prodl	equ	0xFF3
 25220                           intcon	equ	0xFF2
 25221                           postinc0	equ	0xFEE
 25222                           fsr0h	equ	0xFEA
 25223                           fsr0l	equ	0xFE9
 25224                           wreg	equ	0xFE8
 25225                           postdec1	equ	0xFE5
 25226                           fsr1h	equ	0xFE2
 25227                           fsr1l	equ	0xFE1
 25228                           bsr	equ	0xFE0
 25229                           indf2	equ	0xFDF
 25230                           postinc2	equ	0xFDE
 25231                           postdec2	equ	0xFDD
 25232                           plusw2	equ	0xFDB
 25233                           fsr2h	equ	0xFDA
 25234                           fsr2l	equ	0xFD9
 25235                           status	equ	0xFD8
 25236                           
 25237 ;; *************** function i1_saveSysParams *****************
 25238 ;; Defined at:
 25239 ;;		line 110 in file "source/sysParams.h"
 25240 ;; Parameters:    Size  Location     Type
 25241 ;;		None
 25242 ;; Auto vars:     Size  Location     Type
 25243 ;;		None
 25244 ;; Return value:  Size  Location     Type
 25245 ;;                  1    wreg      void 
 25246 ;; Registers used:
 25247 ;;		wreg, status,2, status,0, cstack
 25248 ;; Tracked objects:
 25249 ;;		On entry : 0/0
 25250 ;;		On exit  : 0/0
 25251 ;;		Unchanged: 0/0
 25252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25253 ;;      Params:         0       0       0       0       0       0       0
 25254 ;;      Locals:         0       0       0       0       0       0       0
 25255 ;;      Temps:          0       0       0       0       0       0       0
 25256 ;;      Totals:         0       0       0       0       0       0       0
 25257 ;;Total ram usage:        0 bytes
 25258 ;; Hardware stack levels used:    1
 25259 ;; Hardware stack levels required when called:    7
 25260 ;; This function calls:
 25261 ;;		i1_calcVars2ti
 25262 ;;		i1_writeEEPROM
 25263 ;; This function is called by:
 25264 ;;		_loadSysParams
 25265 ;;		_UARTint
 25266 ;;		i1_confirmEdition
 25267 ;; This function uses a non-reentrant model
 25268 ;;
 25269                           
 25270                           	psect	text105
 25271  0053DE                     __ptext105:
 25272                           	opt stack 0
 25273  0053DE                     i1_saveSysParams:
 25274                           	opt stack 11
 25275                           
 25276                           ;sysParams.h: 111: calcVars2ti();
 25277                           
 25278                           ;incstack = 0
 25279  0053DE  EC30  F033         	call	i1_calcVars2ti	;wreg free
 25280                           
 25281                           ;sysParams.h: 112: EECON1bits.WREN = 1;
 25282  0053E2  84A6               	bsf	4006,2,c	;volatile
 25283                           
 25284                           ;sysParams.h: 113: ie = INTCONbits.GIE;
 25285  0053E4  0E00               	movlw	0
 25286  0053E6  BEF2               	btfsc	intcon,7,c	;volatile
 25287  0053E8  0E01               	movlw	1
 25288  0053EA  0100               	movlb	0	; () banked
 25289  0053EC  6FC9               	movwf	_ie& (0+255),b
 25290                           
 25291                           ; BSR set to: 0
 25292                           ;sysParams.h: 114: INTCONbits.GIE = 0;
 25293  0053EE  9EF2               	bcf	intcon,7,c	;volatile
 25294                           
 25295                           ; BSR set to: 0
 25296                           ;sysParams.h: 116: fData.floatdat = tiXcorte;
 25297  0053F0  C0B2  F0C4         	movff	_tiXcorte,_fData
 25298  0053F4  C0B3  F0C5         	movff	_tiXcorte+1,_fData+1
 25299  0053F8  C0B4  F0C6         	movff	_tiXcorte+2,_fData+2
 25300                           
 25301                           ; BSR set to: 0
 25302                           ;sysParams.h: 118: writeEEPROM(3, fData.floatUB);
 25303  0053FC  C0C6  F060         	movff	_fData+2,i1writeEEPROM@data
 25304  005400  0E03               	movlw	3
 25305  005402  ECC6  F035         	call	i1_writeEEPROM
 25306                           
 25307                           ;sysParams.h: 119: writeEEPROM(4, fData.floatHB);
 25308  005406  C0C5  F060         	movff	_fData+1,i1writeEEPROM@data
 25309  00540A  0E04               	movlw	4
 25310  00540C  ECC6  F035         	call	i1_writeEEPROM
 25311                           
 25312                           ;sysParams.h: 120: writeEEPROM(5, fData.floatLB);
 25313  005410  C0C4  F060         	movff	_fData,i1writeEEPROM@data
 25314  005414  0E05               	movlw	5
 25315  005416  ECC6  F035         	call	i1_writeEEPROM
 25316                           
 25317                           ;sysParams.h: 121: i16Data.int16dat = numCortes;
 25318  00541A  C0B8  F0C7         	movff	_numCortes,_i16Data
 25319  00541E  C0B9  F0C8         	movff	_numCortes+1,_i16Data+1
 25320                           
 25321                           ;sysParams.h: 122: writeEEPROM(6, i16Data.int16HB);
 25322  005422  C0C8  F060         	movff	_i16Data+1,i1writeEEPROM@data
 25323  005426  0E06               	movlw	6
 25324  005428  ECC6  F035         	call	i1_writeEEPROM
 25325                           
 25326                           ;sysParams.h: 123: writeEEPROM(7, i16Data.int16LB);
 25327  00542C  C0C7  F060         	movff	_i16Data,i1writeEEPROM@data
 25328  005430  0E07               	movlw	7
 25329  005432  ECC6  F035         	call	i1_writeEEPROM
 25330                           
 25331                           ;sysParams.h: 124: fData.floatdat = diamTubo;
 25332  005436  C0A9  F0C4         	movff	_diamTubo,_fData
 25333  00543A  C0AA  F0C5         	movff	_diamTubo+1,_fData+1
 25334  00543E  C0AB  F0C6         	movff	_diamTubo+2,_fData+2
 25335                           
 25336                           ;sysParams.h: 126: writeEEPROM(9, fData.floatUB);
 25337  005442  C0C6  F060         	movff	_fData+2,i1writeEEPROM@data
 25338  005446  0E09               	movlw	9
 25339  005448  ECC6  F035         	call	i1_writeEEPROM
 25340                           
 25341                           ;sysParams.h: 127: writeEEPROM(10, fData.floatHB);
 25342  00544C  C0C5  F060         	movff	_fData+1,i1writeEEPROM@data
 25343  005450  0E0A               	movlw	10
 25344  005452  ECC6  F035         	call	i1_writeEEPROM
 25345                           
 25346                           ;sysParams.h: 128: writeEEPROM(11, fData.floatLB);
 25347  005456  C0C4  F060         	movff	_fData,i1writeEEPROM@data
 25348  00545A  0E0B               	movlw	11
 25349  00545C  ECC6  F035         	call	i1_writeEEPROM
 25350                           
 25351                           ;sysParams.h: 134: fData.floatdat = velocidadMasa;
 25352  005460  C0B5  F0C4         	movff	_velocidadMasa,_fData
 25353  005464  C0B6  F0C5         	movff	_velocidadMasa+1,_fData+1
 25354  005468  C0B7  F0C6         	movff	_velocidadMasa+2,_fData+2
 25355                           
 25356                           ;sysParams.h: 136: writeEEPROM(17, fData.floatUB);
 25357  00546C  C0C6  F060         	movff	_fData+2,i1writeEEPROM@data
 25358  005470  0E11               	movlw	17
 25359  005472  ECC6  F035         	call	i1_writeEEPROM
 25360                           
 25361                           ;sysParams.h: 137: writeEEPROM(18, fData.floatHB);
 25362  005476  C0C5  F060         	movff	_fData+1,i1writeEEPROM@data
 25363  00547A  0E12               	movlw	18
 25364  00547C  ECC6  F035         	call	i1_writeEEPROM
 25365                           
 25366                           ;sysParams.h: 138: writeEEPROM(19, fData.floatLB);
 25367  005480  C0C4  F060         	movff	_fData,i1writeEEPROM@data
 25368  005484  0E13               	movlw	19
 25369  005486  ECC6  F035         	call	i1_writeEEPROM
 25370                           
 25371                           ;sysParams.h: 139: EECON1bits.WREN = 0;
 25372  00548A  94A6               	bcf	4006,2,c	;volatile
 25373                           
 25374                           ;sysParams.h: 140: INTCONbits.GIE = ie;
 25375  00548C  0100               	movlb	0	; () banked
 25376  00548E  B1C9               	btfsc	_ie& (0+255),0,b
 25377  005490  D002               	bra	i1u1475_25
 25378  005492  9EF2               	bcf	intcon,7,c	;volatile
 25379  005494  D001               	bra	i1u1475_26
 25380  005496                     i1u1475_25:
 25381  005496  8EF2               	bsf	intcon,7,c	;volatile
 25382  005498                     i1u1475_26:
 25383  005498  0012               	return		;funcret
 25384  00549A                     __end_ofi1_saveSysParams:
 25385                           	opt stack 0
 25386                           pclatu	equ	0xFFB
 25387                           pclath	equ	0xFFA
 25388                           tblptru	equ	0xFF8
 25389                           tblptrh	equ	0xFF7
 25390                           tblptrl	equ	0xFF6
 25391                           tablat	equ	0xFF5
 25392                           prodh	equ	0xFF4
 25393                           prodl	equ	0xFF3
 25394                           intcon	equ	0xFF2
 25395                           postinc0	equ	0xFEE
 25396                           fsr0h	equ	0xFEA
 25397                           fsr0l	equ	0xFE9
 25398                           wreg	equ	0xFE8
 25399                           postdec1	equ	0xFE5
 25400                           fsr1h	equ	0xFE2
 25401                           fsr1l	equ	0xFE1
 25402                           bsr	equ	0xFE0
 25403                           indf2	equ	0xFDF
 25404                           postinc2	equ	0xFDE
 25405                           postdec2	equ	0xFDD
 25406                           plusw2	equ	0xFDB
 25407                           fsr2h	equ	0xFDA
 25408                           fsr2l	equ	0xFD9
 25409                           status	equ	0xFD8
 25410                           
 25411 ;; *************** function i1_calcVars2ti *****************
 25412 ;; Defined at:
 25413 ;;		line 86 in file "source/sysParams.h"
 25414 ;; Parameters:    Size  Location     Type
 25415 ;;		None
 25416 ;; Auto vars:     Size  Location     Type
 25417 ;;		None
 25418 ;; Return value:  Size  Location     Type
 25419 ;;                  1    wreg      void 
 25420 ;; Registers used:
 25421 ;;		wreg, status,2, status,0, cstack
 25422 ;; Tracked objects:
 25423 ;;		On entry : 0/0
 25424 ;;		On exit  : 0/0
 25425 ;;		Unchanged: 0/0
 25426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25427 ;;      Params:         0       0       0       0       0       0       0
 25428 ;;      Locals:         0       0       0       0       0       0       0
 25429 ;;      Temps:          0       0       0       0       0       0       0
 25430 ;;      Totals:         0       0       0       0       0       0       0
 25431 ;;Total ram usage:        0 bytes
 25432 ;; Hardware stack levels used:    1
 25433 ;; Hardware stack levels required when called:    6
 25434 ;; This function calls:
 25435 ;;		i1___ftdiv
 25436 ;;		i1___ftmul
 25437 ;; This function is called by:
 25438 ;;		i1_saveSysParams
 25439 ;;		i1_longPressENTER
 25440 ;; This function uses a non-reentrant model
 25441 ;;
 25442                           
 25443                           	psect	text106
 25444  006660                     __ptext106:
 25445                           	opt stack 0
 25446  006660                     i1_calcVars2ti:
 25447                           	opt stack 11
 25448                           
 25449                           ;sysParams.h: 94: tiXcorte = (float)kgXcorte / velocidadMasa;
 25450                           
 25451                           ;incstack = 0
 25452  006660  C0AC  F072         	movff	_kgXcorte,i1___ftdiv@f1
 25453  006664  C0AD  F073         	movff	_kgXcorte+1,i1___ftdiv@f1+1
 25454  006668  C0AE  F074         	movff	_kgXcorte+2,i1___ftdiv@f1+2
 25455  00666C  C0B5  F075         	movff	_velocidadMasa,i1___ftdiv@f2
 25456  006670  C0B6  F076         	movff	_velocidadMasa+1,i1___ftdiv@f2+1
 25457  006674  C0B7  F077         	movff	_velocidadMasa+2,i1___ftdiv@f2+2
 25458  006678  ECF8  F01B         	call	i1___ftdiv	;wreg free
 25459  00667C  C072  F0B2         	movff	?i1___ftdiv,_tiXcorte
 25460  006680  C073  F0B3         	movff	?i1___ftdiv+1,_tiXcorte+1
 25461  006684  C074  F0B4         	movff	?i1___ftdiv+2,_tiXcorte+2
 25462                           
 25463                           ;sysParams.h: 95: timsXcorte = (float)tiXcorte * 1000;
 25464  006688  C0B2  F068         	movff	_tiXcorte,i1___ftmul@f1
 25465  00668C  C0B3  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 25466  006690  C0B4  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 25467  006694  0E00               	movlw	0
 25468  006696  0100               	movlb	0	; () banked
 25469  006698  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 25470  00669A  0E7A               	movlw	122
 25471  00669C  0100               	movlb	0	; () banked
 25472  00669E  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 25473  0066A0  0E44               	movlw	68
 25474  0066A2  0100               	movlb	0	; () banked
 25475  0066A4  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 25476  0066A6  ECA3  F01A         	call	i1___ftmul	;wreg free
 25477  0066AA  C068  F04D         	movff	?i1___ftmul,_timsXcorte
 25478  0066AE  C069  F04E         	movff	?i1___ftmul+1,_timsXcorte+1
 25479  0066B2  C06A  F04F         	movff	?i1___ftmul+2,_timsXcorte+2
 25480  0066B6  0012               	return		;funcret
 25481  0066B8                     __end_ofi1_calcVars2ti:
 25482                           	opt stack 0
 25483                           pclatu	equ	0xFFB
 25484                           pclath	equ	0xFFA
 25485                           tblptru	equ	0xFF8
 25486                           tblptrh	equ	0xFF7
 25487                           tblptrl	equ	0xFF6
 25488                           tablat	equ	0xFF5
 25489                           prodh	equ	0xFF4
 25490                           prodl	equ	0xFF3
 25491                           intcon	equ	0xFF2
 25492                           postinc0	equ	0xFEE
 25493                           fsr0h	equ	0xFEA
 25494                           fsr0l	equ	0xFE9
 25495                           wreg	equ	0xFE8
 25496                           postdec1	equ	0xFE5
 25497                           fsr1h	equ	0xFE2
 25498                           fsr1l	equ	0xFE1
 25499                           bsr	equ	0xFE0
 25500                           indf2	equ	0xFDF
 25501                           postinc2	equ	0xFDE
 25502                           postdec2	equ	0xFDD
 25503                           plusw2	equ	0xFDB
 25504                           fsr2h	equ	0xFDA
 25505                           fsr2l	equ	0xFD9
 25506                           status	equ	0xFD8
 25507                           
 25508 ;; *************** function i1___ftdiv *****************
 25509 ;; Defined at:
 25510 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 25511 ;; Parameters:    Size  Location     Type
 25512 ;;  f1              3   18[BANK0 ] float 
 25513 ;;  f2              3   21[BANK0 ] float 
 25514 ;; Auto vars:     Size  Location     Type
 25515 ;;  __ftdiv         3   28[BANK0 ] float 
 25516 ;;  __ftdiv         1   32[BANK0 ] unsigned char 
 25517 ;;  __ftdiv         1   31[BANK0 ] unsigned char 
 25518 ;;  __ftdiv         1   27[BANK0 ] unsigned char 
 25519 ;; Return value:  Size  Location     Type
 25520 ;;                  3   18[BANK0 ] float 
 25521 ;; Registers used:
 25522 ;;		wreg, status,2, status,0, cstack
 25523 ;; Tracked objects:
 25524 ;;		On entry : 0/0
 25525 ;;		On exit  : 0/0
 25526 ;;		Unchanged: 0/0
 25527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25528 ;;      Params:         0       6       0       0       0       0       0
 25529 ;;      Locals:         0       6       0       0       0       0       0
 25530 ;;      Temps:          0       3       0       0       0       0       0
 25531 ;;      Totals:         0      15       0       0       0       0       0
 25532 ;;Total ram usage:       15 bytes
 25533 ;; Hardware stack levels used:    1
 25534 ;; Hardware stack levels required when called:    5
 25535 ;; This function calls:
 25536 ;;		i1___ftpack
 25537 ;; This function is called by:
 25538 ;;		i1_calcVars2ti
 25539 ;;		i1_integrator
 25540 ;;		i1_longPressENTER
 25541 ;; This function uses a non-reentrant model
 25542 ;;
 25543                           
 25544                           	psect	text107
 25545  0037F0                     __ptext107:
 25546                           	opt stack 0
 25547  0037F0                     i1___ftdiv:
 25548                           	opt stack 11
 25549                           
 25550                           ;incstack = 0
 25551  0037F0  C074  F078         	movff	i1___ftdiv@f1+2,??i1___ftdiv
 25552  0037F4  0100               	movlb	0	; () banked
 25553  0037F6  6B79               	clrf	(??i1___ftdiv+1)& (0+255),b
 25554  0037F8  6B7A               	clrf	(??i1___ftdiv+2)& (0+255),b
 25555  0037FA  0100               	movlb	0	; () banked
 25556  0037FC  3573               	rlcf	(i1___ftdiv@f1+1)& (0+255),w,b
 25557  0037FE  0100               	movlb	0	; () banked
 25558  003800  3778               	rlcf	??i1___ftdiv& (0+255),f,b
 25559  003802  E301               	bnc	u1358_21
 25560  003804  8179               	bsf	(??i1___ftdiv+1)& (0+255),0,b
 25561  003806                     u1358_21:
 25562  003806  0100               	movlb	0	; () banked
 25563  003808  5178               	movf	??i1___ftdiv& (0+255),w,b
 25564  00380A  0100               	movlb	0	; () banked
 25565  00380C  6F7F               	movwf	i1___ftdiv@exp& (0+255),b
 25566  00380E  0100               	movlb	0	; () banked
 25567  003810  517F               	movf	i1___ftdiv@exp& (0+255),w,b
 25568  003812  A4D8               	btfss	status,2,c
 25569  003814  D00A               	goto	i1l9549
 25570                           
 25571                           ; BSR set to: 0
 25572  003816  0E00               	movlw	0
 25573  003818  0100               	movlb	0	; () banked
 25574  00381A  6F72               	movwf	?i1___ftdiv& (0+255),b
 25575  00381C  0E00               	movlw	0
 25576  00381E  0100               	movlb	0	; () banked
 25577  003820  6F73               	movwf	(?i1___ftdiv+1)& (0+255),b
 25578  003822  0E00               	movlw	0
 25579  003824  0100               	movlb	0	; () banked
 25580  003826  6F74               	movwf	(?i1___ftdiv+2)& (0+255),b
 25581                           
 25582                           ; BSR set to: 0
 25583  003828  0012               	return	
 25584  00382A                     i1l9549:
 25585                           
 25586                           ; BSR set to: 0
 25587  00382A  C077  F078         	movff	i1___ftdiv@f2+2,??i1___ftdiv
 25588  00382E  0100               	movlb	0	; () banked
 25589  003830  6B79               	clrf	(??i1___ftdiv+1)& (0+255),b
 25590  003832  6B7A               	clrf	(??i1___ftdiv+2)& (0+255),b
 25591  003834  0100               	movlb	0	; () banked
 25592  003836  3576               	rlcf	(i1___ftdiv@f2+1)& (0+255),w,b
 25593  003838  0100               	movlb	0	; () banked
 25594  00383A  3778               	rlcf	??i1___ftdiv& (0+255),f,b
 25595  00383C  E301               	bnc	u1360_21
 25596  00383E  8179               	bsf	(??i1___ftdiv+1)& (0+255),0,b
 25597  003840                     u1360_21:
 25598  003840  0100               	movlb	0	; () banked
 25599  003842  5178               	movf	??i1___ftdiv& (0+255),w,b
 25600  003844  0100               	movlb	0	; () banked
 25601  003846  6F80               	movwf	i1___ftdiv@sign& (0+255),b
 25602  003848  0100               	movlb	0	; () banked
 25603  00384A  5180               	movf	i1___ftdiv@sign& (0+255),w,b
 25604  00384C  A4D8               	btfss	status,2,c
 25605  00384E  D00A               	goto	i1l9555
 25606                           
 25607                           ; BSR set to: 0
 25608  003850  0E00               	movlw	0
 25609  003852  0100               	movlb	0	; () banked
 25610  003854  6F72               	movwf	?i1___ftdiv& (0+255),b
 25611  003856  0E00               	movlw	0
 25612  003858  0100               	movlb	0	; () banked
 25613  00385A  6F73               	movwf	(?i1___ftdiv+1)& (0+255),b
 25614  00385C  0E00               	movlw	0
 25615  00385E  0100               	movlb	0	; () banked
 25616  003860  6F74               	movwf	(?i1___ftdiv+2)& (0+255),b
 25617                           
 25618                           ; BSR set to: 0
 25619  003862  0012               	return	
 25620  003864                     i1l9555:
 25621                           
 25622                           ; BSR set to: 0
 25623  003864  0E00               	movlw	0
 25624  003866  0100               	movlb	0	; () banked
 25625  003868  6F7C               	movwf	i1___ftdiv@f3& (0+255),b
 25626  00386A  0E00               	movlw	0
 25627  00386C  0100               	movlb	0	; () banked
 25628  00386E  6F7D               	movwf	(i1___ftdiv@f3+1)& (0+255),b
 25629  003870  0E00               	movlw	0
 25630  003872  0100               	movlb	0	; () banked
 25631  003874  6F7E               	movwf	(i1___ftdiv@f3+2)& (0+255),b
 25632                           
 25633                           ; BSR set to: 0
 25634  003876  0100               	movlb	0	; () banked
 25635  003878  5180               	movf	i1___ftdiv@sign& (0+255),w,b
 25636  00387A  0F89               	addlw	137
 25637  00387C  0100               	movlb	0	; () banked
 25638  00387E  5F7F               	subwf	i1___ftdiv@exp& (0+255),f,b
 25639                           
 25640                           ; BSR set to: 0
 25641  003880  C074  F080         	movff	i1___ftdiv@f1+2,i1___ftdiv@sign
 25642                           
 25643                           ; BSR set to: 0
 25644  003884  0100               	movlb	0	; () banked
 25645  003886  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 25646  003888  0100               	movlb	0	; () banked
 25647  00388A  1B80               	xorwf	i1___ftdiv@sign& (0+255),f,b
 25648                           
 25649                           ; BSR set to: 0
 25650  00388C  0E80               	movlw	128
 25651  00388E  0100               	movlb	0	; () banked
 25652  003890  1780               	andwf	i1___ftdiv@sign& (0+255),f,b
 25653                           
 25654                           ; BSR set to: 0
 25655  003892  0100               	movlb	0	; () banked
 25656  003894  8F73               	bsf	(i1___ftdiv@f1+1)& (0+255),7,b
 25657                           
 25658                           ; BSR set to: 0
 25659  003896  0EFF               	movlw	255
 25660  003898  0100               	movlb	0	; () banked
 25661  00389A  1772               	andwf	i1___ftdiv@f1& (0+255),f,b
 25662  00389C  0EFF               	movlw	255
 25663  00389E  0100               	movlb	0	; () banked
 25664  0038A0  1773               	andwf	(i1___ftdiv@f1+1)& (0+255),f,b
 25665  0038A2  0E00               	movlw	0
 25666  0038A4  0100               	movlb	0	; () banked
 25667  0038A6  1774               	andwf	(i1___ftdiv@f1+2)& (0+255),f,b
 25668                           
 25669                           ; BSR set to: 0
 25670  0038A8  0100               	movlb	0	; () banked
 25671  0038AA  8F76               	bsf	(i1___ftdiv@f2+1)& (0+255),7,b
 25672                           
 25673                           ; BSR set to: 0
 25674  0038AC  0EFF               	movlw	255
 25675  0038AE  0100               	movlb	0	; () banked
 25676  0038B0  1775               	andwf	i1___ftdiv@f2& (0+255),f,b
 25677  0038B2  0EFF               	movlw	255
 25678  0038B4  0100               	movlb	0	; () banked
 25679  0038B6  1776               	andwf	(i1___ftdiv@f2+1)& (0+255),f,b
 25680  0038B8  0E00               	movlw	0
 25681  0038BA  0100               	movlb	0	; () banked
 25682  0038BC  1777               	andwf	(i1___ftdiv@f2+2)& (0+255),f,b
 25683                           
 25684                           ; BSR set to: 0
 25685  0038BE  0E18               	movlw	24
 25686  0038C0  0100               	movlb	0	; () banked
 25687  0038C2  6F7B               	movwf	i1___ftdiv@cntr& (0+255),b
 25688  0038C4                     i1l9575:
 25689                           
 25690                           ; BSR set to: 0
 25691  0038C4  0100               	movlb	0	; () banked
 25692  0038C6  90D8               	bcf	status,0,c
 25693  0038C8  377C               	rlcf	i1___ftdiv@f3& (0+255),f,b
 25694  0038CA  377D               	rlcf	(i1___ftdiv@f3+1)& (0+255),f,b
 25695  0038CC  377E               	rlcf	(i1___ftdiv@f3+2)& (0+255),f,b
 25696                           
 25697                           ; BSR set to: 0
 25698  0038CE  0100               	movlb	0	; () banked
 25699  0038D0  5175               	movf	i1___ftdiv@f2& (0+255),w,b
 25700  0038D2  0100               	movlb	0	; () banked
 25701  0038D4  5D72               	subwf	i1___ftdiv@f1& (0+255),w,b
 25702  0038D6  0100               	movlb	0	; () banked
 25703  0038D8  5176               	movf	(i1___ftdiv@f2+1)& (0+255),w,b
 25704  0038DA  0100               	movlb	0	; () banked
 25705  0038DC  5973               	subwfb	(i1___ftdiv@f1+1)& (0+255),w,b
 25706  0038DE  0100               	movlb	0	; () banked
 25707  0038E0  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 25708  0038E2  0100               	movlb	0	; () banked
 25709  0038E4  5974               	subwfb	(i1___ftdiv@f1+2)& (0+255),w,b
 25710  0038E6  A0D8               	btfss	status,0,c
 25711  0038E8  D00E               	goto	i1l1322
 25712                           
 25713                           ; BSR set to: 0
 25714  0038EA  0100               	movlb	0	; () banked
 25715  0038EC  5175               	movf	i1___ftdiv@f2& (0+255),w,b
 25716  0038EE  0100               	movlb	0	; () banked
 25717  0038F0  5F72               	subwf	i1___ftdiv@f1& (0+255),f,b
 25718  0038F2  0100               	movlb	0	; () banked
 25719  0038F4  5176               	movf	(i1___ftdiv@f2+1)& (0+255),w,b
 25720  0038F6  0100               	movlb	0	; () banked
 25721  0038F8  5B73               	subwfb	(i1___ftdiv@f1+1)& (0+255),f,b
 25722  0038FA  0100               	movlb	0	; () banked
 25723  0038FC  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 25724  0038FE  0100               	movlb	0	; () banked
 25725  003900  5B74               	subwfb	(i1___ftdiv@f1+2)& (0+255),f,b
 25726                           
 25727                           ; BSR set to: 0
 25728  003902  0100               	movlb	0	; () banked
 25729  003904  817C               	bsf	i1___ftdiv@f3& (0+255),0,b
 25730  003906                     i1l1322:
 25731                           
 25732                           ; BSR set to: 0
 25733  003906  0100               	movlb	0	; () banked
 25734  003908  90D8               	bcf	status,0,c
 25735  00390A  3772               	rlcf	i1___ftdiv@f1& (0+255),f,b
 25736  00390C  3773               	rlcf	(i1___ftdiv@f1+1)& (0+255),f,b
 25737  00390E  3774               	rlcf	(i1___ftdiv@f1+2)& (0+255),f,b
 25738                           
 25739                           ; BSR set to: 0
 25740  003910  0100               	movlb	0	; () banked
 25741  003912  2F7B               	decfsz	i1___ftdiv@cntr& (0+255),f,b
 25742  003914  D7D7               	goto	i1l9575
 25743                           
 25744                           ; BSR set to: 0
 25745                           
 25746                           ; BSR set to: 0
 25747  003916  C07C  F060         	movff	i1___ftdiv@f3,i1___ftpack@arg
 25748  00391A  C07D  F061         	movff	i1___ftdiv@f3+1,i1___ftpack@arg+1
 25749  00391E  C07E  F062         	movff	i1___ftdiv@f3+2,i1___ftpack@arg+2
 25750  003922  C07F  F063         	movff	i1___ftdiv@exp,i1___ftpack@exp
 25751  003926  C080  F064         	movff	i1___ftdiv@sign,i1___ftpack@sign
 25752  00392A  EC40  F022         	call	i1___ftpack	;wreg free
 25753  00392E  C060  F072         	movff	?i1___ftpack,?i1___ftdiv
 25754  003932  C061  F073         	movff	?i1___ftpack+1,?i1___ftdiv+1
 25755  003936  C062  F074         	movff	?i1___ftpack+2,?i1___ftdiv+2
 25756  00393A  0012               	return	
 25757  00393C                     __end_ofi1___ftdiv:
 25758                           	opt stack 0
 25759                           pclatu	equ	0xFFB
 25760                           pclath	equ	0xFFA
 25761                           tblptru	equ	0xFF8
 25762                           tblptrh	equ	0xFF7
 25763                           tblptrl	equ	0xFF6
 25764                           tablat	equ	0xFF5
 25765                           prodh	equ	0xFF4
 25766                           prodl	equ	0xFF3
 25767                           intcon	equ	0xFF2
 25768                           postinc0	equ	0xFEE
 25769                           fsr0h	equ	0xFEA
 25770                           fsr0l	equ	0xFE9
 25771                           wreg	equ	0xFE8
 25772                           postdec1	equ	0xFE5
 25773                           fsr1h	equ	0xFE2
 25774                           fsr1l	equ	0xFE1
 25775                           bsr	equ	0xFE0
 25776                           indf2	equ	0xFDF
 25777                           postinc2	equ	0xFDE
 25778                           postdec2	equ	0xFDD
 25779                           plusw2	equ	0xFDB
 25780                           fsr2h	equ	0xFDA
 25781                           fsr2l	equ	0xFD9
 25782                           status	equ	0xFD8
 25783                           
 25784 ;; *************** function i1_calcSysVars *****************
 25785 ;; Defined at:
 25786 ;;		line 75 in file "source/sysParams.h"
 25787 ;; Parameters:    Size  Location     Type
 25788 ;;		None
 25789 ;; Auto vars:     Size  Location     Type
 25790 ;;  calcSysVars     3   23[BANK0 ] float 
 25791 ;; Return value:  Size  Location     Type
 25792 ;;                  1    wreg      void 
 25793 ;; Registers used:
 25794 ;;		wreg, status,2, status,0, cstack
 25795 ;; Tracked objects:
 25796 ;;		On entry : 0/0
 25797 ;;		On exit  : 0/0
 25798 ;;		Unchanged: 0/0
 25799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25800 ;;      Params:         0       0       0       0       0       0       0
 25801 ;;      Locals:         0       3       0       0       0       0       0
 25802 ;;      Temps:          0       0       0       0       0       0       0
 25803 ;;      Totals:         0       3       0       0       0       0       0
 25804 ;;Total ram usage:        3 bytes
 25805 ;; Hardware stack levels used:    1
 25806 ;; Hardware stack levels required when called:    6
 25807 ;; This function calls:
 25808 ;;		i1___ftmul
 25809 ;; This function is called by:
 25810 ;;		_loadSysParams
 25811 ;;		i1_sysParamInit
 25812 ;; This function uses a non-reentrant model
 25813 ;;
 25814                           
 25815                           	psect	text108
 25816  006488                     __ptext108:
 25817                           	opt stack 0
 25818  006488                     i1_calcSysVars:
 25819                           	opt stack 11
 25820                           
 25821                           ;sysParams.h: 76: float temp = 0;
 25822                           
 25823                           ;incstack = 0
 25824  006488  0E00               	movlw	0
 25825  00648A  0100               	movlb	0	; () banked
 25826  00648C  6F77               	movwf	i1calcSysVars@temp& (0+255),b
 25827  00648E  0E00               	movlw	0
 25828  006490  0100               	movlb	0	; () banked
 25829  006492  6F78               	movwf	(i1calcSysVars@temp+1)& (0+255),b
 25830  006494  0E00               	movlw	0
 25831  006496  0100               	movlb	0	; () banked
 25832  006498  6F79               	movwf	(i1calcSysVars@temp+2)& (0+255),b
 25833                           
 25834                           ; BSR set to: 0
 25835                           ;sysParams.h: 77: timsXcorte = (float)tiXcorte * 1000;
 25836  00649A  C0B2  F068         	movff	_tiXcorte,i1___ftmul@f1
 25837  00649E  C0B3  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 25838  0064A2  C0B4  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 25839  0064A6  0E00               	movlw	0
 25840  0064A8  0100               	movlb	0	; () banked
 25841  0064AA  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 25842  0064AC  0E7A               	movlw	122
 25843  0064AE  0100               	movlb	0	; () banked
 25844  0064B0  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 25845  0064B2  0E44               	movlw	68
 25846  0064B4  0100               	movlb	0	; () banked
 25847  0064B6  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 25848  0064B8  ECA3  F01A         	call	i1___ftmul	;wreg free
 25849  0064BC  C068  F04D         	movff	?i1___ftmul,_timsXcorte
 25850  0064C0  C069  F04E         	movff	?i1___ftmul+1,_timsXcorte+1
 25851  0064C4  C06A  F04F         	movff	?i1___ftmul+2,_timsXcorte+2
 25852                           
 25853                           ;sysParams.h: 83: kgXcorte = (float)velocidadMasa * tiXcorte;
 25854  0064C8  C0B5  F068         	movff	_velocidadMasa,i1___ftmul@f1
 25855  0064CC  C0B6  F069         	movff	_velocidadMasa+1,i1___ftmul@f1+1
 25856  0064D0  C0B7  F06A         	movff	_velocidadMasa+2,i1___ftmul@f1+2
 25857  0064D4  C0B2  F06B         	movff	_tiXcorte,i1___ftmul@f2
 25858  0064D8  C0B3  F06C         	movff	_tiXcorte+1,i1___ftmul@f2+1
 25859  0064DC  C0B4  F06D         	movff	_tiXcorte+2,i1___ftmul@f2+2
 25860  0064E0  ECA3  F01A         	call	i1___ftmul	;wreg free
 25861  0064E4  C068  F0AC         	movff	?i1___ftmul,_kgXcorte
 25862  0064E8  C069  F0AD         	movff	?i1___ftmul+1,_kgXcorte+1
 25863  0064EC  C06A  F0AE         	movff	?i1___ftmul+2,_kgXcorte+2
 25864  0064F0  0012               	return		;funcret
 25865  0064F2                     __end_ofi1_calcSysVars:
 25866                           	opt stack 0
 25867                           pclatu	equ	0xFFB
 25868                           pclath	equ	0xFFA
 25869                           tblptru	equ	0xFF8
 25870                           tblptrh	equ	0xFF7
 25871                           tblptrl	equ	0xFF6
 25872                           tablat	equ	0xFF5
 25873                           prodh	equ	0xFF4
 25874                           prodl	equ	0xFF3
 25875                           intcon	equ	0xFF2
 25876                           postinc0	equ	0xFEE
 25877                           fsr0h	equ	0xFEA
 25878                           fsr0l	equ	0xFE9
 25879                           wreg	equ	0xFE8
 25880                           postdec1	equ	0xFE5
 25881                           fsr1h	equ	0xFE2
 25882                           fsr1l	equ	0xFE1
 25883                           bsr	equ	0xFE0
 25884                           indf2	equ	0xFDF
 25885                           postinc2	equ	0xFDE
 25886                           postdec2	equ	0xFDD
 25887                           plusw2	equ	0xFDB
 25888                           fsr2h	equ	0xFDA
 25889                           fsr2l	equ	0xFD9
 25890                           status	equ	0xFD8
 25891                           
 25892 ;; *************** function i1___ftmul *****************
 25893 ;; Defined at:
 25894 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 25895 ;; Parameters:    Size  Location     Type
 25896 ;;  f1              3    8[BANK0 ] float 
 25897 ;;  f2              3   11[BANK0 ] float 
 25898 ;; Auto vars:     Size  Location     Type
 25899 ;;  __ftmul         3   18[BANK0 ] unsigned um
 25900 ;;  __ftmul         1   22[BANK0 ] unsigned char 
 25901 ;;  __ftmul         1   21[BANK0 ] unsigned char 
 25902 ;;  __ftmul         1   17[BANK0 ] unsigned char 
 25903 ;; Return value:  Size  Location     Type
 25904 ;;                  3    8[BANK0 ] float 
 25905 ;; Registers used:
 25906 ;;		wreg, status,2, status,0, cstack
 25907 ;; Tracked objects:
 25908 ;;		On entry : 0/0
 25909 ;;		On exit  : 0/0
 25910 ;;		Unchanged: 0/0
 25911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25912 ;;      Params:         0       6       0       0       0       0       0
 25913 ;;      Locals:         0       6       0       0       0       0       0
 25914 ;;      Temps:          0       3       0       0       0       0       0
 25915 ;;      Totals:         0      15       0       0       0       0       0
 25916 ;;Total ram usage:       15 bytes
 25917 ;; Hardware stack levels used:    1
 25918 ;; Hardware stack levels required when called:    5
 25919 ;; This function calls:
 25920 ;;		i1___ftpack
 25921 ;; This function is called by:
 25922 ;;		i1_calcSysVars
 25923 ;;		i1_calcVars2ti
 25924 ;;		i1_desintegrator
 25925 ;; This function uses a non-reentrant model
 25926 ;;
 25927                           
 25928                           	psect	text109
 25929  003546                     __ptext109:
 25930                           	opt stack 0
 25931  003546                     i1___ftmul:
 25932                           	opt stack 11
 25933                           
 25934                           ;incstack = 0
 25935  003546  C06A  F06E         	movff	i1___ftmul@f1+2,??i1___ftmul
 25936  00354A  0100               	movlb	0	; () banked
 25937  00354C  6B6F               	clrf	(??i1___ftmul+1)& (0+255),b
 25938  00354E  6B70               	clrf	(??i1___ftmul+2)& (0+255),b
 25939  003550  0100               	movlb	0	; () banked
 25940  003552  3569               	rlcf	(i1___ftmul@f1+1)& (0+255),w,b
 25941  003554  0100               	movlb	0	; () banked
 25942  003556  376E               	rlcf	??i1___ftmul& (0+255),f,b
 25943  003558  E301               	bnc	u1363_21
 25944  00355A  816F               	bsf	(??i1___ftmul+1)& (0+255),0,b
 25945  00355C                     u1363_21:
 25946  00355C  0100               	movlb	0	; () banked
 25947  00355E  516E               	movf	??i1___ftmul& (0+255),w,b
 25948  003560  0100               	movlb	0	; () banked
 25949  003562  6F71               	movwf	i1___ftmul@exp& (0+255),b
 25950  003564  0100               	movlb	0	; () banked
 25951  003566  5171               	movf	i1___ftmul@exp& (0+255),w,b
 25952  003568  A4D8               	btfss	status,2,c
 25953  00356A  D00A               	goto	i1l9595
 25954                           
 25955                           ; BSR set to: 0
 25956  00356C  0E00               	movlw	0
 25957  00356E  0100               	movlb	0	; () banked
 25958  003570  6F68               	movwf	?i1___ftmul& (0+255),b
 25959  003572  0E00               	movlw	0
 25960  003574  0100               	movlb	0	; () banked
 25961  003576  6F69               	movwf	(?i1___ftmul+1)& (0+255),b
 25962  003578  0E00               	movlw	0
 25963  00357A  0100               	movlb	0	; () banked
 25964  00357C  6F6A               	movwf	(?i1___ftmul+2)& (0+255),b
 25965                           
 25966                           ; BSR set to: 0
 25967  00357E  0012               	return	
 25968  003580                     i1l9595:
 25969                           
 25970                           ; BSR set to: 0
 25971  003580  C06D  F06E         	movff	i1___ftmul@f2+2,??i1___ftmul
 25972  003584  0100               	movlb	0	; () banked
 25973  003586  6B6F               	clrf	(??i1___ftmul+1)& (0+255),b
 25974  003588  6B70               	clrf	(??i1___ftmul+2)& (0+255),b
 25975  00358A  0100               	movlb	0	; () banked
 25976  00358C  356C               	rlcf	(i1___ftmul@f2+1)& (0+255),w,b
 25977  00358E  0100               	movlb	0	; () banked
 25978  003590  376E               	rlcf	??i1___ftmul& (0+255),f,b
 25979  003592  E301               	bnc	u1365_21
 25980  003594  816F               	bsf	(??i1___ftmul+1)& (0+255),0,b
 25981  003596                     u1365_21:
 25982  003596  0100               	movlb	0	; () banked
 25983  003598  516E               	movf	??i1___ftmul& (0+255),w,b
 25984  00359A  0100               	movlb	0	; () banked
 25985  00359C  6F76               	movwf	i1___ftmul@sign& (0+255),b
 25986  00359E  0100               	movlb	0	; () banked
 25987  0035A0  5176               	movf	i1___ftmul@sign& (0+255),w,b
 25988  0035A2  A4D8               	btfss	status,2,c
 25989  0035A4  D00A               	goto	i1l9601
 25990                           
 25991                           ; BSR set to: 0
 25992  0035A6  0E00               	movlw	0
 25993  0035A8  0100               	movlb	0	; () banked
 25994  0035AA  6F68               	movwf	?i1___ftmul& (0+255),b
 25995  0035AC  0E00               	movlw	0
 25996  0035AE  0100               	movlb	0	; () banked
 25997  0035B0  6F69               	movwf	(?i1___ftmul+1)& (0+255),b
 25998  0035B2  0E00               	movlw	0
 25999  0035B4  0100               	movlb	0	; () banked
 26000  0035B6  6F6A               	movwf	(?i1___ftmul+2)& (0+255),b
 26001                           
 26002                           ; BSR set to: 0
 26003  0035B8  0012               	return	
 26004  0035BA                     i1l9601:
 26005                           
 26006                           ; BSR set to: 0
 26007  0035BA  0100               	movlb	0	; () banked
 26008  0035BC  5176               	movf	i1___ftmul@sign& (0+255),w,b
 26009  0035BE  0F7B               	addlw	123
 26010  0035C0  0100               	movlb	0	; () banked
 26011  0035C2  2771               	addwf	i1___ftmul@exp& (0+255),f,b
 26012                           
 26013                           ; BSR set to: 0
 26014  0035C4  C06A  F076         	movff	i1___ftmul@f1+2,i1___ftmul@sign
 26015  0035C8  0100               	movlb	0	; () banked
 26016  0035CA  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 26017  0035CC  0100               	movlb	0	; () banked
 26018  0035CE  1B76               	xorwf	i1___ftmul@sign& (0+255),f,b
 26019  0035D0  0E80               	movlw	128
 26020  0035D2  0100               	movlb	0	; () banked
 26021  0035D4  1776               	andwf	i1___ftmul@sign& (0+255),f,b
 26022                           
 26023                           ; BSR set to: 0
 26024  0035D6  0100               	movlb	0	; () banked
 26025  0035D8  8F69               	bsf	(i1___ftmul@f1+1)& (0+255),7,b
 26026                           
 26027                           ; BSR set to: 0
 26028  0035DA  0100               	movlb	0	; () banked
 26029  0035DC  8F6C               	bsf	(i1___ftmul@f2+1)& (0+255),7,b
 26030                           
 26031                           ; BSR set to: 0
 26032  0035DE  0EFF               	movlw	255
 26033  0035E0  0100               	movlb	0	; () banked
 26034  0035E2  176B               	andwf	i1___ftmul@f2& (0+255),f,b
 26035  0035E4  0EFF               	movlw	255
 26036  0035E6  0100               	movlb	0	; () banked
 26037  0035E8  176C               	andwf	(i1___ftmul@f2+1)& (0+255),f,b
 26038  0035EA  0E00               	movlw	0
 26039  0035EC  0100               	movlb	0	; () banked
 26040  0035EE  176D               	andwf	(i1___ftmul@f2+2)& (0+255),f,b
 26041                           
 26042                           ; BSR set to: 0
 26043  0035F0  0E00               	movlw	0
 26044  0035F2  0100               	movlb	0	; () banked
 26045  0035F4  6F72               	movwf	i1___ftmul@f3_as_product& (0+255),b
 26046  0035F6  0E00               	movlw	0
 26047  0035F8  0100               	movlb	0	; () banked
 26048  0035FA  6F73               	movwf	(i1___ftmul@f3_as_product+1)& (0+255),b
 26049  0035FC  0E00               	movlw	0
 26050  0035FE  0100               	movlb	0	; () banked
 26051  003600  6F74               	movwf	(i1___ftmul@f3_as_product+2)& (0+255),b
 26052                           
 26053                           ; BSR set to: 0
 26054  003602  0E07               	movlw	7
 26055  003604  0100               	movlb	0	; () banked
 26056  003606  6F75               	movwf	i1___ftmul@cntr& (0+255),b
 26057  003608                     i1l9615:
 26058                           
 26059                           ; BSR set to: 0
 26060  003608  0100               	movlb	0	; () banked
 26061  00360A  A168               	btfss	i1___ftmul@f1& (0+255),0,b
 26062  00360C  D00C               	goto	i1l9619
 26063                           
 26064                           ; BSR set to: 0
 26065  00360E  0100               	movlb	0	; () banked
 26066  003610  516B               	movf	i1___ftmul@f2& (0+255),w,b
 26067  003612  0100               	movlb	0	; () banked
 26068  003614  2772               	addwf	i1___ftmul@f3_as_product& (0+255),f,b
 26069  003616  0100               	movlb	0	; () banked
 26070  003618  516C               	movf	(i1___ftmul@f2+1)& (0+255),w,b
 26071  00361A  0100               	movlb	0	; () banked
 26072  00361C  2373               	addwfc	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 26073  00361E  0100               	movlb	0	; () banked
 26074  003620  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 26075  003622  0100               	movlb	0	; () banked
 26076  003624  2374               	addwfc	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 26077  003626                     i1l9619:
 26078                           
 26079                           ; BSR set to: 0
 26080  003626  0100               	movlb	0	; () banked
 26081  003628  90D8               	bcf	status,0,c
 26082  00362A  336A               	rrcf	(i1___ftmul@f1+2)& (0+255),f,b
 26083  00362C  3369               	rrcf	(i1___ftmul@f1+1)& (0+255),f,b
 26084  00362E  3368               	rrcf	i1___ftmul@f1& (0+255),f,b
 26085  003630  0100               	movlb	0	; () banked
 26086  003632  90D8               	bcf	status,0,c
 26087  003634  376B               	rlcf	i1___ftmul@f2& (0+255),f,b
 26088  003636  376C               	rlcf	(i1___ftmul@f2+1)& (0+255),f,b
 26089  003638  376D               	rlcf	(i1___ftmul@f2+2)& (0+255),f,b
 26090                           
 26091                           ; BSR set to: 0
 26092  00363A  0100               	movlb	0	; () banked
 26093  00363C  2F75               	decfsz	i1___ftmul@cntr& (0+255),f,b
 26094  00363E  D7E4               	goto	i1l9615
 26095                           
 26096                           ; BSR set to: 0
 26097                           
 26098                           ; BSR set to: 0
 26099  003640  0E09               	movlw	9
 26100  003642  0100               	movlb	0	; () banked
 26101  003644  6F75               	movwf	i1___ftmul@cntr& (0+255),b
 26102  003646                     i1l9625:
 26103                           
 26104                           ; BSR set to: 0
 26105  003646  0100               	movlb	0	; () banked
 26106  003648  A168               	btfss	i1___ftmul@f1& (0+255),0,b
 26107  00364A  D00C               	goto	i1l9629
 26108                           
 26109                           ; BSR set to: 0
 26110  00364C  0100               	movlb	0	; () banked
 26111  00364E  516B               	movf	i1___ftmul@f2& (0+255),w,b
 26112  003650  0100               	movlb	0	; () banked
 26113  003652  2772               	addwf	i1___ftmul@f3_as_product& (0+255),f,b
 26114  003654  0100               	movlb	0	; () banked
 26115  003656  516C               	movf	(i1___ftmul@f2+1)& (0+255),w,b
 26116  003658  0100               	movlb	0	; () banked
 26117  00365A  2373               	addwfc	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 26118  00365C  0100               	movlb	0	; () banked
 26119  00365E  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 26120  003660  0100               	movlb	0	; () banked
 26121  003662  2374               	addwfc	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 26122  003664                     i1l9629:
 26123                           
 26124                           ; BSR set to: 0
 26125  003664  0100               	movlb	0	; () banked
 26126  003666  90D8               	bcf	status,0,c
 26127  003668  336A               	rrcf	(i1___ftmul@f1+2)& (0+255),f,b
 26128  00366A  3369               	rrcf	(i1___ftmul@f1+1)& (0+255),f,b
 26129  00366C  3368               	rrcf	i1___ftmul@f1& (0+255),f,b
 26130  00366E  0100               	movlb	0	; () banked
 26131  003670  90D8               	bcf	status,0,c
 26132  003672  3374               	rrcf	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 26133  003674  3373               	rrcf	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 26134  003676  3372               	rrcf	i1___ftmul@f3_as_product& (0+255),f,b
 26135                           
 26136                           ; BSR set to: 0
 26137  003678  0100               	movlb	0	; () banked
 26138  00367A  2F75               	decfsz	i1___ftmul@cntr& (0+255),f,b
 26139  00367C  D7E4               	goto	i1l9625
 26140                           
 26141                           ; BSR set to: 0
 26142                           
 26143                           ; BSR set to: 0
 26144  00367E  C072  F060         	movff	i1___ftmul@f3_as_product,i1___ftpack@arg
 26145  003682  C073  F061         	movff	i1___ftmul@f3_as_product+1,i1___ftpack@arg+1
 26146  003686  C074  F062         	movff	i1___ftmul@f3_as_product+2,i1___ftpack@arg+2
 26147  00368A  C071  F063         	movff	i1___ftmul@exp,i1___ftpack@exp
 26148  00368E  C076  F064         	movff	i1___ftmul@sign,i1___ftpack@sign
 26149  003692  EC40  F022         	call	i1___ftpack	;wreg free
 26150  003696  C060  F068         	movff	?i1___ftpack,?i1___ftmul
 26151  00369A  C061  F069         	movff	?i1___ftpack+1,?i1___ftmul+1
 26152  00369E  C062  F06A         	movff	?i1___ftpack+2,?i1___ftmul+2
 26153  0036A2  0012               	return	
 26154  0036A4                     __end_ofi1___ftmul:
 26155                           	opt stack 0
 26156                           pclatu	equ	0xFFB
 26157                           pclath	equ	0xFFA
 26158                           tblptru	equ	0xFF8
 26159                           tblptrh	equ	0xFF7
 26160                           tblptrl	equ	0xFF6
 26161                           tablat	equ	0xFF5
 26162                           prodh	equ	0xFF4
 26163                           prodl	equ	0xFF3
 26164                           intcon	equ	0xFF2
 26165                           postinc0	equ	0xFEE
 26166                           fsr0h	equ	0xFEA
 26167                           fsr0l	equ	0xFE9
 26168                           wreg	equ	0xFE8
 26169                           postdec1	equ	0xFE5
 26170                           fsr1h	equ	0xFE2
 26171                           fsr1l	equ	0xFE1
 26172                           bsr	equ	0xFE0
 26173                           indf2	equ	0xFDF
 26174                           postinc2	equ	0xFDE
 26175                           postdec2	equ	0xFDD
 26176                           plusw2	equ	0xFDB
 26177                           fsr2h	equ	0xFDA
 26178                           fsr2l	equ	0xFD9
 26179                           status	equ	0xFD8
 26180                           
 26181 ;; *************** function i1___ftpack *****************
 26182 ;; Defined at:
 26183 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 26184 ;; Parameters:    Size  Location     Type
 26185 ;;  arg             3    0[BANK0 ] unsigned um
 26186 ;;  exp             1    3[BANK0 ] unsigned char 
 26187 ;;  sign            1    4[BANK0 ] unsigned char 
 26188 ;; Auto vars:     Size  Location     Type
 26189 ;;		None
 26190 ;; Return value:  Size  Location     Type
 26191 ;;                  3    0[BANK0 ] float 
 26192 ;; Registers used:
 26193 ;;		wreg, status,2, status,0
 26194 ;; Tracked objects:
 26195 ;;		On entry : 0/0
 26196 ;;		On exit  : 0/0
 26197 ;;		Unchanged: 0/0
 26198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26199 ;;      Params:         0       5       0       0       0       0       0
 26200 ;;      Locals:         0       0       0       0       0       0       0
 26201 ;;      Temps:          0       3       0       0       0       0       0
 26202 ;;      Totals:         0       8       0       0       0       0       0
 26203 ;;Total ram usage:        8 bytes
 26204 ;; Hardware stack levels used:    1
 26205 ;; Hardware stack levels required when called:    4
 26206 ;; This function calls:
 26207 ;;		Nothing
 26208 ;; This function is called by:
 26209 ;;		i1___altoft
 26210 ;;		i1___ftadd
 26211 ;;		i1___ftdiv
 26212 ;;		i1___ftmul
 26213 ;; This function uses a non-reentrant model
 26214 ;;
 26215                           
 26216                           	psect	text110
 26217  004480                     __ptext110:
 26218                           	opt stack 0
 26219  004480                     i1___ftpack:
 26220                           	opt stack 11
 26221                           
 26222                           ;incstack = 0
 26223  004480  0100               	movlb	0	; () banked
 26224  004482  5163               	movf	i1___ftpack@exp& (0+255),w,b
 26225  004484  0100               	movlb	0	; () banked
 26226  004486  B4D8               	btfsc	status,2,c
 26227  004488  D008               	goto	i1l9243
 26228                           
 26229                           ; BSR set to: 0
 26230  00448A  0100               	movlb	0	; () banked
 26231  00448C  5160               	movf	i1___ftpack@arg& (0+255),w,b
 26232  00448E  0100               	movlb	0	; () banked
 26233  004490  1161               	iorwf	(i1___ftpack@arg+1)& (0+255),w,b
 26234  004492  0100               	movlb	0	; () banked
 26235  004494  1162               	iorwf	(i1___ftpack@arg+2)& (0+255),w,b
 26236  004496  A4D8               	btfss	status,2,c
 26237  004498  D011               	goto	i1l9249
 26238  00449A                     i1l9243:
 26239                           
 26240                           ; BSR set to: 0
 26241  00449A  0E00               	movlw	0
 26242  00449C  0100               	movlb	0	; () banked
 26243  00449E  6F60               	movwf	?i1___ftpack& (0+255),b
 26244  0044A0  0E00               	movlw	0
 26245  0044A2  0100               	movlb	0	; () banked
 26246  0044A4  6F61               	movwf	(?i1___ftpack+1)& (0+255),b
 26247  0044A6  0E00               	movlw	0
 26248  0044A8  0100               	movlb	0	; () banked
 26249  0044AA  6F62               	movwf	(?i1___ftpack+2)& (0+255),b
 26250                           
 26251                           ; BSR set to: 0
 26252  0044AC  0012               	return	
 26253  0044AE                     i1l9247:
 26254                           
 26255                           ; BSR set to: 0
 26256  0044AE  0100               	movlb	0	; () banked
 26257  0044B0  2B63               	incf	i1___ftpack@exp& (0+255),f,b
 26258  0044B2  0100               	movlb	0	; () banked
 26259  0044B4  90D8               	bcf	status,0,c
 26260  0044B6  3362               	rrcf	(i1___ftpack@arg+2)& (0+255),f,b
 26261  0044B8  3361               	rrcf	(i1___ftpack@arg+1)& (0+255),f,b
 26262  0044BA  3360               	rrcf	i1___ftpack@arg& (0+255),f,b
 26263  0044BC                     i1l9249:
 26264                           
 26265                           ; BSR set to: 0
 26266  0044BC  0E00               	movlw	0
 26267  0044BE  0100               	movlb	0	; () banked
 26268  0044C0  1560               	andwf	i1___ftpack@arg& (0+255),w,b
 26269  0044C2  0100               	movlb	0	; () banked
 26270  0044C4  6F65               	movwf	??i1___ftpack& (0+255),b
 26271  0044C6  0E00               	movlw	0
 26272  0044C8  0100               	movlb	0	; () banked
 26273  0044CA  1561               	andwf	(i1___ftpack@arg+1)& (0+255),w,b
 26274  0044CC  0100               	movlb	0	; () banked
 26275  0044CE  6F66               	movwf	(??i1___ftpack+1)& (0+255),b
 26276  0044D0  0EFE               	movlw	254
 26277  0044D2  0100               	movlb	0	; () banked
 26278  0044D4  1562               	andwf	(i1___ftpack@arg+2)& (0+255),w,b
 26279  0044D6  0100               	movlb	0	; () banked
 26280  0044D8  6F67               	movwf	(??i1___ftpack+2)& (0+255),b
 26281  0044DA  0100               	movlb	0	; () banked
 26282  0044DC  5165               	movf	??i1___ftpack& (0+255),w,b
 26283  0044DE  0100               	movlb	0	; () banked
 26284  0044E0  1166               	iorwf	(??i1___ftpack+1)& (0+255),w,b
 26285  0044E2  0100               	movlb	0	; () banked
 26286  0044E4  1167               	iorwf	(??i1___ftpack+2)& (0+255),w,b
 26287  0044E6  B4D8               	btfsc	status,2,c
 26288  0044E8  D011               	goto	i1l9255
 26289  0044EA  D7E1               	goto	i1l9247
 26290  0044EC                     i1l9251:
 26291                           
 26292                           ; BSR set to: 0
 26293  0044EC  0100               	movlb	0	; () banked
 26294  0044EE  2B63               	incf	i1___ftpack@exp& (0+255),f,b
 26295                           
 26296                           ; BSR set to: 0
 26297  0044F0  0E01               	movlw	1
 26298  0044F2  0100               	movlb	0	; () banked
 26299  0044F4  2760               	addwf	i1___ftpack@arg& (0+255),f,b
 26300  0044F6  0E00               	movlw	0
 26301  0044F8  0100               	movlb	0	; () banked
 26302  0044FA  2361               	addwfc	(i1___ftpack@arg+1)& (0+255),f,b
 26303  0044FC  0E00               	movlw	0
 26304  0044FE  0100               	movlb	0	; () banked
 26305  004500  2362               	addwfc	(i1___ftpack@arg+2)& (0+255),f,b
 26306  004502  0100               	movlb	0	; () banked
 26307  004504  90D8               	bcf	status,0,c
 26308  004506  3362               	rrcf	(i1___ftpack@arg+2)& (0+255),f,b
 26309  004508  3361               	rrcf	(i1___ftpack@arg+1)& (0+255),f,b
 26310  00450A  3360               	rrcf	i1___ftpack@arg& (0+255),f,b
 26311  00450C                     i1l9255:
 26312                           
 26313                           ; BSR set to: 0
 26314  00450C  0E00               	movlw	0
 26315  00450E  0100               	movlb	0	; () banked
 26316  004510  1560               	andwf	i1___ftpack@arg& (0+255),w,b
 26317  004512  0100               	movlb	0	; () banked
 26318  004514  6F65               	movwf	??i1___ftpack& (0+255),b
 26319  004516  0E00               	movlw	0
 26320  004518  0100               	movlb	0	; () banked
 26321  00451A  1561               	andwf	(i1___ftpack@arg+1)& (0+255),w,b
 26322  00451C  0100               	movlb	0	; () banked
 26323  00451E  6F66               	movwf	(??i1___ftpack+1)& (0+255),b
 26324  004520  0EFF               	movlw	255
 26325  004522  0100               	movlb	0	; () banked
 26326  004524  1562               	andwf	(i1___ftpack@arg+2)& (0+255),w,b
 26327  004526  0100               	movlb	0	; () banked
 26328  004528  6F67               	movwf	(??i1___ftpack+2)& (0+255),b
 26329  00452A  0100               	movlb	0	; () banked
 26330  00452C  5165               	movf	??i1___ftpack& (0+255),w,b
 26331  00452E  0100               	movlb	0	; () banked
 26332  004530  1166               	iorwf	(??i1___ftpack+1)& (0+255),w,b
 26333  004532  0100               	movlb	0	; () banked
 26334  004534  1167               	iorwf	(??i1___ftpack+2)& (0+255),w,b
 26335  004536  B4D8               	btfsc	status,2,c
 26336  004538  D008               	goto	i1l9259
 26337  00453A  D7D8               	goto	i1l9251
 26338  00453C                     i1l9257:
 26339                           
 26340                           ; BSR set to: 0
 26341  00453C  0100               	movlb	0	; () banked
 26342  00453E  0763               	decf	i1___ftpack@exp& (0+255),f,b
 26343  004540  0100               	movlb	0	; () banked
 26344  004542  90D8               	bcf	status,0,c
 26345  004544  3760               	rlcf	i1___ftpack@arg& (0+255),f,b
 26346  004546  3761               	rlcf	(i1___ftpack@arg+1)& (0+255),f,b
 26347  004548  3762               	rlcf	(i1___ftpack@arg+2)& (0+255),f,b
 26348  00454A                     i1l9259:
 26349                           
 26350                           ; BSR set to: 0
 26351  00454A  0100               	movlb	0	; () banked
 26352  00454C  BF61               	btfsc	(i1___ftpack@arg+1)& (0+255),7,b
 26353  00454E  D004               	goto	i1l1264
 26354                           
 26355                           ; BSR set to: 0
 26356  004550  0E02               	movlw	2
 26357  004552  0100               	movlb	0	; () banked
 26358  004554  6163               	cpfslt	i1___ftpack@exp& (0+255),b
 26359  004556  D7F2               	goto	i1l9257
 26360  004558                     i1l1264:
 26361                           
 26362                           ; BSR set to: 0
 26363  004558  0100               	movlb	0	; () banked
 26364  00455A  B163               	btfsc	i1___ftpack@exp& (0+255),0,b
 26365  00455C  D002               	goto	i1l9265
 26366                           
 26367                           ; BSR set to: 0
 26368  00455E  0100               	movlb	0	; () banked
 26369  004560  9F61               	bcf	(i1___ftpack@arg+1)& (0+255),7,b
 26370  004562                     i1l9265:
 26371                           
 26372                           ; BSR set to: 0
 26373  004562  0100               	movlb	0	; () banked
 26374  004564  90D8               	bcf	status,0,c
 26375  004566  3363               	rrcf	i1___ftpack@exp& (0+255),f,b
 26376  004568  0100               	movlb	0	; () banked
 26377  00456A  5163               	movf	i1___ftpack@exp& (0+255),w,b
 26378  00456C  0100               	movlb	0	; () banked
 26379  00456E  1362               	iorwf	(i1___ftpack@arg+2)& (0+255),f,b
 26380                           
 26381                           ; BSR set to: 0
 26382  004570  0100               	movlb	0	; () banked
 26383  004572  5164               	movf	i1___ftpack@sign& (0+255),w,b
 26384  004574  0100               	movlb	0	; () banked
 26385  004576  B4D8               	btfsc	status,2,c
 26386  004578  D002               	goto	i1l9271
 26387                           
 26388                           ; BSR set to: 0
 26389  00457A  0100               	movlb	0	; () banked
 26390  00457C  8F62               	bsf	(i1___ftpack@arg+2)& (0+255),7,b
 26391  00457E                     i1l9271:
 26392                           
 26393                           ; BSR set to: 0
 26394  00457E  C060  F060         	movff	i1___ftpack@arg,?i1___ftpack
 26395  004582  C061  F061         	movff	i1___ftpack@arg+1,?i1___ftpack+1
 26396  004586  C062  F062         	movff	i1___ftpack@arg+2,?i1___ftpack+2
 26397  00458A  0012               	return	
 26398  00458C                     __end_ofi1___ftpack:
 26399                           	opt stack 0
 26400                           pclatu	equ	0xFFB
 26401                           pclath	equ	0xFFA
 26402                           tblptru	equ	0xFF8
 26403                           tblptrh	equ	0xFF7
 26404                           tblptrl	equ	0xFF6
 26405                           tablat	equ	0xFF5
 26406                           prodh	equ	0xFF4
 26407                           prodl	equ	0xFF3
 26408                           intcon	equ	0xFF2
 26409                           postinc0	equ	0xFEE
 26410                           fsr0h	equ	0xFEA
 26411                           fsr0l	equ	0xFE9
 26412                           wreg	equ	0xFE8
 26413                           postdec1	equ	0xFE5
 26414                           fsr1h	equ	0xFE2
 26415                           fsr1l	equ	0xFE1
 26416                           bsr	equ	0xFE0
 26417                           indf2	equ	0xFDF
 26418                           postinc2	equ	0xFDE
 26419                           postdec2	equ	0xFDD
 26420                           plusw2	equ	0xFDB
 26421                           fsr2h	equ	0xFDA
 26422                           fsr2l	equ	0xFD9
 26423                           status	equ	0xFD8
 26424                           
 26425 ;; *************** function _T2int *****************
 26426 ;; Defined at:
 26427 ;;		line 45 in file "source/PWMConfig.h"
 26428 ;; Parameters:    Size  Location     Type
 26429 ;;		None
 26430 ;; Auto vars:     Size  Location     Type
 26431 ;;		None
 26432 ;; Return value:  Size  Location     Type
 26433 ;;                  1    wreg      void 
 26434 ;; Registers used:
 26435 ;;		wreg, status,2, status,0, cstack
 26436 ;; Tracked objects:
 26437 ;;		On entry : 0/0
 26438 ;;		On exit  : 0/0
 26439 ;;		Unchanged: 0/0
 26440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26441 ;;      Params:         0       0       0       0       0       0       0
 26442 ;;      Locals:         0       0       0       0       0       0       0
 26443 ;;      Temps:          0       1       0       0       0       0       0
 26444 ;;      Totals:         0       1       0       0       0       0       0
 26445 ;;Total ram usage:        1 bytes
 26446 ;; Hardware stack levels used:    1
 26447 ;; Hardware stack levels required when called:    6
 26448 ;; This function calls:
 26449 ;;		_saveProcessState
 26450 ;;		i1_delay_ms
 26451 ;;		i1_setPWM2duty
 26452 ;; This function is called by:
 26453 ;;		_isr
 26454 ;; This function uses a non-reentrant model
 26455 ;;
 26456                           
 26457                           	psect	text111
 26458  0030CA                     __ptext111:
 26459                           	opt stack 0
 26460  0030CA                     _T2int:
 26461                           	opt stack 13
 26462                           
 26463                           ;PWMConfig.h: 46: if(PORTAbits.RA7 && !lastSttFC1) {
 26464                           
 26465                           ; BSR set to: 0
 26466                           ;incstack = 0
 26467  0030CA  AE80               	btfss	3968,7,c	;volatile
 26468  0030CC  D038               	goto	i1l482
 26469  0030CE  503F               	movf	_lastSttFC1,w,c
 26470  0030D0  A4D8               	btfss	status,2,c
 26471  0030D2  D035               	goto	i1l482
 26472                           
 26473                           ;PWMConfig.h: 47: lastSttFC1 = 0;
 26474  0030D4  0E00               	movlw	0
 26475  0030D6  6E3F               	movwf	_lastSttFC1,c
 26476                           
 26477                           ;PWMConfig.h: 48: setPWM2duty(0);
 26478  0030D8  0E00               	movlw	0
 26479  0030DA  0100               	movlb	0	; () banked
 26480  0030DC  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 26481  0030DE  0E00               	movlw	0
 26482  0030E0  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 26483  0030E2  ECC7  F02D         	call	i1_setPWM2duty	;wreg free
 26484                           
 26485                           ;PWMConfig.h: 49: bladeIsUP = 1;
 26486  0030E6  0E01               	movlw	1
 26487  0030E8  6E50               	movwf	_bladeIsUP,c
 26488                           
 26489                           ;PWMConfig.h: 50: processTimer = 0;
 26490  0030EA  0E00               	movlw	0
 26491  0030EC  6E2B               	movwf	_processTimer,c
 26492  0030EE  0E00               	movlw	0
 26493  0030F0  6E2C               	movwf	_processTimer+1,c
 26494  0030F2  0E00               	movlw	0
 26495  0030F4  6E2D               	movwf	_processTimer+2,c
 26496  0030F6  0E00               	movlw	0
 26497  0030F8  6E2E               	movwf	_processTimer+3,c
 26498                           
 26499                           ;PWMConfig.h: 51: if(processState >= numCortes) {
 26500  0030FA  0100               	movlb	0	; () banked
 26501  0030FC  51B8               	movf	_numCortes& (0+255),w,b
 26502  0030FE  5C35               	subwf	_processState,w,c
 26503  003100  5036               	movf	_processState+1,w,c
 26504  003102  0A80               	xorlw	128
 26505  003104  0100               	movlb	0	; () banked
 26506  003106  6F66               	movwf	??_T2int& (0+255),b
 26507  003108  0100               	movlb	0	; () banked
 26508  00310A  51B9               	movf	(_numCortes+1)& (0+255),w,b
 26509  00310C  0A80               	xorlw	128
 26510  00310E  0100               	movlb	0	; () banked
 26511  003110  5966               	subwfb	??_T2int& (0+255),w,b
 26512  003112  A0D8               	btfss	status,0,c
 26513  003114  D00C               	goto	i1l12123
 26514                           
 26515                           ; BSR set to: 0
 26516                           ;PWMConfig.h: 52: ProcessStarted = 0;
 26517  003116  0E00               	movlw	0
 26518  003118  6E3A               	movwf	_ProcessStarted,c
 26519                           
 26520                           ; BSR set to: 0
 26521                           ;PWMConfig.h: 53: saveProcessState();
 26522  00311A  EC83  F034         	call	_saveProcessState	;wreg free
 26523                           
 26524                           ;PWMConfig.h: 54: if(actualScreen == 6)
 26525  00311E  0E06               	movlw	6
 26526  003120  0101               	movlb	1	; () banked
 26527  003122  19BA               	xorwf	_actualScreen& (0+255),w,b
 26528  003124  A4D8               	btfss	status,2,c
 26529  003126  D003               	goto	i1l12123
 26530                           
 26531                           ; BSR set to: 1
 26532                           ;PWMConfig.h: 55: actualScreen = 12;
 26533  003128  0E0C               	movlw	12
 26534  00312A  0101               	movlb	1	; () banked
 26535  00312C  6FBA               	movwf	_actualScreen& (0+255),b
 26536  00312E                     i1l12123:
 26537                           
 26538                           ;PWMConfig.h: 56: }
 26539                           ;PWMConfig.h: 57: delay_ms(200);
 26540  00312E  0E00               	movlw	0
 26541  003130  0100               	movlb	0	; () banked
 26542  003132  6F61               	movwf	(i1delay_ms@del+1)& (0+255),b
 26543  003134  0EC8               	movlw	200
 26544  003136  6F60               	movwf	i1delay_ms@del& (0+255),b
 26545  003138  EC3F  F034         	call	i1_delay_ms	;wreg free
 26546                           
 26547                           ;PWMConfig.h: 58: }else if(!PORTAbits.RA7 && lastSttFC1) {
 26548  00313C  D02F               	goto	i1l12151
 26549  00313E                     i1l482:
 26550  00313E  BE80               	btfsc	3968,7,c	;volatile
 26551  003140  D00D               	goto	i1l12131
 26552  003142  503F               	movf	_lastSttFC1,w,c
 26553  003144  B4D8               	btfsc	status,2,c
 26554  003146  D00A               	goto	i1l12131
 26555                           
 26556                           ;PWMConfig.h: 59: lastSttFC1 = 1;
 26557  003148  0E01               	movlw	1
 26558  00314A  6E3F               	movwf	_lastSttFC1,c
 26559                           
 26560                           ;PWMConfig.h: 63: delay_ms(50);
 26561  00314C  0E00               	movlw	0
 26562  00314E  0100               	movlb	0	; () banked
 26563  003150  6F61               	movwf	(i1delay_ms@del+1)& (0+255),b
 26564  003152  0E32               	movlw	50
 26565  003154  6F60               	movwf	i1delay_ms@del& (0+255),b
 26566  003156  EC3F  F034         	call	i1_delay_ms	;wreg free
 26567                           
 26568                           ;PWMConfig.h: 64: }else if(PORTAbits.RA7 == lastSttFC1) {
 26569  00315A  D020               	goto	i1l12151
 26570  00315C                     i1l12131:
 26571  00315C  AE80               	btfss	3968,7,c	;volatile
 26572  00315E  D002               	goto	i1u1805_20
 26573  003160  0E01               	movlw	1
 26574  003162  D001               	goto	i1u1805_26
 26575  003164                     i1u1805_20:
 26576  003164  0E00               	movlw	0
 26577  003166                     i1u1805_26:
 26578  003166  183F               	xorwf	_lastSttFC1,w,c
 26579  003168  A4D8               	btfss	status,2,c
 26580  00316A  D018               	goto	i1l12151
 26581                           
 26582                           ;PWMConfig.h: 65: if(!PORTAbits.RA7) {
 26583  00316C  BE80               	btfsc	3968,7,c	;volatile
 26584  00316E  D003               	goto	i1l12137
 26585                           
 26586                           ;PWMConfig.h: 66: holdFC1cont = 0;
 26587  003170  0E00               	movlw	0
 26588  003172  6E3D               	movwf	_holdFC1cont,c
 26589                           
 26590                           ;PWMConfig.h: 68: }else {
 26591  003174  D013               	goto	i1l12151
 26592  003176                     i1l12137:
 26593                           
 26594                           ;PWMConfig.h: 69: if(!FC1securLock)
 26595  003176  5038               	movf	_FC1securLock,w,c
 26596  003178  B4D8               	btfsc	status,2,c
 26597                           
 26598                           ;PWMConfig.h: 70: holdFC1cont++;
 26599  00317A  2A3D               	incf	_holdFC1cont,f,c
 26600                           
 26601                           ;PWMConfig.h: 71: if(holdFC1cont > 9) {
 26602  00317C  0E09               	movlw	9
 26603  00317E  643D               	cpfsgt	_holdFC1cont,c
 26604  003180  D006               	goto	i1l12149
 26605                           
 26606                           ;PWMConfig.h: 72: if(holdFC1cont < 26) {
 26607  003182  0E1A               	movlw	26
 26608  003184  603D               	cpfslt	_holdFC1cont,c
 26609  003186  D001               	goto	i1l12147
 26610  003188  D002               	goto	i1l12149
 26611  00318A                     i1l12147:
 26612                           
 26613                           ;PWMConfig.h: 75: FC1securLock = 1;
 26614  00318A  0E01               	movlw	1
 26615  00318C  6E38               	movwf	_FC1securLock,c
 26616  00318E                     i1l12149:
 26617                           
 26618                           ;PWMConfig.h: 76: }
 26619                           ;PWMConfig.h: 77: delay_ms(200);
 26620  00318E  0E00               	movlw	0
 26621  003190  0100               	movlb	0	; () banked
 26622  003192  6F61               	movwf	(i1delay_ms@del+1)& (0+255),b
 26623  003194  0EC8               	movlw	200
 26624  003196  6F60               	movwf	i1delay_ms@del& (0+255),b
 26625  003198  EC3F  F034         	call	i1_delay_ms	;wreg free
 26626  00319C                     i1l12151:
 26627                           
 26628                           ;PWMConfig.h: 78: }
 26629                           ;PWMConfig.h: 79: }
 26630                           ;PWMConfig.h: 80: if(PORTAbits.RA6 && !lastSttFC2) {
 26631  00319C  AC80               	btfss	3968,6,c	;volatile
 26632  00319E  D030               	goto	i1l495
 26633  0031A0  5040               	movf	_lastSttFC2,w,c
 26634  0031A2  A4D8               	btfss	status,2,c
 26635  0031A4  D02D               	goto	i1l495
 26636                           
 26637                           ;PWMConfig.h: 81: lastSttFC2 = 0;
 26638  0031A6  0E00               	movlw	0
 26639  0031A8  6E40               	movwf	_lastSttFC2,c
 26640                           
 26641                           ;PWMConfig.h: 82: setPWM2duty(0);
 26642  0031AA  0E00               	movlw	0
 26643  0031AC  0100               	movlb	0	; () banked
 26644  0031AE  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 26645  0031B0  0E00               	movlw	0
 26646  0031B2  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 26647  0031B4  ECC7  F02D         	call	i1_setPWM2duty	;wreg free
 26648                           
 26649                           ;PWMConfig.h: 83: bladeIsUP = 0;
 26650  0031B8  0E00               	movlw	0
 26651  0031BA  6E50               	movwf	_bladeIsUP,c
 26652                           
 26653                           ;PWMConfig.h: 84: processTimer = 0;
 26654  0031BC  0E00               	movlw	0
 26655  0031BE  6E2B               	movwf	_processTimer,c
 26656  0031C0  0E00               	movlw	0
 26657  0031C2  6E2C               	movwf	_processTimer+1,c
 26658  0031C4  0E00               	movlw	0
 26659  0031C6  6E2D               	movwf	_processTimer+2,c
 26660  0031C8  0E00               	movlw	0
 26661  0031CA  6E2E               	movwf	_processTimer+3,c
 26662                           
 26663                           ;PWMConfig.h: 85: processState++;
 26664  0031CC  4A35               	infsnz	_processState,f,c
 26665  0031CE  2A36               	incf	_processState+1,f,c
 26666                           
 26667                           ;PWMConfig.h: 86: saveProcessState();
 26668  0031D0  EC83  F034         	call	_saveProcessState	;wreg free
 26669                           
 26670                           ;PWMConfig.h: 87: if(processState >= numCortes)
 26671  0031D4  0100               	movlb	0	; () banked
 26672  0031D6  51B8               	movf	_numCortes& (0+255),w,b
 26673  0031D8  5C35               	subwf	_processState,w,c
 26674  0031DA  5036               	movf	_processState+1,w,c
 26675  0031DC  0A80               	xorlw	128
 26676  0031DE  0100               	movlb	0	; () banked
 26677  0031E0  6F66               	movwf	??_T2int& (0+255),b
 26678  0031E2  0100               	movlb	0	; () banked
 26679  0031E4  51B9               	movf	(_numCortes+1)& (0+255),w,b
 26680  0031E6  0A80               	xorlw	128
 26681  0031E8  0100               	movlb	0	; () banked
 26682  0031EA  5966               	subwfb	??_T2int& (0+255),w,b
 26683  0031EC  B0D8               	btfsc	status,0,c
 26684                           
 26685                           ; BSR set to: 0
 26686                           ;PWMConfig.h: 88: LATCbits.LATC4 = 0;
 26687  0031EE  988B               	bcf	3979,4,c	;volatile
 26688                           
 26689                           ; BSR set to: 0
 26690                           ;PWMConfig.h: 89: delay_ms(200);
 26691                           
 26692                           ; BSR set to: 0
 26693  0031F0  0E00               	movlw	0
 26694  0031F2  0100               	movlb	0	; () banked
 26695  0031F4  6F61               	movwf	(i1delay_ms@del+1)& (0+255),b
 26696  0031F6  0EC8               	movlw	200
 26697  0031F8  6F60               	movwf	i1delay_ms@del& (0+255),b
 26698  0031FA  EC3F  F034         	call	i1_delay_ms	;wreg free
 26699                           
 26700                           ;PWMConfig.h: 90: }else if(!PORTAbits.RA6 && lastSttFC2) {
 26701  0031FE  0012               	return	
 26702  003200                     i1l495:
 26703  003200  BC80               	btfsc	3968,6,c	;volatile
 26704  003202  D00D               	goto	i1l12179
 26705  003204  5040               	movf	_lastSttFC2,w,c
 26706  003206  B4D8               	btfsc	status,2,c
 26707  003208  D00A               	goto	i1l12179
 26708                           
 26709                           ;PWMConfig.h: 91: lastSttFC2 = 1;
 26710  00320A  0E01               	movlw	1
 26711  00320C  6E40               	movwf	_lastSttFC2,c
 26712                           
 26713                           ;PWMConfig.h: 95: delay_ms(50);
 26714  00320E  0E00               	movlw	0
 26715  003210  0100               	movlb	0	; () banked
 26716  003212  6F61               	movwf	(i1delay_ms@del+1)& (0+255),b
 26717  003214  0E32               	movlw	50
 26718  003216  6F60               	movwf	i1delay_ms@del& (0+255),b
 26719  003218  EC3F  F034         	call	i1_delay_ms	;wreg free
 26720                           
 26721                           ;PWMConfig.h: 96: }else if(PORTAbits.RA6 == lastSttFC2) {
 26722  00321C  0012               	return	
 26723  00321E                     i1l12179:
 26724  00321E  AC80               	btfss	3968,6,c	;volatile
 26725  003220  D002               	goto	i1u1816_20
 26726  003222  0E01               	movlw	1
 26727  003224  D001               	goto	i1u1816_26
 26728  003226                     i1u1816_20:
 26729  003226  0E00               	movlw	0
 26730  003228                     i1u1816_26:
 26731  003228  1840               	xorwf	_lastSttFC2,w,c
 26732  00322A  A4D8               	btfss	status,2,c
 26733  00322C  0012               	return	
 26734                           
 26735                           ;PWMConfig.h: 97: if(!PORTAbits.RA6) {
 26736  00322E  BC80               	btfsc	3968,6,c	;volatile
 26737  003230  D003               	goto	i1l12185
 26738                           
 26739                           ;PWMConfig.h: 98: holdFC2cont = 0;
 26740  003232  0E00               	movlw	0
 26741  003234  6E3E               	movwf	_holdFC2cont,c
 26742                           
 26743                           ;PWMConfig.h: 100: }else {
 26744  003236  0012               	return	
 26745  003238                     i1l12185:
 26746                           
 26747                           ;PWMConfig.h: 101: if(!FC2securLock)
 26748  003238  5039               	movf	_FC2securLock,w,c
 26749  00323A  B4D8               	btfsc	status,2,c
 26750                           
 26751                           ;PWMConfig.h: 102: holdFC2cont++;
 26752  00323C  2A3E               	incf	_holdFC2cont,f,c
 26753                           
 26754                           ;PWMConfig.h: 103: if(holdFC2cont > 9) {
 26755  00323E  0E09               	movlw	9
 26756  003240  643E               	cpfsgt	_holdFC2cont,c
 26757  003242  D006               	goto	i1l12197
 26758                           
 26759                           ;PWMConfig.h: 104: if(holdFC2cont < 26) {
 26760  003244  0E1A               	movlw	26
 26761  003246  603E               	cpfslt	_holdFC2cont,c
 26762  003248  D001               	goto	i1l12195
 26763  00324A  D002               	goto	i1l12197
 26764  00324C                     i1l12195:
 26765                           
 26766                           ;PWMConfig.h: 107: FC2securLock = 1;
 26767  00324C  0E01               	movlw	1
 26768  00324E  6E39               	movwf	_FC2securLock,c
 26769  003250                     i1l12197:
 26770                           
 26771                           ;PWMConfig.h: 108: }
 26772                           ;PWMConfig.h: 109: delay_ms(200);
 26773  003250  0E00               	movlw	0
 26774  003252  0100               	movlb	0	; () banked
 26775  003254  6F61               	movwf	(i1delay_ms@del+1)& (0+255),b
 26776  003256  0EC8               	movlw	200
 26777  003258  6F60               	movwf	i1delay_ms@del& (0+255),b
 26778  00325A  EC3F  F034         	call	i1_delay_ms	;wreg free
 26779  00325E  0012               	return	
 26780  003260                     __end_of_T2int:
 26781                           	opt stack 0
 26782                           pclatu	equ	0xFFB
 26783                           pclath	equ	0xFFA
 26784                           tblptru	equ	0xFF8
 26785                           tblptrh	equ	0xFF7
 26786                           tblptrl	equ	0xFF6
 26787                           tablat	equ	0xFF5
 26788                           prodh	equ	0xFF4
 26789                           prodl	equ	0xFF3
 26790                           intcon	equ	0xFF2
 26791                           postinc0	equ	0xFEE
 26792                           fsr0h	equ	0xFEA
 26793                           fsr0l	equ	0xFE9
 26794                           wreg	equ	0xFE8
 26795                           postdec1	equ	0xFE5
 26796                           fsr1h	equ	0xFE2
 26797                           fsr1l	equ	0xFE1
 26798                           bsr	equ	0xFE0
 26799                           indf2	equ	0xFDF
 26800                           postinc2	equ	0xFDE
 26801                           postdec2	equ	0xFDD
 26802                           plusw2	equ	0xFDB
 26803                           fsr2h	equ	0xFDA
 26804                           fsr2l	equ	0xFD9
 26805                           status	equ	0xFD8
 26806                           
 26807 ;; *************** function i1_setPWM2duty *****************
 26808 ;; Defined at:
 26809 ;;		line 33 in file "source/PWMConfig.h"
 26810 ;; Parameters:    Size  Location     Type
 26811 ;;  actuator        2    0[BANK0 ] short 
 26812 ;; Auto vars:     Size  Location     Type
 26813 ;;  setPWM2duty     2    4[BANK0 ] short 
 26814 ;; Return value:  Size  Location     Type
 26815 ;;                  1    wreg      void 
 26816 ;; Registers used:
 26817 ;;		wreg, status,2, status,0
 26818 ;; Tracked objects:
 26819 ;;		On entry : 0/0
 26820 ;;		On exit  : 0/0
 26821 ;;		Unchanged: 0/0
 26822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26823 ;;      Params:         0       2       0       0       0       0       0
 26824 ;;      Locals:         0       2       0       0       0       0       0
 26825 ;;      Temps:          0       2       0       0       0       0       0
 26826 ;;      Totals:         0       6       0       0       0       0       0
 26827 ;;Total ram usage:        6 bytes
 26828 ;; Hardware stack levels used:    1
 26829 ;; Hardware stack levels required when called:    4
 26830 ;; This function calls:
 26831 ;;		Nothing
 26832 ;; This function is called by:
 26833 ;;		_T2int
 26834 ;;		i1_pressENTER
 26835 ;;		i1_longPressENTER
 26836 ;; This function uses a non-reentrant model
 26837 ;;
 26838                           
 26839                           	psect	text112
 26840  005B8E                     __ptext112:
 26841                           	opt stack 0
 26842  005B8E                     i1_setPWM2duty:
 26843                           	opt stack 13
 26844                           
 26845                           ;PWMConfig.h: 34: short act = 400;
 26846                           
 26847                           ;incstack = 0
 26848  005B8E  0E01               	movlw	1
 26849  005B90  0100               	movlb	0	; () banked
 26850  005B92  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 26851  005B94  0E90               	movlw	144
 26852  005B96  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 26853                           
 26854                           ; BSR set to: 0
 26855                           ;PWMConfig.h: 35: if(actuator > 400)
 26856  005B98  0100               	movlb	0	; () banked
 26857  005B9A  BF61               	btfsc	(i1setPWM2duty@actuator+1)& (0+255),7,b
 26858  005B9C  D00D               	goto	i1l10693
 26859  005B9E  0E91               	movlw	145
 26860  005BA0  0100               	movlb	0	; () banked
 26861  005BA2  5D60               	subwf	i1setPWM2duty@actuator& (0+255),w,b
 26862  005BA4  0E01               	movlw	1
 26863  005BA6  0100               	movlb	0	; () banked
 26864  005BA8  5961               	subwfb	(i1setPWM2duty@actuator+1)& (0+255),w,b
 26865  005BAA  A0D8               	btfss	status,0,c
 26866  005BAC  D005               	goto	i1l10693
 26867                           
 26868                           ; BSR set to: 0
 26869                           ;PWMConfig.h: 36: act = 800;
 26870  005BAE  0E03               	movlw	3
 26871  005BB0  0100               	movlb	0	; () banked
 26872  005BB2  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 26873  005BB4  0E20               	movlw	32
 26874  005BB6  D00F               	goto	L9
 26875  005BB8                     i1l10693:
 26876                           
 26877                           ; BSR set to: 0
 26878                           ;PWMConfig.h: 37: else if(actuator < -400)
 26879  005BB8  0100               	movlb	0	; () banked
 26880  005BBA  AF61               	btfss	(i1setPWM2duty@actuator+1)& (0+255),7,b
 26881  005BBC  D00E               	goto	i1l10697
 26882  005BBE  0E70               	movlw	112
 26883  005BC0  0100               	movlb	0	; () banked
 26884  005BC2  5D60               	subwf	i1setPWM2duty@actuator& (0+255),w,b
 26885  005BC4  0EFE               	movlw	254
 26886  005BC6  0100               	movlb	0	; () banked
 26887  005BC8  5961               	subwfb	(i1setPWM2duty@actuator+1)& (0+255),w,b
 26888  005BCA  B0D8               	btfsc	status,0,c
 26889  005BCC  D006               	goto	i1l10697
 26890                           
 26891                           ; BSR set to: 0
 26892                           ;PWMConfig.h: 38: act = 0;
 26893  005BCE  0E00               	movlw	0
 26894  005BD0  0100               	movlb	0	; () banked
 26895  005BD2  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 26896  005BD4  0E00               	movlw	0
 26897  005BD6                     L9:
 26898  005BD6  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 26899  005BD8  D00A               	goto	i1l476
 26900  005BDA                     i1l10697:
 26901                           
 26902                           ; BSR set to: 0
 26903                           ;PWMConfig.h: 39: else
 26904                           ;PWMConfig.h: 40: act = actuator + 400;
 26905  005BDA  0E90               	movlw	144
 26906  005BDC  0100               	movlb	0	; () banked
 26907  005BDE  2560               	addwf	i1setPWM2duty@actuator& (0+255),w,b
 26908  005BE0  0100               	movlb	0	; () banked
 26909  005BE2  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 26910  005BE4  0E01               	movlw	1
 26911  005BE6  0100               	movlb	0	; () banked
 26912  005BE8  2161               	addwfc	(i1setPWM2duty@actuator+1)& (0+255),w,b
 26913  005BEA  0100               	movlb	0	; () banked
 26914  005BEC  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 26915  005BEE                     i1l476:
 26916                           
 26917                           ; BSR set to: 0
 26918                           ;PWMConfig.h: 41: CCP2CONbits.DC2B = act;
 26919  005BEE  C064  F062         	movff	i1setPWM2duty@act,??i1_setPWM2duty
 26920  005BF2  0100               	movlb	0	; () banked
 26921  005BF4  3B62               	swapf	??i1_setPWM2duty& (0+255),f,b
 26922  005BF6  5066               	movf	3942,w,c	;volatile
 26923  005BF8  0100               	movlb	0	; () banked
 26924  005BFA  1962               	xorwf	??i1_setPWM2duty& (0+255),w,b
 26925  005BFC  0BCF               	andlw	-49
 26926  005BFE  1962               	xorwf	??i1_setPWM2duty& (0+255),w,b
 26927  005C00  6E66               	movwf	3942,c	;volatile
 26928                           
 26929                           ;PWMConfig.h: 42: CCPR2L = act>>2;
 26930  005C02  C064  F062         	movff	i1setPWM2duty@act,??i1_setPWM2duty
 26931  005C06  C065  F063         	movff	i1setPWM2duty@act+1,??i1_setPWM2duty+1
 26932  005C0A  0100               	movlb	0	; () banked
 26933  005C0C  3563               	rlcf	(??i1_setPWM2duty+1)& (0+255),w,b
 26934  005C0E  3363               	rrcf	(??i1_setPWM2duty+1)& (0+255),f,b
 26935  005C10  3362               	rrcf	??i1_setPWM2duty& (0+255),f,b
 26936  005C12  0100               	movlb	0	; () banked
 26937  005C14  3563               	rlcf	(??i1_setPWM2duty+1)& (0+255),w,b
 26938  005C16  3363               	rrcf	(??i1_setPWM2duty+1)& (0+255),f,b
 26939  005C18  3362               	rrcf	??i1_setPWM2duty& (0+255),f,b
 26940  005C1A  0100               	movlb	0	; () banked
 26941  005C1C  5162               	movf	??i1_setPWM2duty& (0+255),w,b
 26942  005C1E  6E67               	movwf	3943,c	;volatile
 26943                           
 26944                           ; BSR set to: 0
 26945  005C20  0012               	return		;funcret
 26946  005C22                     __end_ofi1_setPWM2duty:
 26947                           	opt stack 0
 26948                           pclatu	equ	0xFFB
 26949                           pclath	equ	0xFFA
 26950                           tblptru	equ	0xFF8
 26951                           tblptrh	equ	0xFF7
 26952                           tblptrl	equ	0xFF6
 26953                           tablat	equ	0xFF5
 26954                           prodh	equ	0xFF4
 26955                           prodl	equ	0xFF3
 26956                           intcon	equ	0xFF2
 26957                           postinc0	equ	0xFEE
 26958                           fsr0h	equ	0xFEA
 26959                           fsr0l	equ	0xFE9
 26960                           wreg	equ	0xFE8
 26961                           postdec1	equ	0xFE5
 26962                           fsr1h	equ	0xFE2
 26963                           fsr1l	equ	0xFE1
 26964                           bsr	equ	0xFE0
 26965                           indf2	equ	0xFDF
 26966                           postinc2	equ	0xFDE
 26967                           postdec2	equ	0xFDD
 26968                           plusw2	equ	0xFDB
 26969                           fsr2h	equ	0xFDA
 26970                           fsr2l	equ	0xFD9
 26971                           status	equ	0xFD8
 26972                           
 26973 ;; *************** function i1_delay_ms *****************
 26974 ;; Defined at:
 26975 ;;		line 13 in file "source/../../delay.h"
 26976 ;; Parameters:    Size  Location     Type
 26977 ;;  del             2    0[BANK0 ] int 
 26978 ;; Auto vars:     Size  Location     Type
 26979 ;;  delay_ms        2    3[BANK0 ] int 
 26980 ;; Return value:  Size  Location     Type
 26981 ;;                  1    wreg      void 
 26982 ;; Registers used:
 26983 ;;		wreg, status,2, status,0
 26984 ;; Tracked objects:
 26985 ;;		On entry : 0/0
 26986 ;;		On exit  : 0/0
 26987 ;;		Unchanged: 0/0
 26988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26989 ;;      Params:         0       2       0       0       0       0       0
 26990 ;;      Locals:         0       2       0       0       0       0       0
 26991 ;;      Temps:          0       1       0       0       0       0       0
 26992 ;;      Totals:         0       5       0       0       0       0       0
 26993 ;;Total ram usage:        5 bytes
 26994 ;; Hardware stack levels used:    1
 26995 ;; Hardware stack levels required when called:    4
 26996 ;; This function calls:
 26997 ;;		Nothing
 26998 ;; This function is called by:
 26999 ;;		_T2int
 27000 ;; This function uses a non-reentrant model
 27001 ;;
 27002                           
 27003                           	psect	text113
 27004  00687E                     __ptext113:
 27005                           	opt stack 0
 27006  00687E                     i1_delay_ms:
 27007                           	opt stack 14
 27008                           
 27009                           ;delay.h: 14: for(int i = 1;i <= del;i++)
 27010                           
 27011                           ; BSR set to: 0
 27012                           ;incstack = 0
 27013  00687E  0E00               	movlw	0
 27014  006880  0100               	movlb	0	; () banked
 27015  006882  6F64               	movwf	(i1delay_ms@i+1)& (0+255),b
 27016  006884  0E01               	movlw	1
 27017  006886  6F63               	movwf	i1delay_ms@i& (0+255),b
 27018  006888  D00C               	goto	i1l100
 27019  00688A                     i1l11563:
 27020                           
 27021                           ; BSR set to: 0
 27022                           ;delay.h: 15: _delay((unsigned long)((1)*(16000000/4000.0)));
 27023  00688A  0E06               	movlw	6
 27024  00688C  0100               	movlb	0	; () banked
 27025  00688E  6F62               	movwf	??i1_delay_ms& (0+255),b
 27026  006890  0E30               	movlw	48
 27027  006892                     i1u1897_27:
 27028  006892  2EE8               	decfsz	wreg,f,c
 27029  006894  D7FE               	goto	i1u1897_27
 27030  006896  2F62               	decfsz	??i1_delay_ms& (0+255),f,b
 27031  006898  D7FC               	goto	i1u1897_27
 27032  00689A  D000               	nop2	
 27033  00689C  0100               	movlb	0	; () banked
 27034  00689E  4B63               	infsnz	i1delay_ms@i& (0+255),f,b
 27035  0068A0  2B64               	incf	(i1delay_ms@i+1)& (0+255),f,b
 27036  0068A2                     i1l100:
 27037                           
 27038                           ; BSR set to: 0
 27039  0068A2  0100               	movlb	0	; () banked
 27040  0068A4  5163               	movf	i1delay_ms@i& (0+255),w,b
 27041  0068A6  0100               	movlb	0	; () banked
 27042  0068A8  5D60               	subwf	i1delay_ms@del& (0+255),w,b
 27043  0068AA  0100               	movlb	0	; () banked
 27044  0068AC  5161               	movf	(i1delay_ms@del+1)& (0+255),w,b
 27045  0068AE  0A80               	xorlw	128
 27046  0068B0  0100               	movlb	0	; () banked
 27047  0068B2  6F62               	movwf	??i1_delay_ms& (0+255),b
 27048  0068B4  0100               	movlb	0	; () banked
 27049  0068B6  5164               	movf	(i1delay_ms@i+1)& (0+255),w,b
 27050  0068B8  0A80               	xorlw	128
 27051  0068BA  0100               	movlb	0	; () banked
 27052  0068BC  5962               	subwfb	??i1_delay_ms& (0+255),w,b
 27053  0068BE  A0D8               	btfss	status,0,c
 27054  0068C0  0012               	return	
 27055  0068C2  D7E3               	goto	i1l11563
 27056  0068C4                     __end_ofi1_delay_ms:
 27057                           	opt stack 0
 27058                           pclatu	equ	0xFFB
 27059                           pclath	equ	0xFFA
 27060                           tblptru	equ	0xFF8
 27061                           tblptrh	equ	0xFF7
 27062                           tblptrl	equ	0xFF6
 27063                           tablat	equ	0xFF5
 27064                           prodh	equ	0xFF4
 27065                           prodl	equ	0xFF3
 27066                           intcon	equ	0xFF2
 27067                           postinc0	equ	0xFEE
 27068                           fsr0h	equ	0xFEA
 27069                           fsr0l	equ	0xFE9
 27070                           wreg	equ	0xFE8
 27071                           postdec1	equ	0xFE5
 27072                           fsr1h	equ	0xFE2
 27073                           fsr1l	equ	0xFE1
 27074                           bsr	equ	0xFE0
 27075                           indf2	equ	0xFDF
 27076                           postinc2	equ	0xFDE
 27077                           postdec2	equ	0xFDD
 27078                           plusw2	equ	0xFDB
 27079                           fsr2h	equ	0xFDA
 27080                           fsr2l	equ	0xFD9
 27081                           status	equ	0xFD8
 27082                           
 27083 ;; *************** function _saveProcessState *****************
 27084 ;; Defined at:
 27085 ;;		line 154 in file "source/sysParams.h"
 27086 ;; Parameters:    Size  Location     Type
 27087 ;;		None
 27088 ;; Auto vars:     Size  Location     Type
 27089 ;;		None
 27090 ;; Return value:  Size  Location     Type
 27091 ;;                  1    wreg      void 
 27092 ;; Registers used:
 27093 ;;		wreg, status,2, cstack
 27094 ;; Tracked objects:
 27095 ;;		On entry : 0/0
 27096 ;;		On exit  : 0/0
 27097 ;;		Unchanged: 0/0
 27098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27099 ;;      Params:         0       0       0       0       0       0       0
 27100 ;;      Locals:         0       0       0       0       0       0       0
 27101 ;;      Temps:          0       0       0       0       0       0       0
 27102 ;;      Totals:         0       0       0       0       0       0       0
 27103 ;;Total ram usage:        0 bytes
 27104 ;; Hardware stack levels used:    1
 27105 ;; Hardware stack levels required when called:    5
 27106 ;; This function calls:
 27107 ;;		i1_writeEEPROM
 27108 ;; This function is called by:
 27109 ;;		_T2int
 27110 ;; This function uses a non-reentrant model
 27111 ;;
 27112                           
 27113                           	psect	text114
 27114  006906                     __ptext114:
 27115                           	opt stack 0
 27116  006906                     _saveProcessState:
 27117                           	opt stack 13
 27118                           
 27119                           ;sysParams.h: 155: EECON1bits.WREN = 1;
 27120                           
 27121                           ; BSR set to: 0
 27122                           ;incstack = 0
 27123  006906  84A6               	bsf	4006,2,c	;volatile
 27124                           
 27125                           ;sysParams.h: 156: ie = INTCONbits.GIE;
 27126  006908  0E00               	movlw	0
 27127  00690A  BEF2               	btfsc	intcon,7,c	;volatile
 27128  00690C  0E01               	movlw	1
 27129  00690E  0100               	movlb	0	; () banked
 27130  006910  6FC9               	movwf	_ie& (0+255),b
 27131                           
 27132                           ; BSR set to: 0
 27133                           ;sysParams.h: 157: INTCONbits.GIE = 0;
 27134  006912  9EF2               	bcf	intcon,7,c	;volatile
 27135                           
 27136                           ; BSR set to: 0
 27137                           ;sysParams.h: 158: writeEEPROM(30, ProcessStarted);
 27138  006914  C03A  F060         	movff	_ProcessStarted,i1writeEEPROM@data
 27139  006918  0E1E               	movlw	30
 27140  00691A  ECC6  F035         	call	i1_writeEEPROM
 27141                           
 27142                           ;sysParams.h: 159: writeEEPROM(31, processState);
 27143  00691E  C035  F060         	movff	_processState,i1writeEEPROM@data
 27144  006922  0E1F               	movlw	31
 27145  006924  ECC6  F035         	call	i1_writeEEPROM
 27146                           
 27147                           ;sysParams.h: 160: writeEEPROM(32, bladeIsUP);
 27148  006928  C050  F060         	movff	_bladeIsUP,i1writeEEPROM@data
 27149  00692C  0E20               	movlw	32
 27150  00692E  ECC6  F035         	call	i1_writeEEPROM
 27151                           
 27152                           ;sysParams.h: 161: EECON1bits.WREN = 0;
 27153  006932  94A6               	bcf	4006,2,c	;volatile
 27154                           
 27155                           ;sysParams.h: 162: INTCONbits.GIE = ie;
 27156  006934  0100               	movlb	0	; () banked
 27157  006936  B1C9               	btfsc	_ie& (0+255),0,b
 27158  006938  D002               	bra	i1u1563_25
 27159  00693A  9EF2               	bcf	intcon,7,c	;volatile
 27160  00693C  D001               	bra	i1u1563_26
 27161  00693E                     i1u1563_25:
 27162  00693E  8EF2               	bsf	intcon,7,c	;volatile
 27163  006940                     i1u1563_26:
 27164  006940  0012               	return		;funcret
 27165  006942                     __end_of_saveProcessState:
 27166                           	opt stack 0
 27167                           pclatu	equ	0xFFB
 27168                           pclath	equ	0xFFA
 27169                           tblptru	equ	0xFF8
 27170                           tblptrh	equ	0xFF7
 27171                           tblptrl	equ	0xFF6
 27172                           tablat	equ	0xFF5
 27173                           prodh	equ	0xFF4
 27174                           prodl	equ	0xFF3
 27175                           intcon	equ	0xFF2
 27176                           postinc0	equ	0xFEE
 27177                           fsr0h	equ	0xFEA
 27178                           fsr0l	equ	0xFE9
 27179                           wreg	equ	0xFE8
 27180                           postdec1	equ	0xFE5
 27181                           fsr1h	equ	0xFE2
 27182                           fsr1l	equ	0xFE1
 27183                           bsr	equ	0xFE0
 27184                           indf2	equ	0xFDF
 27185                           postinc2	equ	0xFDE
 27186                           postdec2	equ	0xFDD
 27187                           plusw2	equ	0xFDB
 27188                           fsr2h	equ	0xFDA
 27189                           fsr2l	equ	0xFD9
 27190                           status	equ	0xFD8
 27191                           
 27192 ;; *************** function i1_writeEEPROM *****************
 27193 ;; Defined at:
 27194 ;;		line 50 in file "source/sysParams.h"
 27195 ;; Parameters:    Size  Location     Type
 27196 ;;  adr             1    wreg     unsigned char 
 27197 ;;  data            1    0[BANK0 ] unsigned char 
 27198 ;; Auto vars:     Size  Location     Type
 27199 ;;  adr             1    1[BANK0 ] unsigned char 
 27200 ;; Return value:  Size  Location     Type
 27201 ;;                  1    wreg      void 
 27202 ;; Registers used:
 27203 ;;		wreg, status,2
 27204 ;; Tracked objects:
 27205 ;;		On entry : 0/0
 27206 ;;		On exit  : 0/0
 27207 ;;		Unchanged: 0/0
 27208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27209 ;;      Params:         0       1       0       0       0       0       0
 27210 ;;      Locals:         0       1       0       0       0       0       0
 27211 ;;      Temps:          0       0       0       0       0       0       0
 27212 ;;      Totals:         0       2       0       0       0       0       0
 27213 ;;Total ram usage:        2 bytes
 27214 ;; Hardware stack levels used:    1
 27215 ;; Hardware stack levels required when called:    4
 27216 ;; This function calls:
 27217 ;;		Nothing
 27218 ;; This function is called by:
 27219 ;;		_saveProcessState
 27220 ;;		i1_saveSysParams
 27221 ;; This function uses a non-reentrant model
 27222 ;;
 27223                           
 27224                           	psect	text115
 27225  006B8C                     __ptext115:
 27226                           	opt stack 0
 27227  006B8C                     i1_writeEEPROM:
 27228                           	opt stack 13
 27229                           
 27230                           ;incstack = 0
 27231                           ;i1writeEEPROM@adr stored from wreg
 27232  006B8C  0100               	movlb	0	; () banked
 27233  006B8E  6F61               	movwf	i1writeEEPROM@adr& (0+255),b
 27234                           
 27235                           ;sysParams.h: 51: EEADR = adr;
 27236  006B90  C061  FFA9         	movff	i1writeEEPROM@adr,4009	;volatile
 27237                           
 27238                           ;sysParams.h: 52: EEDATA = data;
 27239  006B94  C060  FFA8         	movff	i1writeEEPROM@data,4008	;volatile
 27240                           
 27241                           ;sysParams.h: 53: EECON1bits.EEPGD = 0;
 27242  006B98  9EA6               	bcf	4006,7,c	;volatile
 27243                           
 27244                           ;sysParams.h: 54: EECON1bits.CFGS = 0;
 27245  006B9A  9CA6               	bcf	4006,6,c	;volatile
 27246                           
 27247                           ;sysParams.h: 55: EECON2 = 0x55;
 27248  006B9C  0E55               	movlw	85
 27249  006B9E  6EA7               	movwf	4007,c	;volatile
 27250                           
 27251                           ;sysParams.h: 56: EECON2 = 0xAA;
 27252  006BA0  0EAA               	movlw	170
 27253  006BA2  6EA7               	movwf	4007,c	;volatile
 27254                           
 27255                           ;sysParams.h: 57: EECON1bits.WR = 1;
 27256  006BA4  82A6               	bsf	4006,1,c	;volatile
 27257  006BA6                     i1l277:
 27258  006BA6  A2A6               	btfss	4006,1,c	;volatile
 27259  006BA8  0012               	return	
 27260  006BAA  D7FD               	goto	i1l277
 27261  006BAC                     __end_ofi1_writeEEPROM:
 27262                           	opt stack 0
 27263                           pclatu	equ	0xFFB
 27264                           pclath	equ	0xFFA
 27265                           tblptru	equ	0xFF8
 27266                           tblptrh	equ	0xFF7
 27267                           tblptrl	equ	0xFF6
 27268                           tablat	equ	0xFF5
 27269                           prodh	equ	0xFF4
 27270                           prodl	equ	0xFF3
 27271                           intcon	equ	0xFF2
 27272                           postinc0	equ	0xFEE
 27273                           fsr0h	equ	0xFEA
 27274                           fsr0l	equ	0xFE9
 27275                           wreg	equ	0xFE8
 27276                           postdec1	equ	0xFE5
 27277                           fsr1h	equ	0xFE2
 27278                           fsr1l	equ	0xFE1
 27279                           bsr	equ	0xFE0
 27280                           indf2	equ	0xFDF
 27281                           postinc2	equ	0xFDE
 27282                           postdec2	equ	0xFDD
 27283                           plusw2	equ	0xFDB
 27284                           fsr2h	equ	0xFDA
 27285                           fsr2l	equ	0xFD9
 27286                           status	equ	0xFD8
 27287                           
 27288 ;; *************** function _hp_isr *****************
 27289 ;; Defined at:
 27290 ;;		line 14 in file "source/main.c"
 27291 ;; Parameters:    Size  Location     Type
 27292 ;;		None
 27293 ;; Auto vars:     Size  Location     Type
 27294 ;;		None
 27295 ;; Return value:  Size  Location     Type
 27296 ;;                  1    wreg      void 
 27297 ;; Registers used:
 27298 ;;		wreg, status,2, status,0, cstack
 27299 ;; Tracked objects:
 27300 ;;		On entry : 0/0
 27301 ;;		On exit  : 0/0
 27302 ;;		Unchanged: 0/0
 27303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27304 ;;      Params:         0       0       0       0       0       0       0
 27305 ;;      Locals:         0       0       0       0       0       0       0
 27306 ;;      Temps:         14       0       0       0       0       0       0
 27307 ;;      Totals:        14       0       0       0       0       0       0
 27308 ;;Total ram usage:       14 bytes
 27309 ;; Hardware stack levels used:    1
 27310 ;; Hardware stack levels required when called:    3
 27311 ;; This function calls:
 27312 ;;		_T4int
 27313 ;; This function is called by:
 27314 ;;		Interrupt level 2
 27315 ;; This function uses a non-reentrant model
 27316 ;;
 27317                           
 27318                           	psect	intcode
 27319  000008                     __pintcode:
 27320                           	opt stack 0
 27321  000008                     _hp_isr:
 27322                           	opt stack 9
 27323                           
 27324                           ;incstack = 0
 27325  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 27326  00000A  CFFA F01D          	movff	pclath,??_hp_isr
 27327  00000E  CFFB F01E          	movff	pclatu,??_hp_isr+1
 27328  000012  EF75  F030         	goto	int_func
 27329                           pclatu	equ	0xFFB
 27330                           pclath	equ	0xFFA
 27331                           tblptru	equ	0xFF8
 27332                           tblptrh	equ	0xFF7
 27333                           tblptrl	equ	0xFF6
 27334                           tablat	equ	0xFF5
 27335                           prodh	equ	0xFF4
 27336                           prodl	equ	0xFF3
 27337                           intcon	equ	0xFF2
 27338                           postinc0	equ	0xFEE
 27339                           fsr0h	equ	0xFEA
 27340                           fsr0l	equ	0xFE9
 27341                           wreg	equ	0xFE8
 27342                           postdec1	equ	0xFE5
 27343                           fsr1h	equ	0xFE2
 27344                           fsr1l	equ	0xFE1
 27345                           bsr	equ	0xFE0
 27346                           indf2	equ	0xFDF
 27347                           postinc2	equ	0xFDE
 27348                           postdec2	equ	0xFDD
 27349                           plusw2	equ	0xFDB
 27350                           fsr2h	equ	0xFDA
 27351                           fsr2l	equ	0xFD9
 27352                           status	equ	0xFD8
 27353                           
 27354                           	psect	intcode_body
 27355  0060EA                     __pintcode_body:
 27356                           	opt stack 9
 27357  0060EA                     int_func:
 27358                           	opt stack 9
 27359  0060EA  CFE9 F01F          	movff	fsr0l,??_hp_isr+2
 27360  0060EE  CFEA F020          	movff	fsr0h,??_hp_isr+3
 27361  0060F2  CFE1 F021          	movff	fsr1l,??_hp_isr+4
 27362  0060F6  CFE2 F022          	movff	fsr1h,??_hp_isr+5
 27363  0060FA  CFD9 F023          	movff	fsr2l,??_hp_isr+6
 27364  0060FE  CFDA F024          	movff	fsr2h,??_hp_isr+7
 27365  006102  CFF3 F025          	movff	prodl,??_hp_isr+8
 27366  006106  CFF4 F026          	movff	prodh,??_hp_isr+9
 27367  00610A  CFF6 F027          	movff	tblptrl,??_hp_isr+10
 27368  00610E  CFF7 F028          	movff	tblptrh,??_hp_isr+11
 27369  006112  CFF8 F029          	movff	tblptru,??_hp_isr+12
 27370  006116  CFF5 F02A          	movff	tablat,??_hp_isr+13
 27371                           
 27372                           ;main.c: 15: if(PIE5bits.TMR4IE && PIR5bits.TMR4IF) {
 27373  00611A  B07D               	btfsc	3965,0,c	;volatile
 27374  00611C  A07E               	btfss	3966,0,c	;volatile
 27375  00611E  D003               	goto	i2l876
 27376                           
 27377                           ;main.c: 16: T4int();
 27378  006120  ECFE  F02A         	call	_T4int	;wreg free
 27379                           
 27380                           ;main.c: 17: PIR5bits.TMR4IF = 0;
 27381  006124  907E               	bcf	3966,0,c	;volatile
 27382  006126                     i2l876:
 27383  006126  C02A  FFF5         	movff	??_hp_isr+13,tablat
 27384  00612A  C029  FFF8         	movff	??_hp_isr+12,tblptru
 27385  00612E  C028  FFF7         	movff	??_hp_isr+11,tblptrh
 27386  006132  C027  FFF6         	movff	??_hp_isr+10,tblptrl
 27387  006136  C026  FFF4         	movff	??_hp_isr+9,prodh
 27388  00613A  C025  FFF3         	movff	??_hp_isr+8,prodl
 27389  00613E  C024  FFDA         	movff	??_hp_isr+7,fsr2h
 27390  006142  C023  FFD9         	movff	??_hp_isr+6,fsr2l
 27391  006146  C022  FFE2         	movff	??_hp_isr+5,fsr1h
 27392  00614A  C021  FFE1         	movff	??_hp_isr+4,fsr1l
 27393  00614E  C020  FFEA         	movff	??_hp_isr+3,fsr0h
 27394  006152  C01F  FFE9         	movff	??_hp_isr+2,fsr0l
 27395  006156  C01E  FFFB         	movff	??_hp_isr+1,pclatu
 27396  00615A  C01D  FFFA         	movff	??_hp_isr,pclath
 27397  00615E  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 27398  006160  0011               	retfie		f
 27399  006162                     __end_of_hp_isr:
 27400                           	opt stack 0
 27401                           pclatu	equ	0xFFB
 27402                           pclath	equ	0xFFA
 27403                           tblptru	equ	0xFF8
 27404                           tblptrh	equ	0xFF7
 27405                           tblptrl	equ	0xFF6
 27406                           tablat	equ	0xFF5
 27407                           prodh	equ	0xFF4
 27408                           prodl	equ	0xFF3
 27409                           intcon	equ	0xFF2
 27410                           postinc0	equ	0xFEE
 27411                           fsr0h	equ	0xFEA
 27412                           fsr0l	equ	0xFE9
 27413                           wreg	equ	0xFE8
 27414                           postdec1	equ	0xFE5
 27415                           fsr1h	equ	0xFE2
 27416                           fsr1l	equ	0xFE1
 27417                           bsr	equ	0xFE0
 27418                           indf2	equ	0xFDF
 27419                           postinc2	equ	0xFDE
 27420                           postdec2	equ	0xFDD
 27421                           plusw2	equ	0xFDB
 27422                           fsr2h	equ	0xFDA
 27423                           fsr2l	equ	0xFD9
 27424                           status	equ	0xFD8
 27425                           
 27426 ;; *************** function _T4int *****************
 27427 ;; Defined at:
 27428 ;;		line 13 in file "source/T4Config.h"
 27429 ;; Parameters:    Size  Location     Type
 27430 ;;		None
 27431 ;; Auto vars:     Size  Location     Type
 27432 ;;		None
 27433 ;; Return value:  Size  Location     Type
 27434 ;;                  1    wreg      void 
 27435 ;; Registers used:
 27436 ;;		wreg, status,2, status,0, cstack
 27437 ;; Tracked objects:
 27438 ;;		On entry : 0/0
 27439 ;;		On exit  : 0/0
 27440 ;;		Unchanged: 0/0
 27441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27442 ;;      Params:         0       0       0       0       0       0       0
 27443 ;;      Locals:         0       0       0       0       0       0       0
 27444 ;;      Temps:          1       0       0       0       0       0       0
 27445 ;;      Totals:         1       0       0       0       0       0       0
 27446 ;;Total ram usage:        1 bytes
 27447 ;; Hardware stack levels used:    1
 27448 ;; Hardware stack levels required when called:    2
 27449 ;; This function calls:
 27450 ;;		i2___altoft
 27451 ;;		i2___ftge
 27452 ;;		i2_setPWM2duty
 27453 ;; This function is called by:
 27454 ;;		_hp_isr
 27455 ;; This function uses a non-reentrant model
 27456 ;;
 27457                           
 27458                           	psect	text117
 27459  0055FC                     __ptext117:
 27460                           	opt stack 0
 27461  0055FC                     _T4int:
 27462                           	opt stack 9
 27463                           
 27464                           ;incstack = 0
 27465  0055FC  0004               	clrwdt		;# 
 27466                           
 27467                           ;T4Config.h: 15: processTimer++;
 27468  0055FE  0E01               	movlw	1
 27469  005600  262B               	addwf	_processTimer,f,c
 27470  005602  0E00               	movlw	0
 27471  005604  222C               	addwfc	_processTimer+1,f,c
 27472  005606  222D               	addwfc	_processTimer+2,f,c
 27473  005608  222E               	addwfc	_processTimer+3,f,c
 27474                           
 27475                           ;T4Config.h: 16: if(bladeIsUP == 1) {
 27476  00560A  0450               	decf	_bladeIsUP,w,c
 27477  00560C  A4D8               	btfss	status,2,c
 27478  00560E  D031               	goto	i2l8835
 27479                           
 27480                           ;T4Config.h: 17: if(processTimer >= timsXcorte && ProcessStarted && processState < numCo
      +                          rtes) {
 27481  005610  C02B  F009         	movff	_processTimer,i2___altoft@c
 27482  005614  C02C  F00A         	movff	_processTimer+1,i2___altoft@c+1
 27483  005618  C02D  F00B         	movff	_processTimer+2,i2___altoft@c+2
 27484  00561C  C02E  F00C         	movff	_processTimer+3,i2___altoft@c+3
 27485  005620  ECB1  F030         	call	i2___altoft	;wreg free
 27486  005624  C009  F013         	movff	?i2___altoft,i2___ftge@ff1
 27487  005628  C00A  F014         	movff	?i2___altoft+1,i2___ftge@ff1+1
 27488  00562C  C00B  F015         	movff	?i2___altoft+2,i2___ftge@ff1+2
 27489  005630  C04D  F016         	movff	_timsXcorte,i2___ftge@ff2
 27490  005634  C04E  F017         	movff	_timsXcorte+1,i2___ftge@ff2+1
 27491  005638  C04F  F018         	movff	_timsXcorte+2,i2___ftge@ff2+2
 27492  00563C  EC5A  F02E         	call	i2___ftge	;wreg free
 27493  005640  A0D8               	btfss	status,0,c
 27494  005642  0012               	return	
 27495  005644  503A               	movf	_ProcessStarted,w,c
 27496  005646  B4D8               	btfsc	status,2,c
 27497  005648  0012               	return	
 27498  00564A  0100               	movlb	0	; () banked
 27499  00564C  51B8               	movf	_numCortes& (0+255),w,b
 27500  00564E  5C35               	subwf	_processState,w,c
 27501  005650  5036               	movf	_processState+1,w,c
 27502  005652  0A80               	xorlw	128
 27503  005654  6E1C               	movwf	??_T4int& (0+255),c
 27504  005656  0100               	movlb	0	; () banked
 27505  005658  51B9               	movf	(_numCortes+1)& (0+255),w,b
 27506  00565A  0A80               	xorlw	128
 27507  00565C  581C               	subwfb	??_T4int& (0+255),w,c
 27508  00565E  B0D8               	btfsc	status,0,c
 27509  005660  0012               	return	
 27510                           
 27511                           ; BSR set to: 0
 27512                           ;T4Config.h: 18: setPWM2duty(400);
 27513  005662  0E01               	movlw	1
 27514  005664  6E02               	movwf	i2setPWM2duty@actuator+1,c
 27515  005666  0E90               	movlw	144
 27516  005668  6E01               	movwf	i2setPWM2duty@actuator,c
 27517  00566A  ECD7  F031         	call	i2_setPWM2duty	;wreg free
 27518                           
 27519                           ;T4Config.h: 19: LATCbits.LATC4 = 1;
 27520  00566E  888B               	bsf	3979,4,c	;volatile
 27521                           
 27522                           ;T4Config.h: 20: }
 27523                           ;T4Config.h: 21: }else if(bladeIsUP == 0){
 27524  005670  0012               	return	
 27525  005672                     i2l8835:
 27526  005672  5050               	movf	_bladeIsUP,w,c
 27527  005674  A4D8               	btfss	status,2,c
 27528  005676  0012               	return	
 27529                           
 27530                           ;T4Config.h: 22: if(processTimer >= timeDOWN && ProcessStarted) {
 27531  005678  5043               	movf	_timeDOWN,w,c
 27532  00567A  5C2B               	subwf	_processTimer,w,c
 27533  00567C  5044               	movf	_timeDOWN+1,w,c
 27534  00567E  582C               	subwfb	_processTimer+1,w,c
 27535  005680  5045               	movf	_timeDOWN+2,w,c
 27536  005682  582D               	subwfb	_processTimer+2,w,c
 27537  005684  502E               	movf	_processTimer+3,w,c
 27538  005686  0A80               	xorlw	128
 27539  005688  6E1C               	movwf	??_T4int& (0+255),c
 27540  00568A  5046               	movf	_timeDOWN+3,w,c
 27541  00568C  0A80               	xorlw	128
 27542  00568E  581C               	subwfb	??_T4int& (0+255),w,c
 27543  005690  A0D8               	btfss	status,0,c
 27544  005692  0012               	return	
 27545  005694  503A               	movf	_ProcessStarted,w,c
 27546  005696  B4D8               	btfsc	status,2,c
 27547  005698  0012               	return	
 27548                           
 27549                           ;T4Config.h: 23: setPWM2duty(-400);
 27550  00569A  0EFE               	movlw	254
 27551  00569C  6E02               	movwf	i2setPWM2duty@actuator+1,c
 27552  00569E  0E70               	movlw	112
 27553  0056A0  6E01               	movwf	i2setPWM2duty@actuator,c
 27554  0056A2  ECD7  F031         	call	i2_setPWM2duty	;wreg free
 27555  0056A6  0012               	return	
 27556  0056A8                     __end_of_T4int:
 27557                           	opt stack 0
 27558                           pclatu	equ	0xFFB
 27559                           pclath	equ	0xFFA
 27560                           tblptru	equ	0xFF8
 27561                           tblptrh	equ	0xFF7
 27562                           tblptrl	equ	0xFF6
 27563                           tablat	equ	0xFF5
 27564                           prodh	equ	0xFF4
 27565                           prodl	equ	0xFF3
 27566                           intcon	equ	0xFF2
 27567                           postinc0	equ	0xFEE
 27568                           fsr0h	equ	0xFEA
 27569                           fsr0l	equ	0xFE9
 27570                           wreg	equ	0xFE8
 27571                           postdec1	equ	0xFE5
 27572                           fsr1h	equ	0xFE2
 27573                           fsr1l	equ	0xFE1
 27574                           bsr	equ	0xFE0
 27575                           indf2	equ	0xFDF
 27576                           postinc2	equ	0xFDE
 27577                           postdec2	equ	0xFDD
 27578                           plusw2	equ	0xFDB
 27579                           fsr2h	equ	0xFDA
 27580                           fsr2l	equ	0xFD9
 27581                           status	equ	0xFD8
 27582                           
 27583 ;; *************** function i2_setPWM2duty *****************
 27584 ;; Defined at:
 27585 ;;		line 33 in file "source/PWMConfig.h"
 27586 ;; Parameters:    Size  Location     Type
 27587 ;;  actuator        2    0[COMRAM] short 
 27588 ;; Auto vars:     Size  Location     Type
 27589 ;;  setPWM2duty     2    4[COMRAM] short 
 27590 ;; Return value:  Size  Location     Type
 27591 ;;                  1    wreg      void 
 27592 ;; Registers used:
 27593 ;;		wreg, status,2, status,0
 27594 ;; Tracked objects:
 27595 ;;		On entry : 0/0
 27596 ;;		On exit  : 0/0
 27597 ;;		Unchanged: 0/0
 27598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27599 ;;      Params:         2       0       0       0       0       0       0
 27600 ;;      Locals:         2       0       0       0       0       0       0
 27601 ;;      Temps:          2       0       0       0       0       0       0
 27602 ;;      Totals:         6       0       0       0       0       0       0
 27603 ;;Total ram usage:        6 bytes
 27604 ;; Hardware stack levels used:    1
 27605 ;; This function calls:
 27606 ;;		Nothing
 27607 ;; This function is called by:
 27608 ;;		_T4int
 27609 ;; This function uses a non-reentrant model
 27610 ;;
 27611                           
 27612                           	psect	text118
 27613  0063AE                     __ptext118:
 27614                           	opt stack 0
 27615  0063AE                     i2_setPWM2duty:
 27616                           	opt stack 10
 27617                           
 27618                           ;PWMConfig.h: 34: short act = 400;
 27619                           
 27620                           ;incstack = 0
 27621  0063AE  0E01               	movlw	1
 27622  0063B0  6E06               	movwf	i2setPWM2duty@act+1,c
 27623  0063B2  0E90               	movlw	144
 27624  0063B4  6E05               	movwf	i2setPWM2duty@act,c
 27625                           
 27626                           ;PWMConfig.h: 35: if(actuator > 400)
 27627  0063B6  BE02               	btfsc	i2setPWM2duty@actuator+1,7,c
 27628  0063B8  D00A               	goto	i2l7987
 27629  0063BA  0E91               	movlw	145
 27630  0063BC  5C01               	subwf	i2setPWM2duty@actuator,w,c
 27631  0063BE  0E01               	movlw	1
 27632  0063C0  5802               	subwfb	i2setPWM2duty@actuator+1,w,c
 27633  0063C2  A0D8               	btfss	status,0,c
 27634  0063C4  D004               	goto	i2l7987
 27635                           
 27636                           ;PWMConfig.h: 36: act = 800;
 27637  0063C6  0E03               	movlw	3
 27638  0063C8  6E06               	movwf	i2setPWM2duty@act+1,c
 27639  0063CA  0E20               	movlw	32
 27640  0063CC  D00B               	goto	L10
 27641  0063CE                     i2l7987:
 27642                           
 27643                           ;PWMConfig.h: 37: else if(actuator < -400)
 27644  0063CE  AE02               	btfss	i2setPWM2duty@actuator+1,7,c
 27645  0063D0  D00B               	goto	i2l7991
 27646  0063D2  0E70               	movlw	112
 27647  0063D4  5C01               	subwf	i2setPWM2duty@actuator,w,c
 27648  0063D6  0EFE               	movlw	254
 27649  0063D8  5802               	subwfb	i2setPWM2duty@actuator+1,w,c
 27650  0063DA  B0D8               	btfsc	status,0,c
 27651  0063DC  D005               	goto	i2l7991
 27652                           
 27653                           ;PWMConfig.h: 38: act = 0;
 27654  0063DE  0E00               	movlw	0
 27655  0063E0  6E06               	movwf	i2setPWM2duty@act+1,c
 27656  0063E2  0E00               	movlw	0
 27657  0063E4                     L10:
 27658  0063E4  6E05               	movwf	i2setPWM2duty@act,c
 27659  0063E6  D006               	goto	i2l476
 27660  0063E8                     i2l7991:
 27661                           
 27662                           ;PWMConfig.h: 39: else
 27663                           ;PWMConfig.h: 40: act = actuator + 400;
 27664  0063E8  0E90               	movlw	144
 27665  0063EA  2401               	addwf	i2setPWM2duty@actuator,w,c
 27666  0063EC  6E05               	movwf	i2setPWM2duty@act,c
 27667  0063EE  0E01               	movlw	1
 27668  0063F0  2002               	addwfc	i2setPWM2duty@actuator+1,w,c
 27669  0063F2  6E06               	movwf	i2setPWM2duty@act+1,c
 27670  0063F4                     i2l476:
 27671                           
 27672                           ;PWMConfig.h: 41: CCP2CONbits.DC2B = act;
 27673  0063F4  C005  F003         	movff	i2setPWM2duty@act,??i2_setPWM2duty
 27674  0063F8  3A03               	swapf	??i2_setPWM2duty,f,c
 27675  0063FA  5066               	movf	3942,w,c	;volatile
 27676  0063FC  1803               	xorwf	??i2_setPWM2duty,w,c
 27677  0063FE  0BCF               	andlw	-49
 27678  006400  1803               	xorwf	??i2_setPWM2duty,w,c
 27679  006402  6E66               	movwf	3942,c	;volatile
 27680                           
 27681                           ;PWMConfig.h: 42: CCPR2L = act>>2;
 27682  006404  C005  F003         	movff	i2setPWM2duty@act,??i2_setPWM2duty
 27683  006408  C006  F004         	movff	i2setPWM2duty@act+1,??i2_setPWM2duty+1
 27684  00640C  3404               	rlcf	??i2_setPWM2duty+1,w,c
 27685  00640E  3204               	rrcf	??i2_setPWM2duty+1,f,c
 27686  006410  3203               	rrcf	??i2_setPWM2duty,f,c
 27687  006412  3404               	rlcf	??i2_setPWM2duty+1,w,c
 27688  006414  3204               	rrcf	??i2_setPWM2duty+1,f,c
 27689  006416  3203               	rrcf	??i2_setPWM2duty,f,c
 27690  006418  5003               	movf	??i2_setPWM2duty,w,c
 27691  00641A  6E67               	movwf	3943,c	;volatile
 27692  00641C  0012               	return		;funcret
 27693  00641E                     __end_ofi2_setPWM2duty:
 27694                           	opt stack 0
 27695                           pclatu	equ	0xFFB
 27696                           pclath	equ	0xFFA
 27697                           tblptru	equ	0xFF8
 27698                           tblptrh	equ	0xFF7
 27699                           tblptrl	equ	0xFF6
 27700                           tablat	equ	0xFF5
 27701                           prodh	equ	0xFF4
 27702                           prodl	equ	0xFF3
 27703                           intcon	equ	0xFF2
 27704                           postinc0	equ	0xFEE
 27705                           fsr0h	equ	0xFEA
 27706                           fsr0l	equ	0xFE9
 27707                           wreg	equ	0xFE8
 27708                           postdec1	equ	0xFE5
 27709                           fsr1h	equ	0xFE2
 27710                           fsr1l	equ	0xFE1
 27711                           bsr	equ	0xFE0
 27712                           indf2	equ	0xFDF
 27713                           postinc2	equ	0xFDE
 27714                           postdec2	equ	0xFDD
 27715                           plusw2	equ	0xFDB
 27716                           fsr2h	equ	0xFDA
 27717                           fsr2l	equ	0xFD9
 27718                           status	equ	0xFD8
 27719                           
 27720 ;; *************** function i2___ftge *****************
 27721 ;; Defined at:
 27722 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 27723 ;; Parameters:    Size  Location     Type
 27724 ;;  ff1             3   18[COMRAM] float 
 27725 ;;  ff2             3   21[COMRAM] float 
 27726 ;; Auto vars:     Size  Location     Type
 27727 ;;		None
 27728 ;; Return value:  Size  Location     Type
 27729 ;;		None               void
 27730 ;; Registers used:
 27731 ;;		wreg, status,2, status,0
 27732 ;; Tracked objects:
 27733 ;;		On entry : 0/0
 27734 ;;		On exit  : 0/0
 27735 ;;		Unchanged: 0/0
 27736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27737 ;;      Params:         6       0       0       0       0       0       0
 27738 ;;      Locals:         0       0       0       0       0       0       0
 27739 ;;      Temps:          3       0       0       0       0       0       0
 27740 ;;      Totals:         9       0       0       0       0       0       0
 27741 ;;Total ram usage:        9 bytes
 27742 ;; Hardware stack levels used:    1
 27743 ;; This function calls:
 27744 ;;		Nothing
 27745 ;; This function is called by:
 27746 ;;		_T4int
 27747 ;; This function uses a non-reentrant model
 27748 ;;
 27749                           
 27750                           	psect	text119
 27751  005CB4                     __ptext119:
 27752                           	opt stack 0
 27753  005CB4                     i2___ftge:
 27754                           	opt stack 10
 27755                           
 27756                           ;incstack = 0
 27757  005CB4  AE15               	btfss	i2___ftge@ff1+2,7,c
 27758  005CB6  D016               	goto	i2l8431
 27759  005CB8  C013  F019         	movff	i2___ftge@ff1,??i2___ftge
 27760  005CBC  C014  F01A         	movff	i2___ftge@ff1+1,??i2___ftge+1
 27761  005CC0  C015  F01B         	movff	i2___ftge@ff1+2,??i2___ftge+2
 27762  005CC4  1E19               	comf	??i2___ftge,f,c
 27763  005CC6  1E1A               	comf	??i2___ftge+1,f,c
 27764  005CC8  1E1B               	comf	??i2___ftge+2,f,c
 27765  005CCA  2A19               	incf	??i2___ftge,f,c
 27766  005CCC  0E00               	movlw	0
 27767  005CCE  221A               	addwfc	??i2___ftge+1,f,c
 27768  005CD0  221B               	addwfc	??i2___ftge+2,f,c
 27769  005CD2  0E00               	movlw	0
 27770  005CD4  2419               	addwf	??i2___ftge,w,c
 27771  005CD6  6E13               	movwf	i2___ftge@ff1,c
 27772  005CD8  0E00               	movlw	0
 27773  005CDA  201A               	addwfc	??i2___ftge+1,w,c
 27774  005CDC  6E14               	movwf	i2___ftge@ff1+1,c
 27775  005CDE  0E80               	movlw	128
 27776  005CE0  201B               	addwfc	??i2___ftge+2,w,c
 27777  005CE2  6E15               	movwf	i2___ftge@ff1+2,c
 27778  005CE4                     i2l8431:
 27779  005CE4  AE18               	btfss	i2___ftge@ff2+2,7,c
 27780  005CE6  D016               	goto	i2l8435
 27781  005CE8  C016  F019         	movff	i2___ftge@ff2,??i2___ftge
 27782  005CEC  C017  F01A         	movff	i2___ftge@ff2+1,??i2___ftge+1
 27783  005CF0  C018  F01B         	movff	i2___ftge@ff2+2,??i2___ftge+2
 27784  005CF4  1E19               	comf	??i2___ftge,f,c
 27785  005CF6  1E1A               	comf	??i2___ftge+1,f,c
 27786  005CF8  1E1B               	comf	??i2___ftge+2,f,c
 27787  005CFA  2A19               	incf	??i2___ftge,f,c
 27788  005CFC  0E00               	movlw	0
 27789  005CFE  221A               	addwfc	??i2___ftge+1,f,c
 27790  005D00  221B               	addwfc	??i2___ftge+2,f,c
 27791  005D02  0E00               	movlw	0
 27792  005D04  2419               	addwf	??i2___ftge,w,c
 27793  005D06  6E16               	movwf	i2___ftge@ff2,c
 27794  005D08  0E00               	movlw	0
 27795  005D0A  201A               	addwfc	??i2___ftge+1,w,c
 27796  005D0C  6E17               	movwf	i2___ftge@ff2+1,c
 27797  005D0E  0E80               	movlw	128
 27798  005D10  201B               	addwfc	??i2___ftge+2,w,c
 27799  005D12  6E18               	movwf	i2___ftge@ff2+2,c
 27800  005D14                     i2l8435:
 27801  005D14  0E00               	movlw	0
 27802  005D16  1A13               	xorwf	i2___ftge@ff1,f,c
 27803  005D18  0E00               	movlw	0
 27804  005D1A  1A14               	xorwf	i2___ftge@ff1+1,f,c
 27805  005D1C  0E80               	movlw	128
 27806  005D1E  1A15               	xorwf	i2___ftge@ff1+2,f,c
 27807  005D20  0E00               	movlw	0
 27808  005D22  1A16               	xorwf	i2___ftge@ff2,f,c
 27809  005D24  0E00               	movlw	0
 27810  005D26  1A17               	xorwf	i2___ftge@ff2+1,f,c
 27811  005D28  0E80               	movlw	128
 27812  005D2A  1A18               	xorwf	i2___ftge@ff2+2,f,c
 27813  005D2C  5016               	movf	i2___ftge@ff2,w,c
 27814  005D2E  5C13               	subwf	i2___ftge@ff1,w,c
 27815  005D30  5017               	movf	i2___ftge@ff2+1,w,c
 27816  005D32  5814               	subwfb	i2___ftge@ff1+1,w,c
 27817  005D34  5018               	movf	i2___ftge@ff2+2,w,c
 27818  005D36  5815               	subwfb	i2___ftge@ff1+2,w,c
 27819  005D38  B0D8               	btfsc	status,0,c
 27820  005D3A  D002               	goto	i2l8441
 27821  005D3C  90D8               	bcf	status,0,c
 27822  005D3E  0012               	return	
 27823  005D40                     i2l8441:
 27824  005D40  80D8               	bsf	status,0,c
 27825  005D42  0012               	return	
 27826  005D44                     __end_ofi2___ftge:
 27827                           	opt stack 0
 27828                           pclatu	equ	0xFFB
 27829                           pclath	equ	0xFFA
 27830                           tblptru	equ	0xFF8
 27831                           tblptrh	equ	0xFF7
 27832                           tblptrl	equ	0xFF6
 27833                           tablat	equ	0xFF5
 27834                           prodh	equ	0xFF4
 27835                           prodl	equ	0xFF3
 27836                           intcon	equ	0xFF2
 27837                           postinc0	equ	0xFEE
 27838                           fsr0h	equ	0xFEA
 27839                           fsr0l	equ	0xFE9
 27840                           wreg	equ	0xFE8
 27841                           postdec1	equ	0xFE5
 27842                           fsr1h	equ	0xFE2
 27843                           fsr1l	equ	0xFE1
 27844                           bsr	equ	0xFE0
 27845                           indf2	equ	0xFDF
 27846                           postinc2	equ	0xFDE
 27847                           postdec2	equ	0xFDD
 27848                           plusw2	equ	0xFDB
 27849                           fsr2h	equ	0xFDA
 27850                           fsr2l	equ	0xFD9
 27851                           status	equ	0xFD8
 27852                           
 27853 ;; *************** function i2___altoft *****************
 27854 ;; Defined at:
 27855 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
 27856 ;; Parameters:    Size  Location     Type
 27857 ;;  c               4    8[COMRAM] long 
 27858 ;; Auto vars:     Size  Location     Type
 27859 ;;  __altoft        1   17[COMRAM] unsigned char 
 27860 ;;  __altoft        1   16[COMRAM] unsigned char 
 27861 ;; Return value:  Size  Location     Type
 27862 ;;                  3    8[COMRAM] float 
 27863 ;; Registers used:
 27864 ;;		wreg, status,2, status,0, cstack
 27865 ;; Tracked objects:
 27866 ;;		On entry : 0/0
 27867 ;;		On exit  : 0/0
 27868 ;;		Unchanged: 0/0
 27869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27870 ;;      Params:         4       0       0       0       0       0       0
 27871 ;;      Locals:         2       0       0       0       0       0       0
 27872 ;;      Temps:          4       0       0       0       0       0       0
 27873 ;;      Totals:        10       0       0       0       0       0       0
 27874 ;;Total ram usage:       10 bytes
 27875 ;; Hardware stack levels used:    1
 27876 ;; Hardware stack levels required when called:    1
 27877 ;; This function calls:
 27878 ;;		i2___ftpack
 27879 ;; This function is called by:
 27880 ;;		_T4int
 27881 ;; This function uses a non-reentrant model
 27882 ;;
 27883                           
 27884                           	psect	text120
 27885  006162                     __ptext120:
 27886                           	opt stack 0
 27887  006162                     i2___altoft:
 27888                           	opt stack 9
 27889                           
 27890                           ;incstack = 0
 27891  006162  0E00               	movlw	0
 27892  006164  6E12               	movwf	i2___altoft@sign,c
 27893  006166  0E8E               	movlw	142
 27894  006168  6E11               	movwf	i2___altoft@exp,c
 27895  00616A  AE0C               	btfss	i2___altoft@c+3,7,c
 27896  00616C  D011               	goto	i2l8421
 27897  00616E  1E0C               	comf	i2___altoft@c+3,f,c
 27898  006170  1E0B               	comf	i2___altoft@c+2,f,c
 27899  006172  1E0A               	comf	i2___altoft@c+1,f,c
 27900  006174  6C09               	negf	i2___altoft@c,c
 27901  006176  0E00               	movlw	0
 27902  006178  220A               	addwfc	i2___altoft@c+1,f,c
 27903  00617A  220B               	addwfc	i2___altoft@c+2,f,c
 27904  00617C  220C               	addwfc	i2___altoft@c+3,f,c
 27905  00617E  0E01               	movlw	1
 27906  006180  6E12               	movwf	i2___altoft@sign,c
 27907  006182  D006               	goto	i2l8421
 27908  006184                     i2l8419:
 27909  006184  90D8               	bcf	status,0,c
 27910  006186  320C               	rrcf	i2___altoft@c+3,f,c
 27911  006188  320B               	rrcf	i2___altoft@c+2,f,c
 27912  00618A  320A               	rrcf	i2___altoft@c+1,f,c
 27913  00618C  3209               	rrcf	i2___altoft@c,f,c
 27914  00618E  2A11               	incf	i2___altoft@exp,f,c
 27915  006190                     i2l8421:
 27916  006190  0E00               	movlw	0
 27917  006192  1409               	andwf	i2___altoft@c,w,c
 27918  006194  6E0D               	movwf	??i2___altoft& (0+255),c
 27919  006196  0E00               	movlw	0
 27920  006198  140A               	andwf	i2___altoft@c+1,w,c
 27921  00619A  6E0E               	movwf	(??i2___altoft+1)& (0+255),c
 27922  00619C  0E00               	movlw	0
 27923  00619E  140B               	andwf	i2___altoft@c+2,w,c
 27924  0061A0  6E0F               	movwf	(??i2___altoft+2)& (0+255),c
 27925  0061A2  0EFF               	movlw	255
 27926  0061A4  140C               	andwf	i2___altoft@c+3,w,c
 27927  0061A6  6E10               	movwf	(??i2___altoft+3)& (0+255),c
 27928  0061A8  500D               	movf	??i2___altoft,w,c
 27929  0061AA  100E               	iorwf	??i2___altoft+1,w,c
 27930  0061AC  100F               	iorwf	??i2___altoft+2,w,c
 27931  0061AE  1010               	iorwf	??i2___altoft+3,w,c
 27932  0061B0  A4D8               	btfss	status,2,c
 27933  0061B2  D7E8               	goto	i2l8419
 27934  0061B4  C009  F001         	movff	i2___altoft@c,i2___ftpack@arg
 27935  0061B8  C00A  F002         	movff	i2___altoft@c+1,i2___ftpack@arg+1
 27936  0061BC  C00B  F003         	movff	i2___altoft@c+2,i2___ftpack@arg+2
 27937  0061C0  C011  F004         	movff	i2___altoft@exp,i2___ftpack@exp
 27938  0061C4  C012  F005         	movff	i2___altoft@sign,i2___ftpack@sign
 27939  0061C8  ECA7  F02A         	call	i2___ftpack	;wreg free
 27940  0061CC  C001  F009         	movff	?i2___ftpack,?i2___altoft
 27941  0061D0  C002  F00A         	movff	?i2___ftpack+1,?i2___altoft+1
 27942  0061D4  C003  F00B         	movff	?i2___ftpack+2,?i2___altoft+2
 27943  0061D8  0012               	return	
 27944  0061DA                     __end_ofi2___altoft:
 27945                           	opt stack 0
 27946                           pclatu	equ	0xFFB
 27947                           pclath	equ	0xFFA
 27948                           tblptru	equ	0xFF8
 27949                           tblptrh	equ	0xFF7
 27950                           tblptrl	equ	0xFF6
 27951                           tablat	equ	0xFF5
 27952                           prodh	equ	0xFF4
 27953                           prodl	equ	0xFF3
 27954                           intcon	equ	0xFF2
 27955                           postinc0	equ	0xFEE
 27956                           fsr0h	equ	0xFEA
 27957                           fsr0l	equ	0xFE9
 27958                           wreg	equ	0xFE8
 27959                           postdec1	equ	0xFE5
 27960                           fsr1h	equ	0xFE2
 27961                           fsr1l	equ	0xFE1
 27962                           bsr	equ	0xFE0
 27963                           indf2	equ	0xFDF
 27964                           postinc2	equ	0xFDE
 27965                           postdec2	equ	0xFDD
 27966                           plusw2	equ	0xFDB
 27967                           fsr2h	equ	0xFDA
 27968                           fsr2l	equ	0xFD9
 27969                           status	equ	0xFD8
 27970                           
 27971 ;; *************** function i2___ftpack *****************
 27972 ;; Defined at:
 27973 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 27974 ;; Parameters:    Size  Location     Type
 27975 ;;  arg             3    0[COMRAM] unsigned um
 27976 ;;  exp             1    3[COMRAM] unsigned char 
 27977 ;;  sign            1    4[COMRAM] unsigned char 
 27978 ;; Auto vars:     Size  Location     Type
 27979 ;;		None
 27980 ;; Return value:  Size  Location     Type
 27981 ;;                  3    0[COMRAM] float 
 27982 ;; Registers used:
 27983 ;;		wreg, status,2, status,0
 27984 ;; Tracked objects:
 27985 ;;		On entry : 0/0
 27986 ;;		On exit  : 0/0
 27987 ;;		Unchanged: 0/0
 27988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27989 ;;      Params:         5       0       0       0       0       0       0
 27990 ;;      Locals:         0       0       0       0       0       0       0
 27991 ;;      Temps:          3       0       0       0       0       0       0
 27992 ;;      Totals:         8       0       0       0       0       0       0
 27993 ;;Total ram usage:        8 bytes
 27994 ;; Hardware stack levels used:    1
 27995 ;; This function calls:
 27996 ;;		Nothing
 27997 ;; This function is called by:
 27998 ;;		i2___altoft
 27999 ;; This function uses a non-reentrant model
 28000 ;;
 28001                           
 28002                           	psect	text121
 28003  00554E                     __ptext121:
 28004                           	opt stack 0
 28005  00554E                     i2___ftpack:
 28006                           	opt stack 9
 28007                           
 28008                           ;incstack = 0
 28009  00554E  5004               	movf	i2___ftpack@exp,w,c
 28010  005550  B4D8               	btfsc	status,2,c
 28011  005552  D005               	goto	i2l7189
 28012  005554  5001               	movf	i2___ftpack@arg,w,c
 28013  005556  1002               	iorwf	i2___ftpack@arg+1,w,c
 28014  005558  1003               	iorwf	i2___ftpack@arg+2,w,c
 28015  00555A  A4D8               	btfss	status,2,c
 28016  00555C  D00C               	goto	i2l7195
 28017  00555E                     i2l7189:
 28018  00555E  0E00               	movlw	0
 28019  005560  6E01               	movwf	?i2___ftpack,c
 28020  005562  0E00               	movlw	0
 28021  005564  6E02               	movwf	?i2___ftpack+1,c
 28022  005566  0E00               	movlw	0
 28023  005568  6E03               	movwf	?i2___ftpack+2,c
 28024  00556A  0012               	return	
 28025  00556C                     i2l7193:
 28026  00556C  2A04               	incf	i2___ftpack@exp,f,c
 28027  00556E  90D8               	bcf	status,0,c
 28028  005570  3203               	rrcf	i2___ftpack@arg+2,f,c
 28029  005572  3202               	rrcf	i2___ftpack@arg+1,f,c
 28030  005574  3201               	rrcf	i2___ftpack@arg,f,c
 28031  005576                     i2l7195:
 28032  005576  0E00               	movlw	0
 28033  005578  1401               	andwf	i2___ftpack@arg,w,c
 28034  00557A  6E06               	movwf	??i2___ftpack& (0+255),c
 28035  00557C  0E00               	movlw	0
 28036  00557E  1402               	andwf	i2___ftpack@arg+1,w,c
 28037  005580  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 28038  005582  0EFE               	movlw	254
 28039  005584  1403               	andwf	i2___ftpack@arg+2,w,c
 28040  005586  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 28041  005588  5006               	movf	??i2___ftpack,w,c
 28042  00558A  1007               	iorwf	??i2___ftpack+1,w,c
 28043  00558C  1008               	iorwf	??i2___ftpack+2,w,c
 28044  00558E  B4D8               	btfsc	status,2,c
 28045  005590  D00C               	goto	i2l7201
 28046  005592  D7EC               	goto	i2l7193
 28047  005594                     i2l7197:
 28048  005594  2A04               	incf	i2___ftpack@exp,f,c
 28049  005596  0E01               	movlw	1
 28050  005598  2601               	addwf	i2___ftpack@arg,f,c
 28051  00559A  0E00               	movlw	0
 28052  00559C  2202               	addwfc	i2___ftpack@arg+1,f,c
 28053  00559E  0E00               	movlw	0
 28054  0055A0  2203               	addwfc	i2___ftpack@arg+2,f,c
 28055  0055A2  90D8               	bcf	status,0,c
 28056  0055A4  3203               	rrcf	i2___ftpack@arg+2,f,c
 28057  0055A6  3202               	rrcf	i2___ftpack@arg+1,f,c
 28058  0055A8  3201               	rrcf	i2___ftpack@arg,f,c
 28059  0055AA                     i2l7201:
 28060  0055AA  0E00               	movlw	0
 28061  0055AC  1401               	andwf	i2___ftpack@arg,w,c
 28062  0055AE  6E06               	movwf	??i2___ftpack& (0+255),c
 28063  0055B0  0E00               	movlw	0
 28064  0055B2  1402               	andwf	i2___ftpack@arg+1,w,c
 28065  0055B4  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 28066  0055B6  0EFF               	movlw	255
 28067  0055B8  1403               	andwf	i2___ftpack@arg+2,w,c
 28068  0055BA  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 28069  0055BC  5006               	movf	??i2___ftpack,w,c
 28070  0055BE  1007               	iorwf	??i2___ftpack+1,w,c
 28071  0055C0  1008               	iorwf	??i2___ftpack+2,w,c
 28072  0055C2  B4D8               	btfsc	status,2,c
 28073  0055C4  D006               	goto	i2l7205
 28074  0055C6  D7E6               	goto	i2l7197
 28075  0055C8                     i2l7203:
 28076  0055C8  0604               	decf	i2___ftpack@exp,f,c
 28077  0055CA  90D8               	bcf	status,0,c
 28078  0055CC  3601               	rlcf	i2___ftpack@arg,f,c
 28079  0055CE  3602               	rlcf	i2___ftpack@arg+1,f,c
 28080  0055D0  3603               	rlcf	i2___ftpack@arg+2,f,c
 28081  0055D2                     i2l7205:
 28082  0055D2  BE02               	btfsc	i2___ftpack@arg+1,7,c
 28083  0055D4  D003               	goto	i2l1264
 28084  0055D6  0E02               	movlw	2
 28085  0055D8  6004               	cpfslt	i2___ftpack@exp,c
 28086  0055DA  D7F6               	goto	i2l7203
 28087  0055DC                     i2l1264:
 28088  0055DC  A004               	btfss	i2___ftpack@exp,0,c
 28089  0055DE  9E02               	bcf	i2___ftpack@arg+1,7,c
 28090  0055E0  90D8               	bcf	status,0,c
 28091  0055E2  3204               	rrcf	i2___ftpack@exp,f,c
 28092  0055E4  5004               	movf	i2___ftpack@exp,w,c
 28093  0055E6  1203               	iorwf	i2___ftpack@arg+2,f,c
 28094  0055E8  5005               	movf	i2___ftpack@sign,w,c
 28095  0055EA  A4D8               	btfss	status,2,c
 28096  0055EC  8E03               	bsf	i2___ftpack@arg+2,7,c
 28097  0055EE  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 28098  0055F2  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 28099  0055F6  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 28100  0055FA  0012               	return	
 28101  0055FC                     __end_ofi2___ftpack:
 28102                           	opt stack 0
 28103                           pclatu	equ	0xFFB
 28104                           pclath	equ	0xFFA
 28105                           tblptru	equ	0xFF8
 28106                           tblptrh	equ	0xFF7
 28107                           tblptrl	equ	0xFF6
 28108                           tablat	equ	0xFF5
 28109                           prodh	equ	0xFF4
 28110                           prodl	equ	0xFF3
 28111                           intcon	equ	0xFF2
 28112                           postinc0	equ	0xFEE
 28113                           fsr0h	equ	0xFEA
 28114                           fsr0l	equ	0xFE9
 28115                           wreg	equ	0xFE8
 28116                           postdec1	equ	0xFE5
 28117                           fsr1h	equ	0xFE2
 28118                           fsr1l	equ	0xFE1
 28119                           bsr	equ	0xFE0
 28120                           indf2	equ	0xFDF
 28121                           postinc2	equ	0xFDE
 28122                           postdec2	equ	0xFDD
 28123                           plusw2	equ	0xFDB
 28124                           fsr2h	equ	0xFDA
 28125                           fsr2l	equ	0xFD9
 28126                           status	equ	0xFD8
 28127                           pclatu	equ	0xFFB
 28128                           pclath	equ	0xFFA
 28129                           tblptru	equ	0xFF8
 28130                           tblptrh	equ	0xFF7
 28131                           tblptrl	equ	0xFF6
 28132                           tablat	equ	0xFF5
 28133                           prodh	equ	0xFF4
 28134                           prodl	equ	0xFF3
 28135                           intcon	equ	0xFF2
 28136                           postinc0	equ	0xFEE
 28137                           fsr0h	equ	0xFEA
 28138                           fsr0l	equ	0xFE9
 28139                           wreg	equ	0xFE8
 28140                           postdec1	equ	0xFE5
 28141                           fsr1h	equ	0xFE2
 28142                           fsr1l	equ	0xFE1
 28143                           bsr	equ	0xFE0
 28144                           indf2	equ	0xFDF
 28145                           postinc2	equ	0xFDE
 28146                           postdec2	equ	0xFDD
 28147                           plusw2	equ	0xFDB
 28148                           fsr2h	equ	0xFDA
 28149                           fsr2l	equ	0xFD9
 28150                           status	equ	0xFD8
 28151                           
 28152                           	psect	rparam
 28153  0000                     pclatu	equ	0xFFB
 28154                           pclath	equ	0xFFA
 28155                           tblptru	equ	0xFF8
 28156                           tblptrh	equ	0xFF7
 28157                           tblptrl	equ	0xFF6
 28158                           tablat	equ	0xFF5
 28159                           prodh	equ	0xFF4
 28160                           prodl	equ	0xFF3
 28161                           intcon	equ	0xFF2
 28162                           postinc0	equ	0xFEE
 28163                           fsr0h	equ	0xFEA
 28164                           fsr0l	equ	0xFE9
 28165                           wreg	equ	0xFE8
 28166                           postdec1	equ	0xFE5
 28167                           fsr1h	equ	0xFE2
 28168                           fsr1l	equ	0xFE1
 28169                           bsr	equ	0xFE0
 28170                           indf2	equ	0xFDF
 28171                           postinc2	equ	0xFDE
 28172                           postdec2	equ	0xFDD
 28173                           plusw2	equ	0xFDB
 28174                           fsr2h	equ	0xFDA
 28175                           fsr2l	equ	0xFD9
 28176                           status	equ	0xFD8
 28177                           
 28178                           	psect	temp
 28179  000051                     btemp:
 28180                           	opt stack 0
 28181  000051                     	ds	1
 28182  0000                     int$flags	set	btemp
 28183                           pclatu	equ	0xFFB
 28184                           pclath	equ	0xFFA
 28185                           tblptru	equ	0xFF8
 28186                           tblptrh	equ	0xFF7
 28187                           tblptrl	equ	0xFF6
 28188                           tablat	equ	0xFF5
 28189                           prodh	equ	0xFF4
 28190                           prodl	equ	0xFF3
 28191                           intcon	equ	0xFF2
 28192                           postinc0	equ	0xFEE
 28193                           fsr0h	equ	0xFEA
 28194                           fsr0l	equ	0xFE9
 28195                           wreg	equ	0xFE8
 28196                           postdec1	equ	0xFE5
 28197                           fsr1h	equ	0xFE2
 28198                           fsr1l	equ	0xFE1
 28199                           bsr	equ	0xFE0
 28200                           indf2	equ	0xFDF
 28201                           postinc2	equ	0xFDE
 28202                           postdec2	equ	0xFDD
 28203                           plusw2	equ	0xFDB
 28204                           fsr2h	equ	0xFDA
 28205                           fsr2l	equ	0xFD9
 28206                           status	equ	0xFD8


Data Sizes:
    Strings     595
    Constant    118
    Data        76
    BSS         77
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     42      80
    BANK0           160     69     107
    BANK1           256    119     196
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_42(CODE[17]), STR_41(CODE[18]), STR_40(CODE[17]), STR_39(CODE[18]), 
		 -> STR_38(CODE[17]), STR_37(CODE[18]), STR_36(CODE[7]), STR_35(CODE[18]), 
		 -> STR_34(CODE[19]), STR_33(CODE[18]), STR_32(CODE[18]), STR_31(CODE[18]), 
		 -> STR_30(CODE[18]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[18]), 
		 -> STR_26(CODE[17]), STR_25(CODE[25]), STR_24(CODE[18]), STR_23(CODE[7]), 
		 -> STR_22(CODE[18]), STR_21(CODE[16]), STR_20(CODE[18]), STR_19(CODE[7]), 
		 -> STR_18(CODE[18]), STR_17(CODE[15]), STR_16(CODE[18]), STR_15(CODE[15]), 
		 -> STR_14(CODE[18]), STR_13(CODE[16]), STR_12(CODE[18]), STR_11(CODE[15]), 
		 -> STR_10(CODE[18]), STR_9(CODE[17]), STR_8(CODE[15]), STR_7(CODE[18]), 
		 -> STR_6(CODE[18]), STR_5(CODE[18]), STR_4(CODE[18]), STR_3(CODE[18]), 
		 -> STR_2(CODE[18]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK1[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _hp_isr in COMRAM

    _hp_isr->_T4int
    _T4int->i2___ftge
    i2___ftge->i2___altoft
    i2___altoft->i2___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_UARTint
    _UARTint->i1_longPressENTER
    i1_sysParamInit->i1_calcSysVars
    i1_pressUP->i1_chanValDigUP
    i1_pressENTER->i1_desintegrator
    i1_desintegrator->i1___ftmul
    i1_pressDOWN->i1_chanValDigDOWN
    i1_longPressENTER->i1_integrator
    i1_integrator->i1___ftdiv
    i1___altoft->i1___ftpack
    i1___ftadd->i1___ftpack
    i1_calcVars2ti->i1___ftdiv
    i1___ftdiv->i1___altoft
    i1_calcSysVars->i1___ftmul
    i1___ftmul->i1___ftpack
    _T2int->i1_setPWM2duty
    _saveProcessState->i1_writeEEPROM

Critical Paths under _hp_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _sysParamInit->_calcSysVars
    _calcSysVars->___ftmul
    _lcd_init->_lcd_send_byte
    _drawScreen->_drawSNquest
    _drawSNquest->_printf
    _drawPassWord->_printf
    _drawMenu->_printf
    _drawChanVal->_printf
    _drawCalibProc->_printf
    _drawBadPass->_printf
    _drawPass1Lin->_printf
    _drawAutoCalibRM->_printf
    _drawValEditor->_printf
    _drawAdvON->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_4bits
    _lcd_read_byte->_lcd_read_4bits
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    _pressUP->_chanValDigUP
    _pressENTER->_desintegrator
    _desintegrator->___fttol
    ___fttol->_scale
    _pressDOWN->_chanValDigDOWN
    _longPressENTER->___ftadd
    _integrator->___ftdiv
    ___altoft->___ftpack
    _calcVars2ti->___ftmul
    ___ftmul->___wmul
    ___ftdiv->___altoft
    ___ftadd->_fround
    _PWM2Config->_setPWM2duty

Critical Paths under _isr in BANK1

    None.

Critical Paths under _hp_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _hp_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _hp_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _hp_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _hp_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  897096
                       _EEPROMConfig
                         _PWM2Config
                         _UARTConfig
                     _buttonChecking
                        _clockConfig
                         _drawScreen
                    _interruptConfig
                           _ioConfig
                          _ioInitStt
                           _lcd_init
                        _setPWM2duty
                          _setPWM2on
                       _sysParamInit
                           _t4config
 ---------------------------------------------------------------------------------
 (1) _t4config                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sysParamInit                                         1     1      0    5932
                                             38 BANK1      1     1      0
                        _calcSysVars
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _readEEPROM                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _calcSysVars                                          3     3      0    5901
                                             35 BANK1      3     3      0
                            ___ftmul
 ---------------------------------------------------------------------------------
 (1) _setPWM2on                                            1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             6     6      0    1879
                                              8 BANK1      6     6      0
                     _lcd_send_4bits
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _ioInitStt                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ioConfig                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptConfig                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _drawScreen                                           0     0      0  827134
                          _drawAdvON
                    _drawAutoCalibRM
                        _drawBadPass
                      _drawCalibProc
                        _drawChanVal
                           _drawMenu
                       _drawPassWord
                        _drawSNquest
 ---------------------------------------------------------------------------------
 (2) _drawSNquest                                          3     3      0   69253
                                            116 BANK1      3     3      0
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawPassWord                                         2     2      0  134960
                                            116 BANK1      2     2      0
                       _drawPass1Lin
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawMenu                                             1     1      0   73849
                                            116 BANK1      1     1      0
                         _lcd_gotoxy
                           _lcd_putc
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawChanVal                                          0     0      0  138060
                      _drawValEditor
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawCalibProc                                        0     0      0   69030
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawBadPass                                          0     0      0  134861
                       _drawPass1Lin
                             _printf
 ---------------------------------------------------------------------------------
 (3) _drawPass1Lin                                         0     0      0   69030
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawAutoCalibRM                                      0     0      0  138060
                      _drawValEditor
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (3) _drawValEditor                                        0     0      0   69030
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawAdvON                                            1     1      0   69061
                                            116 BANK1      1     1      0
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              54    36     18   65831
                                             63 BANK1     53    35     18
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   13403
                                             35 BANK1      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0    4695
                                             13 BANK1      1     1      0
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (5) _lcd_putc                                             2     2      0    4664
                                             11 BANK1      2     2      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_gotoxy                                           3     2      1    3199
                                              8 BANK1      3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        3     2      1    1403
                                              5 BANK1      3     2      1
                      _lcd_read_byte
                     _lcd_send_4bits
 ---------------------------------------------------------------------------------
 (3) _lcd_send_4bits                                       5     5      0     272
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (3) _lcd_read_byte                                        2     2      0     114
                                              2 BANK1      2     2      0
                     _lcd_read_4bits
 ---------------------------------------------------------------------------------
 (4) _lcd_read_4bits                                       2     2      0      46
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   13124
                                             35 BANK1     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3004
                                             14 BANK1      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1819
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1985
                                              6 BANK1      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     608
                                              0 BANK1     15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     827
                                              0 BANK1     12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2703
                                              8 BANK1      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     848
                                             13 BANK1      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     703
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    4843
                                             57 BANK1      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     142
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     744
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (1) _clockConfig                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buttonChecking                                       0     0      0   60526
                           _delay_ms
                      _longPressDOWN
                     _longPressENTER
                     _longPressRETRO
                        _longPressUP
                          _pressDOWN
                         _pressENTER
                         _pressRETRO
                            _pressUP
                        _releaseDOWN
                       _releaseENTER
                       _releaseRETRO
                          _releaseUP
 ---------------------------------------------------------------------------------
 (2) _releaseUP                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseRETRO                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseENTER                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseDOWN                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pressUP                                              1     1      0       0
                                              5 BANK1      1     1      0
                       _chanValDigUP
 ---------------------------------------------------------------------------------
 (3) _chanValDigUP                                         5     5      0       0
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (2) _pressRETRO                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pressENTER                                           0     0      0   20214
                          _checkPass
                     _confirmEdition
                      _desintegrator
                        _setPWM2duty
 ---------------------------------------------------------------------------------
 (3) _desintegrator                                       19    19      0    7900
                                             57 BANK1     19    19      0
                            ___aldiv
                            ___ftmul
                            ___fttol
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     508
                                             42 BANK1     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             14     6      8     599
                                              0 BANK1     14     6      8
 ---------------------------------------------------------------------------------
 (3) _checkPass                                            7     7      0     170
                                              0 BANK1      7     7      0
 ---------------------------------------------------------------------------------
 (2) _pressDOWN                                            1     1      0       0
                                              5 BANK1      1     1      0
                     _chanValDigDOWN
 ---------------------------------------------------------------------------------
 (3) _chanValDigDOWN                                       5     5      0       0
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (2) _longPressUP                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _longPressRETRO                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _longPressENTER                                       6     6      0   39068
                                             57 BANK1      6     6      0
                            ___ftadd
                            ___ftdiv
                        _calcVars2ti
                     _confirmEdition
                         _integrator
                        _setPWM2duty
 ---------------------------------------------------------------------------------
 (3) _integrator                                          12    12      0    7899
                                             33 BANK1     12    12      0
                           ___altoft
                            ___ftdiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     558
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2847
                                              8 BANK1     10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _confirmEdition                                       1     1      0   11347
                                             35 BANK1      1     1      0
                      _saveSysParams
 ---------------------------------------------------------------------------------
 (4) _saveSysParams                                        0     0      0   11223
                        _calcVars2ti
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (5) _writeEEPROM                                          2     1      1    1035
                                              0 BANK1      2     1      1
 ---------------------------------------------------------------------------------
 (5) _calcVars2ti                                          0     0      0   10188
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5898
                                             20 BANK1     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    4290
                                             18 BANK1     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4479
                                             45 BANK1     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (2) _longPressDOWN                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2    1244
                                              0 BANK1      5     3      2
 ---------------------------------------------------------------------------------
 (1) _UARTConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2Config                                           0     0      0     797
                        _setPWM2duty
                           _t2config
 ---------------------------------------------------------------------------------
 (2) _t2config                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setPWM2duty                                          6     4      2     797
                                              0 BANK1      6     4      2
 ---------------------------------------------------------------------------------
 (1) _EEPROMConfig                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _isr                                                17    17      0   34753
                                             52 BANK0     17    17      0
                              _T2int
                            _UARTint
 ---------------------------------------------------------------------------------
 (12) _UARTint                                             1     1      0   33546
                                             51 BANK0      1     1      0
                      _loadSysParams
                          _putchUART
                    i1_longPressDOWN
                   i1_longPressENTER
                   i1_longPressRETRO
                      i1_longPressUP
                        i1_pressDOWN
                       i1_pressENTER
                       i1_pressRETRO
                          i1_pressUP
                    i1_saveSysParams
                     i1_sysParamInit
 ---------------------------------------------------------------------------------
 (13) i1_sysParamInit                                      1     1      0    1565
                                             26 BANK0      1     1      0
                      i1_calcSysVars
                       i1_readEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_readEEPROM                                        1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_pressUP                                           1     1      0       0
                                              5 BANK0      1     1      0
                     i1_chanValDigUP
 ---------------------------------------------------------------------------------
 (14) i1_chanValDigUP                                      5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (13) i1_pressRETRO                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_pressENTER                                        0     0      0    7562
                        i1_checkPass
                   i1_confirmEdition
                    i1_desintegrator
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (14) i1_desintegrator                                    19    19      0    3065
                                             23 BANK0     19    19      0
                          i1___aldiv
                          i1___ftmul
                          i1___fttol
                           i1___lmul
 ---------------------------------------------------------------------------------
 (15) i1___fttol                                          15    11      4     406
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (15) i1___aldiv                                          14     6      8     515
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (14) i1_checkPass                                         7     7      0     170
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (13) i1_pressDOWN                                         1     1      0       0
                                              5 BANK0      1     1      0
                   i1_chanValDigDOWN
 ---------------------------------------------------------------------------------
 (14) i1_chanValDigDOWN                                    5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (13) i1_longPressUP                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_longPressRETRO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_longPressENTER                                    6     6      0   14765
                                             45 BANK0      6     6      0
                          i1___ftadd
                          i1___ftdiv
                      i1_calcVars2ti
                   i1_confirmEdition
                       i1_integrator
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (14) i1_integrator                                       12    12      0    3225
                                             33 BANK0     12    12      0
                         i1___altoft
                          i1___ftdiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (15) i1___lmul                                           12     4      8     276
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (15) i1___altoft                                         10     6      4    1002
                                              8 BANK0     10     6      4
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (14) i1_confirmEdition                                    1     1      0    3950
                                             33 BANK0      1     1      0
                    i1_saveSysParams
 ---------------------------------------------------------------------------------
 (14) i1___ftadd                                          12     6      6    2128
                                              8 BANK0     12     6      6
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (13) i1_longPressDOWN                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _putchUART                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (13) _loadSysParams                                       0     0      0    5360
                      i1_calcSysVars
                    i1_saveSysParams
 ---------------------------------------------------------------------------------
 (13) i1_saveSysParams                                     0     0      0    3826
                      i1_calcVars2ti
                      i1_writeEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_calcVars2ti                                       0     0      0    3274
                          i1___ftdiv
                          i1___ftmul
 ---------------------------------------------------------------------------------
 (15) i1___ftdiv                                          15     9      6    1743
                                             18 BANK0     15     9      6
                         i1___altoft (ARG)
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (14) i1_calcSysVars                                       3     3      0    1534
                                             23 BANK0      3     3      0
                          i1___ftmul
 ---------------------------------------------------------------------------------
 (15) i1___ftmul                                          15     9      6    1531
                                              8 BANK0     15     9      6
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (16) i1___ftpack                                          8     3      5     763
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (12) _T2int                                               1     1      0    1207
                                              6 BANK0      1     1      0
                   _saveProcessState
                         i1_delay_ms
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (14) i1_setPWM2duty                                       6     4      2     377
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (13) i1_delay_ms                                          5     3      2     278
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (13) _saveProcessState                                    0     0      0     552
                      i1_writeEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_writeEEPROM                                       2     1      1     552
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (19) _hp_isr                                             14    14      0     827
                                             28 COMRAM    14    14      0
                              _T4int
 ---------------------------------------------------------------------------------
 (20) _T4int                                               1     1      0     827
                                             27 COMRAM     1     1      0
                         i2___altoft
                           i2___ftge
                      i2_setPWM2duty
 ---------------------------------------------------------------------------------
 (21) i2_setPWM2duty                                       6     4      2     166
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (21) i2___ftge                                            9     3      6     188
                                             18 COMRAM     9     3      6
                         i2___altoft (ARG)
 ---------------------------------------------------------------------------------
 (21) i2___altoft                                         10     6      4     473
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (22) i2___ftpack                                          8     3      5     309
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 22
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROMConfig
   _PWM2Config
     _setPWM2duty
     _t2config
   _UARTConfig
   _buttonChecking
     _delay_ms
     _longPressDOWN
     _longPressENTER
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       _calcVars2ti
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _confirmEdition
         _saveSysParams
           _calcVars2ti
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _writeEEPROM
       _integrator
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___lmul
       _setPWM2duty
     _longPressRETRO
     _longPressUP
     _pressDOWN
       _chanValDigDOWN
     _pressENTER
       _checkPass
       _confirmEdition
         _saveSysParams
           _calcVars2ti
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _writeEEPROM
       _desintegrator
         ___aldiv
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
       _setPWM2duty
     _pressRETRO
     _pressUP
       _chanValDigUP
     _releaseDOWN
     _releaseENTER
     _releaseRETRO
     _releaseUP
   _clockConfig
   _drawScreen
     _drawAdvON
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawAutoCalibRM
       _drawValEditor
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawBadPass
       _drawPass1Lin
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawCalibProc
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawChanVal
       _drawValEditor
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawMenu
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawPassWord
       _drawPass1Lin
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawSNquest
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _interruptConfig
   _ioConfig
   _ioInitStt
   _lcd_init
     _lcd_send_4bits
     _lcd_send_byte
       _lcd_read_byte
         _lcd_read_4bits
       _lcd_send_4bits
   _setPWM2duty
   _setPWM2on
   _sysParamInit
     _calcSysVars
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readEEPROM
   _t4config

 _isr (ROOT)
   _T2int
     _saveProcessState
       i1_writeEEPROM
     i1_delay_ms
     i1_setPWM2duty
   _UARTint
     _loadSysParams
       i1_calcSysVars
         i1___ftmul
           i1___ftpack
       i1_saveSysParams
         i1_calcVars2ti
           i1___ftdiv
             i1___altoft (ARG)
               i1___ftpack
             i1___ftpack (ARG)
           i1___ftmul
             i1___ftpack
         i1_writeEEPROM
     _putchUART
     i1_longPressDOWN
     i1_longPressENTER
       i1___ftadd
         i1___ftpack
       i1___ftdiv
         i1___altoft (ARG)
           i1___ftpack
         i1___ftpack (ARG)
       i1_calcVars2ti
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___ftmul
           i1___ftpack
       i1_confirmEdition
         i1_saveSysParams
           i1_calcVars2ti
             i1___ftdiv
               i1___altoft (ARG)
                 i1___ftpack
               i1___ftpack (ARG)
             i1___ftmul
               i1___ftpack
           i1_writeEEPROM
       i1_integrator
         i1___altoft
           i1___ftpack
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___lmul
       i1_setPWM2duty
     i1_longPressRETRO
     i1_longPressUP
     i1_pressDOWN
       i1_chanValDigDOWN
     i1_pressENTER
       i1_checkPass
       i1_confirmEdition
         i1_saveSysParams
           i1_calcVars2ti
             i1___ftdiv
               i1___altoft (ARG)
                 i1___ftpack
               i1___ftpack (ARG)
             i1___ftmul
               i1___ftpack
           i1_writeEEPROM
       i1_desintegrator
         i1___aldiv
         i1___ftmul
           i1___ftpack
         i1___fttol
         i1___lmul
       i1_setPWM2duty
     i1_pressRETRO
     i1_pressUP
       i1_chanValDigUP
     i1_saveSysParams
       i1_calcVars2ti
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___ftmul
           i1___ftpack
       i1_writeEEPROM
     i1_sysParamInit
       i1_calcSysVars
         i1___ftmul
           i1___ftpack
       i1_readEEPROM

 _hp_isr (ROOT)
   _T4int
     i2___altoft
       i2___ftpack
     i2___ftge
       i2___altoft (ARG)
         i2___ftpack
     i2_setPWM2duty

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     77      C4       6       76.6%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     45      6B       4       66.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2A      50       1       85.1%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     17F       9        0.0%
DATA                 0      0     17F      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Nov 06 17:30:14 2016

      __end_ofi1_pressDOWN 47A0               ___altoft@exp 0110                 i1___altoft 588A  
     __end_ofi1_pressENTER 1F9A                 i1___ftpack 4480            ?_lcd_send_4bits 0001  
     __end_ofi1_pressRETRO 5A60            ??_desintegrator 0139              ___altoft@sign 0111  
         i2setPWM2duty@act 0005                         l91 6B4E             ?_lcd_send_byte 0105  
             ___awdiv@sign 010B                         _fd 01BC                         _ie 00C9  
            _holdRETROcont 01BF           ?i1_saveSysParams 0001                         _pi 0047  
               i2___altoft 6162                         bsr 000FE0            ?_confirmEdition 0001  
      ___wmul@multiplicand 0110     __size_ofi1_calcVars2ti 0058                 i2___ftpack 554E  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000               ___ftadd@exp1 0138               ___ftadd@exp2 0137  
             i1___altoft@c 0068                drawMenu@adv 0174               ___ftadd@sign 0136  
                      l100 685C                        l401 4AA8                        l513 6BDE  
                      l418 4A5A                        l283 6C0A                        l277 6B86  
                      l381 2B34                        l375 2A7C                        l552 47F8  
                      l384 2B92                        l537 2D84                        l705 1BE4  
                      l369 2A02                        l378 2ADA                        l555 482C  
                      l476 5B5A                        l644 5956                        l549 47C8  
                      l558 4860                        l680 1A76                        l824 1FBE  
                      l851 2136                        l684 1A9C                        l860 21C2  
                      l836 206A                        l685 1AB4                        l686 1AC8  
                      l848 2116               i1___ftadd@f1 0068               i1___ftadd@f2 006B  
                      l955 09F0                        l989 0870               __CFG_CPB$OFF 000000  
    i1setPWM2duty@actuator 0060                        _PR2 000FBB                        _PR4 000F52  
             __CFG_CPD$OFF 000000                 i1_delay_ms 687E     __size_ofi1_calcSysVars 006A  
                      _isr 0018               i1___ftdiv@f1 0072               i1___ftdiv@f2 0075  
             i1___ftdiv@f3 007C    __end_of_interruptConfig 6CC0               ___awmod@sign 0105  
                      prod 000FF3                        wreg 000FE8  __size_ofi1_longPressENTER 02DC  
               _TXSTA1bits 000FAC               __CFG_IESO$ON 000000               drawSNquest@i 0174  
__size_ofi1_longPressRETRO 0058               i1___ftmul@f1 0068               i1___ftmul@f2 006B  
             i1___fttol@f1 0060               __CFG_LVP$OFF 000000                i1_checkPass 5E60  
           i1___aldiv@sign 0069               ___ftdiv@cntr 011B               ___ftdiv@sign 0120  
                     l1302 2698                       l1311 26C2                       l1232 33D6  
                     l1322 37BA                       l1330 3038                       l1411 5310  
                     l1421 5AE8                       l1264 444C                       l1336 30B8  
                     l1361 6A66                       l1329 2FF4                       l1291 259A  
                     l1293 25C2                       l1287 2560                       l6215 3A08  
                     l6233 3A6E                       l6225 3A38                       l6227 3A48  
                     l6219 3A1C            ??_drawCalibProc 0174                       l6229 3A52  
                     l6197 3976                       l9211 43A2                       ?_isr 0001  
                     l9221 4430                       l9213 43B0                       l9223 443E  
                     l9215 43E0                       l9207 438E                       l9313 25A8  
                     l9401 3778                       l9235 4472                       l9219 4400  
                     l9307 256E                       l9171 5D96                       l9229 4456  
                     l9341 2650                       l9421 3422                       l9165 5D78  
                     l9335 2628                       l9319 25B8                       l9503 51A0  
                     l9159 5D5A                       l9337 2636                       l9329 25FA  
                     l9441 34AA                       l9177 5DB4                       l9355 26EC  
                     l9347 267E                       l9339 2644                       l9451 34E8  
                     l9427 345C                       l9531 57C0                       l9523 578A  
                     l9515 5766                       l9283 602A                       l9291 6052  
                     l9365 273A                       l9349 268C                       l9381 3718  
                     l9445 34C8                       l9525 5796                       l9189 68CA  
                     l9197 6A24                       l9285 6038                       l9277 5FFC  
                     l9375 36DE                       l9455 3506                       l9471 5108  
                     l9527 579C                       l9535 57CE                       l9519 5776  
                     l9287 6046                       l9279 600A                       l9711 117C  
                     l9705 10B6                       l9483 513C                       l9539 57E2  
                     l9723 6ABE                       l9901 5A8C                       l9733 2F66  
                     l9485 5148                       l9477 511E                       l9903 5A92  
                     l9495 517E                       l9487 514E                       l9913 5F82  
                     l9841 33CC                       l9833 33A0                       l9817 3354  
                     l9809 3300                       l9673 24B0                       l9665 23CC  
                     l9907 5AD6                       l9915 5F92                       l9739 2FA0  
                     l9499 518C                       l9829 338C                       l9781 30AE  
                     l9773 3082                       l9693 0F2C                       l9855 4EE0  
                     l9847 677E                       l9839 33BC                       l9687 0E66  
                     STR_1 7EC1                       STR_2 7ED3                       l9865 4F64  
                     l9881 52A4                       l9769 306E                       l9697 0F52  
                     STR_3 7F1B                       STR_4 7EE5                       l9859 4F20  
                     l9891 52FE                       l9883 52AA                       l9795 32AC  
                     l9779 309E                       STR_5 7EF7                       STR_6 7F09  
                     l9789 3286                       l9981 00D2                       STR_7 7E1F  
                     STR_8 7FB4                       l9879 5294                       l9991 011A  
                     STR_9 7F82                       l9985 00E8                       l9899 5A7C  
                     l9999 0190               printf@tmpval 0162                       u7601 3952  
                     u7620 399C                       u7625 3992             ??_drawPass1Lin 0174  
            __CFG_FCMEN$ON 000000                lcd_putc@cha 010C            __end_of_UARTint 4150  
                     _main 67A8       __size_of_calcVars2ti 0058               ___ftpack@arg 0100  
             i2___altoft@c 0009               ___ftpack@exp 0103           lcd_read_byte@low 0102  
                     fsr0h 000FEA                       fsr1h 000FE2                       fsr0l 000FE9  
                     fsr2h 000FDA                       fsr1l 000FE1                       indf2 000FDF  
                     fsr2l 000FD9                       btemp 0051              __CFG_BORV$285 000000  
           ??_drawPassWord 0174                       pclat 000FFA               i2___ftge@ff1 0013  
             i2___ftge@ff2 0016              i1___ftdiv@exp 007F                       prodh 000FF4  
                     prodl 000FF3                       start 00BE            ?_longPressENTER 0001  
     __size_of_calcSysVars 006A            ?_longPressRETRO 0001              drawSNquest@tq 0176  
    __size_of_sysParamInit 00C2       __end_of_EEPROMConfig 6CC6               ___ftmul@cntr 0121  
             ___param_bank 000010                _writeEEPROM 6B6C               ___ftmul@sign 0122  
            i1___ftmul@exp 0071               ___fttol@exp1 0138               ___fttol@lval 0134  
                    ??_isr 0094             i1___altoft@exp 0070    i1___ftmul@f3_as_product 0072  
             _BAUDCON1bits 000FB8                      l10011 0214                      l10101 053A  
                    l10005 01B8                      l10103 0550                      l10031 028A  
                    l10023 0252                      l10015 0224                      l10113 05C8  
                    l10033 02A2                      l10017 022A                      l10009 01FE  
                    l10211 0A3C                      l10123 0626                      l10043 02E8  
                    l10027 0278                      l10051 0306                      l10221 0A8A  
                    l10141 06D8                      l10109 059A                      l10037 02B6  
                    l10029 0284                      l10053 0344                      l11005 2BBC  
                    l10311 3E78                      l10223 0A90                      l10215 0A64  
                    l10151 0750                      l10127 068C                      l10047 0300  
                    l10039 02D0                      l11023 5214                      l11201 631A  
                    l10313 3E88                      l10305 3E4A                      l10153 0758  
                    l10145 0728                      l10129 0692                      l11113 5F24  
                    l11017 51DE                      l11009 51AC                      l11033 5246  
                    l10331 3F10                      l10323 3EE2                      l10315 3E8E  
                    l10243 0B2E                      l10235 0AD6                      l10171 083E  
                    l10155 076C                      l10059 035E                      l11043 4AC8  
                    l11213 459E                      l10261 0BDC                      l10173 0852  
                    l10165 0822                      l10149 074A                      l10093 04C6  
                    l10085 0456                      l10069 03A4                      l11117 5F4E  
                    l12021 56D6                      l10343 5818                      l10327 3EF4  
                    l11151 41CA                      l10263 0BE6                      l10255 0B9A  
                    l10239 0AFE                      l10183 0898                      l10167 0830  
                    l10159 0794                      l11039 4AB2                      l10345 5828  
                    l11233 4624                      l11225 45FC                      l10601 2C7C  
                    l11401 1BB6                      l11145 417A                      l10273 0C34  
                    l10265 0BF2                      l10257 0BA4                      l10249 0B62  
                    l10193 09C6                      l10177 0874                      l10097 04F4  
                    l11065 674A                      l10521 18C2                      l10513 17D2  
                    l11049 4AE4                      l11073 49B0                      l12033 56FE  
                    l12025 56E0                      l10283 61EC                      l11315 658C  
                    l11243 4652                      l11251 4668                      l11219 45B0  
                    l11411 1BEA                      l11171 4226                      l11139 4162  
                    l10195 09D4                      l10187 08EA                      l10099 050A  
                    l11091 4A24                      l12043 5726                      l10613 3BF2  
                    l11309 6574                      l11245 4658                      l11253 4686  
                    l11405 1BCA                      l11173 422E                      l11165 4214  
                    l10277 0CBE                      l10269 0C0C                      l10525 193A  
                    l10517 184A                      l10533 1A24                      l11069 499A  
                    l10287 6212                      l11319 659E                      l11247 4662  
                    l11239 4646                      l11415 1BFC                      l11159 41F2  
                    l10199 09E2                      l10279 0CD4                      l11095 4A40  
                    l11087 4A0A                      l11079 49CC                      l12071 549C  
                    l12039 571C                      l10545 5B24                      l10625 3CA2  
                    l10617 3C08                      l10561 5E4A                      l10553 5DE2  
                    l11337 1A62                      l11273 5938                      l11169 4220  
                    l11177 4234                      l10529 19B0                      l12081 54C0  
                    l12073 54A4                      l11195 6300                      l10563 5E52  
                    l10299 3E2C                      l11419 1C0E                      l11347 1A8E  
                    l11339 1A6A                      l11291 5990                      l11179 4252  
                    l12403 1FDE                      l12091 54E6                      l12083 54C8  
                    l12075 54AA                      l10549 5B46                      l10629 47A6  
                    l11525 12F0                      l11189 62E2                      l10557 5DF8  
                    l11453 1CB4                      l11373 1B2E                      l12501 218A  
                    l12413 2010                      l12405 1FEE                      l12093 54EE  
                    l12085 54CE                      l12077 54B0                      l10639 47DA  
                    l10671 4872                      l11551 13A8                      l11527 12F8  
                    l11199 6312                      l10567 5E5A                      l11359 1AE0  
                    l11367 1AF8                      l11295 59A2                      l11279 595C  
                    l12503 2190                      l12423 2032                      l12095 54F4  
                    l12087 54D6                      l12079 54B8                      l10649 480A  
                    l11553 13B0                      l11473 11C2                      l11457 1CC2  
                    l11369 1B1C                      l11289 5988                      l12521 21E2  
                    l12505 219E                      l12425 2038                      l12417 201C  
                    l12089 54DE                      l10659 483E                      l11483 11F2  
                    l11459 1CCA                      l11387 1B5E                      l12531 2214  
                    l12523 21F2                      l12443 208A                      l12427 2046  
                    l12099 54FA                      l11389 1B70                      l12541 2236  
                    l12453 20BC                      l12445 209A                      l11479 11E0  
                    l11399 1BB0                      l12543 223C                      l12535 2220  
                    l12463 20DE                      l12631 67E8                      l11497 1232  
                    l11489 120A                      l12465 20E4                      l12457 20C8  
                    l10953 2A36                      l12491 2168                      l12483 2146  
                    l12467 20F2                      l10963 2A76                      l10955 2A48  
                    l10947 29FC                      l10939 29CE                      l10893 6844  
                    l12495 2174                      l10991 2B5E                      l10975 2AD4  
                    l10967 2AA6                      l10987 2B2E                      l10979 2B00  
                    l10999 2B8C            __end_of___aldiv 3F22    __end_ofi1_desintegrator 2F2C  
                    ?_main 0001            __end_of___awdiv 51AA                      _EEADR 000FA9  
          __end_of___ftadd 2760                      STR_10 7E55                      STR_11 7FC3  
                    STR_20 7E79                      STR_12 7E79                      STR_21 7FA4  
                    STR_13 7FA4                      STR_22 7DFB                      STR_30 7E8B  
                    STR_14 7DFB                      STR_23 7FF7                      STR_15 7FD2  
                    STR_31 7E9D                      STR_40 7F3E                      STR_32 7E43  
                    STR_16 7E0D                      STR_24 7DE9                      STR_41 7EAF  
                    STR_17 7FE1                      STR_33 7E31                      STR_25 7DAB  
                    STR_18 7E55                      STR_26 7F60                      STR_42 7F4F  
                    STR_34 7DC4                      STR_19 7FF0                      STR_27 7E67  
                    STR_35 7DD7                      STR_36 7FF0                      STR_28 7F71  
          __end_of___awmod 57EC                      STR_29 7F93                      STR_37 7EAF  
                    STR_38 7F2D                      STR_39 7EAF            __end_of___ftdiv 37F0  
          __end_of___ftneg 6A74            __end_of___lldiv 5322            __end_of___ftmul 3546  
          ___awdiv@divisor 0108            __end_of___llmod 5AFA            __end_of___ftsub 67A8  
            lcd_init@F7567 00A5                      u13141 250E            __end_of___fttol 3A80  
                    u13151 252C                      u13401 33FE                      u13421 3438  
                    u15110 2C7A                      u14230 03EA                      u13351 36BA  
                    u13371 36F4                      u14235 03DE                      u14420 0868  
                    u14085 53DA                      u14086 53DC                      u12830 607E  
                    u12840 6090                      u12905 5D82                      u12850 60AA  
                    u12906 5D84                      u13811 2F7C                      u16140 4630  
                    u12860 60CA                      u12836 6080                      u12925 5DA0  
                    u16150 4632                      u12926 5DA2                      u12848 6094  
                    u12945 5DBE                      u12858 60AE                      u12946 5DC0  
                    u16500 1B6A                      u12868 60CE                      u12885 5D64  
                    u12965 68E2                      u12886 5D66                      u12966 68E4  
                    u13791 2F42                      u16520 1B86                      u16530 1B88  
                    u15920 41FE                      u16490 1B68                      u15930 4200  
                    u16760 122A                      u18440 1FF6                      u16770 122C  
                    u16860 1476                      u16870 1478                      u18550 20A2  
                    u18446 1FF8                      i1l100 68A2                      u18660 214E  
                    u18556 20A4                      u18770 21FA                      u18666 2150  
                    u18917 56C6                      u18927 56EE                      u18776 21FC  
                    i1l225 6C82                      u18937 570C                      u18947 601E  
                    u18957 5DC8                      u18967 684C                      i1l283 6C36  
                    i1l277 6BA6                      i1l552 48EE                      i1l537 2F2A  
                    i1l705 1E98                      i1l482 313E                      i1l555 4922  
                    i1l476 5BEE                      i1l644 59F2                      i1l549 48BE  
                    i1l558 4956                      i1l495 3200                      i1l680 1D2A  
                    i1l684 1D50                      i1l685 1D68                      i1l686 1D7C  
              ?_UARTConfig 0001                      i1l881 0076                      i2l476 63F4  
                    i2l876 6126            ___awdiv@counter 010A              __CFG_WDTPS$32 000000  
                    _T2int 30CA             i1___ftadd@exp1 0073             i1___ftadd@exp2 0072  
                    _T4int 55FC    __size_ofi1_chanValDigUP 00D0             i1___ftadd@sign 0071  
              ?_PWM2Config 0001              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000        ___lmul@multiplicand 0104              __CFG_WRT3$OFF 000000  
             ___lltoft@exp 0110             __CFG_EBTR0$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000                      _fData 00C4             __CFG_EBTR3$OFF 000000  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
           __CFG_EBTRB$OFF 000000                      _exp10 0177                      _flech 0195  
          __end_of_dpowers 7D5D                i1delay_ms@i 0063                      _selSN 01C3  
    __size_ofi1_readEEPROM 0016          lcd_read_byte@high 0103                      _scale 0CF4  
          __end_of_isdigit 6AC8         __CFG_MCLRE$EXTMCLR 000000              ___ftpack@sign 0104  
          ??_drawValEditor 0174                      _putch 6C62           __end_ofi1___lmul 62C6  
                    tablat 000FF5           __end_ofi2___ftge 5D44              drawPassWord@i 0174  
            i1_calcVars2ti 6660             i1___ftdiv@cntr 007B            __end_of_pressUP 4262  
             _sysParamInit 4F68             i1___ftdiv@sign 0080                      plusw2 000FDB  
             ?_setPWM2duty 0100           i1desintegrator@i 0088                      status 000FD8  
          ??_lcd_read_byte 0102         __size_ofi1___aldiv 011A                i1_pressDOWN 4696  
           __CFG_HFOFST$ON 000000         __size_ofi1___ftadd 0268         __size_ofi1___ftdiv 014C  
             putchUART@val 0060         __size_ofi1___ftmul 015E         __size_ofi1___fttol 0144  
            i1_calcSysVars 6488             i1___ftpack@arg 0060             i1___ftpack@exp 0063  
             ?_longPressUP 0001            __initialization 5C22      __end_ofi1_writeEEPROM 6BAC  
             __end_of_main 67F2                ?i1___altoft 0068            ??_lcd_send_byte 0106  
      i1___lmul@multiplier 0060                ?i1___ftpack 0060             i1___ftmul@cntr 0075  
           i1___ftmul@sign 0076      __end_of_saveSysParams 53DE              lcd_gotoxy@pos 0109  
    __size_ofi1_integrator 0122                ?i2___altoft 0009               ?_releaseDOWN 0001  
           i1___fttol@exp1 006E                ?i2___ftpack 0001         __size_ofi1_pressUP 0112  
           i1___fttol@lval 006A     __size_of_loadSysParams 0056                     ??_main 0177  
            ___fttol@sign1 0133               i1_readEEPROM 6C28              __activetblptr 000002  
              ?i1_delay_ms 0060             __CFG_PLLCFG$ON 000000            i1___altoft@sign 0071  
                   ?_T2int 0001                     ?_T4int 0001       __size_of__tdiv_to_l_ 019E  
         i1_chanValDigDOWN 4DD4           ?_interruptConfig 0001         desintegrator@temp2 0146  
       desintegrator@temp3 0142         desintegrator@tempL 013E       __size_of_clockConfig 0026  
    __size_of_chanValDigUP 00D0           __end_of_t2config 6BFC               i1checkPass@i 0065  
                ??_UARTint 0093           __end_of_t4config 6A9E           __end_of___altoft 588A  
           setPWM2duty@act 0104           ___llmod@dividend 010D                     ?_scale 0123  
                   _EEDATA 000FA8                     _CCPR2L 000F67                     _EECON2 000FA7  
         ___awdiv@dividend 0106                     ?_putch 0001           __end_of___ftpack 4480  
 __size_of_drawAutoCalibRM 0032             ?i1_calcVars2ti 0001           __end_of___lltoft 5FF6  
                   i1l1302 2900                     i1l1311 292A                     i1l1322 3906  
                   i1l1264 4558                     i1l1291 2802                     i1l1293 282A  
                   i1l1287 27C8                     i2l1264 55DC                     i1l9251 44EC  
                   i1l9243 449A                     i1l9271 457E                     i1l9255 450C  
                   i1l9247 44AE                     i2l7201 55AA                     i1l9265 4562  
                   i1l9257 453C                     i1l9249 44BC                     i1l9601 35BA  
                   i2l7203 55C8                     i1l9259 454A                     i2l7205 55D2  
                   i1l9615 3608                     i1l9625 3646                     i1l9619 3626  
                   i1l9555 3864                     i1l9629 3664                     i1l9549 382A  
                   i1l9575 38C4                     i2l7193 556C                     i2l7195 5576  
                   i1l9595 3580                     i2l7197 5594                     i2l7189 555E  
                   i2l8421 6190                     i2l8431 5CE4                     i2l8441 5D40  
                   i2l8419 6184                     i2l8435 5D14                     i2l8835 5672  
                   i2l7991 63E8                     i2l7987 63CE                     _RCREG1 000FAE  
     __size_of_drawBadPass 0016           i1_confirmEdition 4896                     _SPBRG1 000FAF  
           ?i1_calcSysVars 0001                     _TXREG1 000FAD             i1_sysParamInit 502A  
     __size_of_drawChanVal 00BC           __end_of_delay_ms 687E      __size_ofi1_pressENTER 02B4  
                   _UPisLP 003C             integrator@acum 0123           __end_of_ioConfig 69E2  
             i1_integrator 3CE6        __size_of_UARTConfig 0038      __size_ofi1_pressRETRO 009C  
           integrator@temp 0127             __CFG_PWRTEN$ON 000000             __CFG_XINST$OFF 000000  
            _DOWNsecurLock 01B5        __size_of_PWM2Config 0066           __end_of__powers_ 7DAB  
     __size_of_drawSNquest 00F0               _CCPTMRS0bits 000F49           __end_of_drawMenu 2BE0  
         __end_of_lcd_init 574A           __end_of_lcd_putc 6070                     ___ftge 4EA0  
                   ___lmul 61DA                  ??___aldiv 0108                     ___wmul 697A  
                ??___awdiv 010A                  ??___ftadd 0133             __CFG_STVREN$ON 000000  
                ??___awmod 0104                  ??___ftdiv 0118                  ??___ftneg 0103  
                ??___lldiv 0108                  ??___ftmul 011A                  ??___llmod 0115  
                ??___ftsub 013F                  ??___fttol 012E                     _contra 00C0  
                   _hp_isr 0008                     _selKMT 0042                     _fround 224C  
           i2___altoft@exp 0011                     clear_0 5C88                     clear_1 5C94  
                   clear_2 5CA0           ___awdiv@quotient 010C            ___awmod@divisor 0102  
             _chanValDigUP 4B68            ___awmod@counter 0104                     _printf 00C2  
     __end_of_drawPass1Lin 6BCA   __size_ofi1_longPressDOWN 002A           ?i1_desintegrator 0001  
        __end_ofi1___aldiv 403C      ___ftmul@f3_as_product 011E          __end_ofi1___ftadd 29C8  
      _lcd_send_4bits$1690 0102        _lcd_send_4bits$1691 0103        _lcd_send_4bits$1688 0100  
      _lcd_send_4bits$1689 0101          __end_ofi1___ftdiv 393C           ??_lcd_read_4bits 0100  
        __end_ofi1___ftmul 36A4          __end_ofi1___fttol 3BC4       __end_of_drawPassWord 4B68  
             __pdataCOMRAM 0043                  ??_isdigit 0100           i1_longPressENTER 147E  
             __mediumconst 7D34           i1_longPressRETRO 6608                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                  ??_pressUP 0105  
             i1_pressENTER 1CE6        __size_ofi1___altoft 009E           ??_chanValDigDOWN 0100  
             i1_pressRETRO 59C4        __size_ofi1___ftpack 010C     __end_ofi1_sysParamInit 50EC  
            _loadSysParams 66B8                 __accesstop 0060          ?_saveProcessState 0001  
  __end_of__initialization 5CA6                 ___altoft@c 0108        __size_ofi2___altoft 0078  
        __end_ofi1_pressUP 4374            __CFG_PBADEN$OFF 000000      __size_of_EEPROMConfig 0006  
              _UPsecurLock 01B9                 ___ftadd@f1 012D                 ___ftadd@f2 0130  
      __size_ofi2___ftpack 00AE       i1longPressENTER@temp 008D                 ___ftge@ff1 0100  
               ___ftge@ff2 0103            i1___ftpack@sign 0064              ___rparam_used 000001  
       ??_saveProcessState 0062                 ___ftdiv@f1 0112                 ___ftdiv@f2 0115  
               ___ftdiv@f3 011C           ??_lcd_send_4bits 0100            writeEEPROM@data 0100  
               ___ftneg@f1 0100        __size_ofi1_delay_ms 0046             i2___ftpack@arg 0001  
            __end_of_T2int 3260             i2___ftpack@exp 0004              __end_of_T4int 56A8  
               ___ftmul@f1 0114                 ___ftmul@f2 0117           ??_confirmEdition 0123  
               ___ftsub@f1 0139                 ___ftsub@f2 013C                 ___fttol@f1 012A  
           __pcstackCOMRAM 0001                setPWM2on@on 0100               __pidataBANK0 6C3E  
             __pidataBANK1 6B1C               _FC1securLock 0038         __size_of_checkPass 008E  
               ___lltoft@c 0108                integrator@i 012B              __end_of_scale 11A2  
            __end_of_putch 6C70               _FC2securLock 0039                  ?i1___lmul 0060  
                ?i2___ftge 0013               _actualScreen 01BA             lcd_gotoxy@fila 0108  
   __size_ofi1_setPWM2duty 0094                 __div_to_l_ 3260             i1_chanValDigUP 4C38  
                  ??_T2int 0066                    ??_T4int 001C         __size_of_ioInitStt 0008  
            ?_releaseENTER 0001                 _calibLevel 01BB         __size_of_drawAdvON 004E  
            ?_releaseRETRO 0001            i1___fttol@sign1 0069               _EEPROMConfig 6CC0  
        lcd_gotoxy@address 010A            ??i1_calcVars2ti 0081               ?i1_checkPass 0001  
   __size_ofi1_longPressUP 0074            __div_to_l_@exp1 010B            __div_to_l_@cntr 010A  
               _chanValdig 01A0                    ??_scale 0126          i1___aldiv@divisor 0064  
          __div_to_l_@quot 0106                    ??_putch 010D          i1___aldiv@counter 0068  
         ??_longPressENTER 0139                 __pbssBANK0 00BA                 __pbssBANK1 01A0  
           ?_loadSysParams 0001            ??i1_calcSysVars 0077           ??_longPressRETRO 0100  
          ?i1_sysParamInit 0001      i1_longPressENTER$3198 0090              __div_to_l_@f1 0100  
            __div_to_l_@f2 0103          ??_drawAutoCalibRM 0174       __size_of_setPWM2duty 0094  
           _RETROsecurLock 01B8         __size_of_setPWM2on 001A         __CFG_CCP2MX$PORTC1 000000  
             ?_writeEEPROM 0100             lcd_send_byte@n 0105                    ?___ftge 0100  
                  ?___lmul 0100                    ?___wmul 010E         __size_of_releaseUP 000C  
       __CFG_CCP3MX$PORTB5 000000       __size_of_longPressUP 0074                  ?_t2config 0001  
                  ?_hp_isr 0001                  ?_t4config 0001                  ?___altoft 0108  
                  ?_fround 0123             ___lmul@product 0108                  ?___ftpack 0100  
   __end_ofi1_chanValDigUP 4D08      __end_of_desintegrator 2D86                    ?_printf 013F  
                ?___lltoft 0108                 ??i1___lmul 0068                 ??i2___ftge 0019  
       __size_of_pressDOWN 010A      i2setPWM2duty@actuator 0001               ??_UARTConfig 0100  
     __size_of_releaseDOWN 000C                    u1360_21 3840             ??_releaseENTER 0100  
                  u1363_21 355C                    u1540_21 2794                    i1l10411 3F46  
                  i1l10501 3B96                    i1l10423 3F92                    u1365_21 3596  
                  i1l10425 3FA2                    i1l10417 3F64                    i1l10505 3BB2  
                  i1l12131 315C                    i1l12123 312E                    i1l10443 402A  
                  i1l10435 3FFC                    i1l10427 3FA8                    i1l10701 5E70  
                  i1l12151 319C                    i1l10455 58B6                    i1l10711 5EE0  
                  i1l10439 400E                    i1l12137 3176                    u1358_21 3806  
                  i1l10457 58C6                    i1l10705 5E86                    i1l12241 4094  
                  i1l12233 4074                    i1l12147 318A                    i1l10395 6262  
                  i1l10715 5EE8                    i1l10491 3B60                    i1l11611 4326  
                  i1l12251 40BE                    i1l12149 318E                    i1l10709 5ED8  
                  i1l10469 3ABA                    i1l11605 4304                    i1l12237 4084  
                  i1l12229 4064                    i1l10807 4934                    i1l10399 6288  
                  i1l10487 3B4C                    i1l11615 4332                    i1l11623 4346  
                  i1l12271 4110                    i1l12263 40F0                    i1l12255 40D0  
                  i1l12185 3238                    i1l10841 2820                    i1l10761 3D14  
                  i1l11641 6374                    i1l10497 3B7C                    i1l11721 59F8  
                  i1l11617 4338                    i1l11625 4364     __size_ofi2_setPWM2duty 0070  
                  i1l11563 688A                    i1l12195 324C                    i1l12179 321E  
                  i1l10851 2862                    i1l10835 2810                    i1l10819 4968  
                  i1l11635 6356                    i1l10499 3B8C                    i1l11731 5A24  
                  i1l11715 59D4                    i1l11619 4340                    i1l12283 4140  
                  i1l12275 4120                    i1l12267 4100                    i1l12259 40E0  
                  i1l10693 5BB8                    i1l12197 3250                    i1l10861 28AC  
                  i1l10829 27D6                    i1l10773 3DC4                    i1l10765 3D2A  
                  i1l11645 6386                    i1l10749 2E22                    i1l11813 1DE2  
                  i1l11733 5A2C                    i1l10871 28F4                    i1l10863 28B8  
                  i1l11751 6624                    i1l11647 638E                    i1l11663 46BA  
                  i1l11807 1DAC                    i1l11591 428C                    i1l12279 4130  
                  i1l10697 5BDA                    i1l10857 2890                    i1l10777 489C  
                  i1l11913 149E                    i1l11761 664E                    i1l11657 46A8  
                  i1l11841 1E6A                    i1l11809 1DD0                    i1l11737 5A3E  
                  i1l11585 4274                    i1l10859 289E                    i1l10787 48D0  
                  i1l11923 14CE                    i1l11691 476C                    i1l11683 4750  
                  i1l11851 1E9E                    i1l11827 1E12                    i1l10877 2954  
                  i1l10869 28E6                    i1l10797 4900                    i1l11757 663C  
                  i1l11677 472E                    i1l11669 4706                    i1l11845 1E7E  
                  i1l11829 1E24                    i1l11597 42DC                    i1l10887 29A2  
                  i1l11919 14BC                    i1l11687 475C                    i1l11695 4772  
                  i1l11855 1EB0                    i1l11839 1E64                    i1l11937 150E  
                  i1l11929 14E6                    i1l11689 4762                    i1l11697 4790  
                  i1l11777 1D16                    i1l11859 1EC2                    i1l11787 1D42  
                  i1l11779 1D1E                    i1l11965 15CC                    i1l11893 1F68  
                  i1l11991 1684                    i1l11967 15D4                    i1l11799 1D94  
                  i1l12599 006A                    i1l11993 168C                    i1l11897 1F76  
                  i1l11899 1F7E                    u1539_21 2776                    u1486_21 3A96  
           ??_releaseRETRO 0100               ??_PWM2Config 0106            __CFG_WDTEN$SWON 000000  
                ?_delay_ms 0100   __size_ofi1_saveSysParams 00BC                 _drawScreen 549A  
               _lcd_gotoxy 6A14                  ?_ioConfig 0001         __size_of_putchUART 000E  
   __size_of_longPressDOWN 002A                    _SPBRGH1 000FB0          ??i1_longPressDOWN 0060  
                  _UARTint 403C                  ?_drawMenu 0001                  ?_lcd_init 0001  
                  _i16Data 00C7              ??_calcVars2ti 0123          __end_of_checkPass 5E60  
                ?_lcd_putc 0001    __size_of_buttonChecking 02B2             _tempLastScreen 00CA  
    __end_of_drawCalibProc 5F7A              ??_calcSysVars 0123                 _holdUPcont 01C0  
             ?i1_pressDOWN 0001                 _readEEPROM 6BFC              i1_setPWM2duty 5B8E  
        __end_of_ioInitStt 6CB8   __end_ofi1_chanValDigDOWN 4EA0          __end_of__npowers_ 7D84  
                  __Hparam 0000                 _scale$2994 0126                 _lastSttFC1 003F  
               _lastSttFC2 0040                    __Lparam 0000          __end_of_drawAdvON 675C  
       __end_of_UARTConfig 697A                 checkPass@i 0105         __end_of_PWM2Config 6558  
             ??i1___altoft 006C      __size_of_drawPass1Lin 001E              i1_longPressUP 633A  
                  ___aldiv 3E08            __size_of___ftge 00C8               ??i1___ftpack 0065  
                  ___awdiv 50EC            __size_of___lmul 0076                    ___ftadd 24F8  
                  ___awmod 574A                    ___ftdiv 36A4                    ___ftneg 6A44  
                  ___lldiv 5266            __size_of___wmul 0036                    ___ftmul 33E8  
                  ___llmod 5A60                    ___ftsub 675C                    ___fttol 393C  
               ??_t2config 0100                 ??_t4config 0100      __size_of_drawPassWord 00EC  
             ??i2___altoft 000D                 ??___altoft 010C            __size_of_hp_isr 615A  
                  __pcinit 5C22               ??i2___ftpack 0006                 ??___ftpack 0105  
          __size_of_fround 02AC                    __ramtop 0600            ?i1_chanValDigUP 0001  
 __end_ofi1_confirmEdition 498C                 ??___lltoft 010C                    __ptext0 67A8  
                  __ptext1 6A74                    __ptext2 4F68                    __ptext3 6BFC  
                  __ptext4 641E                    __ptext5 6BCA                    __ptext6 56A8  
                  __ptext7 6CB0                    __ptext8 69B0                    __ptext9 6CB8  
          __size_of_printf 0C32              i1delay_ms@del 0060               ??i1_delay_ms 0062  
              ?__div_to_l_ 0100                    _dpowers 7D35                  _T2CONbits 000FBA  
               _integrator 3BC4                    _isdigit 6A9E               __size_of_isr 00A6  
         ___awmod@dividend 0100            i2___altoft@sign 0012           ___aldiv@dividend 0100  
                _T4CONbits 000F51                 ??_delay_ms 0102          __end_of_setPWM2on 6BE4  
               ??_ioConfig 0100                    _pressUP 4150                  _ENTERisLP 01B6  
                  _questSN 01B3            ??_loadSysParams 0081                 ??_drawMenu 0174  
               ??_lcd_init 0108          __end_of_releaseUP 6C98             __pintcode_body 60EA  
               ??_lcd_putc 010B       end_of_initialization 5CA6         __end_ofi1___altoft 5928  
        i1calcSysVars@temp 0077      __end_of_drawValEditor 1A32         __end_ofi1___ftpack 458C  
     lcd_send_byte@address 0107             ?i1_setPWM2duty 0060              __Lmediumconst 7D34  
                  int_func 60EA                  i1u1531_20 2E20               _drawPass1Lin 6BAC  
                i1u1720_20 473A                  i1u1721_20 473C         __end_ofi2___altoft 61DA  
                i1u1563_25 693E                  i1u1475_25 5496                  i1u1563_26 6940  
                i1u1475_26 5498                  i1u1805_20 3164                  i1u1805_26 3166  
                i1u1816_20 3226                  i1u1488_20 3AE0                  i1u1488_25 3AD6  
                i1u1816_26 3228                  i1u1755_20 1E1C                  i1u1756_20 1E1E  
                i1u1782_20 1506                  i1u1758_20 1E3A                  i1u1783_20 1508  
                i1u1759_20 1E3C                  i1u1792_20 1752                  i1u1793_20 1754  
                i1u1698_20 4310                  i1u1699_20 4312              i2_setPWM2duty 63AE  
       __end_ofi2___ftpack 55FC                  i1u1897_27 6892          __end_of_pressDOWN 4696  
      __end_of_calcVars2ti 6608      __end_of_lcd_read_byte 6838            ___lldiv@divisor 0104  
             _drawPassWord 4A7C            ___lldiv@counter 010C   __end_ofi1_longPressENTER 175A  
       __end_ofi1_delay_ms 68C4   __end_ofi1_longPressRETRO 6660            lcd_read_4bits@n 0101  
            _longPressDOWN 6AC8             ?i1_longPressUP 0001        __end_of_calcSysVars 6488  
         i1setPWM2duty@act 0064              readEEPROM@adr 0100                    printf@c 0173  
                  printf@f 013F          __end_of_putchUART 6C8C           ___aldiv@quotient 010A  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE                 _pressENTER 1A32          i1checkPass@passOK 0064  
               _pressRETRO 5928                  _RETROisLP 003B             __tdiv_to_l_@f1 0100  
           __tdiv_to_l_@f2 0103      __end_of_lcd_send_byte 6906              ??__tdiv_to_l_ 0106  
                _PORTAbits 000F80                  _PORTBbits 000F81                 _timsXcorte 004D  
            ??_clockConfig 0100           i1integrator@acum 0083               _holdDOWNcont 01BD  
         i1integrator@temp 0087                  _TRISAbits 000F92                  _TRISBbits 000F93  
                _TRISCbits 000F94                ?_drawScreen 0001                ?_lcd_gotoxy 0108  
                i1___aldiv 3F22                  i1___ftadd 2760                  i1___ftdiv 37F0  
                i1___ftmul 3546                  i1___fttol 3A80              ??_drawBadPass 0174  
           _ProcessStarted 003A     __size_ofi1_writeEEPROM 0020              ??_drawChanVal 0174  
     __size_ofi1_checkPass 008E     __size_of_saveSysParams 00BC   __size_of_interruptConfig 0008  
        ??i1_saveSysParams 0081             ?i2_setPWM2duty 0001                ?_readEEPROM 0001  
              ___ftdiv@exp 011F              ??_drawSNquest 0174                printf@width 016C  
              _CCP2CONbits 000F66         longPressENTER@temp 0139          confirmEdition@yes 0123  
          i2___ftpack@sign 0005       __end_of_releaseENTER 6C7E        __size_of__div_to_l_ 0188  
     __end_of_releaseRETRO 6CA4             ?_longPressDOWN 0001                  i1_pressUP 4262  
       _tempVelocidadMasa1 019A         _tempVelocidadMasa2 019D         _tempVelocidadMasa3 018F  
              ___ftmul@exp 011D                _ECCP2ASbits 000F64       __size_of_writeEEPROM 0020  
           __end_of___ftge 4F68             __end_of___lmul 6250             __end_of___wmul 69B0  
__size_of_saveProcessState 003C              __pidataCOMRAM 6C53             __end_of_hp_isr 6162  
           __end_of_fround 24F8        setPWM2duty@actuator 0100             __end_of_printf 0CF4  
              ?_integrator 0001      i1___lmul@multiplicand 0064          __size_ofi1___lmul 0076  
      start_initialization 5C22          __size_ofi2___ftge 0090        __end_of__tdiv_to_l_ 30CA  
         ??i1_sysParamInit 007A                 ?i1___aldiv 0060                __end_of_isr 00BE  
               ?i1___ftadd 0068                 ?i1___ftdiv 0072                 ?i1___ftmul 0068  
               ?i1___fttol 0060            _drawAutoCalibRM 69E2        __end_of_clockConfig 6B6C  
 __size_ofi1_desintegrator 01A6                _calcVars2ti 65B0            ??i1_setPWM2duty 0062  
           _buttonChecking 1F9A          desintegrator@temp 013B                _calcSysVars 641E  
          ___llmod@divisor 0111        __end_of_drawBadPass 6C28            ___llmod@counter 0115  
          ??i1_longPressUP 0060               _lastSttENTER 0197               _lastSttRETRO 0198  
      __end_of_drawChanVal 5266       __size_ofi1_pressDOWN 010A                 ?i1_pressUP 0001  
                 ??___ftge 0106        __size_of_drawScreen 00B4                   ??___lmul 0108  
      __size_of_lcd_gotoxy 0030              i1_writeEEPROM 6B8C                   ??___wmul 0112  
      __end_of_drawSNquest 4A7C                ?_pressENTER 0001                _chanValChar 00BA  
              ?_pressRETRO 0001                __pdataBANK0 00A5                __pdataBANK1 0177  
          lcd_send_4bits@n 0104                   ??_hp_isr 001D         i1___aldiv@dividend 0060  
            _saveSysParams 5322                   ??_fround 0126            i1_longPressDOWN 6AF2  
          i1readEEPROM@adr 0060                   ??_printf 0151          __size_of_t2config 0018  
        __size_of_t4config 002A          __size_of___altoft 009E                 fround@prec 012C  
      __size_of_readEEPROM 0016          __size_of___ftpack 010C          __size_of___lltoft 007C  
              __pbssCOMRAM 002B             writeEEPROM@adr 0101              __pcstackBANK0 0060  
            __pcstackBANK1 0100                  _calFactor 002F     __end_of_buttonChecking 224C  
                 ?_UARTint 0001               _isdigit$2496 0101          __size_of_delay_ms 0046  
         i1___lmul@product 0068          __size_of_ioConfig 0032      __end_ofi1_calcVars2ti 66B8  
          ??i2_setPWM2duty 0003              ?_sysParamInit 0001    __size_of_lcd_read_4bits 007A  
            ??_setPWM2duty 0102          __size_of_drawMenu 0218          __size_of_lcd_init 00A2  
        __size_of_lcd_putc 007A                  _bladeIsUP 0050      __end_ofi1_calcSysVars 64F2  
       i1___aldiv@quotient 006A                  _checkPass 5DD2            ??_longPressDOWN 0100  
      __size_of_integrator 0122              ??_longPressUP 0100          ?i1_chanValDigDOWN 0001  
        ??_interruptConfig 0100             ?i1_writeEEPROM 0060    __size_of_chanValDigDOWN 00CC  
         ??i1_chanValDigUP 0060                  __pintcode 0008              __pmediumconst 7D34  
                 ?___aldiv 0100                   ?___awdiv 0106                  __ptext100 4896  
                __ptext101 2760                  __ptext110 4480                  __ptext102 6AF2  
                __ptext111 30CA                  __ptext103 6C7E                  __ptext120 6162  
                __ptext112 5B8E                  __ptext104 66B8                  __ptext121 554E  
                __ptext113 687E                  __ptext105 53DE                  __ptext114 6906  
                __ptext106 6660                  __ptext115 6B8C                  __ptext107 37F0  
                __ptext108 6488                  __ptext117 55FC                  __ptext109 3546  
                 ?___ftadd 012D                  __ptext118 63AE                  __ptext119 5CB4  
       ??i1_chanValDigDOWN 0060                   ?___awmod 0100                   ?___ftdiv 0112  
                 ?___ftneg 0100                  _ioInitStt 6CB0                   ?___lldiv 0100  
                 ?___ftmul 0114                   ?___llmod 010D                   ?___ftsub 0139  
                __npowers_ 7D5D                   ?___fttol 012A             ?_saveSysParams 0001  
                _drawAdvON 670E              ??_releaseDOWN 0100                __pintcodelo 0018  
         __CFG_PRICLKEN$ON 000000                __tdiv_to_l_ 2F2C    __size_of_lcd_send_4bits 008E  
        ?i1_confirmEdition 0001              ?i1_readEEPROM 0001    __end_of_drawAutoCalibRM 6A14  
             ??__div_to_l_ 0106    __size_of_confirmEdition 00F6                _clockConfig 6B46  
                 ?_isdigit 0001             __size_of_T2int 0196             __size_of_T4int 00AC  
       ??i1_confirmEdition 0081                  _lastSttUP 0199                ??i1___aldiv 0068  
                 ?_pressUP 0001                ??i1___ftadd 006E                ??i1___ftdiv 0078  
              ??i1___ftmul 006E                ??i1___fttol 0064            ?_buttonChecking 0001  
              _drawBadPass 6C12             __size_of_scale 04AE             ??_sysParamInit 0126  
           __size_of_putch 000E        __size_of_pressENTER 02B4                  _setPWM2on 6BCA  
    __size_of_releaseENTER 000E        __size_of_pressRETRO 009C                _drawChanVal 51AA  
    __size_of_releaseRETRO 000C            ___aldiv@divisor 0104            ___aldiv@counter 0108  
            _tempNumCortes 0192             ___wmul@product 0112                   _LATBbits 000F8A  
                 _LATCbits 000F8B                  _releaseUP 6C8C                 ?_checkPass 0001  
  lcd_init@LCD_INIT_STRING 0109                  delay_ms@i 0103     __size_of_desintegrator 01A6  
                 _DOWNisLP 0037                _drawSNquest 498C          ??i1_desintegrator 0077  
                 _IPR1bits 000F9F                   _PIE1bits 000F9D                   _IPR5bits 000F7F  
                 _PIE5bits 000F7D                  _numCortes 00B8              ?i1_integrator 0001  
              ??i1_pressUP 0065                   _PIR1bits 000F9E         __end_of__div_to_l_ 33E8  
  __end_ofi1_longPressDOWN 6B1C                   _PIR5bits 000F7E          ?i1_longPressENTER 0001  
      __end_of_setPWM2duty 5B8E                _holdFC1cont 003D                _holdFC2cont 003E  
                 _RCONbits 000FD0          ?i1_longPressRETRO 0001                 UARTint@sas 0093  
  __size_of_longPressENTER 02DC                  _pressDOWN 458C    __size_of_longPressRETRO 0058  
               ?_ioInitStt 0001         ??i1_longPressENTER 008D                 ?_drawAdvON 0001  
       ??i1_longPressRETRO 0060           _saveProcessState 6906              ?_chanValDigUP 0001  
                _putchUART 6C7E        __end_of_longPressUP 633A             ??i1_readEEPROM 0060  
                 i1___lmul 6250          ___wmul@multiplier 010E                   i2___ftge 5CB4  
   __size_of_drawCalibProc 008C                  lcd_init@i 010D                 printf@flag 0160  
               printf@fval 016E                 printf@prec 0171            i1_saveSysParams 53DE  
             _releaseENTER 6C70        __end_of_releaseDOWN 6CB0               ??_drawScreen 0177  
             _releaseRETRO 6C98               ??_lcd_gotoxy 0109              ?i1_pressENTER 0001  
        ___lmul@multiplier 0100                  copy_data0 5C36                  copy_data1 5C56  
                copy_data2 5C76              ?i1_pressRETRO 0001           __size_of_UARTint 0114  
    __end_of_loadSysParams 670E                 ?_setPWM2on 0001               ??_readEEPROM 0100  
               ?_releaseUP 0001             ??i1_integrator 0081                 _EECON1bits 000FA6  
          ??i1_writeEEPROM 0061                   __Hrparam 0000                _lastSttDOWN 0196  
                 __Lrparam 0000         __CFG_BOREN$SBORDIS 000000            ??_saveSysParams 0123  
               ?_pressDOWN 0001          __CFG_P2BMX$PORTC0 000000         __end_of_drawScreen 554E  
       __end_of_lcd_gotoxy 6A44           __size_of___aldiv 011A                   _t2config 6BE4  
            i1integrator@i 008B           __size_of___awdiv 00BE             ??_chanValDigUP 0100  
         __size_of___ftadd 0268           __size_of___awmod 00A2                   _t4config 6A74  
         __size_of___ftdiv 014C           __size_of___ftneg 0030           __size_of___lldiv 00BC  
                 ___altoft 57EC           __size_of___ftmul 015E           __size_of___llmod 009A  
         __size_of___ftsub 004C           __size_of___fttol 0144                 ?_putchUART 0001  
                 ___ftpack 4374                _fround$2992 0129                _fround$2993 0126  
                 ___lltoft 5F7A              _desintegrator 2BE0     __size_of_drawValEditor 02D8  
               _ANSELAbits 000F38                 _ANSELCbits 000F3A             desintegrator@i 014A  
         ?_drawAutoCalibRM 0001               ??_integrator 0121                _menuSection 01C1  
                 _chanValf 01AE                   _chanVals 01B1         __end_of_readEEPROM 6C12  
                 _diamTubo 00A9           __size_of_isdigit 002A     __size_of_lcd_read_byte 0046  
                 _delay_ms 6838              ?_EEPROMConfig 0001                   _ioConfig 69B0  
            ??i1_checkPass 0060             ??i1_pressENTER 008A                   __ptext10 549A  
                 __ptext11 498C                   __ptext20 670E                   __ptext12 4A7C  
                 __ptext21 00C2                   __ptext13 29C8                   __ptext30 6A9E  
                 __ptext22 0CF4                   __ptext14 51AA                   __ptext31 224C  
                 __ptext23 6C62                   __ptext15 5EEE                   __ptext40 675C  
                 __ptext32 697A                   __ptext24 5FF6                   __ptext16 6C12  
                 __ptext41 6A44                   __ptext33 574A                   __ptext25 6A14  
                 __ptext17 6BAC                   __ptext50 4B68                   __ptext42 4EA0  
                 __ptext34 50EC                   __ptext26 68C4                   __ptext18 69E2  
                 __ptext51 5928                   __ptext43 6B46                   __ptext35 2F2C  
                 __ptext27 5D44                   __ptext19 175A                   __ptext60 6558  
                 __ptext52 1A32                   __ptext44 1F9A                   __ptext36 3260  
                 __ptext28 67F2                   __ptext61 11A2                   __ptext53 2BE0  
                 __ptext45 6C8C                   __ptext37 5F7A                   __ptext29 6070  
                 __ptext70 36A4                   __ptext62 3BC4                   __ptext54 393C  
                 __ptext46 6C98                   __ptext38 5A60                   __ptext71 24F8  
                 __ptext63 61DA                   __ptext55 3E08                   __ptext47 6C70  
                 __ptext39 5266                   __ptext72 4374                   __ptext64 57EC  
                 __ptext56 5DD2                   __ptext48 6CA4                   __ptext81 403C  
                 __ptext73 6AC8                   __ptext65 47A0                   __ptext57 458C  
                 __ptext49 4150                   __ptext90 3F22                   __ptext82 502A  
                 __ptext74 6838                   __ptext66 5322                   __ptext58 4D08  
                 __ptext91 5E60                   __ptext83 6C28                   __ptext75 6942  
                 __ptext67 6B6C                   __ptext59 62C6                   __ptext92 4696  
                 __ptext84 4262                   __ptext76 64F2                   __ptext68 65B0  
                 __ptext93 4DD4                   __ptext85 4C38                   __ptext77 6BE4  
                 __ptext69 33E8                   __ptext94 633A                   __ptext86 59C4  
                 __ptext78 5AFA                   __ptext95 6608                   __ptext87 1CE6  
                 __ptext79 6CC0                   __ptext96 147E                   __ptext88 2D86  
                 __ptext97 3CE6                   __ptext89 3A80                   __ptext98 6250  
                 __ptext99 588A                   _kgXcorte 00AC                   __powers_ 7D84  
           ??i1_pressRETRO 0060           __size_of_pressUP 0112                   _drawMenu 29C8  
                 _lcd_init 56A8                   _lcd_putc 5FF6               ?_calcVars2ti 0001  
              _OSCCON2bits 000FD2             _lcd_read_4bits 6070     __size_of_lcd_send_byte 0042  
              _setPWM2duty 5AFA          i1writeEEPROM@data 0060               ?_calcSysVars 0001  
            __size_of_main 004A              _drawCalibProc 5EEE                ??_checkPass 0100  
          calcSysVars@temp 0123                   _passChar 01AA        _longPressENTER$2991 013C  
              _passSection 01C2                   _tiXcorte 00B2                   _timeDOWN 0043  
            ??_writeEEPROM 0101             _chanValDigDOWN 4D08           ?i1_longPressDOWN 0001  
              _longPressUP 62C6         __end_of_integrator 3CE6               _PSTR2CONbits 000F63  
             ??_pressENTER 014C                   int$flags 0051                ??_ioInitStt 0100  
                 _questKMT 0032               ??_pressRETRO 0100                ??_drawAdvON 0174  
  __end_ofi1_saveSysParams 549A                  printf@len 015C                  printf@exp 016A  
                printf@val 0166       __end_of_sysParamInit 502A                _releaseDOWN 6CA4  
           _lcd_send_4bits 5D44            checkPass@passOK 0104             ?_desintegrator 0001  
              _introducido 01A6                delay_ms@del 0100             _confirmEdition 47A0  
           _chanValSection 0194              _velocidadMasa 00B5        i1confirmEdition@yes 0081  
              _OSCTUNEbits 000F9B                 _INTCONbits 000FF2             ??_EEPROMConfig 0100  
     i1desintegrator@temp2 0084       i1desintegrator@temp3 0080       i1desintegrator@tempL 007C  
              _PWM2CONbits 000F65                   isdigit@c 0102               _tempkgXcorte 004A  
                 scale@scl 0129     __end_of_lcd_read_4bits 60EA            _interruptConfig 6CB8  
                 intlevel1 0000                   intlevel2 0000                ??_setPWM2on 0100  
         __tdiv_to_l_@exp1 010E           __tdiv_to_l_@cntr 010D         __end_of_pressENTER 1CE6  
         __tdiv_to_l_@quot 0109             ?_drawCalibProc 0001         __end_of_pressRETRO 59C4  
    __end_ofi1_setPWM2duty 5C22              ??i1_pressDOWN 0065           ___lldiv@dividend 0100  
            _drawValEditor 175A                ??_releaseUP 0100       __end_ofi1_readEEPROM 6C3E  
      __end_ofi1_checkPass 5EEE               _temptiXcorte 00AF     __end_of_chanValDigDOWN 4DD4  
               _RCSTA1bits 000FAB           i1writeEEPROM@adr 0061                 _OSCCONbits 000FD3  
            _lcd_read_byte 67F2         _screen_calibVelRes 0041      __end_ofi1_longPressUP 63AE  
           _longPressENTER 11A2             _longPressRETRO 6558                ??_pressDOWN 0105  
                 printf@ap 015E                   printf@cp 015A     __end_of_lcd_send_4bits 5DD2  
   __end_of_confirmEdition 4896                   putch@val 010D                ??_putchUART 0060  
      i1desintegrator@temp 0079              _lcd_send_byte 68C4        __end_of_writeEEPROM 6B8C  
             ?__tdiv_to_l_ 0100                _printf$2995 0157           ??_buttonChecking 014C  
             ?_clockConfig 0001                 _UARTConfig 6942               _processTimer 002B  
             _processState 0035       __end_ofi1_integrator 3E08           ___lldiv@quotient 0108  
               _PWM2Config 64F2  __size_ofi1_chanValDigDOWN 00CC               ___aldiv@sign 0109  
        __CFG_T3CMX$PORTC0 000000            i1_desintegrator 2D86                 _WDTCONbits 000FD1  
            _holdENTERcont 01BE            ?_lcd_read_4bits 0001               ?_drawBadPass 0001  
             ?_drawChanVal 0001   __end_of_saveProcessState 6942       __end_of_chanValDigUP 4C38  
           _ENTERsecurLock 01B7             ?_drawValEditor 0001  __size_ofi1_confirmEdition 00F6  
            ?_drawPass1Lin 0001      __end_ofi2_setPWM2duty 641E          __CFG_FOSC$INTIO67 000000  
              drawAdvON@on 0174               ?_drawSNquest 0001            ?_chanValDigDOWN 0001  
  __size_ofi1_sysParamInit 00C2     __end_of_longPressENTER 147E              ?_drawPassWord 0001  
           ?_lcd_read_byte 0001     __end_of_longPressRETRO 65B0      __end_of_longPressDOWN 6AF2  
